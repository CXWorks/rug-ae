use std::str::FromStr;

use crate::parser;
use crate::table::Iter;
use crate::{Item, RawString, Table};

/// Type representing a TOML document
#[derive(Debug, Clone)]
pub struct Document {
    pub(crate) root: Item,
    // Trailing comments and whitespaces
    pub(crate) trailing: RawString,
    pub(crate) original: Option<String>,
    pub(crate) span: Option<std::ops::Range<usize>>,
}

impl Document {
    /// Creates an empty document
    pub fn new() -> Self {
        Default::default()
    }

    /// Returns a reference to the root item.
    pub fn as_item(&self) -> &Item {
        &self.root
    }

    /// Returns a mutable reference to the root item.
    pub fn as_item_mut(&mut self) -> &mut Item {
        &mut self.root
    }

    /// Returns a reference to the root table.
    pub fn as_table(&self) -> &Table {
        self.root.as_table().expect("root should always be a table")
    }

    /// Returns a mutable reference to the root table.
    pub fn as_table_mut(&mut self) -> &mut Table {
        self.root
            .as_table_mut()
            .expect("root should always be a table")
    }

    /// Returns an iterator over the root table.
    pub fn iter(&self) -> Iter<'_> {
        self.as_table().iter()
    }

    /// Set whitespace after last element
    pub fn set_trailing(&mut self, trailing: impl Into<RawString>) {
        self.trailing = trailing.into();
    }

    /// Whitespace after last element
    pub fn trailing(&self) -> &RawString {
        &self.trailing
    }

    /// # Panics
    ///
    /// If run on on a `Document` not generated by the parser
    pub(crate) fn despan(&mut self) {
        self.span = None;
        self.root.despan(self.original.as_deref().unwrap());
        self.trailing.despan(self.original.as_deref().unwrap());
    }
}

impl Default for Document {
    fn default() -> Self {
        Self {
            root: Item::Table(Table::with_pos(Some(0))),
            trailing: Default::default(),
            original: Default::default(),
            span: Default::default(),
        }
    }
}

impl FromStr for Document {
    type Err = crate::TomlError;

    /// Parses a document from a &str
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut d = parser::parse_document(s)?;
        d.despan();
        Ok(d)
    }
}

impl std::ops::Deref for Document {
    type Target = Table;

    fn deref(&self) -> &Self::Target {
        self.as_table()
    }
}

impl std::ops::DerefMut for Document {
    fn deref_mut(&mut self) -> &mut Self::Target {
        self.as_table_mut()
    }
}

impl From<Table> for Document {
    fn from(root: Table) -> Self {
        Self {
            root: Item::Table(root),
            ..Default::default()
        }
    }
}
#[cfg(test)]
mod tests_llm_16_16 {
    use crate::{Document, Item, Table};
    use std::str::FromStr;

    #[test]
    fn test_from_table() {
        let mut table = Table::new();
        table["key"] = Item::Value("value".into());
        let doc = Document::from(table.clone());
        assert_eq!(doc["key"].as_str(), Some("value"));
        // Instead of comparing the table, we'll compare the string representation
        assert_eq!(doc.to_string(), table.to_string());
    }
}#[cfg(test)]
mod tests_llm_16_17 {
    use super::*;

use crate::*;
    use crate::{Document, Item};

    #[test]
    fn test_document_default() {
        let doc = Document::default();
        assert!(matches!(doc.as_item(), &Item::Table(_)));
        assert!(doc.trailing().as_str().unwrap().is_empty());
        assert!(doc.original.is_none());
        assert!(doc.span.is_none());
    }
}#[cfg(test)]
mod tests_llm_16_18 {
    use super::*;

use crate::*;
    use std::ops::Deref;

    #[test]
    fn test_document_deref_to_table() {
        let doc = Document::new();
        let table: &Table = doc.deref();
        assert!(table.is_empty());
    }
}#[cfg(test)]
mod tests_llm_16_19 {
    use super::*;

use crate::*;
    use std::ops::DerefMut;
    use crate::Document;
    use crate::Item;

    #[test]
    fn deref_mut_for_document() {
        let mut doc = Document::new();
        let table = doc.deref_mut();
        assert!(table.is_empty());
        table["key"] = Item::Value("value".parse().unwrap());
        assert_eq!(doc["key"].as_str(), Some("value"));
    }
}#[cfg(test)]
mod tests_llm_16_20_llm_16_20 {
    use crate as toml_edit;
    use crate::Document;
    use std::str::FromStr;

    #[test]
    fn test_from_str_valid_toml() {
        let toml_str = r#"
            [package]
            name = "your_package"
            version = "0.1.0"
        "#;

        let doc_result = Document::from_str(toml_str);
        assert!(doc_result.is_ok());
        
        let doc = doc_result.unwrap();
        assert_eq!(doc.to_string(), toml_str.trim());
    }

    #[test]
    fn test_from_str_invalid_toml() {
        let toml_str = r#"
            [package
            name = "your_package"
            version = "0.1.0"
        "#;

        let doc_result = Document::from_str(toml_str);
        assert!(doc_result.is_err());
    }
}// This is the unit test for the `as_item` method in `crate::Document`

#[cfg(test)]
mod tests_llm_16_178 {
    use crate::{Document, Item, Value, Table};

    #[test]
    fn test_as_item() {
        // Test that `as_item` returns the root `Item` correctly
        let mut doc = Document::new();
        assert!(doc.as_item().is_table(), "The root item should always be a table.");
        
        // Set a value in the document to manipulate it
        doc["title"] = Item::Value(Value::from("TOML Example"));

        // Fetch the root `Item` and check that the keys and values match
        let item = doc.as_item();
        assert!(item.is_table(), "The root item should always be a table.");
        let table = item.as_table().unwrap();
        
        // Check that the table has the expected entry
        assert!(table.contains_key("title"), "The table should contain a 'title' entry.");
        assert_eq!(table["title"].as_value().unwrap().as_str().unwrap(), "TOML Example");
    }
}#[cfg(test)]
mod tests_llm_16_179 {
    use super::*;

use crate::*;
    use crate::table::Table;

    #[test]
    fn test_as_item_mut() {
        let mut doc = Document::new();
        let item = doc.as_item_mut();
        assert!(matches!(item, &mut Item::Table(_)));

        let mut table = item.as_table_mut().unwrap();
        table.insert("key", Item::Value("value".parse().unwrap()));
        assert_eq!(table.get("key").unwrap().as_str().unwrap(), "value");
    }
}#[cfg(test)]
mod tests_llm_16_180 {
    use super::*;

use crate::*;
    use crate::{Document, Item, Table};

    #[test]
    fn test_document_as_table() {
        let mut doc = Document::new();
        let table = doc.as_table();
        assert_eq!(table.iter().count(), 0);

        doc["key"] = Item::Value("value".into());
        let table = doc.as_table();
        assert_eq!(table.iter().count(), 1);

        assert_eq!(table["key"].as_value().unwrap().as_str().unwrap(), "value");
    }
}#[cfg(test)]
mod tests_llm_16_182_llm_16_182 {
    use super::*;

use crate::*;

    // Use the Document type directly from the parent module
    use crate::Document;

    #[test]
    fn test_despan() {
        let mut doc = Document::new();
        doc["a"] = crate::Item::Value(crate::Value::from(42));
        doc["b"] = crate::Item::Table(crate::Table::new());
        doc["c"] = crate::Item::ArrayOfTables(crate::ArrayOfTables::new());
        // Since set_original is not available, use a raw string as a workaround
        let original = doc.to_string();
        // By setting the original string like this, we're emulating what the parser would do
        doc.original = Some(original.clone());
        // Reset spans to emulate despanning
        doc.despan(); // Call target function

        // Verify that all spans are removed and original document string is preserved
        assert_eq!(doc["a"].span(), None);
        assert_eq!(doc["a"].as_value().unwrap().span(), None);
        assert_eq!(doc["b"].span(), None);
        assert_eq!(doc["c"].span(), None);
        // The original string should not change after despanning
        assert_eq!(doc.to_string(), original);
    }
}#[cfg(test)]
mod tests_llm_16_184 {
    use crate::Document;

    #[test]
    fn document_new_is_empty() {
        let doc = Document::new();
        assert!(doc.is_empty());
    }
}#[cfg(test)]
mod tests_llm_16_185 {
    use crate::{Document, RawString};

    #[test]
    fn test_set_trailing() {
        let mut document = Document::new();
        assert_eq!(document.trailing().as_str(), Some(""));
        document.set_trailing("  ");
        assert_eq!(document.trailing().as_str(), Some("  "));
    }

    #[test]
    fn test_set_trailing_on_new_document() {
        let mut document = Document::new();
        document.set_trailing("  ");
        assert_eq!(document.trailing().as_str(), Some("  "));
    }

    #[test]
    fn test_set_trailing_with_raw_string() {
        let mut document = Document::new();
        let raw_string: RawString = "   ".into();
        document.set_trailing(raw_string.clone());
        assert_eq!(document.trailing(), &raw_string);
    }

    #[test]
    fn test_set_trailing_preserves_content() {
        let mut document: Document = "key = \"value\"".parse().unwrap();
        document.set_trailing("\n");
        assert_eq!(document["key"].as_str(), Some("value"));
        assert_eq!(document.trailing().as_str(), Some("\n"));
    }
}#[cfg(test)]
mod tests_llm_16_186 {
    use super::*;

use crate::*;
    use crate::raw_string::RawString;

    #[test]
    fn test_document_trailing() {
        let doc = Document::new();
        assert_eq!(doc.trailing(), &RawString::default());
    }
}