{"<&'a T as timestamp::ClockSequence>::generate_sequence": false, "<Uuid as std::convert::AsRef<[u8]>>::as_ref": true, "<Uuid as std::default::Default>::default": true, "<fmt::Braced as std::borrow::Borrow<Uuid>>::borrow": true, "<fmt::Braced as std::convert::AsRef<Uuid>>::as_ref": true, "<fmt::Braced as std::convert::From<Uuid>>::from": true, "<fmt::Hyphenated as std::borrow::Borrow<Uuid>>::borrow": true, "<fmt::Hyphenated as std::convert::AsRef<Uuid>>::as_ref": true, "<fmt::Hyphenated as std::convert::From<Uuid>>::from": true, "<fmt::Simple as std::borrow::Borrow<Uuid>>::borrow": true, "<fmt::Simple as std::convert::AsRef<Uuid>>::as_ref": true, "<fmt::Simple as std::convert::From<Uuid>>::from": false, "<fmt::Urn as std::borrow::Borrow<Uuid>>::borrow": false, "<fmt::Urn as std::convert::AsRef<Uuid>>::as_ref": true, "<fmt::Urn as std::convert::From<Uuid>>::from": true, "<timestamp::context::NoContext as timestamp::ClockSequence>::generate_sequence": true, "Uuid::as_bytes": true, "Uuid::as_fields": true, "Uuid::as_u128": true, "Uuid::as_u64_pair": true, "Uuid::encode_buffer": true, "Uuid::get_timestamp": true, "Uuid::get_variant": true, "Uuid::get_version": true, "Uuid::get_version_num": true, "Uuid::into_bytes": true, "Uuid::is_nil": true, "Uuid::to_bytes_le": true, "Uuid::to_fields_le": true, "Uuid::to_u128_le": true, "builder::<impl Uuid>::from_bytes": true, "builder::<impl Uuid>::from_bytes_le": true, "builder::<impl Uuid>::from_bytes_ref": true, "builder::<impl Uuid>::from_fields": true, "builder::<impl Uuid>::from_fields_le": true, "builder::<impl Uuid>::from_slice": false, "builder::<impl Uuid>::from_slice_le": true, "builder::<impl Uuid>::from_u128": true, "builder::<impl Uuid>::from_u128_le": true, "builder::<impl Uuid>::from_u64_pair": true, "builder::<impl Uuid>::nil": true, "builder::Builder::as_uuid": true, "builder::Builder::from_bytes": true, "builder::Builder::from_bytes_le": true, "builder::Builder::from_fields": true, "builder::Builder::from_fields_le": true, "builder::Builder::from_md5_bytes": true, "builder::Builder::from_random_bytes": true, "builder::Builder::from_rfc4122_timestamp": true, "builder::Builder::from_sha1_bytes": true, "builder::Builder::from_slice": false, "builder::Builder::from_slice_le": true, "builder::Builder::from_u128": true, "builder::Builder::from_u128_le": true, "builder::Builder::into_uuid": true, "builder::Builder::nil": true, "builder::Builder::set_variant": true, "builder::Builder::set_version": true, "builder::Builder::with_variant": true, "builder::Builder::with_version": true, "error::InvalidUuid::<'a>::into_err": true, "fmt::<impl Uuid>::as_braced": true, "fmt::<impl Uuid>::as_hyphenated": false, "fmt::<impl Uuid>::as_simple": true, "fmt::<impl Uuid>::as_urn": true, "fmt::<impl Uuid>::braced": true, "fmt::<impl Uuid>::hyphenated": true, "fmt::<impl Uuid>::simple": true, "fmt::<impl Uuid>::urn": false, "fmt::<impl std::convert::From<fmt::Braced> for Uuid>::from": true, "fmt::<impl std::convert::From<fmt::Hyphenated> for Uuid>::from": true, "fmt::<impl std::convert::From<fmt::Simple> for Uuid>::from": true, "fmt::<impl std::convert::From<fmt::Urn> for Uuid>::from": true, "fmt::Braced::as_uuid": true, "fmt::Braced::encode_lower": true, "fmt::Braced::encode_upper": true, "fmt::Braced::from_uuid": true, "fmt::Braced::into_uuid": true, "fmt::Hyphenated::as_uuid": true, "fmt::Hyphenated::encode_lower": true, "fmt::Hyphenated::encode_upper": true, "fmt::Hyphenated::from_uuid": true, "fmt::Hyphenated::into_uuid": true, "fmt::Simple::as_uuid": true, "fmt::Simple::encode_lower": true, "fmt::Simple::encode_upper": true, "fmt::Simple::from_uuid": true, "fmt::Simple::into_uuid": true, "fmt::Urn::as_uuid": true, "fmt::Urn::encode_lower": false, "fmt::Urn::encode_upper": true, "fmt::Urn::from_uuid": true, "fmt::Urn::into_uuid": false, "fmt::encode_braced": false, "fmt::encode_hyphenated": true, "fmt::encode_simple": false, "fmt::encode_urn": true, "fmt::format_hyphenated": true, "fmt::format_simple": false, "parser::<impl Uuid>::parse_str": true, "parser::<impl Uuid>::try_parse": true, "parser::<impl Uuid>::try_parse_ascii": false, "parser::<impl std::convert::TryFrom<&str> for Uuid>::try_from": false, "parser::<impl std::str::FromStr for Uuid>::from_str": true, "parser::parse_hyphenated": false, "parser::parse_simple": false, "parser::try_parse": true, "timestamp::Timestamp::from_rfc4122": true, "timestamp::Timestamp::from_unix": true, "timestamp::Timestamp::now": true, "timestamp::Timestamp::rfc4122_to_unix": true, "timestamp::Timestamp::to_unix": true, "timestamp::Timestamp::to_unix_nanos": true, "timestamp::decode_rfc4122_timestamp": false, "timestamp::encode_rfc4122_timestamp": false, "timestamp::now": true}