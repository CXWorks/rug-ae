-----------------
src/error.rs error::make_error
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"error::make_error":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::make_error":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","internal::Err","error::Error","number::Endianness","<*mut T as std::fmt::Debug>","error::VerboseError","internal::Needed"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+error::make_error(p0, p1);
+crate::error::make_error(p0, p1);
+crate::error::make_error(p0, p1);
-----------------
src/error.rs error::append_error
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"error::append_error":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::append_error":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"]},"internal::Err":{"E":["internal::Needed","error::Error","<*const T as std::fmt::Debug>","error::VerboseErrorKind","error::ErrorKind","internal::Err","error::VerboseError","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+error::append_error(p0, p1, p2);
+crate::error::append_error(p0, p1, p2);
+crate::error::append_error(p0, p1, p2);
-----------------
src/error.rs error::context
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::context":{"E":["error::ContextError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","std::clone::Clone"],"O":["std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::context":{"E":["error::Error","error::VerboseError"],"F":["internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","internal::Into","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"I":["error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseErrorKind","error::Error","internal::Err","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &T>","internal::Needed"],"O":["RUG_ANY"]},"internal::And":{"F":["internal::And","internal::AndThen","std::boxed::Box","internal::Map","internal::Or","internal::FlatMap","internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"G":["internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Map","internal::MapRes","std::boxed::Box","internal::And","internal::Into","internal::Or","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::And","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen"],"G":["<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map"]},"internal::Err":{"E":["internal::Needed","internal::Err","number::Endianness","<*const T as std::fmt::Debug>","error::ErrorKind","error::VerboseError","error::VerboseErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::Into","internal::AndThen","internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::Into","internal::MapOpt","internal::And","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Or","internal::Map","internal::MapRes","<F as internal::Parser<I>>"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::Into"],"G":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::Map","internal::AndThen","internal::And","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapRes","internal::MapOpt","internal::Or","<F as internal::Parser<I>>"],"G":["core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::MapOpt","internal::Map","internal::Or","internal::Into","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes"],"G":["core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapOpt","internal::And"],"G":["internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = "sample"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+error::context(&p0, p1);
+crate::error::context(&p0, p1);
+crate::error::context(&p0, p1);
-----------------
src/error.rs error::convert_error
deps:{"<&T as std::ops::Deref>":{},"<&mut T as std::ops::Deref>":{},"error::convert_error":{"I":["std::ops::Deref","std::marker::Sized"]}}
candidates:{"<&T as std::ops::Deref>":{},"<&mut T as std::ops::Deref>":{},"error::convert_error":{"I":["std::io::IoSliceMut<'a>","std::sync::Arc<T>","std::cell::Ref<'_, T>","std::boxed::ThinBox<T>","std::boxed::Box<T, A>","<&T as std::ops::Deref>","std::vec::Vec<T, A>","std::ffi::OsString","std::sync::mpmc::counter::Receiver<C>","std::sys_common::wtf8::Wtf8Buf","std::cell::RefMut<'_, T>","std::sync::mpmc::utils::CachePadded<T>","std::string::String","std::mem::ManuallyDrop<T>","std::sys_common::remutex::ReentrantMutexGuard<'_, T>","std::sys_common::lazy_box::LazyBox<T>","std::sync::LazyLock<T, F>","std::path::PathBuf","std::borrow::Cow<'_, B>","std::sync::RwLockWriteGuard<'_, T>","std::backtrace_rs::symbolize::gimli::mmap::Mmap","std::sync::mpmc::counter::Sender<C>","std::rc::Rc<T>","std::sync::RwLockReadGuard<'_, T>","std::ffi::VaList<'a, 'f>","std::io::IoSlice<'a>","std::cell::LazyCell<T, F>","<&mut T as std::ops::Deref>","std::pin::Pin<P>","std::sync::MutexGuard<'_, T>","std::ffi::CString","std::collections::binary_heap::PeekMut<'_, T>","std::panic::AssertUnwindSafe<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+error::convert_error(p0, p1);
+crate::error::convert_error(p0, p1);
+crate::error::convert_error(p0, p1);
-----------------
src/error.rs error::error_to_u32
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
+error::error_to_u32(p0);
+crate::error::error_to_u32(p0);
+crate::error::error_to_u32(p0);
-----------------
src/error.rs error::dbg_dmp
'a
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::dbg_dmp":{"E":["std::fmt::Debug","std::marker::Sized"],"F":["std::ops::Fn","std::marker::Sized"],"O":["std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::dbg_dmp":{"E":["traits::CompareResult","error::ErrorKind","error::Error","<&mut T as std::fmt::Debug>","internal::Err","error::VerboseErrorKind","error::VerboseError","number::Endianness","<*const T as std::fmt::Debug>","internal::Needed"],"F":["core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue"],"O":["RUG_ANY"]},"internal::Err":{"E":["internal::Needed","error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Err","<*const T as std::fmt::Debug>","number::Endianness","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = "sample"; // None+&str
+error::dbg_dmp(p0, &p1);
+crate::error::dbg_dmp(p0, &p1);
+crate::error::dbg_dmp(p0, &p1);
-----------------
src/branch/mod.rs branch::alt
deps:{"branch::alt":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"],"List":["std::marker::Sized","branch::Alt"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"branch::alt":{"E":["error::Error","error::VerboseError"],"I":["error::Error","internal::Err","error::VerboseError","error::ErrorKind","number::Endianness","internal::Needed","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>"],"List":[],"O":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","internal::Needed","error::VerboseError","error::VerboseErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","error::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // List
+branch::alt(p0);
+crate::branch::alt(p0);
+crate::branch::alt(p0);
-----------------
src/branch/mod.rs branch::permutation
deps:{"branch::permutation":{"E":["std::marker::Sized","error::ParseError"],"I":["std::clone::Clone","std::marker::Sized"],"List":["std::marker::Sized","branch::Permutation"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"branch::permutation":{"E":["error::VerboseError","error::Error"],"I":["std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Err","error::VerboseErrorKind","error::ErrorKind","number::Endianness","error::Error","internal::Needed"],"List":[],"O":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Needed","number::Endianness","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::ErrorKind","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // List
+branch::permutation(p0);
+crate::branch::permutation(p0);
+crate::branch::permutation(p0);
-----------------
src/combinator/mod.rs combinator::rest
deps:{"<*mut T as std::fmt::Debug>":{},"combinator::rest":{"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"combinator::rest":{"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","error::VerboseError","error::ErrorKind","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+combinator::rest(p0);
+crate::combinator::rest(p0);
+crate::combinator::rest(p0);
-----------------
src/combinator/mod.rs combinator::rest_len
deps:{"<*const T as std::fmt::Debug>":{},"combinator::rest_len":{"E":["error::ParseError","std::marker::Sized"],"T":["traits::InputLength","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"combinator::rest_len":{"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","error::Error","error::VerboseErrorKind","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","number::Endianness","internal::Needed"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+combinator::rest_len(p0);
+crate::combinator::rest_len(p0);
+crate::combinator::rest_len(p0);
-----------------
src/combinator/mod.rs combinator::map
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::map":{"E":["std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::map":{"E":["RUG_ANY"],"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","internal::And","internal::Or","std::boxed::Box","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsNotEmpty"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Into","internal::MapOpt","internal::And","internal::Or","internal::AndThen","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes"],"G":["internal::And","internal::Or","internal::Into","internal::AndThen","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::Into","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::And","internal::FlatMap","internal::Map"],"G":["internal::MapOpt","internal::FlatMap","internal::Map","internal::Or","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::And"]},"internal::Err":{"E":["number::Endianness","error::ErrorKind","internal::Err","error::VerboseErrorKind","internal::Needed","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseError"]},"internal::FlatMap":{"F":["internal::Into","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::Or","internal::MapRes","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Map"],"G":["core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","internal::And","internal::AndThen","internal::Map","internal::Or","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::Map","internal::And","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","std::boxed::Box"],"G":["internal::FlatMap","internal::AndThen","internal::Or","internal::MapRes","internal::Map","std::boxed::Box","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::map(p0, p1);
+crate::combinator::map(p0, p1);
+crate::combinator::map(p0, p1);
-----------------
src/combinator/mod.rs combinator::map_res
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::map_res":{"E":["std::marker::Sized","error::FromExternalError"],"E2":["std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"],"I":["std::clone::Clone","std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::map_res":{"E":["error::VerboseError","error::Error"],"E2":["RUG_ANY"],"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapRes","internal::And","std::boxed::Box","internal::Or","internal::Map","internal::AndThen"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace"],"I":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","number::Endianness","error::ErrorKind","internal::Err","error::VerboseErrorKind"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Map","internal::Into","internal::AndThen","internal::MapRes","internal::And","std::boxed::Box","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Map","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::MapRes"]},"internal::AndThen":{"F":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen"],"G":["internal::MapOpt","internal::Map","std::boxed::Box","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","internal::Err","<*mut T as std::fmt::Debug>","internal::Needed","error::VerboseError","error::ErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::Into","internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::AndThen","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::MapRes","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","internal::Into","internal::And","std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Map"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::Or","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::And","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::FlatMap","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::Map"],"G":["core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::MapOpt","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Map","internal::FlatMap","internal::AndThen"],"G":["internal::Map","internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::map_res(p0, p1);
+crate::combinator::map_res(p0, p1);
+crate::combinator::map_res(p0, p1);
-----------------
src/combinator/mod.rs combinator::map_opt
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::map_opt":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"],"I":["std::marker::Sized","std::clone::Clone"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::map_opt":{"E":["error::Error","error::VerboseError"],"F":["internal::MapOpt","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::And","internal::Into","internal::AndThen","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode"],"I":["error::ErrorKind","error::VerboseError","internal::Needed","error::Error","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","internal::Err","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>"],"O":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or"],"G":["internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::Or","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Into"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","internal::MapOpt","internal::Map","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::AndThen"],"G":["internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::And","internal::Map"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","internal::Needed","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","internal::Err","error::Error"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::And","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::MapRes","internal::AndThen","internal::Or","internal::And","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Map","internal::AndThen"],"G":["core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::MapRes","internal::Or","internal::AndThen"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["internal::FlatMap","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::MapOpt","internal::And","internal::MapRes","internal::FlatMap","internal::Into"],"G":["internal::AndThen","internal::Or","internal::MapOpt","internal::MapRes","internal::Into","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::map_opt(p0, p1);
+crate::combinator::map_opt(p0, p1);
+crate::combinator::map_opt(p0, p1);
-----------------
src/combinator/mod.rs combinator::map_parser
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::map_parser":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::map_parser":{"E":["error::VerboseError","error::Error"],"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::FlatMap","internal::And","internal::MapRes","internal::Into","internal::MapOpt","internal::Map"],"G":["internal::MapOpt","internal::Map","internal::Or","internal::Into","internal::MapRes","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["std::boxed::Box","internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"G":["internal::AndThen","internal::Into","std::boxed::Box","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::MapRes","internal::Map"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Into","internal::And","internal::Or","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Map","std::boxed::Box"],"G":["internal::Map","internal::Or","internal::Into","std::boxed::Box","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::MapOpt"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err","number::Endianness","error::VerboseError","error::Error","internal::Needed","error::ErrorKind","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Map","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapOpt","internal::And","std::boxed::Box"],"G":["core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::FlatMap","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Or","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::Or","internal::Map","internal::Into"],"G":["core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Into","internal::AndThen","internal::MapOpt","internal::Map","internal::Or","std::boxed::Box"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::And","internal::Or","internal::Map","std::boxed::Box"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::Into","internal::And","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::AndThen","internal::MapRes","internal::MapOpt"],"G":["internal::And","internal::FlatMap","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::map_parser(p0, p1);
+crate::combinator::map_parser(p0, p1);
+crate::combinator::map_parser(p0, p1);
-----------------
src/combinator/mod.rs combinator::flat_map
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::flat_map":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::flat_map":{"E":["error::Error","error::VerboseError"],"F":["internal::Or","internal::Into","internal::And","internal::MapRes","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue"],"H":["internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Or","internal::Into","internal::Map","internal::MapRes"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Map","internal::And"],"G":["internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapRes"]},"internal::AndThen":{"F":["internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::And","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Into"],"G":["internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt","internal::Or","internal::MapRes","std::boxed::Box"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Err","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Into","internal::And","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Or"],"G":["core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["<F as internal::Parser<I>>","internal::Into","internal::Or","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And","internal::MapRes","internal::AndThen","internal::Map"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Into","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::And","internal::AndThen","internal::MapOpt","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::MapOpt","std::boxed::Box","internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::AndThen","internal::And"],"G":["internal::Map","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Or"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::flat_map(p0, p1);
+crate::combinator::flat_map(p0, p1);
+crate::combinator::flat_map(p0, p1);
-----------------
src/combinator/mod.rs combinator::opt
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::opt":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::opt":{"E":["error::Error","error::VerboseError"],"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And","internal::MapOpt","std::boxed::Box","internal::Or","internal::Into","internal::Map"],"I":["number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","error::Error","internal::Err","internal::Needed","error::VerboseError"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::And","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapOpt"],"G":["internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map"]},"internal::AndThen":{"F":["internal::MapRes","internal::Map","internal::And","internal::Or","internal::AndThen","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::MapOpt"]},"internal::Err":{"E":["internal::Needed","error::Error","internal::Err","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen","internal::MapOpt"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::FlatMap","internal::Into","internal::Or","internal::MapOpt","internal::Map","internal::AndThen","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::AndThen","internal::MapRes","internal::Map","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>"],"G":["core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::Or","internal::Into","internal::And","internal::MapOpt","internal::MapRes","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Map","internal::AndThen","std::boxed::Box","internal::Into","internal::Or","internal::FlatMap"],"G":["internal::Or","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Map","internal::MapRes","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::opt(p0);
+crate::combinator::opt(p0);
+crate::combinator::opt(p0);
-----------------
src/combinator/mod.rs combinator::cond
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::cond":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::cond":{"E":["error::Error","error::VerboseError"],"F":["internal::MapRes","internal::Into","internal::Map","internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","std::boxed::Box"],"I":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["std::boxed::Box","internal::MapOpt","internal::AndThen","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::FlatMap","internal::Into"],"G":["internal::FlatMap","internal::Map","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And"]},"internal::AndThen":{"F":["internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Map","internal::And","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::AndThen"],"G":["internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","internal::Or","internal::And","std::boxed::Box"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","error::ErrorKind","error::Error","number::Endianness","internal::Err","internal::Needed","<*mut T as std::fmt::Debug>"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::And","internal::Or","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Into","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::AndThen","internal::And","internal::FlatMap","internal::Map","internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","std::boxed::Box","internal::Map","internal::Or","internal::MapOpt","internal::Into"],"G":["core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Or","std::boxed::Box","internal::AndThen","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::MapRes","internal::Or","std::boxed::Box","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into","internal::MapRes","internal::AndThen","std::boxed::Box"],"G":["internal::MapOpt","internal::Map","internal::Or","internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = true; // None+bool
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+combinator::cond(p0, p1);
+crate::combinator::cond(p0, p1);
+crate::combinator::cond(p0, p1);
-----------------
src/combinator/mod.rs combinator::peek
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::peek":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"I":["std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::peek":{"E":["error::Error","error::VerboseError"],"F":["internal::AndThen","std::boxed::Box","internal::MapOpt","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","internal::Or"],"I":["error::VerboseError","internal::Err","error::Error","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","internal::Needed","number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Map"],"G":["internal::And","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapOpt","internal::FlatMap","internal::AndThen"]},"internal::AndThen":{"F":["internal::Map","internal::FlatMap","internal::Into","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen"],"G":["internal::And","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","internal::Or","internal::AndThen","internal::Into","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::VerboseError","internal::Err","error::Error","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed"]},"internal::FlatMap":{"F":["internal::And","internal::FlatMap","internal::Into","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Map","<F as internal::Parser<I>>"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","internal::And","internal::Or","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::AndThen","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::Or","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::And","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","internal::AndThen","internal::Map"],"G":["core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Or","internal::MapRes","internal::Map"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::AndThen","internal::MapRes","internal::Or","internal::And","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapOpt"],"G":["internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Into","internal::Map","std::boxed::Box","internal::And","internal::MapRes"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::peek(p0);
+crate::combinator::peek(p0);
+crate::combinator::peek(p0);
-----------------
src/combinator/mod.rs combinator::eof
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"combinator::eof":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::InputLength","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"combinator::eof":{"E":["error::Error","error::VerboseError"],"I":["memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","<*const T as std::fmt::Debug>","internal::Needed","error::ErrorKind","error::VerboseErrorKind","error::Error","internal::Err"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+combinator::eof(p0);
+crate::combinator::eof(p0);
+crate::combinator::eof(p0);
-----------------
src/combinator/mod.rs combinator::complete
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::complete":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::complete":{"E":["error::VerboseError","error::Error"],"F":["internal::Into","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::And","internal::FlatMap","internal::AndThen","internal::MapRes"],"I":["error::VerboseError","internal::Needed","number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","error::Error"],"O":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into","internal::And","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Map","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::And"]},"internal::AndThen":{"F":["internal::Into","internal::MapOpt","internal::Or","internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapRes"],"G":["internal::Into","internal::And","internal::AndThen","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Or","std::boxed::Box"]},"internal::Err":{"E":["internal::Err","error::VerboseError","error::VerboseErrorKind","error::Error","error::ErrorKind","number::Endianness","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>"]},"internal::FlatMap":{"F":["internal::And","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Map","internal::Into","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::Or","internal::MapRes","internal::MapOpt"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::Into","internal::MapRes"],"G":["core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::Map","internal::Into","internal::MapRes","internal::FlatMap"],"G":["core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Into","internal::FlatMap","internal::Or","internal::Map","internal::MapOpt","internal::And"],"G":["internal::MapRes","internal::Into","internal::And","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::complete(p0);
+crate::combinator::complete(p0);
+crate::combinator::complete(p0);
-----------------
src/combinator/mod.rs combinator::all_consuming
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::all_consuming":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"I":["traits::InputLength","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::all_consuming":{"E":["error::VerboseError","error::Error"],"F":["internal::Into","internal::Or","internal::FlatMap","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes"],"I":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"G":["std::boxed::Box","internal::Map","internal::And","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or"]},"internal::AndThen":{"F":["internal::Map","internal::Into","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap"],"G":["internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","internal::Into","internal::Map"]},"internal::Err":{"E":["internal::Err","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","number::Endianness","error::VerboseErrorKind","error::Error","internal::Needed"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["std::boxed::Box","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Map"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"G":["core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::Map","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And"],"G":["core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::And","internal::FlatMap","internal::AndThen","internal::MapOpt"],"G":["internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes","internal::Or","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::all_consuming(p0);
+crate::combinator::all_consuming(p0);
+crate::combinator::all_consuming(p0);
-----------------
src/combinator/mod.rs combinator::verify
deps:{"<&A as std::alloc::Allocator>":{},"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::borrow::Borrow<T>>":{},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::verify":{"<F as internal::Parser<I>>::Output":["std::borrow::Borrow"],"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<&T as std::borrow::Borrow<T>>":{},"<&mut T as std::borrow::Borrow<T>>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue"]},"<T as std::borrow::Borrow<T>>":{},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::verify":{"<F as internal::Parser<I>>::Output":["std::rc::Rc<T>","std::path::PathBuf","std::borrow::Cow<'a, B>","std::ffi::CString","<&mut T as std::borrow::Borrow<T>>","std::string::String","std::sync::Arc<T>","std::vec::Vec<T, A>","std::boxed::Box<T, A>","std::ffi::OsString"],"E":["error::VerboseError","error::Error"],"F":["internal::FlatMap","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","internal::Into","internal::And"],"G":["core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"],"I":["std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","internal::Needed","error::Error","error::ErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseErrorKind","internal::Err"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Into","internal::Or","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","std::boxed::Box","internal::And"],"G":["internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::MapOpt","internal::Into","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::AndThen","internal::And","internal::FlatMap","internal::MapRes","std::boxed::Box"],"G":["internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::AndThen","internal::Map"]},"internal::Err":{"E":["error::Error","error::VerboseError","internal::Err","internal::Needed","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Map","internal::AndThen","std::boxed::Box","internal::Into","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map","internal::And","internal::AndThen","internal::MapOpt","internal::Or","std::boxed::Box","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::Map","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into","internal::AndThen","internal::And","std::boxed::Box"],"G":["core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","internal::Into","internal::Map","internal::AndThen"],"G":["core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::And","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","internal::MapRes"],"G":["internal::Or","internal::And","std::boxed::Box","internal::Map","internal::AndThen","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+combinator::verify(p0, p1);
+crate::combinator::verify(p0, p1);
+crate::combinator::verify(p0, p1);
-----------------
src/combinator/mod.rs combinator::value
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::value":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized"],"O1":["std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::value":{"E":["error::VerboseError","error::Error"],"F":["internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes"],"I":["RUG_ANY"],"O1":["internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","error::VerboseErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","error::VerboseError","error::ErrorKind"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Into","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map"],"G":["internal::MapRes","std::boxed::Box","internal::Into","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::And"]},"internal::AndThen":{"F":["internal::And","internal::MapOpt","internal::Map","internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen"],"G":["std::boxed::Box","internal::Into","internal::And","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Map"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","error::VerboseErrorKind","internal::Err","number::Endianness","error::ErrorKind","error::Error","internal::Needed"]},"internal::FlatMap":{"F":["internal::Or","internal::Into","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Map"],"G":["std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::AndThen","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::Map","std::boxed::Box"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::And"],"G":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::And","internal::MapOpt","internal::AndThen","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapRes","std::boxed::Box","internal::Into"],"G":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::And","internal::Into","internal::Map"],"G":["internal::Or","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // O1
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+combinator::value(p0, p1);
+crate::combinator::value(p0, p1);
+crate::combinator::value(p0, p1);
-----------------
src/combinator/mod.rs combinator::not
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::not":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::not":{"E":["error::Error","error::VerboseError"],"F":["<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box","internal::Map"],"I":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","error::VerboseErrorKind","error::ErrorKind","internal::Needed","error::VerboseError","error::Error"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapRes","std::boxed::Box","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Or","internal::Map","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::And","internal::Map","std::boxed::Box"]},"internal::AndThen":{"F":["internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Or","internal::MapRes","internal::Map"],"G":["std::boxed::Box","internal::FlatMap","internal::Or","internal::MapRes","internal::MapOpt","internal::And","internal::AndThen","internal::Map","internal::Into","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","internal::Err","internal::Needed","error::ErrorKind","error::Error","<*mut T as std::fmt::Debug>","error::VerboseError"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Into","internal::AndThen","internal::Or","std::boxed::Box","internal::Map","internal::And","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::And","internal::Or","internal::Map","internal::Into","internal::AndThen","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::Into","internal::AndThen","internal::And","internal::Map","internal::Or","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::Map","internal::Or","internal::FlatMap","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::AndThen"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Or","internal::MapRes","internal::Into","internal::FlatMap","internal::AndThen","internal::Map","std::boxed::Box"],"G":["internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And","internal::Or","internal::MapRes","internal::Map","std::boxed::Box"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::not(p0);
+crate::combinator::not(p0);
+crate::combinator::not(p0);
-----------------
src/combinator/mod.rs combinator::recognize
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::recognize":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"I":["std::clone::Clone","traits::Input","traits::Offset","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::recognize":{"E":["error::VerboseError","error::Error"],"F":["internal::Or","internal::FlatMap","std::boxed::Box","internal::Map","internal::AndThen","internal::MapOpt","internal::Into","internal::And","internal::MapRes","<F as internal::Parser<I>>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::MapRes","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Into"],"G":["internal::Map","internal::MapRes","internal::And","internal::FlatMap","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Map","internal::MapOpt","internal::Or","internal::And","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapRes"],"G":["internal::Into","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Or","internal::AndThen","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::And"]},"internal::Err":{"E":["internal::Err","number::Endianness","<*const T as std::fmt::Debug>","error::Error","internal::Needed","error::VerboseError","error::ErrorKind","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::And","internal::Into","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapRes","internal::MapOpt"],"G":["core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap","internal::And","internal::Or"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","std::boxed::Box","internal::And","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","internal::MapOpt"],"G":["core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","internal::And","internal::Or","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty"]},"internal::Or":{"F":["std::boxed::Box","internal::Into","internal::AndThen","internal::And","internal::MapOpt","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::FlatMap","internal::Map","std::boxed::Box","internal::Or"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::recognize(p0);
+crate::combinator::recognize(p0);
+crate::combinator::recognize(p0);
-----------------
src/combinator/mod.rs combinator::consumed
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"combinator::consumed":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["traits::Input","traits::Offset","std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"combinator::consumed":{"E":["error::Error","error::VerboseError"],"F":["internal::Map","internal::Into","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::AndThen"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap"],"G":["internal::Map","std::boxed::Box","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into","internal::Or","internal::AndThen"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::MapOpt","internal::MapRes","internal::Map"],"G":["internal::FlatMap","internal::MapRes","internal::And","internal::AndThen","internal::Into","internal::MapOpt","internal::Map","internal::Or","std::boxed::Box","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseError","error::Error","error::ErrorKind","error::VerboseErrorKind","<*const T as std::fmt::Debug>","number::Endianness","internal::Err","internal::Needed"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::FlatMap","internal::MapOpt","internal::Map","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Or","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::Into","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Map","internal::And","internal::MapRes"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::Map","internal::And","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Or","internal::MapOpt","internal::Into"],"G":["core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::AndThen","internal::MapOpt","internal::Map","internal::FlatMap","internal::Or","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","std::boxed::Box"],"G":["core::str::IsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen","internal::Into","internal::FlatMap"],"G":["internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::consumed(p0);
+crate::combinator::consumed(p0);
+crate::combinator::consumed(p0);
-----------------
src/combinator/mod.rs combinator::cut
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::cut":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::cut":{"E":["error::Error","error::VerboseError"],"F":["internal::Map","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapOpt"],"I":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::MapRes","internal::AndThen"],"G":["internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Into","std::boxed::Box"]},"internal::AndThen":{"F":["internal::Or","internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::FlatMap","internal::AndThen","std::boxed::Box"],"G":["internal::Or","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::AndThen","internal::Map","internal::And","std::boxed::Box"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","number::Endianness","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::Or","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::FlatMap","internal::And"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::FlatMap","internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::AndThen","internal::And","std::boxed::Box"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","internal::AndThen","internal::Map","internal::Into","internal::MapOpt","std::boxed::Box","internal::MapRes"],"G":["core::str::UnsafeBytesToStr","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::And"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::And","internal::MapRes","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::FlatMap","internal::AndThen","internal::Or","internal::MapOpt","std::boxed::Box","internal::Map"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Or","internal::Map","internal::And","internal::Into","std::boxed::Box","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::cut(p0);
+crate::combinator::cut(p0);
+crate::combinator::cut(p0);
-----------------
src/combinator/mod.rs combinator::into
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"combinator::into":{"E1":["error::ParseError","std::convert::Into","std::marker::Sized"],"E2":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized"],"O1":["std::marker::Sized","std::convert::Into"],"O2":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"combinator::into":{"E2":["error::VerboseError","error::Error"],"F":["internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::And"],"I":["RUG_ANY"],"O1":["<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"],"O2":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapOpt","internal::Into","internal::Map","internal::And","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","internal::Into","internal::And","std::boxed::Box"]},"internal::AndThen":{"F":["std::boxed::Box","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Into","internal::Map","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Map","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","number::Endianness","error::VerboseErrorKind","error::Error","error::ErrorKind","internal::Err","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Map","internal::Or","internal::MapRes","std::boxed::Box","internal::Into"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Into","internal::Or"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Into","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::And","internal::Map","internal::Or","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::And","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt"],"G":["internal::And","internal::MapOpt","internal::FlatMap","internal::Or","internal::Map","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+combinator::into(p0);
+crate::combinator::into(p0);
+crate::combinator::into(p0);
-----------------
src/combinator/mod.rs combinator::iterator
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"combinator::iterator":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"combinator::iterator":{"Error":["error::VerboseError","error::Error"],"F":["internal::Map","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapOpt"],"Input":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And","internal::Or","internal::AndThen","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::Into"],"G":["internal::MapOpt","internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::And","std::boxed::Box","internal::FlatMap","internal::Into"]},"internal::AndThen":{"F":["internal::MapOpt","internal::AndThen","internal::And","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::Map"],"G":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Into","std::boxed::Box","internal::And","internal::MapOpt","internal::MapRes"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","internal::Err","internal::Needed","number::Endianness","error::ErrorKind","error::Error","<*mut T as std::fmt::Debug>"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Map","internal::FlatMap","std::boxed::Box","internal::Or"],"G":["core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["std::boxed::Box","internal::Into","internal::MapRes","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::And","internal::Or"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Or","internal::Map","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Into","internal::FlatMap"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::And"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into"],"G":["core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::MapOpt","internal::Map","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Into"],"G":["internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::And","internal::MapRes","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Input
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+combinator::iterator(p0, p1);
+crate::combinator::iterator(p0, p1);
+crate::combinator::iterator(p0, p1);
-----------------
src/combinator/mod.rs combinator::success
deps:{"combinator::success":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"combinator::success":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O":["error::VerboseError","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","number::Endianness","internal::Needed","error::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","error::ErrorKind"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","number::Endianness","internal::Err","error::ErrorKind","internal::Needed","error::VerboseErrorKind","error::VerboseError","error::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // O
+combinator::success(p0);
+crate::combinator::success(p0);
+crate::combinator::success(p0);
-----------------
src/combinator/mod.rs combinator::fail
deps:{"<*mut T as std::fmt::Debug>":{},"combinator::fail":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"combinator::fail":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","error::VerboseError","<*mut T as std::fmt::Debug>","error::Error","number::Endianness","error::ErrorKind","internal::Needed"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+combinator::fail(p0);
+crate::combinator::fail(p0);
+crate::combinator::fail(p0);
-----------------
src/multi/mod.rs multi::many0
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::many0":{"F":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","traits::InputLength","std::clone::Clone"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Map","internal::MapOpt","internal::Or","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Into","internal::Map","internal::And","internal::FlatMap","internal::MapOpt","std::boxed::Box"]},"internal::AndThen":{"F":["internal::And","internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"],"G":["internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or","internal::Map","std::boxed::Box","internal::AndThen","internal::MapRes","internal::And"]},"internal::Err":{"E":["internal::Needed","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseErrorKind","error::ErrorKind","internal::Err","error::Error","error::VerboseError"]},"internal::FlatMap":{"F":["internal::AndThen","internal::And","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","std::boxed::Box","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapRes","internal::Into","std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapRes","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap","internal::Or","internal::Into","std::boxed::Box"],"G":["std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","internal::Into","internal::MapRes"],"G":["core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","internal::Into","internal::And","internal::MapOpt","internal::Map","internal::FlatMap","std::boxed::Box"],"G":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::MapRes","internal::Or","internal::Map","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::And","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::Or","internal::Into","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::FlatMap"]},"multi::many0":{"F":["internal::And","internal::FlatMap","internal::Into","std::boxed::Box","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::MapOpt"],"I":["memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>","memchr::memmem::FinderBuilder"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+multi::many0(p0);
+crate::multi::many0(p0);
+crate::multi::many0(p0);
-----------------
src/multi/mod.rs multi::many1
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::many1":{"F":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","traits::InputLength","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Into"],"G":["internal::And","internal::Into","internal::MapRes","internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","std::boxed::Box"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::And"],"G":["std::boxed::Box","internal::MapOpt","internal::Into","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","internal::Needed","error::VerboseError","error::Error","number::Endianness","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::MapRes","internal::And","internal::Map","internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::Map","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::And","std::boxed::Box","internal::MapOpt","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Into","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::FlatMap"],"G":["core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::FlatMap","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen"],"G":["core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes"],"G":["internal::MapRes","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"]},"multi::many1":{"F":["<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Or","internal::Into","internal::Map"],"I":["memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+multi::many1(p0);
+crate::multi::many1(p0);
+crate::multi::many1(p0);
-----------------
src/multi/mod.rs multi::many_till
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"multi::many_till":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized","traits::InputLength"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","std::boxed::Box","internal::Map","internal::MapOpt"],"G":["internal::AndThen","internal::MapRes","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","std::boxed::Box","internal::FlatMap"]},"internal::AndThen":{"F":["internal::Or","internal::MapOpt","std::boxed::Box","internal::Into","internal::And","internal::MapRes","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::FlatMap"],"G":["internal::MapRes","internal::Or","internal::Map","internal::AndThen","internal::And","internal::MapOpt","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","std::boxed::Box"]},"internal::Err":{"E":["error::ErrorKind","error::Error","<*const T as std::fmt::Debug>","error::VerboseErrorKind","internal::Err","error::VerboseError","number::Endianness","internal::Needed"]},"internal::FlatMap":{"F":["internal::FlatMap","std::boxed::Box","internal::Map","internal::MapOpt","internal::Or","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Into"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Or","internal::Map","std::boxed::Box","internal::And","internal::Into"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Or","std::boxed::Box","internal::MapRes","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And","internal::AndThen"],"G":["core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["std::boxed::Box","internal::Map","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::And","internal::Into","internal::Or","internal::AndThen","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::Into","internal::Or","internal::MapRes"],"G":["internal::FlatMap","internal::Into","internal::Or","internal::AndThen","internal::MapRes","internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","std::boxed::Box"]},"multi::many_till":{"E":["error::Error","error::VerboseError"],"F":["internal::Into","internal::Or","internal::MapRes","internal::And","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap"],"G":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapOpt","std::boxed::Box","internal::Into","internal::Map","internal::MapRes","internal::AndThen"],"I":["memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+multi::many_till(p0, p1);
+crate::multi::many_till(p0, p1);
+crate::multi::many_till(p0, p1);
-----------------
src/multi/mod.rs multi::separated_list0
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::separated_list0":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized","traits::InputLength"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapOpt"],"G":["internal::AndThen","internal::FlatMap","internal::And","internal::Map","internal::MapOpt","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::Into"]},"internal::AndThen":{"F":["internal::And","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Or"],"G":["internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt"]},"internal::Err":{"E":["internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","number::Endianness","internal::Err","error::VerboseError","error::Error","error::ErrorKind"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::Into","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Into","internal::MapOpt","internal::MapRes","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"internal::MapOpt":{"F":["internal::Map","internal::Or","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::And","internal::FlatMap","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Or","std::boxed::Box","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["std::boxed::Box","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Or","internal::MapOpt","internal::And","internal::Into"],"G":["internal::FlatMap","internal::Or","internal::And","internal::Map","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes"]},"multi::separated_list0":{"E":["error::Error","error::VerboseError"],"F":["internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","std::boxed::Box"],"G":["internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::MapRes","internal::Map"],"I":["memchr::memmem::FinderBuilder","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // G
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+multi::separated_list0(p0, p1);
+crate::multi::separated_list0(p0, p1);
+crate::multi::separated_list0(p0, p1);
-----------------
src/multi/mod.rs multi::separated_list1
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"multi::separated_list1":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::clone::Clone","std::marker::Sized","traits::InputLength"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Map","std::boxed::Box","internal::And","internal::MapRes","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Into","internal::MapRes","internal::AndThen","internal::Map","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapOpt"]},"internal::AndThen":{"F":["internal::FlatMap","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Or","internal::Map","internal::MapRes","internal::MapOpt"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Map","std::boxed::Box","internal::AndThen","internal::Or","internal::Into","internal::MapRes"]},"internal::Err":{"E":["internal::Err","error::Error","number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","internal::Needed","error::VerboseError"]},"internal::FlatMap":{"F":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::And","internal::Into","internal::Or","internal::MapRes","internal::FlatMap","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Into","internal::FlatMap","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::And","internal::Map","std::boxed::Box","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","internal::And","internal::Or","std::boxed::Box","internal::FlatMap","internal::MapRes"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::MapOpt","internal::Or","internal::And","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Map"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::Or","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::And","internal::Map","internal::FlatMap","internal::MapRes"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","internal::Or","internal::AndThen","internal::Map","internal::And","internal::MapOpt","<F as internal::Parser<I>>"],"G":["internal::Map","internal::AndThen","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::FlatMap","internal::MapRes"]},"multi::separated_list1":{"E":["error::Error","error::VerboseError"],"F":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::MapRes"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","std::boxed::Box","internal::Map","internal::AndThen","internal::Or","internal::FlatMap","internal::And"],"I":["memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // G
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+multi::separated_list1(p0, p1);
+crate::multi::separated_list1(p0, p1);
+crate::multi::separated_list1(p0, p1);
-----------------
src/multi/mod.rs multi::many_m_n
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::many_m_n":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized","traits::InputLength"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Or","internal::Map"],"G":["internal::AndThen","internal::Or","std::boxed::Box","internal::Map","internal::FlatMap","internal::Into","internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::Into","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::And","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::MapRes"],"G":["internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","<*mut T as std::fmt::Debug>","internal::Needed","number::Endianness","internal::Err","error::VerboseErrorKind","error::Error"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::And","internal::MapRes","internal::MapOpt","internal::Map","internal::FlatMap","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::Or","internal::MapRes","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::AndThen","std::boxed::Box","internal::And","internal::MapRes","internal::Or","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Map","internal::MapRes","internal::And","internal::MapOpt","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Or","internal::And","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Map"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::MapOpt","internal::Map","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","internal::And","internal::Or","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::AndThen"]},"multi::many_m_n":{"E":["error::VerboseError","error::Error"],"F":["internal::Or","internal::FlatMap","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::And","std::boxed::Box","internal::Into"],"I":["memchr::cow::Imp<'a>","memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+multi::many_m_n(p0, p1, p2);
+crate::multi::many_m_n(p0, p1, p2);
+crate::multi::many_m_n(p0, p1, p2);
-----------------
src/multi/mod.rs multi::many0_count
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"multi::many0_count":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"I":["traits::InputLength","std::clone::Clone","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::FlatMap","internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or","internal::MapOpt","internal::Into","internal::And"],"G":["std::boxed::Box","internal::Into","internal::AndThen","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::FlatMap","internal::Or"]},"internal::AndThen":{"F":["internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Map","internal::AndThen","internal::Or","internal::FlatMap"],"G":["internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::FlatMap","internal::MapOpt","internal::MapRes","std::boxed::Box"]},"internal::Err":{"E":["internal::Needed","internal::Err","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","number::Endianness","error::Error","error::ErrorKind"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::And","internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","internal::AndThen","internal::Map","internal::MapOpt","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::MapRes","internal::MapOpt","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::AndThen","std::boxed::Box","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or","internal::And","std::boxed::Box"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["std::boxed::Box","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::And","internal::Or","internal::AndThen"],"G":["<F as internal::Parser<I>>","internal::Or","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::And","internal::Into","internal::FlatMap","internal::Map"]},"multi::many0_count":{"E":["error::VerboseError","error::Error"],"F":["internal::And","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen","internal::Into","internal::FlatMap"],"I":["memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+multi::many0_count(p0);
+crate::multi::many0_count(p0);
+crate::multi::many0_count(p0);
-----------------
src/multi/mod.rs multi::many1_count
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"multi::many1_count":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone","traits::InputLength"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::FlatMap","internal::Into","internal::MapOpt","internal::MapRes","internal::Or","internal::AndThen","internal::Map"],"G":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","internal::MapOpt","internal::And","internal::Or","std::boxed::Box","internal::AndThen"]},"internal::AndThen":{"F":["internal::Into","internal::MapOpt","internal::Or","internal::AndThen","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And"],"G":["internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","internal::Err","number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Needed","error::ErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::Or","internal::MapOpt","internal::And","internal::Map","internal::AndThen","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box"],"G":["core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Into","internal::MapOpt","internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","internal::Map","internal::Into","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Or","internal::Into","internal::MapRes","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::And","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Or","internal::And","std::boxed::Box","internal::Into","internal::MapRes","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map"],"G":["internal::Or","internal::AndThen","internal::MapOpt","internal::Into","internal::And","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Map"]},"multi::many1_count":{"E":["error::Error","error::VerboseError"],"F":["internal::MapOpt","internal::And","internal::FlatMap","internal::AndThen","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::Map"],"I":["memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+multi::many1_count(p0);
+crate::multi::many1_count(p0);
+crate::multi::many1_count(p0);
-----------------
src/multi/mod.rs multi::count
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"multi::count":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Map","internal::MapRes","internal::Or","internal::And","internal::AndThen"],"G":["std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And","internal::Into","internal::Map","internal::MapRes","internal::Or","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Map","internal::And","internal::Or","internal::Into","internal::MapRes"],"G":["internal::MapRes","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or","internal::Into","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","error::Error","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err","number::Endianness","error::VerboseErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::Or","std::boxed::Box","internal::AndThen","internal::Map","internal::FlatMap","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::MapOpt"],"G":["core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::Map","internal::Into","internal::And","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapOpt","internal::Map","internal::Into"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Map","internal::FlatMap"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::Map","internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box"],"G":["internal::MapRes","internal::And","internal::AndThen","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Into","internal::Or"]},"multi::count":{"E":["error::Error","error::VerboseError"],"F":["internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::Or","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box","internal::Into"],"I":["error::VerboseError","error::Error","error::VerboseErrorKind","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>","internal::Err","error::ErrorKind","number::Endianness","internal::Needed","std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = 0usize; // None+usize
+multi::count(p0, p1);
+crate::multi::count(p0, p1);
+crate::multi::count(p0, p1);
-----------------
src/multi/mod.rs multi::fill
'a
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"multi::fill":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Map","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapOpt","internal::And","internal::Into"],"G":["internal::AndThen","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::Map","internal::Or","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::MapRes","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::Into","internal::FlatMap"],"G":["internal::Map","internal::Into","internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::And"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::ErrorKind","number::Endianness","error::Error","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Into","internal::And","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Map","std::boxed::Box","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["std::boxed::Box","internal::FlatMap","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Map","internal::MapRes","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::And","std::boxed::Box","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Or","internal::MapOpt","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::Into","internal::MapRes"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","internal::And","internal::Or","internal::FlatMap","std::boxed::Box"],"G":["core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::MapOpt","internal::Map","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into","internal::Or","internal::MapRes","internal::And","<F as internal::Parser<I>>"],"G":["std::boxed::Box","internal::And","internal::FlatMap","internal::Into","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen"]},"multi::fill":{"E":["error::Error","error::VerboseError"],"F":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::AndThen","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Or"],"I":["error::ErrorKind","number::Endianness","internal::Err","std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","error::VerboseError","error::Error","internal::Needed"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&B> for &mut A>":{},"std::cmp::impls::<impl std::cmp::PartialEq<&mut B> for &mut A>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // [<F as internal::Parser<I>>::Output]
+multi::fill(p0, p1);
+crate::multi::fill(p0, p1);
+crate::multi::fill(p0, p1);
-----------------
src/multi/mod.rs multi::fold_many0
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"multi::fold_many0":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"],"H":["std::ops::FnMut","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone","traits::InputLength"],"R":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::And","internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Or"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapOpt","internal::Or","std::boxed::Box","internal::And","internal::AndThen","internal::FlatMap"]},"internal::AndThen":{"F":["internal::Map","internal::Or","internal::FlatMap","internal::AndThen","internal::And","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes"],"G":["internal::And","internal::MapRes","internal::Into","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","internal::FlatMap"]},"internal::Err":{"E":["error::Error","error::ErrorKind","number::Endianness","internal::Err","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError","internal::Needed"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::Or","internal::And","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["<F as internal::Parser<I>>","internal::Map","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","internal::Into","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Or"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::And","internal::Or","internal::AndThen","internal::Map","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","internal::MapOpt","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::Or"],"G":["core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::LinesAnyMap","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::AndThen","internal::Map","internal::Into","internal::FlatMap","internal::And","internal::MapOpt","internal::Or","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"],"G":["internal::FlatMap","internal::Or","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::And"]},"multi::fold_many0":{"E":["error::VerboseError","error::Error"],"F":["internal::Or","std::boxed::Box","internal::Into","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::And","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace"],"H":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode"],"I":["memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>"],"R":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // H
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+multi::fold_many0(p0, p1, p2);
+crate::multi::fold_many0(p0, p1, p2);
+crate::multi::fold_many0(p0, p1, p2);
-----------------
src/multi/mod.rs multi::fold_many1
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::fold_many1":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"],"H":["std::marker::Sized","std::ops::FnMut"],"I":["std::marker::Sized","std::clone::Clone","traits::InputLength"],"R":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>"],"G":["internal::Into","internal::Map","internal::AndThen","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","internal::And","std::boxed::Box","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::Map","internal::FlatMap","internal::Or","internal::MapOpt","internal::AndThen","internal::And","internal::MapRes","std::boxed::Box","internal::Into","<F as internal::Parser<I>>"],"G":["internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::And"]},"internal::Err":{"E":["error::ErrorKind","error::Error","error::VerboseError","error::VerboseErrorKind","internal::Needed","<*mut T as std::fmt::Debug>","number::Endianness","internal::Err"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapOpt","internal::And","internal::Into","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapRes"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box","internal::Or","internal::And","internal::MapRes","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","internal::And","std::boxed::Box","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["internal::And","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Map","internal::Into","std::boxed::Box"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","std::boxed::Box","internal::And","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapOpt","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen","internal::Into","internal::FlatMap"],"G":["internal::And","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","internal::Into"]},"multi::fold_many1":{"E":["error::Error","error::VerboseError"],"F":["internal::AndThen","internal::MapRes","internal::Map","internal::MapOpt","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::FlatMap"],"G":["core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue"],"H":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDefault"],"I":["memchr::cow::Imp<'a>","memchr::memmem::Finder<'n>","memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder"],"R":["RUG_ANY"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // H
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+multi::fold_many1(p0, p1, p2);
+crate::multi::fold_many1(p0, p1, p2);
+crate::multi::fold_many1(p0, p1, p2);
-----------------
src/multi/mod.rs multi::fold_many_m_n
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"multi::fold_many_m_n":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"],"H":["std::ops::FnMut","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone","traits::InputLength"],"R":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Into","internal::FlatMap"],"G":["std::boxed::Box","internal::Into","internal::Or","internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box"],"G":["internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Or"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","error::ErrorKind","number::Endianness","error::Error"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::FlatMap","internal::Map","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Or"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::MapOpt","internal::And","internal::MapRes","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","std::boxed::Box","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::And","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapRes","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::Or","internal::Map","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::FlatMap"],"G":["std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::FlatMap","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Map","internal::AndThen","internal::Or","internal::And"],"G":["internal::MapOpt","internal::MapRes","internal::Or","internal::Into","internal::AndThen","internal::And","std::boxed::Box","internal::Map","internal::FlatMap","<F as internal::Parser<I>>"]},"multi::fold_many_m_n":{"E":["error::VerboseError","error::Error"],"F":["internal::Into","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Or","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"H":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"],"I":["memchr::memmem::FinderBuilder","memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>"],"R":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
let mut p3 = MaybeUninit::uninit().assume_init(); // H
let mut p4 = MaybeUninit::uninit().assume_init(); // G
+multi::fold_many_m_n(p0, p1, p2, p3, p4);
+crate::multi::fold_many_m_n(p0, p1, p2, p3, p4);
+crate::multi::fold_many_m_n(p0, p1, p2, p3, p4);
-----------------
src/multi/mod.rs multi::length_data
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"multi::length_data":{"<F as internal::Parser<I>>::Output":["traits::ToUsize"],"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box","internal::Map","internal::AndThen"],"G":["internal::MapRes","internal::Map","internal::Or","internal::And","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Map","internal::MapRes","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Into","internal::Or","internal::AndThen"],"G":["internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::MapOpt","internal::Map","internal::And"]},"internal::Err":{"E":["error::VerboseErrorKind","error::ErrorKind","internal::Err","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed","error::VerboseError","number::Endianness"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","internal::And","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::MapOpt","std::boxed::Box","internal::Map","internal::AndThen","internal::And","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::And","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::Map","internal::MapOpt","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapRes","std::boxed::Box"],"G":["core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","internal::Map","internal::Or","internal::FlatMap","internal::And"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::Map","internal::Into","internal::And","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"],"G":["std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::And","internal::Map"]},"multi::length_data":{"<F as internal::Parser<I>>::Output":[],"E":["error::VerboseError","error::Error"],"F":["std::boxed::Box","internal::And","internal::AndThen","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap"],"I":[]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+multi::length_data(p0);
+crate::multi::length_data(p0);
+crate::multi::length_data(p0);
-----------------
src/multi/mod.rs multi::length_value
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"multi::length_value":{"<F as internal::Parser<I>>::Output":["traits::ToUsize"],"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::clone::Clone","traits::Input","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::Or","internal::And","internal::Into"],"G":["internal::MapOpt","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or","internal::Into","internal::Map"]},"internal::AndThen":{"F":["internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen","internal::MapOpt","internal::Map"],"G":["internal::MapOpt","internal::Or","internal::And","internal::Map","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Needed","error::Error","number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","internal::Err"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Or","internal::Map","internal::Into","std::boxed::Box","internal::MapRes","internal::And","internal::FlatMap"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::Into","internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::AndThen","std::boxed::Box","internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Map","internal::Or"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::AndThen","internal::Into","internal::Or","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapRes","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsNotEmpty"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::And","internal::Map","internal::AndThen"],"G":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::AndThen","internal::Into","internal::Map","internal::Or"]},"multi::length_value":{"<F as internal::Parser<I>>::Output":[],"E":["error::Error","error::VerboseError"],"F":["std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::MapRes","internal::And","internal::Or"],"G":["internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapRes","internal::Or","internal::MapOpt","internal::And","internal::Into"],"I":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+multi::length_value(p0, p1);
+crate::multi::length_value(p0, p1);
+crate::multi::length_value(p0, p1);
-----------------
src/multi/mod.rs multi::length_count
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"multi::length_count":{"<F as internal::Parser<I>>::Output":["traits::ToUsize"],"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::Or","internal::MapRes","std::boxed::Box","internal::Map","internal::FlatMap","internal::Into","internal::And","internal::MapOpt","internal::AndThen"],"G":["internal::MapOpt","internal::AndThen","internal::Map","internal::FlatMap","internal::And","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapRes"]},"internal::AndThen":{"F":["internal::MapRes","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Into","internal::Or","internal::And"],"G":["internal::And","internal::MapRes","internal::AndThen","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap"]},"internal::Err":{"E":["internal::Needed","error::Error","error::ErrorKind","error::VerboseErrorKind","number::Endianness","error::VerboseError","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapRes","internal::Into","internal::Map","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Into","internal::MapRes","internal::AndThen","internal::Map","internal::Or"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::MapRes","internal::AndThen","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","internal::Or","internal::Into","internal::MapRes"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::AndThen","internal::FlatMap"],"G":["core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::FlatMap","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map","internal::Or","internal::Into"],"G":["internal::MapRes","std::boxed::Box","internal::Map","internal::And","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::MapOpt"]},"multi::length_count":{"<F as internal::Parser<I>>::Output":[],"E":["error::VerboseError","error::Error"],"F":["internal::MapRes","internal::Into","internal::Or","internal::MapOpt","internal::Map","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::And","<F as internal::Parser<I>>"],"G":["std::boxed::Box","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","internal::And"],"I":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","error::Error","internal::Err"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+multi::length_count(p0, p1);
+crate::multi::length_count(p0, p1);
+crate::multi::length_count(p0, p1);
-----------------
src/multi/mod.rs multi::many
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::many":{"Collection":["std::default::Default","std::iter::Extend","std::marker::Sized"],"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","traits::NomRange"],"I":["traits::InputLength","std::clone::Clone","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Or","internal::And","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::AndThen"],"G":["internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::And","internal::Into","internal::MapOpt","internal::AndThen"]},"internal::AndThen":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","internal::MapRes","internal::AndThen","internal::Into","internal::And"],"G":["internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","std::boxed::Box","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseErrorKind","internal::Needed","error::VerboseError","internal::Err","number::Endianness","error::ErrorKind"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","std::boxed::Box","internal::MapOpt","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::MapRes","internal::MapOpt","internal::And","internal::Into","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::And","internal::Into","internal::MapRes","internal::Map","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapOpt","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","internal::FlatMap"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::And","internal::Or","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::Or"]},"multi::many":{"Collection":["std::collections::BTreeMap<K, V, A>","std::collections::BTreeSet<T, A>","std::collections::VecDeque<T, A>","std::path::PathBuf","std::vec::Vec<T, A>"],"E":["error::VerboseError","error::Error"],"F":["std::boxed::Box","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes","internal::Or"],"G":["std::ops::RangeInclusive","std::ops::RangeFull","std::ops::Range","std::ops::RangeToInclusive","std::ops::RangeFrom","std::ops::RangeTo"],"I":["memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // G
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+multi::many(p0, p1);
+crate::multi::many(p0, p1);
+crate::multi::many(p0, p1);
-----------------
src/multi/mod.rs multi::fold
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"multi::fold":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"],"H":["std::marker::Sized","std::ops::FnMut"],"I":["traits::InputLength","std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized","traits::NomRange"],"R":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::And","internal::MapOpt","internal::Into","std::boxed::Box","internal::Or","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::MapOpt","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","internal::Into"]},"internal::AndThen":{"F":["std::boxed::Box","internal::AndThen","internal::MapRes","internal::And","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapOpt"],"G":["internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Or","std::boxed::Box","internal::Map","internal::AndThen","internal::MapOpt"]},"internal::Err":{"E":["internal::Err","number::Endianness","error::Error","error::VerboseError","<*mut T as std::fmt::Debug>","error::VerboseErrorKind","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::And","internal::AndThen","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::FlatMap","internal::Or","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::And","internal::Or","internal::Into","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::And","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","internal::Map","internal::MapRes"],"G":["core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::MapRes","internal::FlatMap","internal::And","internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","std::boxed::Box"],"G":["core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::Or","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","std::boxed::Box","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::MapRes","internal::And","internal::AndThen","internal::FlatMap"]},"multi::fold":{"E":["error::Error","error::VerboseError"],"F":["internal::MapRes","internal::Into","internal::MapOpt","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::And","internal::Map"],"G":["core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue"],"H":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap"],"I":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>"],"J":["std::ops::RangeToInclusive","std::ops::Range","std::ops::RangeInclusive","std::ops::RangeFull","std::ops::RangeTo","std::ops::RangeFrom"],"R":["RUG_ANY"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // J
let mut p1 = MaybeUninit::uninit().assume_init(); // F
let mut p2 = MaybeUninit::uninit().assume_init(); // H
let mut p3 = MaybeUninit::uninit().assume_init(); // G
+multi::fold(p0, p1, p2, p3);
+crate::multi::fold(p0, p1, p2, p3);
+crate::multi::fold(p0, p1, p2, p3);
-----------------
src/sequence/mod.rs sequence::pair
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"sequence::pair":{"E":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Map","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"G":["internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Or","internal::Into","internal::AndThen","internal::MapRes"]},"internal::AndThen":{"F":["internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Map","internal::Into","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Or"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness","error::ErrorKind","error::VerboseErrorKind","error::Error","internal::Needed","error::VerboseError","internal::Err"]},"internal::FlatMap":{"F":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::Map","internal::FlatMap","internal::AndThen","internal::MapOpt"],"G":["core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::MapOpt","internal::And","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Into","std::boxed::Box","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::Map","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And"],"G":["core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::Map","internal::Into","internal::FlatMap","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes","internal::And"],"G":["std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::AndThen","internal::Map","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::Into","internal::And","internal::Or","internal::MapOpt","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Map","internal::Into","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::And"],"G":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Map","internal::FlatMap","internal::Or","internal::MapRes","internal::Into"]},"sequence::pair":{"E":["error::VerboseError","error::Error"],"F":["std::boxed::Box","internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","internal::MapOpt"],"G":["internal::MapOpt","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","internal::Map"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+sequence::pair(p0, p1);
+crate::sequence::pair(p0, p1);
+crate::sequence::pair(p0, p1);
-----------------
src/sequence/mod.rs sequence::preceded
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"sequence::preceded":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes"],"G":["internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::AndThen","internal::Or","internal::And","internal::Into","internal::FlatMap"]},"internal::AndThen":{"F":["internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap"],"G":["internal::Into","internal::Or","internal::Map","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","internal::Err","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","number::Endianness","error::Error"]},"internal::FlatMap":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::Or","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::AndThen","internal::MapRes","internal::Or","std::boxed::Box","internal::Map","internal::FlatMap","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map"],"G":["core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Or","std::boxed::Box","internal::Map"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::Or","internal::And","internal::MapOpt","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::Map","std::boxed::Box"],"G":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen"],"G":["internal::Map","internal::Into","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Or","std::boxed::Box"]},"sequence::preceded":{"E":["error::VerboseError","error::Error"],"F":["internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::Map","internal::MapOpt"],"G":["internal::Into","internal::MapRes","internal::Or","internal::AndThen","internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+sequence::preceded(p0, p1);
+crate::sequence::preceded(p0, p1);
+crate::sequence::preceded(p0, p1);
-----------------
src/sequence/mod.rs sequence::terminated
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"sequence::terminated":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Into","internal::Map","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::MapRes"],"G":["internal::Or","internal::MapOpt","internal::Into","internal::And","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapRes","internal::AndThen","internal::Into","internal::And","internal::Map"],"G":["internal::Into","internal::AndThen","internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap"]},"internal::Err":{"E":["number::Endianness","<*mut T as std::fmt::Debug>","internal::Needed","internal::Err","error::Error","error::VerboseErrorKind","error::VerboseError","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::MapOpt","internal::Map","internal::FlatMap","internal::Or","internal::MapRes"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["std::boxed::Box","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::Or","internal::MapRes","internal::AndThen"],"G":["core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Into","internal::MapRes","internal::Map"],"G":["core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::And","internal::Map","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::FlatMap","internal::Map","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapOpt","internal::Or"],"G":["internal::AndThen","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::And"]},"sequence::terminated":{"E":["error::Error","error::VerboseError"],"F":["internal::AndThen","std::boxed::Box","internal::And","internal::Into","internal::MapRes","internal::FlatMap","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::Or"],"G":["<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt","internal::Map"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+sequence::terminated(p0, p1);
+crate::sequence::terminated(p0, p1);
+crate::sequence::terminated(p0, p1);
-----------------
src/sequence/mod.rs sequence::separated_pair
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"sequence::separated_pair":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"H":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::And","internal::AndThen","std::boxed::Box","internal::Into"],"G":["internal::Map","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapOpt","internal::Or"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::MapOpt","internal::Or","internal::AndThen","internal::FlatMap"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::Into","internal::AndThen","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::And"]},"internal::Err":{"E":["error::Error","internal::Err","error::VerboseError","number::Endianness","<*mut T as std::fmt::Debug>","error::VerboseErrorKind","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","internal::FlatMap","internal::And","internal::MapOpt"],"G":["core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Or","internal::MapRes","internal::And","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::AndThen","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::MapOpt"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::Or","internal::Into","internal::Map","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::AndThen"],"G":["core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapRes","internal::Into","internal::AndThen","internal::And","std::boxed::Box","internal::FlatMap","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["std::boxed::Box","internal::MapOpt","internal::Map","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Or","internal::AndThen"],"G":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::Map","internal::Into"]},"sequence::separated_pair":{"E":["error::Error","error::VerboseError"],"F":["internal::Map","internal::MapOpt","internal::And","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Into","internal::Or"],"G":["internal::Or","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","internal::AndThen","internal::Map"],"H":["internal::FlatMap","internal::Into","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Or","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Map"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
let mut p2 = MaybeUninit::uninit().assume_init(); // H
+sequence::separated_pair(p0, p1, p2);
+crate::sequence::separated_pair(p0, p1, p2);
+crate::sequence::separated_pair(p0, p1, p2);
-----------------
src/sequence/mod.rs sequence::delimited
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"sequence::delimited":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::MapRes","internal::Map","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Or","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapOpt"],"G":["internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or","internal::Into","std::boxed::Box","internal::AndThen","internal::Map","internal::MapRes","internal::And"],"G":["internal::MapOpt","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Into"]},"internal::Err":{"E":["internal::Needed","<*mut T as std::fmt::Debug>","number::Endianness","internal::Err","error::VerboseError","error::ErrorKind","error::Error","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Or","internal::MapRes","internal::FlatMap"],"G":["core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Or","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Into","internal::AndThen"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Into","internal::Map","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::And","internal::MapOpt"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::And","internal::Map"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::Into","internal::AndThen","internal::And","std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Map"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Into","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Or","internal::And"]},"sequence::delimited":{"E":["error::VerboseError","error::Error"],"F":["<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::Into","internal::FlatMap","internal::Map","internal::And","internal::AndThen","internal::MapOpt"],"G":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::AndThen"],"H":["internal::And","internal::MapRes","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::MapOpt"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // G
let mut p2 = MaybeUninit::uninit().assume_init(); // H
+sequence::delimited(p0, p1, p2);
+crate::sequence::delimited(p0, p1, p2);
+crate::sequence::delimited(p0, p1, p2);
-----------------
src/sequence/mod.rs sequence::tuple
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"sequence::tuple":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"List":["std::marker::Sized","sequence::Tuple"],"O":["std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","error::VerboseErrorKind","internal::Needed","internal::Err","error::Error","number::Endianness","error::VerboseError","error::ErrorKind"]},"sequence::tuple":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"],"List":[],"O":["RUG_ANY"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // List
+sequence::tuple(p0);
+crate::sequence::tuple(p0);
+crate::sequence::tuple(p0);
-----------------
src/traits.rs traits::lowercase_byte
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+traits::lowercase_byte(p0);
+crate::traits::lowercase_byte(p0);
+crate::traits::lowercase_byte(p0);
-----------------
src/bits/complete.rs bits::complete::take
deps:{"<*mut T as std::fmt::Debug>":{},"bits::complete::take":{"C":["std::marker::Sized","traits::ToUsize"],"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"],"O":["std::convert::From","std::ops::Shl","std::ops::Shr","std::marker::Sized","std::ops::AddAssign"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"bits::complete::take":{"C":[],"E":["error::VerboseError","error::Error"],"I":[],"O":["std::ffi::CString","std::simd::Mask<i8, LANES>","std::simd::Mask<i64, LANES>","std::simd::Mask<i32, LANES>","std::simd::Mask<isize, LANES>","std::simd::Mask<i16, LANES>","std::num::NonZeroU128","std::num::NonZeroI32"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // C
+bits::complete::take(p0);
+crate::bits::complete::take(p0);
+crate::bits::complete::take(p0);
-----------------
src/bits/complete.rs bits::complete::tag
deps:{"bits::complete::tag":{"C":["traits::ToUsize","std::marker::Sized"],"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","std::clone::Clone","traits::Input"],"O":["std::convert::From","std::ops::AddAssign","std::marker::Sized","std::ops::Shl","std::cmp::PartialEq","std::ops::Shr"]},"error::Error":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bits::complete::tag":{"C":[],"E":["error::Error","error::VerboseError"],"I":["memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder"],"O":["std::num::NonZeroI32","std::vec::Vec<T>","std::num::NonZeroU128","std::process::Stdio","std::net::Ipv6Addr","std::ffi::CString"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind","internal::Needed","number::Endianness","error::VerboseError","internal::Err"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // O
let mut p1 = MaybeUninit::uninit().assume_init(); // C
+bits::complete::tag(p0, p1);
+crate::bits::complete::tag(p0, p1);
+crate::bits::complete::tag(p0, p1);
-----------------
src/bits/complete.rs bits::complete::bool
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"bits::complete::bool":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"bits::complete::bool":{"E":["error::VerboseError","error::Error"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["internal::Err","error::Error","error::VerboseErrorKind","internal::Needed","<*mut T as std::fmt::Debug>","error::VerboseError","number::Endianness","error::ErrorKind"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (I, usize)
+bits::complete::bool(p0);
+crate::bits::complete::bool(p0);
+crate::bits::complete::bool(p0);
-----------------
src/bits/streaming.rs bits::streaming::take
deps:{"bits::streaming::take":{"C":["std::marker::Sized","traits::ToUsize"],"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"],"O":["std::convert::From","std::marker::Sized","std::ops::AddAssign","std::ops::Shl","std::ops::Shr"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bits::streaming::take":{"C":[],"E":["error::Error","error::VerboseError"],"I":[],"O":["std::simd::Mask<i8, LANES>","std::num::NonZeroI32","std::simd::Mask<i64, LANES>","std::ffi::CString","std::num::NonZeroU128","std::simd::Mask<i32, LANES>","std::simd::Mask<isize, LANES>","std::simd::Mask<i16, LANES>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::Error","internal::Err","error::VerboseError","number::Endianness","error::VerboseErrorKind","internal::Needed","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // C
+bits::streaming::take(p0);
+crate::bits::streaming::take(p0);
+crate::bits::streaming::take(p0);
-----------------
src/bits/streaming.rs bits::streaming::tag
deps:{"<*mut T as std::fmt::Debug>":{},"bits::streaming::tag":{"C":["std::marker::Sized","traits::ToUsize"],"E":["std::marker::Sized","error::ParseError"],"I":["std::clone::Clone","std::marker::Sized","traits::Input"],"O":["std::marker::Sized","std::ops::Shl","std::cmp::PartialEq","std::ops::AddAssign","std::convert::From","std::ops::Shr"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"bits::streaming::tag":{"C":[],"E":["error::VerboseError","error::Error"],"I":["memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>"],"O":["std::vec::Vec<T>","std::net::Ipv6Addr","std::num::NonZeroI32","std::ffi::CString","std::num::NonZeroU128","std::process::Stdio"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Needed","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","error::ErrorKind","internal::Err","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // O
let mut p1 = MaybeUninit::uninit().assume_init(); // C
+bits::streaming::tag(p0, p1);
+crate::bits::streaming::tag(p0, p1);
+crate::bits::streaming::tag(p0, p1);
-----------------
src/bits/streaming.rs bits::streaming::bool
deps:{"bits::streaming::bool":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bits::streaming::bool":{"E":["error::VerboseError","error::Error"],"I":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::Error","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError","error::VerboseErrorKind","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (I, usize)
+bits::streaming::bool(p0);
+crate::bits::streaming::bool(p0);
+crate::bits::streaming::bool(p0);
-----------------
src/bits/mod.rs bits::bits
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"bits::bits":{"E1":["std::marker::Sized","error::ParseError","traits::ErrorConvert"],"E2":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"],"O":["std::marker::Sized"],"P":["internal::Parser","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"bits::bits":{"E1":["error::Error","error::VerboseError"],"E2":["error::Error","error::VerboseError"],"I":[],"O":["RUG_ANY"],"P":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapOpt","internal::Or","internal::Map","internal::FlatMap","internal::MapRes","internal::And","internal::AndThen"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt","internal::Or","internal::AndThen","internal::And","internal::Map"],"G":["internal::Into","internal::And","internal::MapRes","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Into","internal::Map"],"G":["internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","internal::MapOpt","internal::AndThen","internal::Into"]},"internal::Err":{"E":["number::Endianness","internal::Err","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","error::Error","internal::Needed","error::ErrorKind","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::MapRes","internal::AndThen","internal::And","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Map","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::MapOpt","internal::AndThen","internal::Into","internal::And","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::FlatMap","internal::Or","internal::Into","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Map"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Map","internal::Or","internal::MapOpt","internal::Into","internal::And","internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>"],"G":["core::str::IsWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::Or","internal::And","internal::MapRes","internal::Into"],"G":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","internal::Or","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
+bits::bits(p0);
+crate::bits::bits(p0);
+crate::bits::bits(p0);
-----------------
src/bits/mod.rs bits::bytes
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"bits::bytes":{"E1":["traits::ErrorConvert","error::ParseError","std::marker::Sized"],"E2":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::clone::Clone","std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized","internal::Parser"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"bits::bytes":{"E1":["error::VerboseError","error::Error"],"E2":["error::Error","error::VerboseError"],"I":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder"],"O":["RUG_ANY"],"P":["internal::MapOpt","internal::And","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::Or","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::And","std::boxed::Box"],"G":["internal::Map","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::MapRes"]},"internal::AndThen":{"F":["internal::And","internal::Or","std::boxed::Box","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Map"],"G":["internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Map","internal::And","internal::Into","internal::AndThen","std::boxed::Box","internal::Or","<F as internal::Parser<I>>"]},"internal::Err":{"E":["number::Endianness","error::Error","<*mut T as std::fmt::Debug>","error::VerboseErrorKind","internal::Err","error::ErrorKind","error::VerboseError","internal::Needed"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::And","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::AndThen","internal::Or","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::And","internal::AndThen","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Into","internal::Map","internal::And"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::And","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Into","internal::AndThen"],"G":["core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::And","internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Into"],"G":["internal::And","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Or"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
+bits::bytes(p0);
+crate::bits::bytes(p0);
+crate::bits::bytes(p0);
-----------------
src/bytes/complete.rs bytes::complete::tag
deps:{"bytes::complete::tag":{"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized","traits::Compare"],"T":["std::marker::Sized","traits::InputLength","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::complete::tag":{"Error":["error::Error","error::VerboseError"],"T":["memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","internal::Err","error::ErrorKind","error::VerboseError","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::Error"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::tag(p0);
+crate::bytes::complete::tag(p0);
+crate::bytes::complete::tag(p0);
-----------------
src/bytes/complete.rs bytes::complete::tag_no_case
deps:{"<*const T as std::fmt::Debug>":{},"bytes::complete::tag_no_case":{"Error":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input","traits::Compare"],"T":["std::marker::Sized","std::clone::Clone","traits::InputLength"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::complete::tag_no_case":{"Error":["error::VerboseError","error::Error"],"T":["memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","error::ErrorKind","error::VerboseErrorKind","internal::Err","internal::Needed"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::tag_no_case(p0);
+crate::bytes::complete::tag_no_case(p0);
+crate::bytes::complete::tag_no_case(p0);
-----------------
src/bytes/complete.rs bytes::complete::is_not
deps:{"<*const T as std::fmt::Debug>":{},"bytes::complete::is_not":{"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"],"T":["traits::FindToken","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::complete::is_not":{"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::Error","error::VerboseError","error::ErrorKind","internal::Err"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::is_not(p0);
+crate::bytes::complete::is_not(p0);
+crate::bytes::complete::is_not(p0);
-----------------
src/bytes/complete.rs bytes::complete::is_a
deps:{"<*const T as std::fmt::Debug>":{},"bytes::complete::is_a":{"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"T":["traits::FindToken","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::complete::is_a":{"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::Error","<*const T as std::fmt::Debug>","error::ErrorKind","error::VerboseErrorKind","error::VerboseError","number::Endianness","internal::Needed","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::is_a(p0);
+crate::bytes::complete::is_a(p0);
+crate::bytes::complete::is_a(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_while
deps:{"bytes::complete::take_while":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::ops::Fn","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"bytes::complete::take_while":{"Error":["error::Error","error::VerboseError"],"F":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty"],"I":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::Error","error::ErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::complete::take_while(p0);
+crate::bytes::complete::take_while(p0);
+crate::bytes::complete::take_while(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_while1
deps:{"bytes::complete::take_while1":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","std::ops::Fn"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::complete::take_while1":{"Error":["error::Error","error::VerboseError"],"F":["core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","error::VerboseErrorKind","error::VerboseError","error::Error"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::complete::take_while1(p0);
+crate::bytes::complete::take_while1(p0);
+crate::bytes::complete::take_while1(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_while_m_n
deps:{"bytes::complete::take_while_m_n":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::complete::take_while_m_n":{"Error":["error::Error","error::VerboseError"],"F":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue"],"I":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","internal::Needed","error::VerboseError","number::Endianness","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+bytes::complete::take_while_m_n(p0, p1, p2);
+crate::bytes::complete::take_while_m_n(p0, p1, p2);
+crate::bytes::complete::take_while_m_n(p0, p1, p2);
-----------------
src/bytes/complete.rs bytes::complete::take_till
deps:{"<*mut T as std::fmt::Debug>":{},"bytes::complete::take_till":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","std::ops::Fn"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"bytes::complete::take_till":{"Error":["error::VerboseError","error::Error"],"F":["core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","number::Endianness","error::ErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","error::VerboseErrorKind","error::VerboseError"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::complete::take_till(p0);
+crate::bytes::complete::take_till(p0);
+crate::bytes::complete::take_till(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_till1
deps:{"bytes::complete::take_till1":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","std::ops::Fn"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::complete::take_till1":{"Error":["error::VerboseError","error::Error"],"F":["core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"],"I":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","internal::Needed","error::Error","error::VerboseError","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","internal::Err"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::complete::take_till1(p0);
+crate::bytes::complete::take_till1(p0);
+crate::bytes::complete::take_till1(p0);
-----------------
src/bytes/complete.rs bytes::complete::take
deps:{"bytes::complete::take":{"C":["std::marker::Sized","traits::ToUsize"],"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::complete::take":{"C":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","internal::Err","error::VerboseErrorKind","error::VerboseError","internal::Needed","error::Error","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // C
+bytes::complete::take(p0);
+crate::bytes::complete::take(p0);
+crate::bytes::complete::take(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_until
deps:{"bytes::complete::take_until":{"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","traits::FindSubstring","std::marker::Sized"],"T":["std::marker::Sized","traits::InputLength","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"bytes::complete::take_until":{"Error":["error::Error","error::VerboseError"],"I":[],"T":["memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","internal::Err","number::Endianness","error::ErrorKind","internal::Needed","error::VerboseErrorKind","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::take_until(p0);
+crate::bytes::complete::take_until(p0);
+crate::bytes::complete::take_until(p0);
-----------------
src/bytes/complete.rs bytes::complete::take_until1
deps:{"bytes::complete::take_until1":{"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized","traits::FindSubstring"],"T":["std::marker::Sized","std::clone::Clone","traits::InputLength"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::complete::take_until1":{"Error":["error::VerboseError","error::Error"],"I":[],"T":["memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","number::Endianness","error::Error","error::ErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::complete::take_until1(p0);
+crate::bytes::complete::take_until1(p0);
+crate::bytes::complete::take_until1(p0);
-----------------
src/bytes/complete.rs bytes::complete::escaped
'a
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"bytes::complete::escaped":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"I":["traits::Offset","traits::Input","std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"bytes::complete::escaped":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"F":["internal::Or","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::FlatMap"],"G":["internal::Or","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapOpt","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::FlatMap","internal::Or","internal::And","internal::Map"],"G":["internal::Or","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Into","internal::Map","internal::And"]},"internal::AndThen":{"F":["std::boxed::Box","internal::And","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","internal::AndThen","internal::Or"],"G":["internal::FlatMap","internal::And","internal::Into","internal::AndThen","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseError","error::Error","internal::Err","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseErrorKind","number::Endianness","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Or","std::boxed::Box","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::FlatMap","internal::Into","internal::Or","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::And","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::Or","internal::And","internal::FlatMap","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::Into"],"G":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::Map","internal::And","internal::MapRes","internal::FlatMap","internal::Or","internal::Into","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::AndThen","internal::Into","internal::MapOpt","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::FlatMap","internal::MapRes"],"G":["core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::FlatMap"],"G":["internal::Map","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = 'a'; // None+char
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+bytes::complete::escaped(p0, p1, p2);
+crate::bytes::complete::escaped(p0, p1, p2);
+crate::bytes::complete::escaped(p0, p1, p2);
-----------------
src/bytes/complete.rs bytes::complete::escaped_transform
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"bytes::complete::escaped_transform":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"ExtendItem":["std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","traits::Input","traits::ExtendInto","traits::Offset","std::clone::Clone"],"O1":["traits::ExtendInto","std::marker::Sized"],"O2":["traits::ExtendInto","std::marker::Sized"],"Output":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"bytes::complete::escaped_transform":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"ExtendItem":["RUG_ANY"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::And","internal::Or","internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt","internal::FlatMap"],"G":["internal::FlatMap","internal::MapRes","internal::MapOpt","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Into","internal::Or","internal::Map"],"O1":[],"O2":[],"Output":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","internal::MapOpt","internal::FlatMap","internal::And","internal::Map","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Map","internal::Into","std::boxed::Box","internal::Or"]},"internal::AndThen":{"F":["internal::Map","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Into","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::MapOpt","internal::And","internal::Or","internal::AndThen","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::ErrorKind","internal::Needed","internal::Err","error::VerboseErrorKind","number::Endianness","error::VerboseError","error::Error"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Or","internal::Map","internal::And","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::Or"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or"],"G":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::Map","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::And"],"G":["core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box"],"G":["core::str::IsWhitespace","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::Or","internal::Map","internal::AndThen","internal::Into","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And"],"G":["std::boxed::Box","internal::FlatMap","internal::Or","internal::Into","internal::MapOpt","internal::And","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = 'a'; // None+char
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+bytes::complete::escaped_transform(p0, p1, p2);
+crate::bytes::complete::escaped_transform(p0, p1, p2);
+crate::bytes::complete::escaped_transform(p0, p1, p2);
-----------------
src/bytes/streaming.rs bytes::streaming::tag
deps:{"bytes::streaming::tag":{"Error":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input","traits::Compare"],"T":["std::clone::Clone","std::marker::Sized","traits::InputLength"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::tag":{"Error":["error::VerboseError","error::Error"],"T":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseError","internal::Err","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::tag(p0);
+crate::bytes::streaming::tag(p0);
+crate::bytes::streaming::tag(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::tag_no_case
deps:{"bytes::streaming::tag_no_case":{"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized","traits::Compare"],"T":["traits::InputLength","std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::tag_no_case":{"Error":["error::Error","error::VerboseError"],"T":["memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::memmem::FinderRev<'n>","memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","error::VerboseError","error::Error","number::Endianness","internal::Err","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::tag_no_case(p0);
+crate::bytes::streaming::tag_no_case(p0);
+crate::bytes::streaming::tag_no_case(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::is_not
deps:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::is_not":{"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"T":["std::marker::Sized","traits::FindToken"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::is_not":{"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","internal::Needed","<*const T as std::fmt::Debug>","error::ErrorKind","internal::Err","number::Endianness","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::is_not(p0);
+crate::bytes::streaming::is_not(p0);
+crate::bytes::streaming::is_not(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::is_a
deps:{"bytes::streaming::is_a":{"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"],"T":["std::marker::Sized","traits::FindToken"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::streaming::is_a":{"Error":["error::Error","error::VerboseError"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::ErrorKind","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::VerboseError","error::Error"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::is_a(p0);
+crate::bytes::streaming::is_a(p0);
+crate::bytes::streaming::is_a(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_while
deps:{"bytes::streaming::take_while":{"Error":["std::marker::Sized","error::ParseError"],"F":["std::ops::Fn","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"bytes::streaming::take_while":{"Error":["error::Error","error::VerboseError"],"F":["core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","error::ErrorKind","internal::Err","internal::Needed","number::Endianness","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::streaming::take_while(p0);
+crate::bytes::streaming::take_while(p0);
+crate::bytes::streaming::take_while(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_while1
deps:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::take_while1":{"Error":["std::marker::Sized","error::ParseError"],"F":["std::ops::Fn","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::take_while1":{"Error":["error::Error","error::VerboseError"],"F":["core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::UnsafeBytesToStr"],"I":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","number::Endianness","error::ErrorKind","internal::Needed","error::VerboseError","error::Error","internal::Err","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::streaming::take_while1(p0);
+crate::bytes::streaming::take_while1(p0);
+crate::bytes::streaming::take_while1(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_while_m_n
deps:{"bytes::streaming::take_while_m_n":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","std::ops::Fn"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::take_while_m_n":{"Error":["error::Error","error::VerboseError"],"F":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr"],"I":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","internal::Needed","error::Error","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","error::VerboseErrorKind"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+bytes::streaming::take_while_m_n(p0, p1, p2);
+crate::bytes::streaming::take_while_m_n(p0, p1, p2);
+crate::bytes::streaming::take_while_m_n(p0, p1, p2);
-----------------
src/bytes/streaming.rs bytes::streaming::take_till
deps:{"bytes::streaming::take_till":{"Error":["std::marker::Sized","error::ParseError"],"F":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"bytes::streaming::take_till":{"Error":["error::VerboseError","error::Error"],"F":["core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte"],"I":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","internal::Needed","number::Endianness","internal::Err","error::Error","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::streaming::take_till(p0);
+crate::bytes::streaming::take_till(p0);
+crate::bytes::streaming::take_till(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_till1
deps:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::take_till1":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"bytes::streaming::take_till1":{"Error":["error::Error","error::VerboseError"],"F":["core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::UnsafeBytesToStr"],"I":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Needed","error::VerboseErrorKind","<*const T as std::fmt::Debug>","internal::Err","error::VerboseError","error::ErrorKind","number::Endianness"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+bytes::streaming::take_till1(p0);
+crate::bytes::streaming::take_till1(p0);
+crate::bytes::streaming::take_till1(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take
deps:{"bytes::streaming::take":{"C":["traits::ToUsize","std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized","traits::InputLength"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::take":{"C":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::Error","number::Endianness","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // C
+bytes::streaming::take(p0);
+crate::bytes::streaming::take(p0);
+crate::bytes::streaming::take(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_until
deps:{"bytes::streaming::take_until":{"Error":["error::ParseError","std::marker::Sized"],"I":["traits::FindSubstring","traits::Input","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::take_until":{"Error":["error::Error","error::VerboseError"],"I":[],"T":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::Error","error::VerboseErrorKind","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for &mut T>","error::ErrorKind"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","error::ErrorKind","error::Error","internal::Needed","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::take_until(p0);
+crate::bytes::streaming::take_until(p0);
+crate::bytes::streaming::take_until(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::take_until1
deps:{"bytes::streaming::take_until1":{"Error":["std::marker::Sized","error::ParseError"],"I":["traits::Input","traits::FindSubstring","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"bytes::streaming::take_until1":{"Error":["error::Error","error::VerboseError"],"I":[],"T":["internal::Err","error::VerboseError","number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","error::VerboseErrorKind","error::Error"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","error::Error","error::ErrorKind","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+bytes::streaming::take_until1(p0);
+crate::bytes::streaming::take_until1(p0);
+crate::bytes::streaming::take_until1(p0);
-----------------
src/bytes/streaming.rs bytes::streaming::escaped
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"bytes::streaming::escaped":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::clone::Clone","traits::Input","traits::Offset","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"bytes::streaming::escaped":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"F":["internal::FlatMap","internal::MapOpt","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen","internal::Or"],"G":["internal::FlatMap","internal::Into","internal::MapOpt","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Or","std::boxed::Box","internal::Map"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapOpt","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Or","internal::FlatMap","internal::Into","internal::And"],"G":["internal::FlatMap","std::boxed::Box","internal::Into","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Or","internal::And"]},"internal::AndThen":{"F":["internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And","internal::MapRes","internal::Map","internal::Into","<F as internal::Parser<I>>"],"G":["internal::Map","std::boxed::Box","internal::Or","internal::Into","internal::And","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::Error","internal::Err","error::VerboseErrorKind","number::Endianness","error::VerboseError","<*mut T as std::fmt::Debug>","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Into","internal::AndThen","internal::Or","internal::And","internal::MapRes","internal::Map"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["<F as internal::Parser<I>>","internal::And","internal::Into","internal::Or","internal::FlatMap","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And","internal::FlatMap","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::Into","std::boxed::Box","internal::Map","internal::And","internal::MapRes","internal::MapOpt","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Into","internal::And","internal::FlatMap","internal::AndThen","internal::Or"],"G":["core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::MapOpt","internal::And","internal::Or","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map"],"G":["internal::MapOpt","internal::And","internal::AndThen","internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = 'a'; // None+char
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+bytes::streaming::escaped(p0, p1, p2);
+crate::bytes::streaming::escaped(p0, p1, p2);
+crate::bytes::streaming::escaped(p0, p1, p2);
-----------------
src/bytes/streaming.rs bytes::streaming::escaped_transform
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"bytes::streaming::escaped_transform":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"ExtendItem":["std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","traits::Offset","traits::ExtendInto","std::marker::Sized","traits::Input"],"O1":["traits::ExtendInto","std::marker::Sized"],"O2":["traits::ExtendInto","std::marker::Sized"],"Output":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"bytes::streaming::escaped_transform":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"ExtendItem":["RUG_ANY"],"F":["internal::FlatMap","internal::Or","internal::MapOpt","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapRes","internal::Map"],"G":["internal::MapOpt","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::And","internal::FlatMap","internal::Map","internal::AndThen"],"O1":[],"O2":[],"Output":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::AndThen","internal::And","internal::FlatMap","internal::Or","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into"],"G":["std::boxed::Box","internal::Or","internal::AndThen","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapOpt","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::AndThen","internal::Map","std::boxed::Box"],"G":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Into"]},"internal::Err":{"E":["internal::Needed","number::Endianness","error::VerboseError","error::VerboseErrorKind","<*const T as std::fmt::Debug>","internal::Err","error::ErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Map","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::And","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::AndThen","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::And"],"G":["core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Map","internal::And","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box"],"G":["core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Or","internal::Map","internal::And"],"G":["core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Map","internal::FlatMap","internal::And","internal::MapOpt","internal::Into","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
let mut p1 = 'a'; // None+char
let mut p2 = MaybeUninit::uninit().assume_init(); // G
+bytes::streaming::escaped_transform(p0, p1, p2);
+crate::bytes::streaming::escaped_transform(p0, p1, p2);
+crate::bytes::streaming::escaped_transform(p0, p1, p2);
-----------------
src/character/complete.rs character::complete::char
deps:{"character::complete::char":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::char":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::ErrorKind","internal::Err","internal::Needed","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","error::Error"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = 'a'; // None+char
+character::complete::char(p0);
+crate::character::complete::char(p0);
+crate::character::complete::char(p0);
-----------------
src/character/complete.rs character::complete::satisfy
deps:{"<*mut T as std::fmt::Debug>":{},"character::complete::satisfy":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::complete::satisfy":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"F":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>"],"I":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","internal::Needed","error::ErrorKind","number::Endianness","<*mut T as std::fmt::Debug>","internal::Err","error::VerboseErrorKind","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+character::complete::satisfy(p0);
+crate::character::complete::satisfy(p0);
+crate::character::complete::satisfy(p0);
-----------------
src/character/complete.rs character::complete::one_of
deps:{"<*mut T as std::fmt::Debug>":{},"character::complete::one_of":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"],"T":["traits::FindToken","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::complete::one_of":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","<*mut T as std::fmt::Debug>","internal::Needed","number::Endianness","error::ErrorKind","error::VerboseError","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::one_of(p0);
+crate::character::complete::one_of(p0);
+crate::character::complete::one_of(p0);
-----------------
src/character/complete.rs character::complete::none_of
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::none_of":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"],"T":["std::marker::Sized","traits::FindToken"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::none_of":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","error::ErrorKind","<*mut T as std::fmt::Debug>","error::VerboseError","internal::Needed","number::Endianness","error::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::none_of(p0);
+crate::character::complete::none_of(p0);
+crate::character::complete::none_of(p0);
-----------------
src/character/complete.rs character::complete::crlf
deps:{"character::complete::crlf":{"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized","traits::Compare"]},"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"character::complete::crlf":{"E":["error::Error","error::VerboseError"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","internal::Err","error::VerboseError","internal::Needed","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::crlf(p0);
+crate::character::complete::crlf(p0);
+crate::character::complete::crlf(p0);
-----------------
src/character/complete.rs character::complete::not_line_ending
deps:{"character::complete::not_line_ending":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Compare","std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::not_line_ending":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","internal::Err","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","error::Error","error::VerboseErrorKind","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::not_line_ending(p0);
+crate::character::complete::not_line_ending(p0);
+crate::character::complete::not_line_ending(p0);
-----------------
src/character/complete.rs character::complete::line_ending
deps:{"character::complete::line_ending":{"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input","traits::Compare","traits::InputLength"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::complete::line_ending":{"E":["error::VerboseError","error::Error"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","error::Error","error::VerboseErrorKind","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::line_ending(p0);
+crate::character::complete::line_ending(p0);
+crate::character::complete::line_ending(p0);
-----------------
src/character/complete.rs character::complete::newline
deps:{"character::complete::newline":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::complete::newline":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","error::Error","number::Endianness","error::ErrorKind","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+character::complete::newline(p0);
+crate::character::complete::newline(p0);
+crate::character::complete::newline(p0);
-----------------
src/character/complete.rs character::complete::tab
deps:{"<*const T as std::fmt::Debug>":{},"character::complete::tab":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::complete::tab":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","error::ErrorKind","number::Endianness","internal::Needed","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+character::complete::tab(p0);
+crate::character::complete::tab(p0);
+crate::character::complete::tab(p0);
-----------------
src/character/complete.rs character::complete::anychar
deps:{"character::complete::anychar":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"character::complete::anychar":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::Error","internal::Needed","error::VerboseError","internal::Err","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::anychar(p0);
+crate::character::complete::anychar(p0);
+crate::character::complete::anychar(p0);
-----------------
src/character/complete.rs character::complete::alpha0
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::alpha0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::alpha0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::Error","number::Endianness","<*mut T as std::fmt::Debug>","internal::Needed","internal::Err","error::VerboseError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::alpha0(p0);
+crate::character::complete::alpha0(p0);
+crate::character::complete::alpha0(p0);
-----------------
src/character/complete.rs character::complete::alpha1
deps:{"character::complete::alpha1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"character::complete::alpha1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::VerboseError","number::Endianness","internal::Needed","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::alpha1(p0);
+crate::character::complete::alpha1(p0);
+crate::character::complete::alpha1(p0);
-----------------
src/character/complete.rs character::complete::digit0
deps:{"character::complete::digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::digit0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","internal::Needed","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","error::VerboseError","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::digit0(p0);
+crate::character::complete::digit0(p0);
+crate::character::complete::digit0(p0);
-----------------
src/character/complete.rs character::complete::digit1
deps:{"character::complete::digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::digit1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","internal::Err","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::digit1(p0);
+crate::character::complete::digit1(p0);
+crate::character::complete::digit1(p0);
-----------------
src/character/complete.rs character::complete::hex_digit0
deps:{"<*const T as std::fmt::Debug>":{},"character::complete::hex_digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::complete::hex_digit0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","error::Error","internal::Err","internal::Needed","error::VerboseErrorKind","error::ErrorKind","<*const T as std::fmt::Debug>","number::Endianness"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::hex_digit0(p0);
+crate::character::complete::hex_digit0(p0);
+crate::character::complete::hex_digit0(p0);
-----------------
src/character/complete.rs character::complete::hex_digit1
deps:{"character::complete::hex_digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::hex_digit1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::ErrorKind","internal::Needed","error::VerboseError","error::VerboseErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::hex_digit1(p0);
+crate::character::complete::hex_digit1(p0);
+crate::character::complete::hex_digit1(p0);
-----------------
src/character/complete.rs character::complete::oct_digit0
deps:{"character::complete::oct_digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::oct_digit0":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","error::VerboseError","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind","number::Endianness","internal::Needed","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::oct_digit0(p0);
+crate::character::complete::oct_digit0(p0);
+crate::character::complete::oct_digit0(p0);
-----------------
src/character/complete.rs character::complete::oct_digit1
deps:{"character::complete::oct_digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"character::complete::oct_digit1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::Error","internal::Err","error::VerboseErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::oct_digit1(p0);
+crate::character::complete::oct_digit1(p0);
+crate::character::complete::oct_digit1(p0);
-----------------
src/character/complete.rs character::complete::alphanumeric0
deps:{"<*const T as std::fmt::Debug>":{},"character::complete::alphanumeric0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::complete::alphanumeric0":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","<*const T as std::fmt::Debug>","number::Endianness","error::VerboseErrorKind","error::Error","error::VerboseError","internal::Err","internal::Needed"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::alphanumeric0(p0);
+crate::character::complete::alphanumeric0(p0);
+crate::character::complete::alphanumeric0(p0);
-----------------
src/character/complete.rs character::complete::alphanumeric1
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::alphanumeric1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::alphanumeric1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::Error","<*const T as std::fmt::Debug>","number::Endianness","internal::Err","error::VerboseErrorKind","internal::Needed","error::VerboseError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::alphanumeric1(p0);
+crate::character::complete::alphanumeric1(p0);
+crate::character::complete::alphanumeric1(p0);
-----------------
src/character/complete.rs character::complete::space0
deps:{"character::complete::space0":{"<T as traits::Input>::Item":["std::clone::Clone","traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::space0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","error::VerboseErrorKind","internal::Err","error::Error","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::space0(p0);
+crate::character::complete::space0(p0);
+crate::character::complete::space0(p0);
-----------------
src/character/complete.rs character::complete::space1
deps:{"character::complete::space1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::space1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::Error","error::ErrorKind","error::VerboseErrorKind","internal::Err","number::Endianness","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::space1(p0);
+crate::character::complete::space1(p0);
+crate::character::complete::space1(p0);
-----------------
src/character/complete.rs character::complete::multispace0
deps:{"character::complete::multispace0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"character::complete::multispace0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","error::Error","number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Err","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::multispace0(p0);
+crate::character::complete::multispace0(p0);
+crate::character::complete::multispace0(p0);
-----------------
src/character/complete.rs character::complete::multispace1
deps:{"<*const T as std::fmt::Debug>":{},"character::complete::multispace1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::complete::multispace1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness","error::VerboseErrorKind","internal::Needed","error::Error","error::ErrorKind","error::VerboseError","internal::Err"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::multispace1(p0);
+crate::character::complete::multispace1(p0);
+crate::character::complete::multispace1(p0);
-----------------
src/character/complete.rs character::complete::sign
deps:{"character::complete::sign":{"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized","traits::Compare","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::complete::sign":{"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::Error","error::VerboseError","internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::ErrorKind","internal::Err","error::VerboseErrorKind","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::sign(p0);
+crate::character::complete::sign(p0);
+crate::character::complete::sign(p0);
-----------------
src/character/complete.rs character::complete::i8
deps:{"character::complete::i8":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","traits::Compare","std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::complete::i8":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","internal::Err","number::Endianness","internal::Needed","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::i8(p0);
+crate::character::complete::i8(p0);
+crate::character::complete::i8(p0);
-----------------
src/character/complete.rs character::complete::i16
deps:{"<*const T as std::fmt::Debug>":{},"character::complete::i16":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized","std::clone::Clone","traits::Compare"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::complete::i16":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","internal::Needed","error::Error","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","internal::Err","error::VerboseError"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::i16(p0);
+crate::character::complete::i16(p0);
+crate::character::complete::i16(p0);
-----------------
src/character/complete.rs character::complete::i32
deps:{"character::complete::i32":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::clone::Clone","traits::Compare","traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"character::complete::i32":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","error::VerboseError","number::Endianness","error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::i32(p0);
+crate::character::complete::i32(p0);
+crate::character::complete::i32(p0);
-----------------
src/character/complete.rs character::complete::i64
deps:{"<*mut T as std::fmt::Debug>":{},"character::complete::i64":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone","traits::Compare","traits::Input"]},"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::complete::i64":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Err","error::VerboseError","error::VerboseErrorKind","internal::Needed","number::Endianness","error::ErrorKind","<*mut T as std::fmt::Debug>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::i64(p0);
+crate::character::complete::i64(p0);
+crate::character::complete::i64(p0);
-----------------
src/character/complete.rs character::complete::i128
deps:{"character::complete::i128":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input","traits::Compare","std::clone::Clone"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"character::complete::i128":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","internal::Err","error::ErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::i128(p0);
+crate::character::complete::i128(p0);
+crate::character::complete::i128(p0);
-----------------
src/character/complete.rs character::complete::u8
deps:{"character::complete::u8":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::complete::u8":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::Error","internal::Needed","error::VerboseError","number::Endianness","error::ErrorKind","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::u8(p0);
+crate::character::complete::u8(p0);
+crate::character::complete::u8(p0);
-----------------
src/character/complete.rs character::complete::u16
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::u16":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::complete::u16":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","<*const T as std::fmt::Debug>","error::ErrorKind","error::Error","internal::Needed","number::Endianness","error::VerboseError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::u16(p0);
+crate::character::complete::u16(p0);
+crate::character::complete::u16(p0);
-----------------
src/character/complete.rs character::complete::u32
deps:{"character::complete::u32":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::complete::u32":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::Error","internal::Err","error::ErrorKind","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::u32(p0);
+crate::character::complete::u32(p0);
+crate::character::complete::u32(p0);
-----------------
src/character/complete.rs character::complete::u64
deps:{"character::complete::u64":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"character::complete::u64":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::VerboseErrorKind","internal::Err","error::ErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::u64(p0);
+crate::character::complete::u64(p0);
+crate::character::complete::u64(p0);
-----------------
src/character/complete.rs character::complete::u128
deps:{"character::complete::u128":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"character::complete::u128":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","error::VerboseError","internal::Needed","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::complete::u128(p0);
+crate::character::complete::u128(p0);
+crate::character::complete::u128(p0);
-----------------
src/character/streaming.rs character::streaming::char
deps:{"character::streaming::char":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::char":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","internal::Err","error::Error","internal::Needed","number::Endianness","error::VerboseErrorKind","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = 'a'; // None+char
+character::streaming::char(p0);
+crate::character::streaming::char(p0);
+crate::character::streaming::char(p0);
-----------------
src/character/streaming.rs character::streaming::satisfy
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::satisfy":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","std::ops::Fn"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::satisfy":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"F":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"],"I":[]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Err","internal::Needed","number::Endianness","<*const T as std::fmt::Debug>","error::VerboseError","error::ErrorKind","error::VerboseErrorKind"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+character::streaming::satisfy(p0);
+crate::character::streaming::satisfy(p0);
+crate::character::streaming::satisfy(p0);
-----------------
src/character/streaming.rs character::streaming::one_of
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::one_of":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"T":["std::marker::Sized","traits::FindToken"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::one_of":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","internal::Err","number::Endianness","<*mut T as std::fmt::Debug>","error::VerboseErrorKind","error::ErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::one_of(p0);
+crate::character::streaming::one_of(p0);
+crate::character::streaming::one_of(p0);
-----------------
src/character/streaming.rs character::streaming::none_of
deps:{"character::streaming::none_of":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"T":["traits::FindToken","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::none_of":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::Error","error::VerboseErrorKind","error::ErrorKind","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::none_of(p0);
+crate::character::streaming::none_of(p0);
+crate::character::streaming::none_of(p0);
-----------------
src/character/streaming.rs character::streaming::crlf
deps:{"character::streaming::crlf":{"E":["std::marker::Sized","error::ParseError"],"T":["traits::Compare","std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::crlf":{"E":["error::Error","error::VerboseError"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","internal::Err","error::ErrorKind","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::crlf(p0);
+crate::character::streaming::crlf(p0);
+crate::character::streaming::crlf(p0);
-----------------
src/character/streaming.rs character::streaming::not_line_ending
deps:{"character::streaming::not_line_ending":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input","traits::Compare"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"character::streaming::not_line_ending":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::Error","internal::Needed","error::VerboseError","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::not_line_ending(p0);
+crate::character::streaming::not_line_ending(p0);
+crate::character::streaming::not_line_ending(p0);
-----------------
src/character/streaming.rs character::streaming::line_ending
deps:{"<*const T as std::fmt::Debug>":{},"character::streaming::line_ending":{"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized","traits::Compare"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::streaming::line_ending":{"E":["error::Error","error::VerboseError"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","error::Error","error::VerboseErrorKind","internal::Needed","<*const T as std::fmt::Debug>","internal::Err","error::ErrorKind"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::line_ending(p0);
+crate::character::streaming::line_ending(p0);
+crate::character::streaming::line_ending(p0);
-----------------
src/character/streaming.rs character::streaming::newline
deps:{"character::streaming::newline":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::newline":{"<I as traits::Input>::Item":[],"Error":["error::Error","error::VerboseError"],"I":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::Error","error::ErrorKind","error::VerboseErrorKind","number::Endianness","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+character::streaming::newline(p0);
+crate::character::streaming::newline(p0);
+crate::character::streaming::newline(p0);
-----------------
src/character/streaming.rs character::streaming::tab
deps:{"<*const T as std::fmt::Debug>":{},"character::streaming::tab":{"<I as traits::Input>::Item":["traits::AsChar"],"Error":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::streaming::tab":{"<I as traits::Input>::Item":[],"Error":["error::VerboseError","error::Error"],"I":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","error::ErrorKind","internal::Err","<*const T as std::fmt::Debug>","number::Endianness","error::Error","internal::Needed"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+character::streaming::tab(p0);
+crate::character::streaming::tab(p0);
+crate::character::streaming::tab(p0);
-----------------
src/character/streaming.rs character::streaming::anychar
deps:{"character::streaming::anychar":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"character::streaming::anychar":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","error::VerboseErrorKind","internal::Err","number::Endianness","error::VerboseError","error::ErrorKind","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::anychar(p0);
+crate::character::streaming::anychar(p0);
+crate::character::streaming::anychar(p0);
-----------------
src/character/streaming.rs character::streaming::alpha0
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::alpha0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::alpha0":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Needed","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","number::Endianness","internal::Err","<*const T as std::fmt::Debug>","error::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::alpha0(p0);
+crate::character::streaming::alpha0(p0);
+crate::character::streaming::alpha0(p0);
-----------------
src/character/streaming.rs character::streaming::alpha1
deps:{"character::streaming::alpha1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::alpha1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","internal::Needed","error::Error","error::VerboseError","internal::Err","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::alpha1(p0);
+crate::character::streaming::alpha1(p0);
+crate::character::streaming::alpha1(p0);
-----------------
src/character/streaming.rs character::streaming::digit0
deps:{"character::streaming::digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::digit0":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["internal::Err","error::VerboseError","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","error::ErrorKind","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::digit0(p0);
+crate::character::streaming::digit0(p0);
+crate::character::streaming::digit0(p0);
-----------------
src/character/streaming.rs character::streaming::digit1
deps:{"character::streaming::digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::digit1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","error::VerboseErrorKind","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::Error","internal::Needed","internal::Err"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::digit1(p0);
+crate::character::streaming::digit1(p0);
+crate::character::streaming::digit1(p0);
-----------------
src/character/streaming.rs character::streaming::hex_digit0
deps:{"character::streaming::hex_digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::hex_digit0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::hex_digit0(p0);
+crate::character::streaming::hex_digit0(p0);
+crate::character::streaming::hex_digit0(p0);
-----------------
src/character/streaming.rs character::streaming::hex_digit1
deps:{"character::streaming::hex_digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::hex_digit1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","error::VerboseError","error::ErrorKind","error::VerboseErrorKind","internal::Needed","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::hex_digit1(p0);
+crate::character::streaming::hex_digit1(p0);
+crate::character::streaming::hex_digit1(p0);
-----------------
src/character/streaming.rs character::streaming::oct_digit0
deps:{"character::streaming::oct_digit0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::oct_digit0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","internal::Needed","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::Error","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::oct_digit0(p0);
+crate::character::streaming::oct_digit0(p0);
+crate::character::streaming::oct_digit0(p0);
-----------------
src/character/streaming.rs character::streaming::oct_digit1
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::oct_digit1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::oct_digit1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","error::ErrorKind","error::Error","<*mut T as std::fmt::Debug>","internal::Err","error::VerboseError","internal::Needed","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::oct_digit1(p0);
+crate::character::streaming::oct_digit1(p0);
+crate::character::streaming::oct_digit1(p0);
-----------------
src/character/streaming.rs character::streaming::alphanumeric0
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::alphanumeric0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::alphanumeric0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::Error","internal::Err","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","<*mut T as std::fmt::Debug>","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::alphanumeric0(p0);
+crate::character::streaming::alphanumeric0(p0);
+crate::character::streaming::alphanumeric0(p0);
-----------------
src/character/streaming.rs character::streaming::alphanumeric1
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::alphanumeric1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::alphanumeric1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseError","error::Error","error::VerboseErrorKind","number::Endianness","internal::Needed"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::alphanumeric1(p0);
+crate::character::streaming::alphanumeric1(p0);
+crate::character::streaming::alphanumeric1(p0);
-----------------
src/character/streaming.rs character::streaming::space0
deps:{"character::streaming::space0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::space0":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseError","internal::Err","error::Error","error::ErrorKind","number::Endianness","internal::Needed","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::space0(p0);
+crate::character::streaming::space0(p0);
+crate::character::streaming::space0(p0);
-----------------
src/character/streaming.rs character::streaming::space1
deps:{"character::streaming::space1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"character::streaming::space1":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Err","internal::Needed","number::Endianness","error::ErrorKind","error::VerboseError","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::space1(p0);
+crate::character::streaming::space1(p0);
+crate::character::streaming::space1(p0);
-----------------
src/character/streaming.rs character::streaming::multispace0
deps:{"character::streaming::multispace0":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::multispace0":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","error::ErrorKind","internal::Err","internal::Needed","error::Error","error::VerboseError","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::multispace0(p0);
+crate::character::streaming::multispace0(p0);
+crate::character::streaming::multispace0(p0);
-----------------
src/character/streaming.rs character::streaming::multispace1
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::multispace1":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::multispace1":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","internal::Needed","error::Error","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseError","number::Endianness","internal::Err"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::multispace1(p0);
+crate::character::streaming::multispace1(p0);
+crate::character::streaming::multispace1(p0);
-----------------
src/character/streaming.rs character::streaming::sign
deps:{"character::streaming::sign":{"E":["error::ParseError","std::marker::Sized"],"T":["std::clone::Clone","std::marker::Sized","traits::Input","traits::Compare"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"character::streaming::sign":{"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::Error","internal::Needed","error::VerboseError","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::sign(p0);
+crate::character::streaming::sign(p0);
+crate::character::streaming::sign(p0);
-----------------
src/character/streaming.rs character::streaming::i8
deps:{"character::streaming::i8":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Compare","std::clone::Clone","std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"character::streaming::i8":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","number::Endianness","error::VerboseError","error::ErrorKind","internal::Needed","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::i8(p0);
+crate::character::streaming::i8(p0);
+crate::character::streaming::i8(p0);
-----------------
src/character/streaming.rs character::streaming::i16
deps:{"character::streaming::i16":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Compare","traits::Input","std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::i16":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::Error","error::VerboseError","error::ErrorKind","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::i16(p0);
+crate::character::streaming::i16(p0);
+crate::character::streaming::i16(p0);
-----------------
src/character/streaming.rs character::streaming::i32
deps:{"character::streaming::i32":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Compare","std::clone::Clone","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::i32":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Err","internal::Needed","error::Error","error::VerboseError","number::Endianness","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::i32(p0);
+crate::character::streaming::i32(p0);
+crate::character::streaming::i32(p0);
-----------------
src/character/streaming.rs character::streaming::i64
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::i64":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Compare","traits::Input","std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"character::streaming::i64":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","error::ErrorKind","number::Endianness","internal::Err","internal::Needed","error::VerboseError","error::VerboseErrorKind","error::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::i64(p0);
+crate::character::streaming::i64(p0);
+crate::character::streaming::i64(p0);
-----------------
src/character/streaming.rs character::streaming::i128
deps:{"character::streaming::i128":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","traits::Compare","std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::i128":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::Error","error::ErrorKind","number::Endianness","internal::Err","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::i128(p0);
+crate::character::streaming::i128(p0);
+crate::character::streaming::i128(p0);
-----------------
src/character/streaming.rs character::streaming::u8
deps:{"<*const T as std::fmt::Debug>":{},"character::streaming::u8":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::streaming::u8":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::Error","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::u8(p0);
+crate::character::streaming::u8(p0);
+crate::character::streaming::u8(p0);
-----------------
src/character/streaming.rs character::streaming::u16
deps:{"<*const T as std::fmt::Debug>":{},"character::streaming::u16":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Input"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::streaming::u16":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","<*const T as std::fmt::Debug>","error::ErrorKind","number::Endianness","internal::Needed","error::VerboseError","error::Error","internal::Err"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::u16(p0);
+crate::character::streaming::u16(p0);
+crate::character::streaming::u16(p0);
-----------------
src/character/streaming.rs character::streaming::u32
deps:{"<*mut T as std::fmt::Debug>":{},"character::streaming::u32":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"character::streaming::u32":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","internal::Needed","error::VerboseErrorKind","error::VerboseError","error::ErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::u32(p0);
+crate::character::streaming::u32(p0);
+crate::character::streaming::u32(p0);
-----------------
src/character/streaming.rs character::streaming::u64
deps:{"character::streaming::u64":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"character::streaming::u64":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","error::ErrorKind","error::VerboseErrorKind","internal::Err","internal::Needed","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::u64(p0);
+crate::character::streaming::u64(p0);
+crate::character::streaming::u64(p0);
-----------------
src/character/streaming.rs character::streaming::u128
deps:{"<*const T as std::fmt::Debug>":{},"character::streaming::u128":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"character::streaming::u128":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","error::Error","number::Endianness","<*const T as std::fmt::Debug>","error::VerboseErrorKind","internal::Needed","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+character::streaming::u128(p0);
+crate::character::streaming::u128(p0);
+crate::character::streaming::u128(p0);
-----------------
src/character/mod.rs character::is_alphabetic
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_alphabetic(p0);
+crate::character::is_alphabetic(p0);
+crate::character::is_alphabetic(p0);
-----------------
src/character/mod.rs character::is_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_digit(p0);
+crate::character::is_digit(p0);
+crate::character::is_digit(p0);
-----------------
src/character/mod.rs character::is_hex_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_hex_digit(p0);
+crate::character::is_hex_digit(p0);
+crate::character::is_hex_digit(p0);
-----------------
src/character/mod.rs character::is_oct_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_oct_digit(p0);
+crate::character::is_oct_digit(p0);
+crate::character::is_oct_digit(p0);
-----------------
src/character/mod.rs character::is_alphanumeric
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_alphanumeric(p0);
+crate::character::is_alphanumeric(p0);
+crate::character::is_alphanumeric(p0);
-----------------
src/character/mod.rs character::is_space
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_space(p0);
+crate::character::is_space(p0);
+crate::character::is_space(p0);
-----------------
src/character/mod.rs character::is_newline
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+character::is_newline(p0);
+crate::character::is_newline(p0);
+crate::character::is_newline(p0);
-----------------
src/number/complete.rs number::complete::be_u8
deps:{"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"number::complete::be_u8":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","number::Endianness","error::VerboseErrorKind","error::ErrorKind","internal::Needed"]},"number::complete::be_u8":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u8(p0);
+crate::number::complete::be_u8(p0);
+crate::number::complete::be_u8(p0);
-----------------
src/number/complete.rs number::complete::be_u16
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"number::complete::be_u16":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","internal::Err","error::VerboseError","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","internal::Needed"]},"number::complete::be_u16":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u16(p0);
+crate::number::complete::be_u16(p0);
+crate::number::complete::be_u16(p0);
-----------------
src/number/complete.rs number::complete::be_u24
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"number::complete::be_u24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","error::Error","internal::Err","<*mut T as std::fmt::Debug>","error::ErrorKind","error::VerboseErrorKind","number::Endianness","internal::Needed"]},"number::complete::be_u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u24(p0);
+crate::number::complete::be_u24(p0);
+crate::number::complete::be_u24(p0);
-----------------
src/number/complete.rs number::complete::be_u32
deps:{"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"number::complete::be_u32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::ErrorKind","error::VerboseErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseError","error::Error"]},"number::complete::be_u32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u32(p0);
+crate::number::complete::be_u32(p0);
+crate::number::complete::be_u32(p0);
-----------------
src/number/complete.rs number::complete::be_u64
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"number::complete::be_u64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","error::Error","internal::Err","<*const T as std::fmt::Debug>","number::Endianness","internal::Needed","error::ErrorKind"]},"number::complete::be_u64":{"E":["error::Error","error::VerboseError"],"I":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u64(p0);
+crate::number::complete::be_u64(p0);
+crate::number::complete::be_u64(p0);
-----------------
src/number/complete.rs number::complete::be_u128
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"number::complete::be_u128":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Needed","error::VerboseErrorKind","internal::Err","error::VerboseError","error::Error","number::Endianness","error::ErrorKind","<*const T as std::fmt::Debug>"]},"number::complete::be_u128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_u128(p0);
+crate::number::complete::be_u128(p0);
+crate::number::complete::be_u128(p0);
-----------------
src/number/complete.rs number::complete::be_uint
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"number::complete::be_uint":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"Uint":["std::convert::From","std::ops::Shl","std::ops::Add","std::marker::Sized","std::default::Default"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","<*mut T as std::fmt::Debug>","internal::Needed","error::VerboseError","error::Error","error::VerboseErrorKind","number::Endianness","internal::Err"]},"number::complete::be_uint":{"E":["error::Error","error::VerboseError"],"I":[],"Uint":["std::num::Wrapping<u16>","std::num::Wrapping<isize>","std::num::Wrapping<i32>","std::simd::Mask<i16, LANES>","std::num::Wrapping<usize>","std::boxed::Box<std::ffi::OsStr>","std::num::Wrapping<i64>","std::num::NonZeroU128","std::num::Saturating<i16>","std::num::Wrapping<u8>","std::num::Saturating<isize>","std::num::Wrapping<u64>","std::num::Saturating<u8>","std::num::Saturating<u128>","std::num::Wrapping<u128>","std::num::Saturating<i32>","std::num::Saturating<u64>","std::simd::Mask<i32, LANES>","std::num::Wrapping<i128>","std::simd::Mask<i64, LANES>","std::num::Saturating<u32>","std::simd::Mask<isize, LANES>","std::num::Wrapping<u32>","std::num::NonZeroI32","std::num::Wrapping<i8>","std::num::Saturating<i8>","std::boxed::Box<[T]>","std::num::Saturating<u16>","std::num::Saturating<usize>","std::num::Saturating<i128>","std::num::Saturating<i64>","std::boxed::Box<str>","std::boxed::Box<std::ffi::CStr>","std::simd::Mask<i8, LANES>","std::num::Wrapping<i16>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 0usize; // None+usize
+number::complete::be_uint(p0, p1);
+crate::number::complete::be_uint(p0, p1);
+crate::number::complete::be_uint(p0, p1);
-----------------
src/number/complete.rs number::complete::be_i8
deps:{"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"number::complete::be_i8":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","number::Endianness","error::VerboseErrorKind","error::VerboseError","internal::Needed","error::ErrorKind","error::Error","internal::Err"]},"number::complete::be_i8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i8(p0);
+crate::number::complete::be_i8(p0);
+crate::number::complete::be_i8(p0);
-----------------
src/number/complete.rs number::complete::be_i16
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"number::complete::be_i16":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","<*const T as std::fmt::Debug>","internal::Needed","number::Endianness","internal::Err"]},"number::complete::be_i16":{"E":["error::Error","error::VerboseError"],"I":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i16(p0);
+crate::number::complete::be_i16(p0);
+crate::number::complete::be_i16(p0);
-----------------
src/number/complete.rs number::complete::be_i24
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"number::complete::be_i24":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","number::Endianness","internal::Err","internal::Needed","error::VerboseError"]},"number::complete::be_i24":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i24(p0);
+crate::number::complete::be_i24(p0);
+crate::number::complete::be_i24(p0);
-----------------
src/number/complete.rs number::complete::be_i32
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"number::complete::be_i32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Needed","error::Error","number::Endianness","error::VerboseErrorKind","internal::Err","error::VerboseError","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"number::complete::be_i32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i32(p0);
+crate::number::complete::be_i32(p0);
+crate::number::complete::be_i32(p0);
-----------------
src/number/complete.rs number::complete::be_i64
deps:{"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"number::complete::be_i64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","internal::Err","error::Error","error::VerboseError","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed"]},"number::complete::be_i64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i64(p0);
+crate::number::complete::be_i64(p0);
+crate::number::complete::be_i64(p0);
-----------------
src/number/complete.rs number::complete::be_i128
deps:{"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"number::complete::be_i128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","error::Error","internal::Needed","number::Endianness"]},"number::complete::be_i128":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_i128(p0);
+crate::number::complete::be_i128(p0);
+crate::number::complete::be_i128(p0);
-----------------
src/number/complete.rs number::complete::le_u8
deps:{"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"number::complete::le_u8":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err","error::VerboseErrorKind","error::Error","number::Endianness","error::ErrorKind","error::VerboseError","internal::Needed"]},"number::complete::le_u8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u8(p0);
+crate::number::complete::le_u8(p0);
+crate::number::complete::le_u8(p0);
-----------------
src/number/complete.rs number::complete::le_u16
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"number::complete::le_u16":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","internal::Needed","error::Error","number::Endianness","error::ErrorKind","error::VerboseError"]},"number::complete::le_u16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u16(p0);
+crate::number::complete::le_u16(p0);
+crate::number::complete::le_u16(p0);
-----------------
src/number/complete.rs number::complete::le_u24
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"number::complete::le_u24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::VerboseErrorKind","error::Error","error::ErrorKind","<*mut T as std::fmt::Debug>","error::VerboseError","number::Endianness","internal::Err"]},"number::complete::le_u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u24(p0);
+crate::number::complete::le_u24(p0);
+crate::number::complete::le_u24(p0);
-----------------
src/number/complete.rs number::complete::le_u32
deps:{"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"number::complete::le_u32":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::VerboseError","error::ErrorKind","internal::Err","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","number::Endianness","internal::Needed","error::Error"]},"number::complete::le_u32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u32(p0);
+crate::number::complete::le_u32(p0);
+crate::number::complete::le_u32(p0);
-----------------
src/number/complete.rs number::complete::le_u64
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"number::complete::le_u64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::Error","error::VerboseErrorKind","internal::Err","error::VerboseError","internal::Needed","error::ErrorKind","<*mut T as std::fmt::Debug>"]},"number::complete::le_u64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u64(p0);
+crate::number::complete::le_u64(p0);
+crate::number::complete::le_u64(p0);
-----------------
src/number/complete.rs number::complete::le_u128
deps:{"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"number::complete::le_u128":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","number::Endianness","error::VerboseErrorKind","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","error::VerboseError"]},"number::complete::le_u128":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_u128(p0);
+crate::number::complete::le_u128(p0);
+crate::number::complete::le_u128(p0);
-----------------
src/number/complete.rs number::complete::le_uint
deps:{"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"number::complete::le_uint":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"Uint":["std::marker::Sized","std::default::Default","std::convert::From","std::ops::Shl","std::ops::Add"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","internal::Err","internal::Needed","error::VerboseError","error::VerboseErrorKind"]},"number::complete::le_uint":{"E":["error::VerboseError","error::Error"],"I":[],"Uint":["std::num::Wrapping<u32>","std::simd::Mask<i32, LANES>","std::num::Saturating<i16>","std::simd::Mask<i64, LANES>","std::boxed::Box<str>","std::num::Saturating<u128>","std::num::Saturating<u32>","std::num::Saturating<u8>","std::simd::Mask<i8, LANES>","std::num::Saturating<u64>","std::num::Wrapping<u16>","std::num::Saturating<u16>","std::num::Wrapping<i16>","std::num::Wrapping<i64>","std::num::Wrapping<i32>","std::boxed::Box<std::ffi::OsStr>","std::num::Wrapping<u128>","std::boxed::Box<std::ffi::CStr>","std::num::Wrapping<usize>","std::num::Saturating<usize>","std::num::Wrapping<u8>","std::boxed::Box<[T]>","std::num::Saturating<i128>","std::num::Saturating<i8>","std::num::Saturating<i32>","std::num::Saturating<isize>","std::simd::Mask<isize, LANES>","std::num::Saturating<i64>","std::num::NonZeroU128","std::num::Wrapping<i8>","std::num::Wrapping<u64>","std::simd::Mask<i16, LANES>","std::num::NonZeroI32","std::num::Wrapping<i128>","std::num::Wrapping<isize>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 0usize; // None+usize
+number::complete::le_uint(p0, p1);
+crate::number::complete::le_uint(p0, p1);
+crate::number::complete::le_uint(p0, p1);
-----------------
src/number/complete.rs number::complete::le_i8
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"number::complete::le_i8":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","error::Error","error::VerboseError","error::ErrorKind","internal::Err","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness"]},"number::complete::le_i8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i8(p0);
+crate::number::complete::le_i8(p0);
+crate::number::complete::le_i8(p0);
-----------------
src/number/complete.rs number::complete::le_i16
deps:{"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"number::complete::le_i16":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","internal::Err","error::VerboseErrorKind","error::VerboseError","error::Error","internal::Needed","number::Endianness"]},"number::complete::le_i16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i16(p0);
+crate::number::complete::le_i16(p0);
+crate::number::complete::le_i16(p0);
-----------------
src/number/complete.rs number::complete::le_i24
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"number::complete::le_i24":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","error::ErrorKind","error::VerboseError","internal::Err","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","number::Endianness"]},"number::complete::le_i24":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i24(p0);
+crate::number::complete::le_i24(p0);
+crate::number::complete::le_i24(p0);
-----------------
src/number/complete.rs number::complete::le_i32
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"number::complete::le_i32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","internal::Needed","error::VerboseError","internal::Err","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","error::VerboseErrorKind","error::ErrorKind"]},"number::complete::le_i32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i32(p0);
+crate::number::complete::le_i32(p0);
+crate::number::complete::le_i32(p0);
-----------------
src/number/complete.rs number::complete::le_i64
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"number::complete::le_i64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError","internal::Needed","number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::Error"]},"number::complete::le_i64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i64(p0);
+crate::number::complete::le_i64(p0);
+crate::number::complete::le_i64(p0);
-----------------
src/number/complete.rs number::complete::le_i128
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"number::complete::le_i128":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseErrorKind","error::ErrorKind","error::VerboseError","number::Endianness","error::Error","<*mut T as std::fmt::Debug>","internal::Err","internal::Needed"]},"number::complete::le_i128":{"E":["error::Error","error::VerboseError"],"I":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_i128(p0);
+crate::number::complete::le_i128(p0);
+crate::number::complete::le_i128(p0);
-----------------
src/number/complete.rs number::complete::u8
deps:{"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"number::complete::u8":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","error::Error","number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed"]},"number::complete::u8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::u8(p0);
+crate::number::complete::u8(p0);
+crate::number::complete::u8(p0);
-----------------
src/number/complete.rs number::complete::u16
deps:{"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"number::complete::u16":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::Error","internal::Needed","error::ErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","error::VerboseError","internal::Err"]},"number::complete::u16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::u16(p0);
+crate::number::complete::u16(p0);
+crate::number::complete::u16(p0);
-----------------
src/number/complete.rs number::complete::u24
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"number::complete::u24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","internal::Needed","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseErrorKind","internal::Err","number::Endianness","error::VerboseError"]},"number::complete::u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::u24(p0);
+crate::number::complete::u24(p0);
+crate::number::complete::u24(p0);
-----------------
src/number/complete.rs number::complete::u32
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"number::complete::u32":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","internal::Err","internal::Needed","error::VerboseError","error::VerboseErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"number::complete::u32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::u32(p0);
+crate::number::complete::u32(p0);
+crate::number::complete::u32(p0);
-----------------
src/number/complete.rs number::complete::u64
deps:{"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"number::complete::u64":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::VerboseError","error::Error","error::ErrorKind","number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"number::complete::u64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::u64(p0);
+crate::number::complete::u64(p0);
+crate::number::complete::u64(p0);
-----------------
src/number/complete.rs number::complete::u128
deps:{"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"number::complete::u128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::ErrorKind","internal::Needed","error::VerboseErrorKind"]},"number::complete::u128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::u128(p0);
+crate::number::complete::u128(p0);
+crate::number::complete::u128(p0);
-----------------
src/number/complete.rs number::complete::i8
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"number::complete::i8":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness","internal::Err","error::Error","error::ErrorKind","error::VerboseError","error::VerboseErrorKind"]},"number::complete::i8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::i8(p0);
+crate::number::complete::i8(p0);
+crate::number::complete::i8(p0);
-----------------
src/number/complete.rs number::complete::i16
deps:{"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"number::complete::i16":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::Error","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Err","error::ErrorKind","internal::Needed"]},"number::complete::i16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::i16(p0);
+crate::number::complete::i16(p0);
+crate::number::complete::i16(p0);
-----------------
src/number/complete.rs number::complete::i24
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"number::complete::i24":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","error::ErrorKind","internal::Needed","internal::Err","error::VerboseErrorKind","number::Endianness"]},"number::complete::i24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::i24(p0);
+crate::number::complete::i24(p0);
+crate::number::complete::i24(p0);
-----------------
src/number/complete.rs number::complete::i32
deps:{"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"number::complete::i32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseErrorKind","internal::Err","internal::Needed","error::Error","error::ErrorKind","error::VerboseError","number::Endianness"]},"number::complete::i32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::i32(p0);
+crate::number::complete::i32(p0);
+crate::number::complete::i32(p0);
-----------------
src/number/complete.rs number::complete::i64
deps:{"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"number::complete::i64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::VerboseErrorKind","error::ErrorKind","error::Error"]},"number::complete::i64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::i64(p0);
+crate::number::complete::i64(p0);
+crate::number::complete::i64(p0);
-----------------
src/number/complete.rs number::complete::i128
deps:{"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"number::complete::i128":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::Error","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","internal::Needed","error::ErrorKind","error::VerboseErrorKind","internal::Err"]},"number::complete::i128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::i128(p0);
+crate::number::complete::i128(p0);
+crate::number::complete::i128(p0);
-----------------
src/number/complete.rs number::complete::be_f32
deps:{"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"number::complete::be_f32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","error::Error","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","internal::Err","number::Endianness"]},"number::complete::be_f32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_f32(p0);
+crate::number::complete::be_f32(p0);
+crate::number::complete::be_f32(p0);
-----------------
src/number/complete.rs number::complete::be_f64
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"number::complete::be_f64":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","error::Error","error::VerboseErrorKind","internal::Needed","error::ErrorKind","number::Endianness","internal::Err"]},"number::complete::be_f64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::be_f64(p0);
+crate::number::complete::be_f64(p0);
+crate::number::complete::be_f64(p0);
-----------------
src/number/complete.rs number::complete::le_f32
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"number::complete::le_f32":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","internal::Needed","error::ErrorKind","error::VerboseError","number::Endianness","error::VerboseErrorKind"]},"number::complete::le_f32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_f32(p0);
+crate::number::complete::le_f32(p0);
+crate::number::complete::le_f32(p0);
-----------------
src/number/complete.rs number::complete::le_f64
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"number::complete::le_f64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","error::ErrorKind","error::Error","internal::Needed","error::VerboseErrorKind","number::Endianness","internal::Err","<*mut T as std::fmt::Debug>"]},"number::complete::le_f64":{"E":["error::Error","error::VerboseError"],"I":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::le_f64(p0);
+crate::number::complete::le_f64(p0);
+crate::number::complete::le_f64(p0);
-----------------
src/number/complete.rs number::complete::f32
deps:{"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"number::complete::f32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Needed","error::VerboseErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","internal::Err","error::ErrorKind","error::VerboseError"]},"number::complete::f32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::f32(p0);
+crate::number::complete::f32(p0);
+crate::number::complete::f32(p0);
-----------------
src/number/complete.rs number::complete::f64
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"number::complete::f64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::VerboseError","number::Endianness","<*const T as std::fmt::Debug>","error::Error","error::VerboseErrorKind","error::ErrorKind"]},"number::complete::f64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::complete::f64(p0);
+crate::number::complete::f64(p0);
+crate::number::complete::f64(p0);
-----------------
src/number/complete.rs number::complete::hex_u32
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"number::complete::hex_u32":{"<I as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized","traits::AsBytes"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","internal::Needed","error::Error","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","<*mut T as std::fmt::Debug>","internal::Err"]},"number::complete::hex_u32":{"<I as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::complete::hex_u32(p0);
+crate::number::complete::hex_u32(p0);
+crate::number::complete::hex_u32(p0);
-----------------
src/number/complete.rs number::complete::recognize_float
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"number::complete::recognize_float":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","traits::Input","std::clone::Clone","traits::Offset"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","error::ErrorKind","error::Error","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","number::Endianness"]},"number::complete::recognize_float":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::complete::recognize_float(p0);
+crate::number::complete::recognize_float(p0);
+crate::number::complete::recognize_float(p0);
-----------------
src/number/complete.rs number::complete::recognize_float_or_exceptions
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"number::complete::recognize_float_or_exceptions":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","std::clone::Clone","traits::Offset","std::marker::Sized","traits::Compare"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","internal::Needed","error::VerboseError","error::ErrorKind","internal::Err"]},"number::complete::recognize_float_or_exceptions":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::complete::recognize_float_or_exceptions(p0);
+crate::number::complete::recognize_float_or_exceptions(p0);
+crate::number::complete::recognize_float_or_exceptions(p0);
-----------------
src/number/complete.rs number::complete::recognize_float_parts
deps:{"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"number::complete::recognize_float_parts":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Compare","traits::Offset","std::clone::Clone","traits::AsBytes","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","number::Endianness","error::ErrorKind","error::Error","internal::Needed","error::VerboseErrorKind"]},"number::complete::recognize_float_parts":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::complete::recognize_float_parts(p0);
+crate::number::complete::recognize_float_parts(p0);
+crate::number::complete::recognize_float_parts(p0);
-----------------
src/number/complete.rs number::complete::float
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"number::complete::float":{"<T as traits::Input>::Item":["traits::AsChar"],"<T as traits::Input>::Iter":["std::clone::Clone"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Compare","traits::Offset","traits::ParseTo","std::marker::Sized","traits::Input","traits::AsBytes","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["<*mut T as std::fmt::Debug>","internal::Err","internal::Needed","error::Error","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","number::Endianness"]},"number::complete::float":{"<T as traits::Input>::Item":[],"<T as traits::Input>::Iter":["error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","number::Endianness","error::ErrorKind","error::VerboseError","internal::Needed","error::Error"],"E":["error::Error","error::VerboseError"],"T":[]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::complete::float(p0);
+crate::number::complete::float(p0);
+crate::number::complete::float(p0);
-----------------
src/number/complete.rs number::complete::double
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"number::complete::double":{"<T as traits::Input>::Item":["traits::AsChar"],"<T as traits::Input>::Iter":["std::clone::Clone"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Offset","traits::Compare","traits::ParseTo","traits::Input","std::clone::Clone","traits::AsBytes","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","internal::Needed","error::ErrorKind","internal::Err","error::Error","error::VerboseError","number::Endianness"]},"number::complete::double":{"<T as traits::Input>::Item":[],"<T as traits::Input>::Iter":["error::VerboseError","internal::Err","number::Endianness","error::Error","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::ErrorKind"],"E":["error::Error","error::VerboseError"],"T":[]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::complete::double(p0);
+crate::number::complete::double(p0);
+crate::number::complete::double(p0);
-----------------
src/number/streaming.rs number::streaming::be_u8
deps:{"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"number::streaming::be_u8":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["number::Endianness","error::Error","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","error::ErrorKind","internal::Err","internal::Needed"]},"number::streaming::be_u8":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u8(p0);
+crate::number::streaming::be_u8(p0);
+crate::number::streaming::be_u8(p0);
-----------------
src/number/streaming.rs number::streaming::be_u16
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"number::streaming::be_u16":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Err","<*const T as std::fmt::Debug>","error::ErrorKind","internal::Needed"]},"number::streaming::be_u16":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u16(p0);
+crate::number::streaming::be_u16(p0);
+crate::number::streaming::be_u16(p0);
-----------------
src/number/streaming.rs number::streaming::be_u24
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"number::streaming::be_u24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Needed","number::Endianness","error::VerboseError","internal::Err","error::Error"]},"number::streaming::be_u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u24(p0);
+crate::number::streaming::be_u24(p0);
+crate::number::streaming::be_u24(p0);
-----------------
src/number/streaming.rs number::streaming::be_u32
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"number::streaming::be_u32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::Error","internal::Err","error::VerboseError","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"number::streaming::be_u32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u32(p0);
+crate::number::streaming::be_u32(p0);
+crate::number::streaming::be_u32(p0);
-----------------
src/number/streaming.rs number::streaming::be_u64
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"number::streaming::be_u64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseErrorKind","internal::Needed","error::ErrorKind","error::Error","internal::Err","error::VerboseError"]},"number::streaming::be_u64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u64(p0);
+crate::number::streaming::be_u64(p0);
+crate::number::streaming::be_u64(p0);
-----------------
src/number/streaming.rs number::streaming::be_u128
deps:{"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"number::streaming::be_u128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","internal::Needed","error::Error","number::Endianness","error::VerboseErrorKind","error::ErrorKind","internal::Err"]},"number::streaming::be_u128":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_u128(p0);
+crate::number::streaming::be_u128(p0);
+crate::number::streaming::be_u128(p0);
-----------------
src/number/streaming.rs number::streaming::be_uint
deps:{"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"number::streaming::be_uint":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"],"Uint":["std::ops::Shl","std::default::Default","std::marker::Sized","std::ops::Add","std::convert::From"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","number::Endianness","error::Error","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","internal::Needed"]},"number::streaming::be_uint":{"E":["error::VerboseError","error::Error"],"I":[],"Uint":["std::num::Saturating<u8>","std::boxed::Box<std::ffi::CStr>","std::simd::Mask<i64, LANES>","std::num::Saturating<i128>","std::num::Wrapping<i32>","std::simd::Mask<i8, LANES>","std::simd::Mask<i16, LANES>","std::num::Saturating<u128>","std::num::Saturating<u16>","std::num::Wrapping<i8>","std::num::Saturating<u32>","std::num::Saturating<u64>","std::num::Wrapping<i128>","std::simd::Mask<isize, LANES>","std::num::NonZeroI32","std::num::Saturating<i64>","std::num::Wrapping<i64>","std::simd::Mask<i32, LANES>","std::num::Wrapping<u32>","std::num::Saturating<i32>","std::num::Wrapping<u128>","std::num::Saturating<isize>","std::boxed::Box<str>","std::boxed::Box<std::ffi::OsStr>","std::num::Wrapping<u8>","std::num::Saturating<i16>","std::num::Wrapping<isize>","std::num::Saturating<i8>","std::boxed::Box<[T]>","std::num::Saturating<usize>","std::num::Wrapping<u16>","std::num::NonZeroU128","std::num::Wrapping<u64>","std::num::Wrapping<usize>","std::num::Wrapping<i16>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 0usize; // None+usize
+number::streaming::be_uint(p0, p1);
+crate::number::streaming::be_uint(p0, p1);
+crate::number::streaming::be_uint(p0, p1);
-----------------
src/number/streaming.rs number::streaming::be_i8
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"number::streaming::be_i8":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","internal::Err","<*const T as std::fmt::Debug>","error::ErrorKind","internal::Needed","error::Error","error::VerboseError"]},"number::streaming::be_i8":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i8(p0);
+crate::number::streaming::be_i8(p0);
+crate::number::streaming::be_i8(p0);
-----------------
src/number/streaming.rs number::streaming::be_i16
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"number::streaming::be_i16":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","<*mut T as std::fmt::Debug>","error::Error","internal::Needed","error::VerboseError","error::ErrorKind","internal::Err","number::Endianness"]},"number::streaming::be_i16":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i16(p0);
+crate::number::streaming::be_i16(p0);
+crate::number::streaming::be_i16(p0);
-----------------
src/number/streaming.rs number::streaming::be_i24
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"number::streaming::be_i24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","number::Endianness","error::VerboseErrorKind"]},"number::streaming::be_i24":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i24(p0);
+crate::number::streaming::be_i24(p0);
+crate::number::streaming::be_i24(p0);
-----------------
src/number/streaming.rs number::streaming::be_i32
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"number::streaming::be_i32":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","error::VerboseError","error::VerboseErrorKind","internal::Err","error::ErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness"]},"number::streaming::be_i32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i32(p0);
+crate::number::streaming::be_i32(p0);
+crate::number::streaming::be_i32(p0);
-----------------
src/number/streaming.rs number::streaming::be_i64
deps:{"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"number::streaming::be_i64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","error::Error","error::VerboseErrorKind","error::VerboseError","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness"]},"number::streaming::be_i64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i64(p0);
+crate::number::streaming::be_i64(p0);
+crate::number::streaming::be_i64(p0);
-----------------
src/number/streaming.rs number::streaming::be_i128
deps:{"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"number::streaming::be_i128":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","error::Error","internal::Needed"]},"number::streaming::be_i128":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_i128(p0);
+crate::number::streaming::be_i128(p0);
+crate::number::streaming::be_i128(p0);
-----------------
src/number/streaming.rs number::streaming::le_u8
deps:{"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"number::streaming::le_u8":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","error::Error","number::Endianness","internal::Needed","internal::Err","error::VerboseErrorKind","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"number::streaming::le_u8":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u8(p0);
+crate::number::streaming::le_u8(p0);
+crate::number::streaming::le_u8(p0);
-----------------
src/number/streaming.rs number::streaming::le_u16
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"number::streaming::le_u16":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::Error","internal::Err","number::Endianness","error::VerboseError","internal::Needed","<*mut T as std::fmt::Debug>","error::VerboseErrorKind"]},"number::streaming::le_u16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u16(p0);
+crate::number::streaming::le_u16(p0);
+crate::number::streaming::le_u16(p0);
-----------------
src/number/streaming.rs number::streaming::le_u24
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"number::streaming::le_u24":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::Error","error::VerboseErrorKind","number::Endianness","error::VerboseError"]},"number::streaming::le_u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u24(p0);
+crate::number::streaming::le_u24(p0);
+crate::number::streaming::le_u24(p0);
-----------------
src/number/streaming.rs number::streaming::le_u32
deps:{"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"number::streaming::le_u32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::ErrorKind","error::VerboseError","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Needed"]},"number::streaming::le_u32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u32(p0);
+crate::number::streaming::le_u32(p0);
+crate::number::streaming::le_u32(p0);
-----------------
src/number/streaming.rs number::streaming::le_u64
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"number::streaming::le_u64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","number::Endianness","error::Error","internal::Err","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed"]},"number::streaming::le_u64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u64(p0);
+crate::number::streaming::le_u64(p0);
+crate::number::streaming::le_u64(p0);
-----------------
src/number/streaming.rs number::streaming::le_u128
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"number::streaming::le_u128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Err","error::VerboseError","number::Endianness","internal::Needed","error::ErrorKind","error::VerboseErrorKind"]},"number::streaming::le_u128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_u128(p0);
+crate::number::streaming::le_u128(p0);
+crate::number::streaming::le_u128(p0);
-----------------
src/number/streaming.rs number::streaming::le_uint
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"number::streaming::le_uint":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"],"Uint":["std::convert::From","std::default::Default","std::marker::Sized","std::ops::Add","std::ops::Shl"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","internal::Needed","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err","error::Error"]},"number::streaming::le_uint":{"E":["error::Error","error::VerboseError"],"I":[],"Uint":["std::num::Saturating<i8>","std::num::Saturating<u32>","std::num::Wrapping<u32>","std::boxed::Box<[T]>","std::num::Wrapping<isize>","std::simd::Mask<i64, LANES>","std::num::Wrapping<u16>","std::num::Wrapping<u8>","std::num::NonZeroI32","std::num::Saturating<u128>","std::num::Saturating<i16>","std::simd::Mask<isize, LANES>","std::num::NonZeroU128","std::num::Saturating<u8>","std::num::Saturating<i128>","std::num::Wrapping<i128>","std::num::Wrapping<i32>","std::num::Saturating<usize>","std::simd::Mask<i16, LANES>","std::simd::Mask<i8, LANES>","std::num::Wrapping<u64>","std::boxed::Box<str>","std::num::Wrapping<u128>","std::num::Wrapping<usize>","std::boxed::Box<std::ffi::OsStr>","std::num::Wrapping<i64>","std::num::Wrapping<i16>","std::num::Saturating<u16>","std::boxed::Box<std::ffi::CStr>","std::num::Saturating<i64>","std::num::Wrapping<i8>","std::num::Saturating<u64>","std::num::Saturating<isize>","std::simd::Mask<i32, LANES>","std::num::Saturating<i32>"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 0usize; // None+usize
+number::streaming::le_uint(p0, p1);
+crate::number::streaming::le_uint(p0, p1);
+crate::number::streaming::le_uint(p0, p1);
-----------------
src/number/streaming.rs number::streaming::le_i8
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"number::streaming::le_i8":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","error::ErrorKind","error::Error","internal::Needed","number::Endianness","internal::Err","error::VerboseError"]},"number::streaming::le_i8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i8(p0);
+crate::number::streaming::le_i8(p0);
+crate::number::streaming::le_i8(p0);
-----------------
src/number/streaming.rs number::streaming::le_i16
deps:{"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"number::streaming::le_i16":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["number::Endianness","error::ErrorKind","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Err","error::Error","error::VerboseError"]},"number::streaming::le_i16":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i16(p0);
+crate::number::streaming::le_i16(p0);
+crate::number::streaming::le_i16(p0);
-----------------
src/number/streaming.rs number::streaming::le_i24
deps:{"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"number::streaming::le_i24":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","number::Endianness","error::VerboseError","error::VerboseErrorKind","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Needed","internal::Err"]},"number::streaming::le_i24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i24(p0);
+crate::number::streaming::le_i24(p0);
+crate::number::streaming::le_i24(p0);
-----------------
src/number/streaming.rs number::streaming::le_i32
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"number::streaming::le_i32":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Needed","number::Endianness","internal::Err","error::VerboseError","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseErrorKind"]},"number::streaming::le_i32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i32(p0);
+crate::number::streaming::le_i32(p0);
+crate::number::streaming::le_i32(p0);
-----------------
src/number/streaming.rs number::streaming::le_i64
deps:{"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"number::streaming::le_i64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","error::VerboseError","error::ErrorKind","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","internal::Needed","internal::Err"]},"number::streaming::le_i64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i64(p0);
+crate::number::streaming::le_i64(p0);
+crate::number::streaming::le_i64(p0);
-----------------
src/number/streaming.rs number::streaming::le_i128
deps:{"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"number::streaming::le_i128":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","error::ErrorKind","error::VerboseErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","number::Endianness","error::Error","error::VerboseError","internal::Err"]},"number::streaming::le_i128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_i128(p0);
+crate::number::streaming::le_i128(p0);
+crate::number::streaming::le_i128(p0);
-----------------
src/number/streaming.rs number::streaming::u8
deps:{"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"number::streaming::u8":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Needed","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError","error::Error","error::ErrorKind","internal::Err","number::Endianness"]},"number::streaming::u8":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::u8(p0);
+crate::number::streaming::u8(p0);
+crate::number::streaming::u8(p0);
-----------------
src/number/streaming.rs number::streaming::u16
deps:{"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"number::streaming::u16":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","internal::Needed","error::ErrorKind","internal::Err","error::Error","error::VerboseError","number::Endianness"]},"number::streaming::u16":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::u16(p0);
+crate::number::streaming::u16(p0);
+crate::number::streaming::u16(p0);
-----------------
src/number/streaming.rs number::streaming::u24
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"number::streaming::u24":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","error::ErrorKind","internal::Needed","internal::Err","error::VerboseError","error::Error"]},"number::streaming::u24":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::u24(p0);
+crate::number::streaming::u24(p0);
+crate::number::streaming::u24(p0);
-----------------
src/number/streaming.rs number::streaming::u32
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"number::streaming::u32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","error::Error","internal::Needed","error::VerboseError","internal::Err","error::VerboseErrorKind","<*const T as std::fmt::Debug>","number::Endianness"]},"number::streaming::u32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::u32(p0);
+crate::number::streaming::u32(p0);
+crate::number::streaming::u32(p0);
-----------------
src/number/streaming.rs number::streaming::u64
deps:{"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"number::streaming::u64":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","error::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","number::Endianness","error::VerboseError","internal::Needed"]},"number::streaming::u64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::u64(p0);
+crate::number::streaming::u64(p0);
+crate::number::streaming::u64(p0);
-----------------
src/number/streaming.rs number::streaming::u128
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"number::streaming::u128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Err","<*const T as std::fmt::Debug>","number::Endianness","error::VerboseError","internal::Needed"]},"number::streaming::u128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::u128(p0);
+crate::number::streaming::u128(p0);
+crate::number::streaming::u128(p0);
-----------------
src/number/streaming.rs number::streaming::i8
deps:{"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"number::streaming::i8":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Needed","number::Endianness","error::VerboseErrorKind","error::VerboseError","internal::Err","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::Error","error::ErrorKind"]},"number::streaming::i8":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::i8(p0);
+crate::number::streaming::i8(p0);
+crate::number::streaming::i8(p0);
-----------------
src/number/streaming.rs number::streaming::i16
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"number::streaming::i16":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Err","error::ErrorKind","internal::Needed","error::VerboseError","number::Endianness","error::Error","<*mut T as std::fmt::Debug>"]},"number::streaming::i16":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::i16(p0);
+crate::number::streaming::i16(p0);
+crate::number::streaming::i16(p0);
-----------------
src/number/streaming.rs number::streaming::i24
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"number::streaming::i24":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","error::ErrorKind","internal::Err"]},"number::streaming::i24":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::i24(p0);
+crate::number::streaming::i24(p0);
+crate::number::streaming::i24(p0);
-----------------
src/number/streaming.rs number::streaming::i32
deps:{"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"number::streaming::i32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::ErrorKind","error::VerboseError","internal::Err","number::Endianness","internal::Needed","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>"]},"number::streaming::i32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::i32(p0);
+crate::number::streaming::i32(p0);
+crate::number::streaming::i32(p0);
-----------------
src/number/streaming.rs number::streaming::i64
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"number::streaming::i64":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","error::Error","error::VerboseError","number::Endianness","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed","internal::Err"]},"number::streaming::i64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::i64(p0);
+crate::number::streaming::i64(p0);
+crate::number::streaming::i64(p0);
-----------------
src/number/streaming.rs number::streaming::i128
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"number::streaming::i128":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","error::Error","internal::Err","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Needed","error::ErrorKind"]},"number::streaming::i128":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::i128(p0);
+crate::number::streaming::i128(p0);
+crate::number::streaming::i128(p0);
-----------------
src/number/streaming.rs number::streaming::be_f32
deps:{"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"number::streaming::be_f32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","error::VerboseErrorKind","internal::Err","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","error::Error"]},"number::streaming::be_f32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_f32(p0);
+crate::number::streaming::be_f32(p0);
+crate::number::streaming::be_f32(p0);
-----------------
src/number/streaming.rs number::streaming::be_f64
deps:{"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"number::streaming::be_f64":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","number::Endianness","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Needed","error::Error"]},"number::streaming::be_f64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::be_f64(p0);
+crate::number::streaming::be_f64(p0);
+crate::number::streaming::be_f64(p0);
-----------------
src/number/streaming.rs number::streaming::le_f32
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"number::streaming::le_f32":{"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","error::ErrorKind","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","error::VerboseError","internal::Needed"]},"number::streaming::le_f32":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_f32(p0);
+crate::number::streaming::le_f32(p0);
+crate::number::streaming::le_f32(p0);
-----------------
src/number/streaming.rs number::streaming::le_f64
deps:{"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"number::streaming::le_f64":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized","traits::Input"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","internal::Needed","error::VerboseErrorKind","error::Error","internal::Err"]},"number::streaming::le_f64":{"E":["error::Error","error::VerboseError"],"I":[]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::le_f64(p0);
+crate::number::streaming::le_f64(p0);
+crate::number::streaming::le_f64(p0);
-----------------
src/number/streaming.rs number::streaming::f32
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"number::streaming::f32":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","number::Endianness","internal::Err","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind","error::VerboseErrorKind","error::Error","error::VerboseError"]},"number::streaming::f32":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::f32(p0);
+crate::number::streaming::f32(p0);
+crate::number::streaming::f32(p0);
-----------------
src/number/streaming.rs number::streaming::f64
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"number::streaming::f64":{"E":["std::marker::Sized","error::ParseError"],"I":["traits::Input","std::marker::Sized"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","error::ErrorKind","internal::Err","error::Error","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed"]},"number::streaming::f64":{"E":["error::VerboseError","error::Error"],"I":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // number::Endianness
+number::streaming::f64(p0);
+crate::number::streaming::f64(p0);
+crate::number::streaming::f64(p0);
-----------------
src/number/streaming.rs number::streaming::hex_u32
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"number::streaming::hex_u32":{"<I as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"I":["traits::Input","traits::AsBytes","std::marker::Sized"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","internal::Err","error::VerboseErrorKind","error::Error","error::ErrorKind","<*const T as std::fmt::Debug>","internal::Needed"]},"number::streaming::hex_u32":{"<I as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"I":[]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
+number::streaming::hex_u32(p0);
+crate::number::streaming::hex_u32(p0);
+crate::number::streaming::hex_u32(p0);
-----------------
src/number/streaming.rs number::streaming::recognize_float
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"number::streaming::recognize_float":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["std::marker::Sized","error::ParseError"],"T":["traits::Input","std::marker::Sized","std::clone::Clone","traits::Offset"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["internal::Err","error::Error","error::VerboseErrorKind","internal::Needed","error::ErrorKind","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError"]},"number::streaming::recognize_float":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::streaming::recognize_float(p0);
+crate::number::streaming::recognize_float(p0);
+crate::number::streaming::recognize_float(p0);
-----------------
src/number/streaming.rs number::streaming::recognize_float_or_exceptions
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"number::streaming::recognize_float_or_exceptions":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone","traits::Input","traits::Compare","traits::Offset"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","error::ErrorKind","internal::Err","internal::Needed","error::VerboseErrorKind","error::VerboseError"]},"number::streaming::recognize_float_or_exceptions":{"<T as traits::Input>::Item":[],"E":["error::VerboseError","error::Error"],"T":[]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::streaming::recognize_float_or_exceptions(p0);
+crate::number::streaming::recognize_float_or_exceptions(p0);
+crate::number::streaming::recognize_float_or_exceptions(p0);
-----------------
src/number/streaming.rs number::streaming::recognize_float_parts
deps:{"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"number::streaming::recognize_float_parts":{"<T as traits::Input>::Item":["traits::AsChar"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::AsBytes","std::marker::Sized","traits::Offset","traits::Compare","traits::Input","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","error::Error","internal::Needed","error::VerboseError","error::VerboseErrorKind","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind"]},"number::streaming::recognize_float_parts":{"<T as traits::Input>::Item":[],"E":["error::Error","error::VerboseError"],"T":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::streaming::recognize_float_parts(p0);
+crate::number::streaming::recognize_float_parts(p0);
+crate::number::streaming::recognize_float_parts(p0);
-----------------
src/number/streaming.rs number::streaming::float
deps:{"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"number::streaming::float":{"<T as traits::Input>::Item":["traits::AsChar","std::clone::Clone"],"E":["error::ParseError","std::marker::Sized"],"T":["traits::Input","traits::Compare","traits::AsBytes","traits::Offset","std::marker::Sized","traits::ParseTo","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","error::VerboseError","error::Error","error::ErrorKind","internal::Needed","number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>"]},"number::streaming::float":{"<T as traits::Input>::Item":["u8","char"],"E":["error::Error","error::VerboseError"],"T":[]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::streaming::float(p0);
+crate::number::streaming::float(p0);
+crate::number::streaming::float(p0);
-----------------
src/number/streaming.rs number::streaming::double
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"number::streaming::double":{"<T as traits::Input>::Item":["traits::AsChar","std::clone::Clone"],"E":["std::marker::Sized","error::ParseError"],"T":["std::marker::Sized","traits::Compare","traits::AsBytes","traits::Offset","traits::ParseTo","std::clone::Clone","traits::Input"]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","error::ErrorKind","error::VerboseErrorKind","error::Error","error::VerboseError"]},"number::streaming::double":{"<T as traits::Input>::Item":["u8","char"],"E":["error::Error","error::VerboseError"],"T":[]},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+number::streaming::double(p0);
+crate::number::streaming::double(p0);
+crate::number::streaming::double(p0);
-----------------
src/error.rs error::ParseError::from_error_kind
deps:{"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"error::ParseError::from_error_kind":{"I":["std::marker::Sized"],"Self":["std::marker::Sized","error::ParseError"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::ParseError::from_error_kind":{"I":["RUG_ANY"],"Self":["error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","error::ErrorKind","error::VerboseErrorKind","number::Endianness","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+error::ParseError::from_error_kind(p0, p1);
+crate::error::ParseError::from_error_kind(p0, p1);
+crate::error::ParseError::from_error_kind(p0, p1);
-----------------
src/error.rs error::ParseError::append
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::ParseError::append":{"I":["std::marker::Sized"],"Self":["std::marker::Sized","error::ParseError"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::ParseError::append":{"I":["RUG_ANY"],"Self":["error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::Error","<*mut T as std::fmt::Debug>","error::VerboseError","internal::Needed","error::VerboseErrorKind","internal::Err","error::ErrorKind"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // Self
+error::ParseError::append(p0, p1, p2);
+crate::error::ParseError::append(p0, p1, p2);
+crate::error::ParseError::append(p0, p1, p2);
-----------------
src/error.rs error::ParseError::from_char
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"error::ParseError::from_char":{"I":["std::marker::Sized"],"Self":["error::ParseError","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::ParseError::from_char":{"I":["RUG_ANY"],"Self":["error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","internal::Needed","error::ErrorKind","internal::Err","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 'a'; // None+char
+error::ParseError::from_char(p0, p1);
+crate::error::ParseError::from_char(p0, p1);
+crate::error::ParseError::from_char(p0, p1);
-----------------
src/error.rs error::ParseError::or
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"error::ParseError::or":{"I":["std::marker::Sized"],"Self":["std::marker::Sized","error::ParseError"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::ParseError::or":{"I":["RUG_ANY"],"Self":["error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","error::VerboseErrorKind","<*mut T as std::fmt::Debug>","error::Error","internal::Err","internal::Needed","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // Self
+p0.or(p1);
+error::ParseError::or(p0, p1);
+crate::error::ParseError::or(p0, p1);
+crate::error::ParseError::or(p0, p1);
-----------------
src/error.rs error::ContextError::add_context
deps:{"error::ContextError::add_context":{"I":["std::marker::Sized"],"Self":["std::marker::Sized","error::ContextError"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"error::ContextError::add_context":{"I":["RUG_ANY"],"Self":["error::VerboseError","error::Error"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","error::VerboseErrorKind","error::Error","error::VerboseError","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = "sample"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // Self
+error::ContextError::add_context(p0, &p1, p2);
+crate::error::ContextError::add_context(p0, &p1, p2);
+crate::error::ContextError::add_context(p0, &p1, p2);
-----------------
src/error.rs error::FromExternalError::from_external_error
deps:{"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"error::FromExternalError::from_external_error":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"Self":["error::FromExternalError"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::FromExternalError::from_external_error":{"E":["RUG_ANY"],"I":["RUG_ANY"],"Self":["error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","error::VerboseErrorKind","internal::Needed","internal::Err","error::ErrorKind","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+error::FromExternalError::from_external_error(p0, p1, p2);
+crate::error::FromExternalError::from_external_error(p0, p1, p2);
+crate::error::FromExternalError::from_external_error(p0, p1, p2);
-----------------
src/branch/mod.rs branch::Alt::choice
deps:{"branch::Alt::choice":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"],"Self":["branch::Alt"]}}
candidates:{"branch::Alt::choice":{"E":["RUG_ANY"],"I":["RUG_ANY"],"O":["RUG_ANY"],"Self":[]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.choice(p1);
+branch::Alt::choice(p0, p1);
+crate::branch::Alt::choice(p0, p1);
+crate::branch::Alt::choice(p0, p1);
-----------------
src/branch/mod.rs branch::Permutation::permutation
deps:{"branch::Permutation::permutation":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"],"Self":["branch::Permutation"]}}
candidates:{"branch::Permutation::permutation":{"E":["RUG_ANY"],"I":["RUG_ANY"],"O":["RUG_ANY"],"Self":[]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.permutation(p1);
+branch::Permutation::permutation(p0, p1);
+crate::branch::Permutation::permutation(p0, p1);
+crate::branch::Permutation::permutation(p0, p1);
-----------------
src/internal.rs internal::Finish::finish
deps:{"internal::Finish::finish":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"],"Self":["internal::Finish"]},"internal::IResult":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]}}
candidates:{"internal::Finish::finish":{"E":["RUG_ANY"],"I":["RUG_ANY"],"O":["RUG_ANY"],"Self":["internal::IResult"]},"internal::IResult":{"E":["RUG_ANY","error::Error<I>"],"I":["RUG_ANY"],"O":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.finish();
+internal::Finish::finish(p0);
+crate::internal::Finish::finish(p0);
+crate::internal::Finish::finish(p0);
-----------------
src/internal.rs internal::Parser::parse
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Parser::parse":{"Input":["std::marker::Sized"],"Self":["internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt","internal::Into"],"G":["std::boxed::Box","internal::Or","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::FlatMap","internal::AndThen"]},"internal::AndThen":{"F":["internal::And","internal::MapOpt","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::AndThen"],"G":["internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Into","internal::Or","internal::AndThen","std::boxed::Box","internal::Map"]},"internal::Err":{"E":["internal::Err","error::VerboseError","number::Endianness","internal::Needed","<*const T as std::fmt::Debug>","error::VerboseErrorKind","error::Error","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::FlatMap"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And","internal::FlatMap","internal::AndThen","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::And"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::Map","internal::Or","internal::MapRes","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Into","std::boxed::Box"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::AndThen","internal::MapRes","internal::Map","internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And"],"G":["core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::MapRes","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into","internal::And","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Or"],"G":["internal::MapOpt","internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::Into","internal::Map","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"]},"internal::Parser::parse":{"Input":["RUG_ANY"],"Self":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::FlatMap","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+internal::Parser::parse(p0, p1);
+crate::internal::Parser::parse(p0, p1);
+crate::internal::Parser::parse(p0, p1);
-----------------
src/internal.rs internal::Parser::map
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Parser::map":{"G":["std::marker::Sized","std::ops::FnMut"],"Input":["std::marker::Sized"],"O2":["std::marker::Sized"],"Self":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Or","std::boxed::Box","internal::FlatMap","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::AndThen"],"G":["internal::Into","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","internal::MapRes","internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapOpt"],"G":["std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","internal::FlatMap","internal::Map","internal::Into"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","error::Error","internal::Needed","internal::Err","error::VerboseErrorKind","error::VerboseError","number::Endianness","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","internal::MapOpt","internal::AndThen"],"G":["core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::And","internal::MapRes","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::AndThen","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Into","std::boxed::Box"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::And","internal::Into","internal::Map","internal::AndThen"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::AndThen","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","internal::Or","internal::AndThen","internal::Into"],"G":["internal::Map","internal::MapOpt","internal::Into","internal::And","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes"]},"internal::Parser::map":{"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"],"Input":["RUG_ANY"],"O2":["RUG_ANY"],"Self":["internal::FlatMap","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Map","internal::Or","internal::MapRes","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.map(p1);
+internal::Parser::map(p0, p1);
+crate::internal::Parser::map(p0, p1);
+crate::internal::Parser::map(p0, p1);
-----------------
src/internal.rs internal::Parser::map_res
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Parser::map_res":{"<Self as internal::Parser<Input>>::Error":["error::FromExternalError"],"E2":["std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"],"Input":["std::marker::Sized"],"O2":["std::marker::Sized"],"Self":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And","internal::Into","internal::Map","internal::MapRes","internal::AndThen"],"G":["internal::FlatMap","internal::And","internal::Map","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box","internal::MapRes"]},"internal::AndThen":{"F":["internal::Or","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::And","internal::Map","internal::MapOpt","internal::FlatMap"],"G":["internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Map","internal::Or"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","internal::Needed","error::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::MapRes","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Into","std::boxed::Box","internal::And"],"G":["core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::FlatMap","internal::Map","internal::And","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapRes","std::boxed::Box","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","internal::AndThen","internal::MapOpt","internal::And","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapRes","internal::FlatMap"],"G":["core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::FlatMap","internal::AndThen","internal::And"],"G":["core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::Map","internal::And","internal::MapRes","internal::Or","internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen"],"G":["core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::MapRes","internal::Or","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","std::boxed::Box","internal::Map","internal::And"],"G":["std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::Map","internal::FlatMap","internal::Into"]},"internal::Parser::map_res":{"<Self as internal::Parser<Input>>::Error":["error::VerboseError","error::Error"],"E2":["RUG_ANY"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap"],"Input":["RUG_ANY"],"O2":["RUG_ANY"],"Self":["internal::MapRes","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And","internal::Or","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.map_res(p1);
+internal::Parser::map_res(p0, p1);
+crate::internal::Parser::map_res(p0, p1);
+crate::internal::Parser::map_res(p0, p1);
-----------------
src/internal.rs internal::Parser::map_opt
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Parser::map_opt":{"G":["std::ops::Fn","std::marker::Sized"],"Input":["std::marker::Sized"],"O2":["std::marker::Sized"],"Self":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::AndThen","internal::MapRes","internal::Or","std::boxed::Box","internal::FlatMap","internal::Into"],"G":["internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Map"]},"internal::AndThen":{"F":["internal::Into","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","internal::And"],"G":["internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Map","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Or"]},"internal::Err":{"E":["error::Error","<*const T as std::fmt::Debug>","internal::Needed","number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Err","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Map","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","internal::MapRes","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::MapRes","internal::Or","internal::And","internal::FlatMap","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Map"],"G":["core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Or","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::FlatMap","internal::Map","internal::AndThen","internal::MapRes"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::MapRes":{"F":["std::boxed::Box","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map","internal::AndThen","internal::Or"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["internal::AndThen","internal::MapOpt","internal::Or","internal::FlatMap","std::boxed::Box","internal::And","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::Map"],"G":["internal::Map","internal::MapOpt","internal::Or","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::AndThen","internal::Into"]},"internal::Parser::map_opt":{"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace"],"Input":["RUG_ANY"],"O2":["RUG_ANY"],"Self":["internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::And","internal::MapRes","internal::FlatMap"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.map_opt(p1);
+internal::Parser::map_opt(p0, p1);
+crate::internal::Parser::map_opt(p0, p1);
+crate::internal::Parser::map_opt(p0, p1);
-----------------
src/internal.rs internal::Parser::flat_map
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Parser::flat_map":{"G":["std::ops::FnMut","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"Input":["std::marker::Sized"],"Self":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Into","internal::MapOpt"],"G":["internal::MapOpt","std::boxed::Box","internal::Map","internal::And","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::AndThen"]},"internal::AndThen":{"F":["internal::Into","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::Or","internal::MapOpt"],"G":["internal::Or","std::boxed::Box","internal::Into","internal::MapRes","internal::AndThen","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Map"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","internal::Needed","error::ErrorKind","error::Error","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err"]},"internal::FlatMap":{"F":["internal::Or","internal::And","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Map","std::boxed::Box"],"G":["core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::Or","internal::AndThen","internal::Map","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::Into","internal::Map","internal::AndThen","internal::MapRes","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::And","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Map"],"G":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::And"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapRes"],"G":["internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap"]},"internal::Parser::flat_map":{"G":["core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"H":["<F as internal::Parser<I>>","internal::Map","internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","internal::Or","internal::MapOpt"],"Input":["RUG_ANY"],"Self":["internal::MapRes","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::And","internal::AndThen","internal::Map","std::boxed::Box"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.flat_map(p1);
+internal::Parser::flat_map(p0, p1);
+crate::internal::Parser::flat_map(p0, p1);
+crate::internal::Parser::flat_map(p0, p1);
-----------------
src/internal.rs internal::Parser::and_then
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Parser::and_then":{"G":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized"],"Self":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::And","internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes"],"G":["internal::Or","internal::MapRes","internal::MapOpt","internal::Map","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Into"]},"internal::AndThen":{"F":["internal::MapRes","internal::Into","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"G":["internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::FlatMap"]},"internal::Err":{"E":["internal::Err","number::Endianness","error::Error","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","error::VerboseError","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::Map","internal::AndThen","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::FlatMap","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Into","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::And"],"G":["core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt","internal::FlatMap","internal::Or","internal::MapRes","std::boxed::Box","internal::Map","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::FlatMap","internal::MapOpt","internal::Into","internal::AndThen","internal::Or","internal::Map","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>"],"G":["internal::And","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapOpt","internal::Map"]},"internal::Parser::and_then":{"G":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::FlatMap","internal::Map","internal::Into","internal::AndThen","internal::MapOpt","internal::Or","std::boxed::Box"],"Input":["RUG_ANY"],"Self":["internal::AndThen","internal::MapRes","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.and_then(p1);
+internal::Parser::and_then(p0, p1);
+crate::internal::Parser::and_then(p0, p1);
+crate::internal::Parser::and_then(p0, p1);
-----------------
src/internal.rs internal::Parser::and
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Parser::and":{"G":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized"],"O2":["std::marker::Sized"],"Self":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::And","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","internal::MapOpt","internal::AndThen"],"G":["internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Into","internal::FlatMap","internal::Map","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Map","internal::Into","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::Map","std::boxed::Box","internal::And"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","internal::Needed","internal::Err","number::Endianness","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into","internal::AndThen","internal::And","internal::Or","internal::MapRes"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Map","internal::MapRes","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::FlatMap","internal::MapOpt","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Map","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::And","internal::AndThen"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","internal::FlatMap","internal::Into","internal::MapOpt","internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"],"G":["core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::Map","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::AndThen","internal::Into","internal::Or","internal::MapOpt","internal::MapRes","internal::FlatMap"],"G":["std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or","internal::MapRes","internal::And","internal::Map","<F as internal::Parser<I>>"]},"internal::Parser::and":{"G":["internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::And","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Map"],"Input":["RUG_ANY"],"O2":["RUG_ANY"],"Self":["internal::AndThen","internal::Map","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapRes","internal::Or","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.and(p1);
+internal::Parser::and(p0, p1);
+crate::internal::Parser::and(p0, p1);
+crate::internal::Parser::and(p0, p1);
-----------------
src/internal.rs internal::Parser::or
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Parser::or":{"G":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized"],"Self":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::MapOpt","internal::Map","internal::AndThen","internal::And","internal::Into","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"G":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::AndThen","internal::Map","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Into","internal::And","internal::Map","internal::Or","internal::MapRes","internal::FlatMap","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>"],"G":["internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::And","internal::MapOpt","internal::Into","internal::AndThen","std::boxed::Box","internal::Or"]},"internal::Err":{"E":["internal::Needed","internal::Err","error::Error","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","error::ErrorKind","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::FlatMap","internal::Into","internal::Map","internal::MapOpt","internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::Into","internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::And","internal::MapRes","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","internal::Into","internal::Or","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::And","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Map","internal::Or","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["internal::Map","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Or","internal::AndThen"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::FlatMap","internal::Into","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map","internal::Or","std::boxed::Box"],"G":["internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::Into","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen"]},"internal::Parser::or":{"G":["internal::MapOpt","internal::Or","internal::And","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::FlatMap","internal::Map"],"Input":["RUG_ANY"],"Self":["internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes","internal::AndThen","internal::Map","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // G
+p0.or(p1);
+internal::Parser::or(p0, p1);
+crate::internal::Parser::or(p0, p1);
+crate::internal::Parser::or(p0, p1);
-----------------
src/internal.rs internal::Parser::into
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Parser::into":{"E2":["std::marker::Sized","std::convert::From"],"Input":["std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"],"Self":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Or","internal::AndThen","internal::Into","internal::Map","internal::MapOpt"],"G":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","internal::Or","internal::Map","internal::And","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Or","internal::Map","internal::And","internal::MapRes","internal::AndThen"],"G":["internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","error::Error","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Map","internal::MapOpt","internal::AndThen","internal::Or","internal::And","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::Into","internal::Map","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::AndThen","internal::MapOpt","std::boxed::Box"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Map","internal::Into","internal::Or"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Or","internal::And","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap"],"G":["core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes","internal::Map","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Into","internal::And"],"G":["internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::And"]},"internal::Parser::into":{"E2":["error::Error","error::VerboseError"],"Input":["RUG_ANY"],"O2":["error::Error","error::VerboseError"],"Self":["internal::FlatMap","internal::Map","internal::Into","std::boxed::Box","internal::AndThen","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.into();
+internal::Parser::into(p0);
+crate::internal::Parser::into(p0);
+crate::internal::Parser::into(p0);
-----------------
src/sequence/mod.rs sequence::Tuple::parse
deps:{"sequence::Tuple::parse":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"],"Self":["sequence::Tuple"]}}
candidates:{"sequence::Tuple::parse":{"E":["RUG_ANY"],"I":["RUG_ANY"],"O":["RUG_ANY"],"Self":[]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+sequence::Tuple::parse(p0, p1);
+crate::sequence::Tuple::parse(p0, p1);
+crate::sequence::Tuple::parse(p0, p1);
-----------------
src/traits.rs traits::Input::input_len
deps:{"traits::Input::input_len":{"Self":["std::clone::Clone","std::marker::Sized","traits::Input"]}}
candidates:{"traits::Input::input_len":{"Self":["memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.input_len();
+traits::Input::input_len(p0);
+crate::traits::Input::input_len(p0);
+crate::traits::Input::input_len(p0);
-----------------
src/traits.rs traits::Input::take
deps:{"traits::Input::take":{"Self":["std::marker::Sized","traits::Input","std::clone::Clone"]}}
candidates:{"traits::Input::take":{"Self":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.take(p1);
+traits::Input::take(p0, p1);
+crate::traits::Input::take(p0, p1);
+crate::traits::Input::take(p0, p1);
-----------------
src/traits.rs traits::Input::take_from
deps:{"traits::Input::take_from":{"Self":["traits::Input","std::clone::Clone","std::marker::Sized"]}}
candidates:{"traits::Input::take_from":{"Self":["memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.take_from(p1);
+traits::Input::take_from(p0, p1);
+crate::traits::Input::take_from(p0, p1);
+crate::traits::Input::take_from(p0, p1);
-----------------
src/traits.rs traits::Input::take_split
deps:{"traits::Input::take_split":{"Self":["traits::Input","std::marker::Sized","std::clone::Clone"]}}
candidates:{"traits::Input::take_split":{"Self":["memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.take_split(p1);
+traits::Input::take_split(p0, p1);
+crate::traits::Input::take_split(p0, p1);
+crate::traits::Input::take_split(p0, p1);
-----------------
src/traits.rs traits::Input::position
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"traits::Input::position":{"P":["std::ops::Fn","std::marker::Sized"],"Self":["std::marker::Sized","traits::Input","std::clone::Clone"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"traits::Input::position":{"P":["core::str::IsWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeUnicode"],"Self":["memchr::cow::CowBytes<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.position(p1);
+traits::Input::position(p0, p1);
+crate::traits::Input::position(p0, p1);
+crate::traits::Input::position(p0, p1);
-----------------
src/traits.rs traits::Input::iter_elements
deps:{"traits::Input::iter_elements":{"Self":["traits::Input","std::marker::Sized","std::clone::Clone"]}}
candidates:{"traits::Input::iter_elements":{"Self":["memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.iter_elements();
+traits::Input::iter_elements(p0);
+crate::traits::Input::iter_elements(p0);
+crate::traits::Input::iter_elements(p0);
-----------------
src/traits.rs traits::Input::iter_indices
deps:{"traits::Input::iter_indices":{"Self":["std::marker::Sized","traits::Input","std::clone::Clone"]}}
candidates:{"traits::Input::iter_indices":{"Self":["memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>","memchr::memmem::FinderBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.iter_indices();
+traits::Input::iter_indices(p0);
+crate::traits::Input::iter_indices(p0);
+crate::traits::Input::iter_indices(p0);
-----------------
src/traits.rs traits::Input::slice_index
deps:{"traits::Input::slice_index":{"Self":["std::marker::Sized","std::clone::Clone","traits::Input"]}}
candidates:{"traits::Input::slice_index":{"Self":["memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.slice_index(p1);
+traits::Input::slice_index(p0, p1);
+crate::traits::Input::slice_index(p0, p1);
+crate::traits::Input::slice_index(p0, p1);
-----------------
src/traits.rs traits::Input::split_at_position
deps:{"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"traits::Input::split_at_position":{"E":["error::ParseError","std::marker::Sized"],"P":["std::ops::Fn","std::marker::Sized"],"Self":["traits::Input","std::marker::Sized","std::clone::Clone"]}}
candidates:{"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","error::ErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","error::VerboseErrorKind","error::VerboseError","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"traits::Input::split_at_position":{"E":["error::Error","error::VerboseError"],"P":["core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace"],"Self":["memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::CowBytes<'a>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position(p1);
+traits::Input::split_at_position(p0, p1);
+crate::traits::Input::split_at_position(p0, p1);
+crate::traits::Input::split_at_position(p0, p1);
-----------------
src/traits.rs traits::Input::split_at_position1
deps:{"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::Input::split_at_position1":{"E":["std::marker::Sized","error::ParseError"],"P":["std::marker::Sized","std::ops::Fn"],"Self":["std::clone::Clone","traits::Input","std::marker::Sized"]}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["internal::Err","error::VerboseError","number::Endianness","error::ErrorKind","error::VerboseErrorKind","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::Input::split_at_position1":{"E":["error::VerboseError","error::Error"],"P":["core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"],"Self":["memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>","memchr::memmem::FinderRev<'n>","memchr::memmem::Finder<'n>","memchr::cow::CowBytes<'a>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1(p1, p2);
+traits::Input::split_at_position1(p0, p1, p2);
+crate::traits::Input::split_at_position1(p0, p1, p2);
+crate::traits::Input::split_at_position1(p0, p1, p2);
-----------------
src/traits.rs traits::Input::split_at_position_complete
deps:{"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::Input::split_at_position_complete":{"E":["error::ParseError","std::marker::Sized"],"P":["std::ops::Fn","std::marker::Sized"],"Self":["traits::Input","std::clone::Clone","std::marker::Sized"]}}
candidates:{"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","error::ErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","error::VerboseErrorKind","internal::Err"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::Input::split_at_position_complete":{"E":["error::VerboseError","error::Error"],"P":["core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap"],"Self":["memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::Finder<'n>","memchr::memmem::FinderBuilder","memchr::cow::Imp<'a>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position_complete(p1);
+traits::Input::split_at_position_complete(p0, p1);
+crate::traits::Input::split_at_position_complete(p0, p1);
+crate::traits::Input::split_at_position_complete(p0, p1);
-----------------
src/traits.rs traits::Input::split_at_position1_complete
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"traits::Input::split_at_position1_complete":{"E":["std::marker::Sized","error::ParseError"],"P":["std::marker::Sized","std::ops::Fn"],"Self":["std::marker::Sized","traits::Input","std::clone::Clone"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::Error","error::VerboseError","internal::Err","error::ErrorKind","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"traits::Input::split_at_position1_complete":{"E":["error::VerboseError","error::Error"],"P":["core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"],"Self":["memchr::memmem::FinderRev<'n>","memchr::cow::CowBytes<'a>","memchr::memmem::FinderBuilder","memchr::memmem::Finder<'n>","memchr::cow::Imp<'a>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1_complete(p1, p2);
+traits::Input::split_at_position1_complete(p0, p1, p2);
+crate::traits::Input::split_at_position1_complete(p0, p1, p2);
+crate::traits::Input::split_at_position1_complete(p0, p1, p2);
-----------------
src/traits.rs traits::InputLength::input_len
deps:{"traits::InputLength::input_len":{"Self":["traits::InputLength"]}}
candidates:{"traits::InputLength::input_len":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.input_len();
+traits::InputLength::input_len(p0);
+crate::traits::InputLength::input_len(p0);
+crate::traits::InputLength::input_len(p0);
-----------------
src/traits.rs traits::Offset::offset
deps:{"traits::Offset::offset":{"Self":["traits::Offset"]}}
candidates:{"traits::Offset::offset":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // Self
+p0.offset(p1);
+traits::Offset::offset(p0, p1);
+crate::traits::Offset::offset(p0, p1);
+crate::traits::Offset::offset(p0, p1);
-----------------
src/traits.rs traits::AsBytes::as_bytes
deps:{"traits::AsBytes::as_bytes":{"Self":["traits::AsBytes"]}}
candidates:{"traits::AsBytes::as_bytes":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.as_bytes();
+traits::AsBytes::as_bytes(p0);
+crate::traits::AsBytes::as_bytes(p0);
+crate::traits::AsBytes::as_bytes(p0);
-----------------
src/traits.rs traits::AsChar::as_char
deps:{"traits::AsChar::as_char":{"Self":["traits::AsChar","std::marker::Copy"]}}
candidates:{"traits::AsChar::as_char":{"Self":["char","u8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.as_char();
+traits::AsChar::as_char(p0);
+crate::traits::AsChar::as_char(p0);
+crate::traits::AsChar::as_char(p0);
-----------------
src/traits.rs traits::AsChar::is_alpha
deps:{"traits::AsChar::is_alpha":{"Self":["std::marker::Copy","traits::AsChar"]}}
candidates:{"traits::AsChar::is_alpha":{"Self":["u8","char"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_alpha();
+traits::AsChar::is_alpha(p0);
+crate::traits::AsChar::is_alpha(p0);
+crate::traits::AsChar::is_alpha(p0);
-----------------
src/traits.rs traits::AsChar::is_alphanum
deps:{"traits::AsChar::is_alphanum":{"Self":["std::marker::Copy","traits::AsChar"]}}
candidates:{"traits::AsChar::is_alphanum":{"Self":["u8","char"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_alphanum();
+traits::AsChar::is_alphanum(p0);
+crate::traits::AsChar::is_alphanum(p0);
+crate::traits::AsChar::is_alphanum(p0);
-----------------
src/traits.rs traits::AsChar::is_dec_digit
deps:{"traits::AsChar::is_dec_digit":{"Self":["std::marker::Copy","traits::AsChar"]}}
candidates:{"traits::AsChar::is_dec_digit":{"Self":["u8","char"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_dec_digit();
+traits::AsChar::is_dec_digit(p0);
+crate::traits::AsChar::is_dec_digit(p0);
+crate::traits::AsChar::is_dec_digit(p0);
-----------------
src/traits.rs traits::AsChar::is_hex_digit
deps:{"traits::AsChar::is_hex_digit":{"Self":["traits::AsChar","std::marker::Copy"]}}
candidates:{"traits::AsChar::is_hex_digit":{"Self":["u8","char"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_hex_digit();
+traits::AsChar::is_hex_digit(p0);
+crate::traits::AsChar::is_hex_digit(p0);
+crate::traits::AsChar::is_hex_digit(p0);
-----------------
src/traits.rs traits::AsChar::is_oct_digit
deps:{"traits::AsChar::is_oct_digit":{"Self":["std::marker::Copy","traits::AsChar"]}}
candidates:{"traits::AsChar::is_oct_digit":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_oct_digit();
+traits::AsChar::is_oct_digit(p0);
+crate::traits::AsChar::is_oct_digit(p0);
+crate::traits::AsChar::is_oct_digit(p0);
-----------------
src/traits.rs traits::AsChar::len
deps:{"traits::AsChar::len":{"Self":["traits::AsChar","std::marker::Copy"]}}
candidates:{"traits::AsChar::len":{"Self":["char","u8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.len();
+traits::AsChar::len(p0);
+crate::traits::AsChar::len(p0);
+crate::traits::AsChar::len(p0);
-----------------
src/traits.rs traits::Compare::compare
deps:{"traits::Compare::compare":{"Self":["traits::Compare"],"T":["std::marker::Sized"]}}
candidates:{"traits::Compare::compare":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.compare(p1);
+traits::Compare::compare(p0, p1);
+crate::traits::Compare::compare(p0, p1);
+crate::traits::Compare::compare(p0, p1);
-----------------
src/traits.rs traits::Compare::compare_no_case
deps:{"traits::Compare::compare_no_case":{"Self":["traits::Compare"],"T":["std::marker::Sized"]}}
candidates:{"traits::Compare::compare_no_case":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.compare_no_case(p1);
+traits::Compare::compare_no_case(p0, p1);
+crate::traits::Compare::compare_no_case(p0, p1);
+crate::traits::Compare::compare_no_case(p0, p1);
-----------------
src/traits.rs traits::FindToken::find_token
deps:{"traits::FindToken::find_token":{"Self":["traits::FindToken"],"T":["std::marker::Sized"]}}
candidates:{"traits::FindToken::find_token":{"Self":[],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.find_token(p1);
+traits::FindToken::find_token(p0, p1);
+crate::traits::FindToken::find_token(p0, p1);
+crate::traits::FindToken::find_token(p0, p1);
-----------------
src/traits.rs traits::FindSubstring::find_substring
deps:{"traits::FindSubstring::find_substring":{"Self":["traits::FindSubstring"],"T":["std::marker::Sized"]}}
candidates:{"traits::FindSubstring::find_substring":{"Self":[],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.find_substring(p1);
+traits::FindSubstring::find_substring(p0, p1);
+crate::traits::FindSubstring::find_substring(p0, p1);
+crate::traits::FindSubstring::find_substring(p0, p1);
-----------------
src/traits.rs traits::ParseTo::parse_to
deps:{"traits::ParseTo::parse_to":{"R":["std::marker::Sized"],"Self":["traits::ParseTo"]}}
candidates:{"traits::ParseTo::parse_to":{"R":["RUG_ANY"],"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.parse_to();
+traits::ParseTo::parse_to(p0);
+crate::traits::ParseTo::parse_to(p0);
+crate::traits::ParseTo::parse_to(p0);
-----------------
src/traits.rs traits::ExtendInto::new_builder
deps:{"traits::ExtendInto::new_builder":{"Self":["traits::ExtendInto"]}}
candidates:{"traits::ExtendInto::new_builder":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.new_builder();
+traits::ExtendInto::new_builder(p0);
+crate::traits::ExtendInto::new_builder(p0);
+crate::traits::ExtendInto::new_builder(p0);
-----------------
src/traits.rs traits::ExtendInto::extend_into
deps:{"traits::ExtendInto::extend_into":{"Self":["traits::ExtendInto"]}}
candidates:{"traits::ExtendInto::extend_into":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // <Self as traits::ExtendInto>::Extender
+p0.extend_into(p1);
+traits::ExtendInto::extend_into(p0, p1);
+crate::traits::ExtendInto::extend_into(p0, p1);
+crate::traits::ExtendInto::extend_into(p0, p1);
-----------------
src/traits.rs traits::ToUsize::to_usize
deps:{"traits::ToUsize::to_usize":{"Self":["traits::ToUsize"]}}
candidates:{"traits::ToUsize::to_usize":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.to_usize();
+traits::ToUsize::to_usize(p0);
+crate::traits::ToUsize::to_usize(p0);
+crate::traits::ToUsize::to_usize(p0);
-----------------
src/traits.rs traits::ErrorConvert::convert
deps:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::ErrorConvert::convert":{"E":["std::marker::Sized"],"Self":["traits::ErrorConvert"]}}
candidates:{"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Needed","error::Error","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseError","error::ErrorKind","number::Endianness","internal::Err"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"traits::ErrorConvert::convert":{"E":["RUG_ANY"],"Self":["error::VerboseError","error::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.convert();
+traits::ErrorConvert::convert(p0);
+crate::traits::ErrorConvert::convert(p0);
+crate::traits::ErrorConvert::convert(p0);
-----------------
src/traits.rs traits::HexDisplay::to_hex
deps:{"traits::HexDisplay::to_hex":{"Self":["traits::HexDisplay"]}}
candidates:{"traits::HexDisplay::to_hex":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.to_hex(p1);
+traits::HexDisplay::to_hex(p0, p1);
+crate::traits::HexDisplay::to_hex(p0, p1);
+crate::traits::HexDisplay::to_hex(p0, p1);
-----------------
src/traits.rs traits::HexDisplay::to_hex_from
deps:{"traits::HexDisplay::to_hex_from":{"Self":["traits::HexDisplay"]}}
candidates:{"traits::HexDisplay::to_hex_from":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.to_hex_from(p1, p2);
+traits::HexDisplay::to_hex_from(p0, p1, p2);
+crate::traits::HexDisplay::to_hex_from(p0, p1, p2);
+crate::traits::HexDisplay::to_hex_from(p0, p1, p2);
-----------------
src/traits.rs traits::NomRange::contains
deps:{"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"traits::NomRange::contains":{"Idx":["std::marker::Sized"],"Self":["traits::NomRange"]}}
candidates:{"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"traits::NomRange::contains":{"Idx":["RUG_ANY"],"Self":["std::ops::RangeFrom","std::ops::RangeInclusive","std::ops::Range","std::ops::RangeTo","std::ops::RangeToInclusive","std::ops::RangeFull"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // Idx
+p0.contains(p1);
+traits::NomRange::contains(p0, p1);
+crate::traits::NomRange::contains(p0, p1);
+crate::traits::NomRange::contains(p0, p1);
-----------------
src/traits.rs traits::NomRange::bounds
deps:{"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"traits::NomRange::bounds":{"Idx":["std::marker::Sized"],"Self":["traits::NomRange"]}}
candidates:{"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"traits::NomRange::bounds":{"Idx":["RUG_ANY"],"Self":["std::ops::RangeFull","std::ops::RangeToInclusive","std::ops::RangeInclusive","std::ops::RangeFrom","std::ops::Range","std::ops::RangeTo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.bounds();
+traits::NomRange::bounds(p0);
+crate::traits::NomRange::bounds(p0);
+crate::traits::NomRange::bounds(p0);
-----------------
src/traits.rs traits::NomRange::is_inverted
deps:{"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"traits::NomRange::is_inverted":{"Idx":["std::marker::Sized"],"Self":["traits::NomRange"]}}
candidates:{"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"traits::NomRange::is_inverted":{"Idx":["RUG_ANY"],"Self":["std::ops::Range","std::ops::RangeToInclusive","std::ops::RangeTo","std::ops::RangeInclusive","std::ops::RangeFull","std::ops::RangeFrom"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.is_inverted();
+traits::NomRange::is_inverted(p0);
+crate::traits::NomRange::is_inverted(p0);
+crate::traits::NomRange::is_inverted(p0);
-----------------
src/traits.rs traits::NomRange::saturating_iter
deps:{"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"traits::NomRange::saturating_iter":{"Idx":["std::marker::Sized"],"Self":["traits::NomRange"]}}
candidates:{"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"traits::NomRange::saturating_iter":{"Idx":["RUG_ANY"],"Self":["std::ops::RangeInclusive","std::ops::RangeTo","std::ops::RangeFrom","std::ops::RangeFull","std::ops::RangeToInclusive","std::ops::Range"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.saturating_iter();
+traits::NomRange::saturating_iter(p0);
+crate::traits::NomRange::saturating_iter(p0);
+crate::traits::NomRange::saturating_iter(p0);
-----------------
src/traits.rs traits::NomRange::bounded_iter
deps:{"std::ops::Range":{"Idx":["std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"std::ops::RangeInclusive":{"Idx":["std::marker::Sized"]},"std::ops::RangeTo":{"Idx":["std::marker::Sized"]},"std::ops::RangeToInclusive":{"Idx":["std::marker::Sized"]},"traits::NomRange::bounded_iter":{"Idx":["std::marker::Sized"],"Self":["traits::NomRange"]}}
candidates:{"std::ops::Range":{"Idx":["RUG_ANY"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"std::ops::RangeInclusive":{"Idx":["RUG_ANY"]},"std::ops::RangeTo":{"Idx":["RUG_ANY"]},"std::ops::RangeToInclusive":{"Idx":["RUG_ANY"]},"traits::NomRange::bounded_iter":{"Idx":["RUG_ANY"],"Self":["std::ops::RangeToInclusive","std::ops::RangeFull","std::ops::Range","std::ops::RangeTo","std::ops::RangeInclusive","std::ops::RangeFrom"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.bounded_iter();
+traits::NomRange::bounded_iter(p0);
+crate::traits::NomRange::bounded_iter(p0);
+crate::traits::NomRange::bounded_iter(p0);
-----------------
src/error.rs <error::Error<I> as std::clone::Clone>::clone
deps:{"<error::Error<I> as std::clone::Clone>::clone":{"I":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<error::Error<I> as std::clone::Clone>::clone":{"I":["error::VerboseErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for &T>","error::VerboseError","internal::Needed","internal::Err","number::Endianness","error::ErrorKind"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","number::Endianness","error::VerboseError","error::ErrorKind","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
+p0.clone();
+<error::Error<I> as std::clone::Clone>::clone(p0);
+crate::<error::Error<I> as std::clone::Clone>::clone(p0);
+<error::Error<I>>::clone(p0);
-----------------
src/error.rs <error::Error<I> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<error::Error<I> as std::fmt::Debug>::fmt":{"I":["std::fmt::Debug","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<error::Error<I> as std::fmt::Debug>::fmt":{"I":["error::ErrorKind","internal::Needed","traits::CompareResult","internal::Err","number::Endianness","error::Error","<&T as std::fmt::Debug>","error::VerboseError","error::VerboseErrorKind"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","error::VerboseError","error::ErrorKind","<*const T as std::fmt::Debug>","error::VerboseErrorKind","internal::Needed","number::Endianness","error::Error"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::Error<I> as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::Error<I> as std::fmt::Debug>::fmt(p0, p1);
+<error::Error<I>>::fmt(p0, p1);
-----------------
src/error.rs <error::Error<I> as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{"<error::Error<I> as std::cmp::Eq>::assert_receiver_is_total_eq":{"I":["std::cmp::Eq","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<error::Error<I> as std::cmp::Eq>::assert_receiver_is_total_eq":{"I":["number::Endianness","error::ErrorKind","error::VerboseError","error::VerboseErrorKind","error::Error","std::cmp::impls::<impl std::cmp::Eq for &A>","traits::CompareResult","internal::Needed","internal::Err"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::VerboseError","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","internal::Err"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
+p0.assert_receiver_is_total_eq();
+<error::Error<I> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::Error<I> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::Error<I>>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::Error<I> as std::cmp::PartialEq>::eq
deps:{"<error::Error<I> as std::cmp::PartialEq>::eq":{"I":["std::marker::Sized","std::cmp::PartialEq"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<error::Error<I> as std::cmp::PartialEq>::eq":{"I":["error::Error","internal::Err","error::ErrorKind","number::Endianness","error::VerboseErrorKind","traits::CompareResult","internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseError"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","error::VerboseError","internal::Needed","internal::Err","error::VerboseErrorKind","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
+p0.eq(p1);
+<error::Error<I> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::Error<I> as std::cmp::PartialEq>::eq(p0, p1);
+<error::Error<I>>::eq(p0, p1);
-----------------
src/error.rs error::Error::<I>::new
deps:{"error::Error::<I>::new":{"I":["std::marker::Sized"]}}
candidates:{"error::Error::<I>::new":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+error::Error::<I>::new(p0, p1);
+crate::error::Error::<I>::new(p0, p1);
+<error::Error<I>>::new(p0, p1);
-----------------
src/error.rs <error::Error<I> as error::ParseError<I>>::from_error_kind
deps:{"<error::Error<I> as error::ParseError<I>>::from_error_kind":{"I":["std::marker::Sized"]}}
candidates:{"<error::Error<I> as error::ParseError<I>>::from_error_kind":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+<error::Error<I> as error::ParseError<I>>::from_error_kind(p0, p1);
+crate::<error::Error<I> as error::ParseError<I>>::from_error_kind(p0, p1);
+<error::Error<I>>::from_error_kind(p0, p1);
-----------------
src/error.rs <error::Error<I> as error::ParseError<I>>::append
deps:{"<error::Error<I> as error::ParseError<I>>::append":{"I":["std::marker::Sized"]}}
candidates:{"<error::Error<I> as error::ParseError<I>>::append":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // error::Error<I>
+<error::Error<I> as error::ParseError<I>>::append(p0, p1, p2);
+crate::<error::Error<I> as error::ParseError<I>>::append(p0, p1, p2);
+<error::Error<I>>::append(p0, p1, p2);
-----------------
src/error.rs <error::Error<I> as error::FromExternalError<I, E>>::from_external_error
deps:{"<error::Error<I> as error::FromExternalError<I, E>>::from_external_error":{"E":["std::marker::Sized"],"I":["std::marker::Sized"]}}
candidates:{"<error::Error<I> as error::FromExternalError<I, E>>::from_external_error":{"E":["RUG_ANY"],"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+<error::Error<I> as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+crate::<error::Error<I> as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+<error::Error<I>>::from_external_error(p0, p1, p2);
-----------------
src/error.rs <error::Error<I> as std::fmt::Display>::fmt
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<*const T as std::fmt::Debug>":{},"<error::Error<I> as std::fmt::Display>::fmt":{"I":["std::fmt::Display","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<*const T as std::fmt::Debug>":{},"<error::Error<I> as std::fmt::Display>::fmt":{"I":["error::Error","<&mut T as std::fmt::Display>","<&T as std::fmt::Display>","error::VerboseError","internal::Err"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["number::Endianness","error::ErrorKind","error::VerboseError","error::Error","<*const T as std::fmt::Debug>","internal::Err","error::VerboseErrorKind","internal::Needed"]},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error<I>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::Error<I> as std::fmt::Display>::fmt(p0, p1);
+crate::<error::Error<I> as std::fmt::Display>::fmt(p0, p1);
+<error::Error<I>>::fmt(p0, p1);
-----------------
src/error.rs <error::Error<std::vec::Vec<u8>> as std::convert::From<error::Error<&[u8]>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Error<&[u8]>
+<error::Error<std::vec::Vec<u8>> as std::convert::From<error::Error<&[u8]>>>::from(p0);
+crate::<error::Error<std::vec::Vec<u8>> as std::convert::From<error::Error<&[u8]>>>::from(p0);
+<error::Error<std::vec::Vec<u8>>>::from(p0);
-----------------
src/error.rs <error::Error<std::string::String> as std::convert::From<error::Error<&str>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Error<&str>
+<error::Error<std::string::String> as std::convert::From<error::Error<&str>>>::from(p0);
+crate::<error::Error<std::string::String> as std::convert::From<error::Error<&str>>>::from(p0);
+<error::Error<std::string::String>>::from(p0);
-----------------
src/error.rs <(I, error::ErrorKind) as error::ParseError<I>>::from_error_kind
deps:{"<(I, error::ErrorKind) as error::ParseError<I>>::from_error_kind":{"I":["std::marker::Sized"]}}
candidates:{"<(I, error::ErrorKind) as error::ParseError<I>>::from_error_kind":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+<(I, error::ErrorKind) as error::ParseError<I>>::from_error_kind(p0, p1);
+crate::<(I, error::ErrorKind) as error::ParseError<I>>::from_error_kind(p0, p1);
+<(I, error::ErrorKind)>::from_error_kind(p0, p1);
-----------------
src/error.rs <(I, error::ErrorKind) as error::ParseError<I>>::append
deps:{"<(I, error::ErrorKind) as error::ParseError<I>>::append":{"I":["std::marker::Sized"]}}
candidates:{"<(I, error::ErrorKind) as error::ParseError<I>>::append":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // (I, error::ErrorKind)
+<(I, error::ErrorKind) as error::ParseError<I>>::append(p0, p1, p2);
+crate::<(I, error::ErrorKind) as error::ParseError<I>>::append(p0, p1, p2);
+<(I, error::ErrorKind)>::append(p0, p1, p2);
-----------------
src/error.rs <(I, error::ErrorKind) as error::FromExternalError<I, E>>::from_external_error
deps:{"<(I, error::ErrorKind) as error::FromExternalError<I, E>>::from_external_error":{"E":["std::marker::Sized"],"I":["std::marker::Sized"]}}
candidates:{"<(I, error::ErrorKind) as error::FromExternalError<I, E>>::from_external_error":{"E":["RUG_ANY"],"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+<(I, error::ErrorKind) as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+crate::<(I, error::ErrorKind) as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+<(I, error::ErrorKind)>::from_external_error(p0, p1, p2);
-----------------
src/error.rs <() as error::ParseError<I>>::from_error_kind
deps:{"<() as error::ParseError<I>>::from_error_kind":{"I":["std::marker::Sized"]}}
candidates:{"<() as error::ParseError<I>>::from_error_kind":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+<() as error::ParseError<I>>::from_error_kind(p0, p1);
+crate::<() as error::ParseError<I>>::from_error_kind(p0, p1);
+<()>::from_error_kind(p0, p1);
-----------------
src/error.rs <() as error::ParseError<I>>::append
deps:{"<() as error::ParseError<I>>::append":{"I":["std::marker::Sized"]}}
candidates:{"<() as error::ParseError<I>>::append":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = (); // None+()
+<() as error::ParseError<I>>::append(p0, p1, p2);
+crate::<() as error::ParseError<I>>::append(p0, p1, p2);
+<()>::append(p0, p1, p2);
-----------------
src/error.rs <() as error::FromExternalError<I, E>>::from_external_error
deps:{"<() as error::FromExternalError<I, E>>::from_external_error":{"E":["std::marker::Sized"],"I":["std::marker::Sized"]}}
candidates:{"<() as error::FromExternalError<I, E>>::from_external_error":{"E":["RUG_ANY"],"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+<() as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+crate::<() as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+<()>::from_external_error(p0, p1, p2);
-----------------
src/error.rs <error::VerboseError<I> as std::clone::Clone>::clone
deps:{"<*mut T as std::fmt::Debug>":{},"<error::VerboseError<I> as std::clone::Clone>::clone":{"I":["std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<error::VerboseError<I> as std::clone::Clone>::clone":{"I":["number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","internal::Needed","error::VerboseError","error::ErrorKind","error::Error","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["internal::Needed","<*mut T as std::fmt::Debug>","error::VerboseErrorKind","number::Endianness","error::Error","error::VerboseError","internal::Err","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+p0.clone();
+<error::VerboseError<I> as std::clone::Clone>::clone(p0);
+crate::<error::VerboseError<I> as std::clone::Clone>::clone(p0);
+<error::VerboseError<I>>::clone(p0);
-----------------
src/error.rs <error::VerboseError<I> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<error::VerboseError<I> as std::fmt::Debug>::fmt":{"I":["std::fmt::Debug","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<error::VerboseError<I> as std::fmt::Debug>::fmt":{"I":["number::Endianness","traits::CompareResult","error::Error","internal::Needed","error::VerboseError","error::ErrorKind","<&mut T as std::fmt::Debug>","error::VerboseErrorKind","internal::Err"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","error::ErrorKind","error::VerboseErrorKind","internal::Needed","error::VerboseError","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::VerboseError<I> as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::VerboseError<I> as std::fmt::Debug>::fmt(p0, p1);
+<error::VerboseError<I>>::fmt(p0, p1);
-----------------
src/error.rs <error::VerboseError<I> as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{"<error::VerboseError<I> as std::cmp::Eq>::assert_receiver_is_total_eq":{"I":["std::cmp::Eq","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<error::VerboseError<I> as std::cmp::Eq>::assert_receiver_is_total_eq":{"I":["traits::CompareResult","number::Endianness","internal::Needed","error::Error","std::cmp::impls::<impl std::cmp::Eq for &A>","error::VerboseError","std::cmp::impls::<impl std::cmp::Eq for &mut A>","error::VerboseErrorKind","error::ErrorKind","internal::Err"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::VerboseErrorKind","internal::Needed","error::Error","error::VerboseError","internal::Err"]},"std::cmp::impls::<impl std::cmp::Eq for &A>":{},"std::cmp::impls::<impl std::cmp::Eq for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+p0.assert_receiver_is_total_eq();
+<error::VerboseError<I> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::VerboseError<I> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::VerboseError<I>>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::VerboseError<I> as std::cmp::PartialEq>::eq
deps:{"<error::VerboseError<I> as std::cmp::PartialEq>::eq":{"I":["std::marker::Sized","std::cmp::PartialEq"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<error::VerboseError<I> as std::cmp::PartialEq>::eq":{"I":["internal::Needed","error::ErrorKind","traits::CompareResult","error::VerboseErrorKind","number::Endianness","error::VerboseError","internal::Err","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","error::ErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+p0.eq(p1);
+<error::VerboseError<I> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::VerboseError<I> as std::cmp::PartialEq>::eq(p0, p1);
+<error::VerboseError<I>>::eq(p0, p1);
-----------------
src/error.rs <error::VerboseErrorKind as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseErrorKind
+p0.clone();
+<error::VerboseErrorKind as std::clone::Clone>::clone(p0);
+crate::<error::VerboseErrorKind as std::clone::Clone>::clone(p0);
+<error::VerboseErrorKind>::clone(p0);
-----------------
src/error.rs <error::VerboseErrorKind as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseErrorKind
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::VerboseErrorKind as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::VerboseErrorKind as std::fmt::Debug>::fmt(p0, p1);
+<error::VerboseErrorKind>::fmt(p0, p1);
-----------------
src/error.rs <error::VerboseErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseErrorKind
+p0.assert_receiver_is_total_eq();
+<error::VerboseErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::VerboseErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::VerboseErrorKind>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::VerboseErrorKind as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseErrorKind
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::VerboseErrorKind
+p0.eq(p1);
+<error::VerboseErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::VerboseErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+<error::VerboseErrorKind>::eq(p0, p1);
-----------------
src/error.rs <error::VerboseError<I> as error::ParseError<I>>::from_error_kind
deps:{"<error::VerboseError<I> as error::ParseError<I>>::from_error_kind":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as error::ParseError<I>>::from_error_kind":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+<error::VerboseError<I> as error::ParseError<I>>::from_error_kind(p0, p1);
+crate::<error::VerboseError<I> as error::ParseError<I>>::from_error_kind(p0, p1);
+<error::VerboseError<I>>::from_error_kind(p0, p1);
-----------------
src/error.rs <error::VerboseError<I> as error::ParseError<I>>::append
deps:{"<error::VerboseError<I> as error::ParseError<I>>::append":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as error::ParseError<I>>::append":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+<error::VerboseError<I> as error::ParseError<I>>::append(p0, p1, p2);
+crate::<error::VerboseError<I> as error::ParseError<I>>::append(p0, p1, p2);
+<error::VerboseError<I>>::append(p0, p1, p2);
-----------------
src/error.rs <error::VerboseError<I> as error::ParseError<I>>::from_char
deps:{"<error::VerboseError<I> as error::ParseError<I>>::from_char":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as error::ParseError<I>>::from_char":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = 'a'; // None+char
+<error::VerboseError<I> as error::ParseError<I>>::from_char(p0, p1);
+crate::<error::VerboseError<I> as error::ParseError<I>>::from_char(p0, p1);
+<error::VerboseError<I>>::from_char(p0, p1);
-----------------
src/error.rs <error::VerboseError<I> as error::ContextError<I>>::add_context
deps:{"<error::VerboseError<I> as error::ContextError<I>>::add_context":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as error::ContextError<I>>::add_context":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = "sample"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+<error::VerboseError<I> as error::ContextError<I>>::add_context(p0, &p1, p2);
+crate::<error::VerboseError<I> as error::ContextError<I>>::add_context(p0, &p1, p2);
+<error::VerboseError<I>>::add_context(p0, &p1, p2);
-----------------
src/error.rs <error::VerboseError<I> as error::FromExternalError<I, E>>::from_external_error
deps:{"<error::VerboseError<I> as error::FromExternalError<I, E>>::from_external_error":{"E":["std::marker::Sized"],"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as error::FromExternalError<I, E>>::from_external_error":{"E":["RUG_ANY"],"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // I
let mut p1 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p2 = MaybeUninit::uninit().assume_init(); // E
+<error::VerboseError<I> as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+crate::<error::VerboseError<I> as error::FromExternalError<I, E>>::from_external_error(p0, p1, p2);
+<error::VerboseError<I>>::from_external_error(p0, p1, p2);
-----------------
src/error.rs <error::VerboseError<I> as std::fmt::Display>::fmt
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<error::VerboseError<I> as std::fmt::Display>::fmt":{"I":["std::marker::Sized","std::fmt::Display"]},"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<error::VerboseError<I> as std::fmt::Display>::fmt":{"I":["error::VerboseError","error::Error","<&T as std::fmt::Display>","internal::Err"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Needed","internal::Err","error::VerboseErrorKind","number::Endianness","error::Error","error::VerboseError"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::VerboseError<I> as std::fmt::Display>::fmt(p0, p1);
+crate::<error::VerboseError<I> as std::fmt::Display>::fmt(p0, p1);
+<error::VerboseError<I>>::fmt(p0, p1);
-----------------
src/error.rs <error::VerboseError<std::vec::Vec<u8>> as std::convert::From<error::VerboseError<&[u8]>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::VerboseError<&[u8]>
+<error::VerboseError<std::vec::Vec<u8>> as std::convert::From<error::VerboseError<&[u8]>>>::from(p0);
+crate::<error::VerboseError<std::vec::Vec<u8>> as std::convert::From<error::VerboseError<&[u8]>>>::from(p0);
+<error::VerboseError<std::vec::Vec<u8>>>::from(p0);
-----------------
src/error.rs <error::VerboseError<std::string::String> as std::convert::From<error::VerboseError<&str>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::VerboseError<&str>
+<error::VerboseError<std::string::String> as std::convert::From<error::VerboseError<&str>>>::from(p0);
+crate::<error::VerboseError<std::string::String> as std::convert::From<error::VerboseError<&str>>>::from(p0);
+<error::VerboseError<std::string::String>>::from(p0);
-----------------
src/error.rs <error::ErrorKind as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+<error::ErrorKind>::fmt(p0, p1);
-----------------
src/error.rs <error::ErrorKind as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.eq(p1);
+<error::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+<error::ErrorKind>::eq(p0, p1);
-----------------
src/error.rs <error::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.assert_receiver_is_total_eq();
+<error::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::ErrorKind as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::ErrorKind>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::ErrorKind as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<error::ErrorKind as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<error::ErrorKind as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::boxed::Box<T, A>","std::hash::SipHasher13","std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<error::ErrorKind as std::hash::Hash>::hash(p0, p1);
+crate::<error::ErrorKind as std::hash::Hash>::hash(p0, p1);
+<error::ErrorKind>::hash(p0, p1);
-----------------
src/error.rs <error::ErrorKind as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.clone();
+<error::ErrorKind as std::clone::Clone>::clone(p0);
+crate::<error::ErrorKind as std::clone::Clone>::clone(p0);
+<error::ErrorKind>::clone(p0);
-----------------
src/error.rs error::ErrorKind::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.description();
+error::ErrorKind::description(p0);
+crate::error::ErrorKind::description(p0);
+<error::ErrorKind>::description(p0);
-----------------
src/branch/mod.rs <(A, B) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::FlatMap","internal::Or","std::boxed::Box","internal::Into","internal::MapOpt"],"B":["internal::And","internal::Into","internal::Map","internal::AndThen","internal::MapRes","internal::Or","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box"],"Error":["error::VerboseError","error::Error"],"Input":["error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for &mut T>","number::Endianness","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::And","internal::MapRes","internal::MapOpt","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Or"],"G":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::And","internal::Or","internal::Into","internal::FlatMap","internal::Map"]},"internal::AndThen":{"F":["internal::And","internal::AndThen","internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Map","internal::AndThen","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Into","std::boxed::Box"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","error::VerboseErrorKind","internal::Err","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","error::Error"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Or","internal::Into","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapRes","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::And","internal::Map","<F as internal::Parser<I>>","internal::FlatMap"],"G":["core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::And","internal::FlatMap","internal::Into","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::Map","internal::And","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapRes","internal::Into"],"G":["core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::MapOpt","internal::Into","internal::FlatMap","internal::And","internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"],"G":["internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::And","internal::MapOpt","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["std::marker::Sized","internal::Parser"],"C":["internal::Parser","std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C) as branch::Alt<Input, Output, Error>>::choice":{"A":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::Map","internal::Into","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or"],"B":["internal::AndThen","internal::FlatMap","internal::Into","std::boxed::Box","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::MapRes"],"C":["internal::Or","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::And","internal::Into","internal::AndThen","internal::Map","<F as internal::Parser<I>>"],"Error":["error::Error","error::VerboseError"],"Input":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","error::VerboseError","error::Error","error::VerboseErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapRes","internal::Or","internal::And","std::boxed::Box","internal::AndThen"],"G":["std::boxed::Box","internal::Or","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::And"]},"internal::AndThen":{"F":["internal::And","internal::Or","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Into"],"G":["internal::Into","internal::FlatMap","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::ErrorKind","internal::Needed","error::Error","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err"]},"internal::FlatMap":{"F":["internal::AndThen","internal::MapOpt","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::Or"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::And","internal::Into","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Or"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::Map","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::Or","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Into","internal::MapOpt"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::AndThen","internal::Into","internal::Or","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::And"],"G":["core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes","internal::AndThen","internal::And","internal::Map","internal::Or","internal::FlatMap"],"G":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::boxed::Box","internal::Into","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap","internal::And"],"B":["<F as internal::Parser<I>>","internal::And","internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Or","internal::Map","internal::AndThen"],"C":["internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::And","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"],"D":["internal::And","internal::Into","std::boxed::Box","internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::MapRes"],"Error":["error::Error","error::VerboseError"],"Input":["std::clone::impls::<impl std::clone::Clone for *const T>","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","error::ErrorKind","error::VerboseError","error::VerboseErrorKind","internal::Err"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["std::boxed::Box","internal::FlatMap","internal::Map","internal::And","internal::MapRes","internal::AndThen","internal::Into","internal::Or","internal::MapOpt","<F as internal::Parser<I>>"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapOpt","internal::MapRes","internal::Or","internal::AndThen","internal::Into","std::boxed::Box"]},"internal::AndThen":{"F":["internal::Into","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Or","internal::AndThen"],"G":["internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","internal::Map"]},"internal::Err":{"E":["number::Endianness","internal::Err","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","error::Error","error::VerboseErrorKind","internal::Needed","error::VerboseError"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::AndThen","internal::Map","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::MapOpt"],"G":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["std::boxed::Box","internal::Into","internal::Map","internal::And","internal::AndThen","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapRes","std::boxed::Box","internal::And","internal::AndThen","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen","internal::Map","internal::FlatMap","std::boxed::Box"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","internal::Map","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","internal::AndThen"],"G":["core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::Map","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes"],"G":["internal::Into","internal::AndThen","internal::Map","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Or","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["internal::Parser","std::marker::Sized"],"E":["internal::Parser","std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Map","<F as internal::Parser<I>>","internal::Or","internal::And","internal::FlatMap","internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","internal::MapOpt"],"B":["internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes","internal::And","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen"],"C":["std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into"],"D":["internal::Into","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapRes","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map","internal::And"],"E":["internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::FlatMap","std::boxed::Box","internal::And","internal::MapRes","internal::AndThen","internal::Map"],"Error":["error::VerboseError","error::Error"],"Input":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","error::ErrorKind","error::VerboseError","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","internal::Needed","error::Error"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Map","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen"],"G":["internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::FlatMap"]},"internal::AndThen":{"F":["internal::FlatMap","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::And","internal::AndThen","std::boxed::Box"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Map","internal::Into","internal::And","internal::AndThen"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","error::ErrorKind","internal::Err","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Into","std::boxed::Box","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Or","internal::Map","internal::FlatMap"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Into","internal::AndThen","internal::Map","internal::And","std::boxed::Box"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::FlatMap","internal::And","internal::AndThen","internal::MapRes","internal::Map","internal::MapOpt"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes","internal::Or","internal::Map","internal::MapOpt"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::AndThen","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into"],"G":["internal::FlatMap","internal::MapRes","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Or","std::boxed::Box","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["std::marker::Sized","internal::Parser"],"E":["internal::Parser","std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Or","internal::And","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Into","internal::Map","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"B":["std::boxed::Box","internal::Into","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::MapRes","internal::Map","<F as internal::Parser<I>>"],"C":["internal::Into","internal::AndThen","internal::MapOpt","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Or"],"D":["internal::MapOpt","internal::FlatMap","internal::And","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or"],"E":["internal::MapOpt","internal::AndThen","internal::MapRes","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::Into","internal::FlatMap"],"Error":["error::VerboseError","error::Error"],"F":["internal::MapRes","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::And","internal::MapOpt","internal::Map","internal::AndThen"],"Input":["error::Error","internal::Needed","error::ErrorKind","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::VerboseError","error::VerboseErrorKind"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into","internal::Map","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And","std::boxed::Box"],"G":["internal::AndThen","internal::Or","internal::FlatMap","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And","std::boxed::Box"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::And","std::boxed::Box","internal::FlatMap","internal::Into","internal::Map","internal::Or","internal::MapOpt","internal::AndThen"]},"internal::Err":{"E":["internal::Needed","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","error::Error","error::VerboseErrorKind","number::Endianness"]},"internal::FlatMap":{"F":["internal::And","internal::FlatMap","std::boxed::Box","internal::Map","internal::AndThen","internal::Or","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::FlatMap","internal::MapRes","internal::Or","internal::And","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::MapRes","internal::FlatMap","internal::AndThen","internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Or","internal::FlatMap","internal::Into","internal::Map","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes"],"G":["core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["std::boxed::Box","internal::Or","internal::MapRes","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Map"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::And","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes"],"G":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Into","internal::Map","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And","internal::FlatMap","std::boxed::Box"],"B":["internal::Into","<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Map","std::boxed::Box"],"C":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapRes","internal::AndThen","std::boxed::Box","internal::And","internal::Into","internal::MapOpt","internal::Map"],"D":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::AndThen","internal::And","std::boxed::Box","internal::Or","internal::MapOpt","internal::FlatMap","internal::MapRes"],"E":["internal::Or","internal::Map","internal::FlatMap","internal::MapRes","internal::Into","std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>"],"Error":["error::VerboseError","error::Error"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Map"],"G":["<F as internal::Parser<I>>","internal::Into","internal::Or","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","internal::And"],"Input":["number::Endianness","internal::Needed","error::Error","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::MapRes","internal::Into","internal::And","internal::MapOpt","internal::FlatMap","internal::Map","std::boxed::Box","internal::Or","<F as internal::Parser<I>>"],"G":["internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Map","std::boxed::Box"]},"internal::AndThen":{"F":["internal::Map","internal::Or","internal::FlatMap","internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::MapRes","std::boxed::Box"],"G":["internal::Or","internal::FlatMap","internal::Map","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::And"]},"internal::Err":{"E":["error::VerboseErrorKind","error::Error","error::VerboseError","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","internal::Err","number::Endianness"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Into","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::MapRes","internal::AndThen","internal::And","internal::FlatMap","internal::Map","internal::MapOpt","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::Or","internal::MapOpt","internal::And","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>"],"G":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","internal::AndThen","internal::Or","std::boxed::Box","internal::Into"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::AndThen","internal::Into","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Or","internal::Map"],"G":["core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::Or","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Map","internal::MapRes"],"G":["internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::AndThen","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::And","internal::AndThen","internal::MapOpt"],"B":["internal::And","internal::Into","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Map"],"C":["internal::Into","internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map"],"D":["internal::MapRes","internal::MapOpt","internal::Or","internal::Map","internal::AndThen","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::And"],"E":["<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Or","internal::MapOpt","internal::And","internal::FlatMap"],"Error":["error::VerboseError","error::Error"],"F":["internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Map","internal::Or","internal::FlatMap","std::boxed::Box"],"G":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Map","internal::And"],"H":["internal::FlatMap","internal::And","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or"],"Input":["error::VerboseErrorKind","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","internal::Err","error::VerboseError","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::Into","internal::FlatMap","internal::Map","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::MapRes"],"G":["internal::FlatMap","internal::MapOpt","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes"]},"internal::AndThen":{"F":["internal::Map","internal::AndThen","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::MapRes","internal::Into","internal::Or"],"G":["internal::And","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::Into","internal::AndThen"]},"internal::Err":{"E":["error::ErrorKind","error::Error","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::VerboseErrorKind","internal::Needed","number::Endianness"]},"internal::FlatMap":{"F":["internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Or","internal::MapRes","internal::Into","internal::MapOpt","std::boxed::Box","internal::And"],"G":["core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","internal::Or","std::boxed::Box","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::MapRes","internal::And","internal::FlatMap"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapRes","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into","internal::MapRes","internal::And","internal::AndThen"],"G":["core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::MapOpt","internal::Or","internal::Map","internal::Into","internal::And","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>"],"G":["internal::Map","internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::And","internal::Or","internal::AndThen","internal::MapRes"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"H":["std::marker::Sized","internal::Parser"],"I":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"Output":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Map","internal::Into","internal::MapRes","std::boxed::Box","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::FlatMap"],"B":["internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Or","internal::Into","internal::Map"],"C":["std::boxed::Box","internal::AndThen","internal::Map","internal::MapRes","internal::Into","internal::And","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap"],"D":["internal::Map","internal::And","internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"],"E":["<F as internal::Parser<I>>","internal::And","internal::Into","std::boxed::Box","internal::AndThen","internal::Map","internal::Or","internal::MapRes","internal::FlatMap","internal::MapOpt"],"Error":["error::Error","error::VerboseError"],"F":["internal::Into","std::boxed::Box","internal::Or","internal::And","internal::AndThen","internal::Map","internal::FlatMap","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>"],"G":["internal::Or","internal::Map","internal::MapRes","internal::AndThen","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::And","internal::FlatMap"],"H":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","internal::And","std::boxed::Box","internal::Map"],"I":["internal::AndThen","internal::FlatMap","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"Input":["std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","internal::Err","error::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError","internal::Needed","error::VerboseErrorKind","error::ErrorKind"],"Output":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Or","internal::And"],"G":["internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into","internal::AndThen","internal::And","internal::Map","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Or","internal::Map","internal::FlatMap","internal::And","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Into","internal::MapOpt","internal::And","internal::Map"]},"internal::Err":{"E":["number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","error::VerboseError","internal::Needed","error::Error","internal::Err","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::AndThen","std::boxed::Box","internal::Map","internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::Into","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::And","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::AndThen","internal::Map","internal::MapRes","internal::And","internal::Or","internal::FlatMap","internal::MapOpt"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or"],"G":["core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::Into","internal::Or","internal::Map","internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"G":["internal::MapRes","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["std::marker::Sized","internal::Parser"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"I":["internal::Parser","std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J) as branch::Alt<Input, Output, Error>>::choice":{"A":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or","internal::Into","internal::FlatMap","internal::And","internal::Map","internal::AndThen"],"B":["internal::Into","internal::MapRes","internal::Map","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::FlatMap","internal::Or"],"C":["internal::FlatMap","std::boxed::Box","internal::Into","internal::AndThen","internal::And","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes"],"D":["internal::Or","internal::Map","internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt"],"E":["<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Into","internal::And","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or"],"Error":["error::Error","error::VerboseError"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into","internal::Or","internal::And"],"G":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::Or","internal::FlatMap","internal::Map"],"H":["internal::Map","internal::And","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>"],"I":["internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapOpt"],"Input":["internal::Needed","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind","error::VerboseError","internal::Err","error::Error","error::VerboseErrorKind"],"J":["internal::And","internal::Or","internal::AndThen","internal::FlatMap","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::Map","std::boxed::Box","internal::And","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::MapOpt"],"G":["std::boxed::Box","internal::And","internal::Map","internal::MapRes","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Or","internal::Map","internal::MapOpt","internal::Into","std::boxed::Box","internal::AndThen","internal::And"],"G":["internal::AndThen","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Into","internal::Map","internal::And","internal::MapOpt","internal::Or","<F as internal::Parser<I>>"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::VerboseError","error::Error","internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseErrorKind","error::ErrorKind"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::MapRes","internal::And","internal::MapOpt","internal::Map","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Or"],"G":["core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Into","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::FlatMap","internal::MapOpt","internal::Into","internal::MapRes","internal::AndThen","internal::And","internal::Or","std::boxed::Box","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"internal::MapOpt":{"F":["internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Into"],"G":["core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::Or","internal::Map","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::Map","internal::MapOpt","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen","internal::Into","internal::And","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::FlatMap","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::And","std::boxed::Box","internal::Or","internal::AndThen","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["std::marker::Sized","internal::Parser"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["internal::Parser","std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized","internal::Parser"],"K":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::MapRes","internal::Map","internal::And","internal::Or","internal::MapOpt","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::AndThen"],"B":["internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Into","internal::Map","internal::Or","<F as internal::Parser<I>>"],"C":["internal::MapRes","internal::Map","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt"],"D":["std::boxed::Box","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Or","internal::Map","internal::And","internal::AndThen"],"E":["internal::Map","internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Or","internal::MapOpt","std::boxed::Box"],"Error":["error::VerboseError","error::Error"],"F":["internal::AndThen","internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::And","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box"],"G":["internal::AndThen","internal::Or","internal::FlatMap","internal::Map","internal::MapRes","internal::And","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box"],"H":["internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Map","internal::Into","internal::Or","internal::MapRes","std::boxed::Box","internal::FlatMap"],"I":["internal::AndThen","internal::MapOpt","internal::And","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::FlatMap"],"Input":["error::VerboseErrorKind","error::ErrorKind","internal::Needed","error::VerboseError","number::Endianness","error::Error","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>"],"J":["internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::And","internal::FlatMap"],"K":["internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::MapOpt"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Or","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::AndThen","std::boxed::Box","internal::FlatMap"],"G":["internal::Into","internal::Or","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::And","internal::MapOpt","internal::MapRes"]},"internal::AndThen":{"F":["internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::Into","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::Into","std::boxed::Box","internal::FlatMap","internal::And","internal::MapOpt","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Or"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","number::Endianness","error::VerboseError","internal::Needed","internal::Err","error::Error","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::And","internal::MapRes","internal::Map","internal::FlatMap","internal::MapOpt","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","<F as internal::Parser<I>>"],"G":["core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::Into","internal::MapOpt","internal::Map","internal::AndThen","internal::MapRes","internal::And","internal::FlatMap","internal::Or","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::And","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map","internal::AndThen"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::Into","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","std::boxed::Box","internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt"],"G":["core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::Or","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","std::boxed::Box","internal::Into"],"G":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::MapRes","internal::Into","internal::Or","internal::Map","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["internal::Parser","std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized","internal::Parser"],"K":["std::marker::Sized","internal::Parser"],"L":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Map","internal::FlatMap","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen"],"B":["std::boxed::Box","internal::And","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::FlatMap","internal::AndThen","internal::MapOpt"],"C":["internal::And","internal::AndThen","internal::MapRes","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::Into","internal::FlatMap"],"D":["internal::MapOpt","internal::Or","internal::MapRes","internal::And","std::boxed::Box","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map"],"E":["std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"Error":["error::VerboseError","error::Error"],"F":["internal::FlatMap","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Or"],"G":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::FlatMap","internal::Or","internal::MapRes","internal::AndThen","internal::And","internal::Into"],"H":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::And","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Or"],"I":["internal::MapOpt","internal::FlatMap","internal::Or","internal::And","internal::AndThen","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"Input":["error::Error","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError","internal::Needed","error::ErrorKind","internal::Err","number::Endianness"],"J":["internal::FlatMap","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes","internal::MapOpt"],"K":["internal::FlatMap","internal::Or","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Map","std::boxed::Box","internal::And"],"L":["internal::Or","internal::MapOpt","internal::And","internal::Map","internal::AndThen","internal::MapRes","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Into"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapOpt","internal::Into","internal::AndThen","internal::Or","internal::MapRes"],"G":["std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::Map","internal::Into","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::Map","internal::FlatMap","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","std::boxed::Box","internal::MapRes"],"G":["internal::AndThen","internal::MapOpt","std::boxed::Box","internal::And","internal::Or","internal::Map","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"]},"internal::Err":{"E":["internal::Err","error::Error","number::Endianness","error::VerboseErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseError","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Into","internal::MapOpt","internal::Or","internal::MapRes","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::And","internal::AndThen","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::Map","internal::And","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::And","std::boxed::Box","internal::AndThen","internal::Map","internal::Or"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::And","internal::Map","internal::AndThen","std::boxed::Box","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::MapRes"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::AndThen","internal::MapOpt","internal::MapRes","internal::And","internal::Or","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"],"G":["core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["std::boxed::Box","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Map","internal::And","internal::Or","internal::MapOpt"],"G":["std::boxed::Box","internal::Map","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::And","internal::MapRes","internal::Or"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["internal::Parser","std::marker::Sized"],"K":["std::marker::Sized","internal::Parser"],"L":["std::marker::Sized","internal::Parser"],"M":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::MapRes","internal::Or","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::AndThen","internal::Into","internal::MapOpt"],"B":["internal::Or","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::And"],"C":["internal::MapOpt","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapRes","internal::FlatMap","internal::Map"],"D":["internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::Into","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>"],"E":["internal::FlatMap","internal::Or","internal::AndThen","internal::Map","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And"],"Error":["error::VerboseError","error::Error"],"F":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And","internal::FlatMap","internal::Or","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt"],"G":["internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map","internal::Or","std::boxed::Box","internal::MapOpt"],"H":["internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","std::boxed::Box"],"I":["internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::FlatMap","internal::And","internal::MapOpt","internal::MapRes"],"Input":["error::Error","std::clone::impls::<impl std::clone::Clone for &T>","internal::Needed","error::ErrorKind","error::VerboseErrorKind","number::Endianness","error::VerboseError","internal::Err"],"J":["internal::MapOpt","internal::FlatMap","internal::Or","internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"K":["internal::MapOpt","internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or","internal::FlatMap","internal::And"],"L":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Or","internal::Into"],"M":["<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Into","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::Or"],"Output":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","internal::Into"],"G":["internal::AndThen","internal::Map","internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Or","internal::And","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::And","internal::MapOpt"],"G":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::Or","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::FlatMap"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::Error","internal::Needed","error::ErrorKind","error::VerboseError","number::Endianness","error::VerboseErrorKind","internal::Err"]},"internal::FlatMap":{"F":["internal::Or","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Into","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::AndThen","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Or","std::boxed::Box","internal::Into","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::And","internal::Or","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or"],"G":["core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::Or","internal::Map","internal::And","internal::FlatMap","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>"],"G":["core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Or","internal::AndThen"],"G":["std::boxed::Box","internal::Into","internal::Map","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::MapRes","internal::And","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["internal::Parser","std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized","internal::Parser"],"K":["internal::Parser","std::marker::Sized"],"L":["internal::Parser","std::marker::Sized"],"M":["internal::Parser","std::marker::Sized"],"N":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Or","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::Into","internal::MapRes","internal::AndThen","internal::FlatMap"],"B":["internal::And","internal::MapOpt","internal::Map","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::FlatMap"],"C":["internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","internal::And","internal::FlatMap","internal::Or","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"],"D":["internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Into"],"E":["internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes"],"Error":["error::VerboseError","error::Error"],"F":["internal::Map","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt","internal::Into","internal::And","internal::MapRes","internal::AndThen"],"G":["internal::Or","internal::Map","internal::FlatMap","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And"],"H":["internal::MapOpt","internal::Or","internal::Map","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::AndThen"],"I":["internal::And","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box"],"Input":["error::VerboseErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError","internal::Err","number::Endianness","error::Error"],"J":["internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapRes","internal::And","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or"],"K":["internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","internal::And"],"L":["internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::FlatMap"],"M":["internal::FlatMap","internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Or","internal::MapOpt","internal::MapRes"],"N":["internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::And","internal::Into","internal::Or","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>"],"Output":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Into","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or"],"G":["std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"]},"internal::AndThen":{"F":["internal::Map","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And"],"G":["std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::And","internal::AndThen","internal::MapRes","internal::Map"]},"internal::Err":{"E":["internal::Err","error::VerboseError","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::ErrorKind","number::Endianness","internal::Needed"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::Into","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","internal::Map","std::boxed::Box","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","internal::MapOpt","internal::And","internal::MapRes","internal::Into","<F as internal::Parser<I>>"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And"],"G":["core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","internal::MapRes","internal::Or","std::boxed::Box"],"G":["core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::FlatMap","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes","internal::And"],"G":["internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::And","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["internal::Parser","std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["internal::Parser","std::marker::Sized"],"K":["std::marker::Sized","internal::Parser"],"L":["internal::Parser","std::marker::Sized"],"M":["internal::Parser","std::marker::Sized"],"N":["std::marker::Sized","internal::Parser"],"O":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::FlatMap","internal::AndThen","internal::MapRes","internal::And","internal::Into","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"B":["internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Map","internal::FlatMap"],"C":["internal::Map","internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","std::boxed::Box"],"D":["internal::Map","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Into","internal::And"],"E":["std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","internal::Map","internal::MapRes","internal::Into","internal::And","internal::FlatMap"],"Error":["error::VerboseError","error::Error"],"F":["internal::FlatMap","std::boxed::Box","internal::MapRes","internal::And","internal::MapOpt","internal::AndThen","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>"],"G":["internal::Map","internal::FlatMap","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::MapRes","internal::And","internal::AndThen"],"H":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And","internal::MapOpt","internal::Map","internal::Into","std::boxed::Box","internal::Or","internal::FlatMap"],"I":["internal::FlatMap","internal::Map","internal::MapRes","internal::MapOpt","internal::AndThen","internal::And","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Into"],"Input":["error::ErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError","error::VerboseErrorKind","internal::Needed","internal::Err","number::Endianness"],"J":["internal::MapRes","internal::Or","std::boxed::Box","internal::FlatMap","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::AndThen"],"K":["internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapRes","std::boxed::Box","internal::Into","internal::And","internal::Or","internal::FlatMap"],"L":["internal::Map","internal::And","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>"],"M":["internal::MapOpt","std::boxed::Box","internal::Map","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Into"],"N":["internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","std::boxed::Box"],"O":["internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::And","internal::Map","internal::AndThen","std::boxed::Box"],"Output":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::And","internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","std::boxed::Box"],"G":["internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Into","std::boxed::Box"]},"internal::AndThen":{"F":["internal::Or","internal::AndThen","internal::MapRes","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Or","internal::And","internal::Map","internal::FlatMap","internal::Into"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::VerboseError","error::Error","internal::Needed","internal::Err","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Or","std::boxed::Box","internal::AndThen","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::And"],"G":["core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::And","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"internal::MapOpt":{"F":["internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","internal::AndThen","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Or"],"G":["core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::And","internal::Map","internal::Into","internal::FlatMap","internal::AndThen"],"G":["internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into","internal::Map","internal::And","std::boxed::Box","internal::MapRes","internal::Or","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["std::marker::Sized","internal::Parser"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["internal::Parser","std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["internal::Parser","std::marker::Sized"],"K":["std::marker::Sized","internal::Parser"],"L":["std::marker::Sized","internal::Parser"],"M":["std::marker::Sized","internal::Parser"],"N":["internal::Parser","std::marker::Sized"],"O":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"],"P":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) as branch::Alt<Input, Output, Error>>::choice":{"A":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Or","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","std::boxed::Box","internal::Map"],"B":["internal::Map","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes"],"C":["internal::FlatMap","internal::MapRes","internal::Map","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Or","internal::MapOpt"],"D":["internal::MapRes","internal::Or","internal::AndThen","internal::Map","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::And"],"E":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","internal::Map"],"Error":["error::VerboseError","error::Error"],"F":["internal::AndThen","std::boxed::Box","internal::Map","internal::Or","internal::MapRes","internal::And","internal::FlatMap","internal::MapOpt","internal::Into","<F as internal::Parser<I>>"],"G":["internal::MapRes","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap","std::boxed::Box","internal::Into","internal::Or"],"H":["internal::And","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Or"],"I":["std::boxed::Box","internal::Or","internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes","internal::And","internal::AndThen","internal::Into","<F as internal::Parser<I>>"],"Input":["internal::Needed","error::ErrorKind","number::Endianness","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","error::VerboseErrorKind"],"J":["internal::Or","internal::Into","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt"],"K":["<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::And","internal::Or","internal::Map","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::MapOpt"],"L":["internal::Into","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes","internal::Map","internal::MapOpt","internal::And"],"M":["internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","internal::Map","internal::And","internal::AndThen"],"N":["internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Map","std::boxed::Box","internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","internal::MapRes"],"O":["internal::MapRes","std::boxed::Box","internal::Or","internal::Into","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen","internal::And","<F as internal::Parser<I>>"],"Output":["RUG_ANY"],"P":["internal::Or","std::boxed::Box","internal::Map","internal::MapOpt","internal::FlatMap","internal::And","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::AndThen"]},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::Or","internal::Map","internal::Into","internal::MapOpt","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"],"G":["internal::Into","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap","internal::And"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::MapOpt","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","std::boxed::Box","internal::Into","internal::Or","internal::Map"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","internal::Needed","error::ErrorKind","error::VerboseError"]},"internal::FlatMap":{"F":["internal::MapRes","internal::Into","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::And","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::MapOpt","internal::Into","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Map","internal::MapRes","internal::FlatMap","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::Or","internal::Into","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen","internal::Or"],"G":["core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::MapRes","internal::Into","internal::Map","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen"],"G":["internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Map","internal::Or","std::boxed::Box"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["std::marker::Sized","internal::Parser"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized","internal::Parser"],"K":["internal::Parser","std::marker::Sized"],"L":["internal::Parser","std::marker::Sized"],"M":["std::marker::Sized","internal::Parser"],"N":["internal::Parser","std::marker::Sized"],"O":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"],"P":["internal::Parser","std::marker::Sized"],"Q":["std::marker::Sized","internal::Parser"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) as branch::Alt<Input, Output, Error>>::choice":{"A":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","internal::And","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes"],"B":["internal::FlatMap","internal::And","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt","internal::Map","internal::MapRes"],"C":["internal::And","internal::Into","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Map","internal::MapOpt"],"D":["internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","internal::And","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Into"],"E":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","internal::Map","internal::Or","std::boxed::Box"],"Error":["error::VerboseError","error::Error"],"F":["internal::Map","internal::And","internal::Into","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"G":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::Into","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Map","internal::FlatMap","internal::MapOpt"],"H":["internal::Or","internal::And","std::boxed::Box","internal::Into","internal::MapRes","internal::Map","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"I":["internal::MapRes","internal::Or","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::And"],"Input":["std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","error::VerboseErrorKind","error::Error","internal::Err","number::Endianness","internal::Needed","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &T>"],"J":["std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","internal::Or","internal::And","internal::MapOpt","internal::MapRes","internal::Map","<F as internal::Parser<I>>"],"K":["internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Into"],"L":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","internal::AndThen","internal::Map","internal::Into","internal::MapRes"],"M":["internal::Map","internal::AndThen","internal::MapRes","internal::And","internal::Or","internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap"],"N":["internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::FlatMap","internal::And","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen"],"O":["<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::Map","internal::MapRes","internal::Or"],"Output":["RUG_ANY"],"P":["internal::MapOpt","internal::Map","internal::MapRes","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::FlatMap","internal::AndThen"],"Q":["std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Into","internal::Map","internal::MapRes"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::Map","internal::MapRes","internal::FlatMap","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And"],"G":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Map","internal::FlatMap","internal::MapRes","internal::Into","internal::Or","internal::And"]},"internal::AndThen":{"F":["internal::And","internal::AndThen","internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt"],"G":["internal::Map","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::FlatMap","internal::Or","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","internal::Err","number::Endianness","internal::Needed"]},"internal::FlatMap":{"F":["internal::MapRes","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Into","internal::MapRes","internal::And","internal::MapOpt","internal::AndThen","internal::Or","std::boxed::Box","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Map","internal::And","internal::Or","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::FlatMap","internal::MapRes","internal::And"],"G":["core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Into","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::And","internal::Or","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::MapOpt"],"G":["internal::And","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Map","internal::MapRes","internal::FlatMap","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["internal::Parser","std::marker::Sized"],"C":["std::marker::Sized","internal::Parser"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["internal::Parser","std::marker::Sized"],"K":["std::marker::Sized","internal::Parser"],"L":["std::marker::Sized","internal::Parser"],"M":["internal::Parser","std::marker::Sized"],"N":["std::marker::Sized","internal::Parser"],"O":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"],"P":["std::marker::Sized","internal::Parser"],"Q":["internal::Parser","std::marker::Sized"],"R":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::MapRes","internal::Or","internal::And","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::FlatMap"],"B":["internal::Or","internal::MapOpt","internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::And","std::boxed::Box","internal::Into"],"C":["internal::MapRes","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","internal::MapOpt"],"D":["internal::Map","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"E":["internal::Map","internal::And","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Into"],"Error":["error::VerboseError","error::Error"],"F":["internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::FlatMap","internal::MapOpt","internal::Or","internal::And","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::And","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap"],"H":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapRes","internal::Map","internal::AndThen"],"I":["internal::And","internal::FlatMap","internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::AndThen","internal::Map"],"Input":["internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseErrorKind","error::VerboseError","internal::Err","error::ErrorKind","number::Endianness"],"J":["internal::MapRes","internal::Map","internal::Or","internal::MapOpt","internal::Into","internal::And","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box"],"K":["internal::And","internal::Or","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into"],"L":["std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapRes","internal::Into","internal::Map","internal::And"],"M":["internal::Map","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::AndThen","internal::Or"],"N":["internal::MapRes","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Into","internal::And","internal::FlatMap","internal::Map"],"O":["internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::Map"],"Output":["RUG_ANY"],"P":["internal::Or","internal::MapOpt","internal::And","internal::FlatMap","internal::AndThen","internal::Into","internal::Map","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box"],"Q":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::FlatMap","internal::Map","internal::MapOpt","internal::And","internal::Into"],"R":["std::boxed::Box","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Into","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::And"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Map","internal::Or","std::boxed::Box","internal::And","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::MapRes"]},"internal::AndThen":{"F":["internal::Into","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::MapRes"],"G":["internal::FlatMap","internal::MapOpt","internal::Or","internal::Into","internal::MapRes","internal::AndThen","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::And"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","error::VerboseError","internal::Err","internal::Needed","error::ErrorKind","number::Endianness","error::Error"]},"internal::FlatMap":{"F":["internal::MapRes","internal::Or","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::And"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","internal::Into","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen"],"G":["core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Or","internal::MapOpt","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::AndThen"],"G":["core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["std::boxed::Box","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Or","internal::Into","std::boxed::Box","internal::And","internal::Map","internal::AndThen"],"G":["internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::Or","std::boxed::Box"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"B":["std::marker::Sized","internal::Parser"],"C":["internal::Parser","std::marker::Sized"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"I":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["internal::Parser","std::marker::Sized"],"K":["internal::Parser","std::marker::Sized"],"L":["std::marker::Sized","internal::Parser"],"M":["std::marker::Sized","internal::Parser"],"N":["internal::Parser","std::marker::Sized"],"O":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"],"P":["internal::Parser","std::marker::Sized"],"Q":["std::marker::Sized","internal::Parser"],"R":["internal::Parser","std::marker::Sized"],"S":["internal::Parser","std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::MapOpt","std::boxed::Box","internal::MapRes","internal::And","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::AndThen"],"B":["internal::MapRes","internal::Or","internal::Map","internal::Into","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","std::boxed::Box"],"C":["internal::Map","internal::And","internal::MapRes","internal::MapOpt","internal::Into","internal::Or","internal::FlatMap","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>"],"D":["internal::Into","internal::Or","internal::MapRes","internal::Map","internal::MapOpt","internal::And","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"E":["std::boxed::Box","internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Map","internal::Or"],"Error":["error::VerboseError","error::Error"],"F":["internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Into","std::boxed::Box","internal::Or","internal::Map","internal::AndThen","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::And"],"H":["internal::MapOpt","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen"],"I":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Into","std::boxed::Box","internal::Or","internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt"],"Input":["error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","error::VerboseError","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","number::Endianness","error::Error"],"J":["<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::Into","internal::Or","internal::And","internal::FlatMap","internal::AndThen"],"K":["internal::MapRes","internal::And","internal::Map","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"L":["internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","internal::Or"],"M":["<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::Map","internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap"],"N":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::MapRes","internal::Or","internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map"],"O":["internal::FlatMap","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes"],"Output":["RUG_ANY"],"P":["internal::AndThen","internal::Or","internal::MapOpt","internal::Map","internal::Into","internal::FlatMap","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes"],"Q":["std::boxed::Box","internal::Into","internal::Or","internal::MapRes","internal::AndThen","internal::Map","internal::And","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>"],"R":["std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","internal::AndThen","internal::Into","internal::MapOpt","internal::MapRes","internal::And","<F as internal::Parser<I>>"],"S":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","internal::And","internal::Into","internal::MapOpt"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","internal::MapRes","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::And","internal::Or"],"G":["internal::Into","internal::Map","internal::Or","internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapRes","internal::Into","internal::Or","internal::AndThen","internal::And","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt"],"G":["internal::MapRes","internal::Or","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapOpt","internal::Into"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind","error::VerboseError","number::Endianness","internal::Needed","error::Error","error::VerboseErrorKind","internal::Err"]},"internal::FlatMap":{"F":["internal::Or","internal::FlatMap","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","internal::Into"],"G":["core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Map","internal::Into","internal::And","internal::Or","internal::MapRes"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::And","std::boxed::Box","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::And","internal::Or","internal::Into","internal::MapOpt"],"G":["core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>"]},"internal::Or":{"F":["std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Or","internal::MapRes"],"G":["internal::And","internal::MapRes","internal::Into","internal::Map","internal::MapOpt","internal::FlatMap","internal::Or","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["std::marker::Sized","internal::Parser"],"E":["std::marker::Sized","internal::Parser"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"H":["std::marker::Sized","internal::Parser"],"I":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized","internal::Parser"],"K":["internal::Parser","std::marker::Sized"],"L":["internal::Parser","std::marker::Sized"],"M":["std::marker::Sized","internal::Parser"],"N":["std::marker::Sized","internal::Parser"],"O":["internal::Parser","std::marker::Sized"],"Output":["std::marker::Sized"],"P":["std::marker::Sized","internal::Parser"],"Q":["std::marker::Sized","internal::Parser"],"R":["internal::Parser","std::marker::Sized"],"S":["std::marker::Sized","internal::Parser"],"T":["std::marker::Sized","internal::Parser"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Map","internal::MapRes","internal::Into","internal::FlatMap","internal::And","internal::AndThen","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt"],"B":["internal::And","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into","internal::Or","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::MapOpt"],"C":["internal::Map","internal::And","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::Into"],"D":["internal::And","internal::MapRes","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Into","internal::AndThen","internal::Or"],"E":["internal::MapRes","std::boxed::Box","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen","internal::MapOpt","internal::FlatMap"],"Error":["error::Error","error::VerboseError"],"F":["internal::MapRes","internal::MapOpt","internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::Or","internal::FlatMap"],"G":["internal::And","internal::FlatMap","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapOpt","internal::Into","internal::MapRes"],"H":["internal::MapRes","internal::FlatMap","internal::Into","internal::Map","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or"],"I":["internal::Or","internal::AndThen","std::boxed::Box","internal::And","internal::Into","internal::MapRes","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap"],"Input":["error::VerboseErrorKind","internal::Err","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","number::Endianness"],"J":["internal::Map","internal::Or","internal::Into","std::boxed::Box","internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes"],"K":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::FlatMap","internal::Or","internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt"],"L":["internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Or","internal::FlatMap","internal::Into","internal::MapOpt","internal::MapRes","internal::AndThen"],"M":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::AndThen","internal::Or","std::boxed::Box","internal::And","internal::Map","internal::MapRes","internal::FlatMap"],"N":["internal::AndThen","internal::MapOpt","internal::MapRes","internal::Map","internal::And","std::boxed::Box","internal::FlatMap","internal::Into","internal::Or","<F as internal::Parser<I>>"],"O":["internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::Into","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapOpt"],"Output":["RUG_ANY"],"P":["internal::And","internal::FlatMap","internal::AndThen","internal::Into","internal::Map","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes"],"Q":["internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::Map","std::boxed::Box","internal::FlatMap","internal::Into","internal::AndThen","internal::MapOpt"],"R":["internal::MapRes","internal::FlatMap","std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map"],"S":["<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::And","internal::Into","internal::AndThen"],"T":["internal::MapRes","internal::FlatMap","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","std::boxed::Box","internal::Map","internal::AndThen"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::Into","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::Map","std::boxed::Box","internal::MapOpt","internal::AndThen"],"G":["internal::Or","internal::Into","internal::And","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"]},"internal::AndThen":{"F":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or","std::boxed::Box","internal::AndThen","internal::Map","internal::MapRes","internal::Into"],"G":["internal::Or","internal::AndThen","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::Into","internal::Map"]},"internal::Err":{"E":["error::Error","<*mut T as std::fmt::Debug>","number::Endianness","internal::Err","internal::Needed","error::VerboseErrorKind","error::ErrorKind","error::VerboseError"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","internal::Map","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::Map","internal::FlatMap","internal::MapRes","internal::Into","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::FlatMap","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Map","std::boxed::Box","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::AndThen","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::And","internal::Or","internal::Into"],"G":["internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapOpt","internal::MapRes","internal::Into","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::Parser","std::marker::Sized"],"B":["internal::Parser","std::marker::Sized"],"C":["internal::Parser","std::marker::Sized"],"D":["internal::Parser","std::marker::Sized"],"E":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"],"H":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized","internal::Parser"],"K":["internal::Parser","std::marker::Sized"],"L":["std::marker::Sized","internal::Parser"],"M":["std::marker::Sized","internal::Parser"],"N":["internal::Parser","std::marker::Sized"],"O":["std::marker::Sized","internal::Parser"],"Output":["std::marker::Sized"],"P":["internal::Parser","std::marker::Sized"],"Q":["internal::Parser","std::marker::Sized"],"R":["std::marker::Sized","internal::Parser"],"S":["std::marker::Sized","internal::Parser"],"T":["std::marker::Sized","internal::Parser"],"U":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) as branch::Alt<Input, Output, Error>>::choice":{"A":["internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::MapRes","internal::Or","internal::AndThen","internal::Map","internal::And"],"B":["internal::AndThen","internal::Map","internal::And","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes"],"C":["internal::FlatMap","internal::And","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::AndThen"],"D":["internal::MapOpt","internal::AndThen","internal::MapRes","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::FlatMap","internal::Into"],"E":["std::boxed::Box","internal::MapOpt","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::And","internal::AndThen","internal::Or"],"Error":["error::VerboseError","error::Error"],"F":["internal::AndThen","internal::Into","internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","internal::Or","<F as internal::Parser<I>>"],"G":["internal::Or","internal::Map","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box"],"H":["internal::Or","internal::And","internal::AndThen","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Map","internal::Into"],"I":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Into","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapRes","internal::And","internal::AndThen"],"Input":["internal::Err","number::Endianness","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind","internal::Needed"],"J":["internal::MapRes","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Into","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box"],"K":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","std::boxed::Box"],"L":["internal::Map","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes"],"M":["internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Into","internal::Or","internal::FlatMap"],"N":["internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into"],"O":["internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::MapOpt"],"Output":["RUG_ANY"],"P":["<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::AndThen","internal::And","internal::Into","internal::Or","internal::FlatMap","std::boxed::Box"],"Q":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::And","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes"],"R":["internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","internal::Map","internal::Into","std::boxed::Box"],"S":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And","internal::MapRes","internal::Into","internal::MapOpt","internal::AndThen"],"T":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::MapRes","internal::Or","std::boxed::Box","internal::Map"],"U":["internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Map","internal::Into","internal::Or","<F as internal::Parser<I>>","std::boxed::Box"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["std::boxed::Box","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","internal::And","internal::MapOpt"],"G":["std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::And"]},"internal::AndThen":{"F":["internal::MapOpt","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","internal::Or"],"G":["internal::FlatMap","internal::Map","internal::MapOpt","internal::AndThen","internal::Into","std::boxed::Box","internal::Or","internal::And","internal::MapRes","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseError","error::ErrorKind","internal::Err","number::Endianness","internal::Needed","error::VerboseErrorKind","error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::MapOpt","internal::Or","std::boxed::Box","internal::MapRes","internal::And","internal::Into","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Map"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::MapRes","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::And","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map"],"G":["core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::Or","internal::FlatMap","std::boxed::Box","internal::And","internal::MapOpt","internal::Into","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Or","internal::And","internal::Into"],"G":["internal::Into","std::boxed::Box","internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::MapOpt","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(A,) as branch::Alt<Input, Output, Error>>::choice
deps:{"<&A as std::alloc::Allocator>":{},"<(A,) as branch::Alt<Input, Output, Error>>::choice":{"A":["std::marker::Sized","internal::Parser"],"Error":["error::ParseError","std::marker::Sized"],"Input":["std::marker::Sized"],"Output":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(A,) as branch::Alt<Input, Output, Error>>::choice":{"A":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::And","internal::Or","std::boxed::Box","internal::FlatMap"],"Error":["error::Error","error::VerboseError"],"Input":["RUG_ANY"],"Output":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::And","internal::AndThen","internal::Map","std::boxed::Box"],"G":["internal::And","internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes"],"G":["internal::AndThen","internal::MapOpt","internal::Into","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","std::boxed::Box","internal::Map"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","internal::Needed","<*const T as std::fmt::Debug>","number::Endianness","internal::Err","error::Error","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Into","internal::AndThen","internal::And","internal::Or","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::Or","internal::FlatMap","internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapOpt","internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::Or","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::Map","internal::Or","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","internal::And"],"G":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::Into","std::boxed::Box","internal::FlatMap","internal::And","internal::Map","internal::Or","internal::AndThen","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Map","internal::And","internal::Into","internal::MapRes","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (A,)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.choice(p1);
+<(A,) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+crate::<(A,) as branch::Alt<Input, Output, Error>>::choice(p0, p1);
+<(A,)>::choice(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB) as branch::Permutation<Input, (A, B), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB) as branch::Permutation<Input, (A, B), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB) as branch::Permutation<Input, (A, B), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"FnA":["internal::MapRes","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::Map"],"FnB":["internal::Into","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt","internal::And","internal::MapRes","<F as internal::Parser<I>>"],"Input":["internal::Err","error::VerboseError","error::ErrorKind","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","internal::Needed","error::Error"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapRes","internal::Into","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Or","internal::Map"],"G":["internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::MapRes","internal::And","internal::Into"]},"internal::AndThen":{"F":["internal::MapRes","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::MapOpt"],"G":["internal::Map","internal::AndThen","internal::And","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box"]},"internal::Err":{"E":["internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","internal::Err","error::VerboseError","error::ErrorKind","number::Endianness","error::Error"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::FlatMap","internal::And","internal::Into","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt"],"G":["core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::MapOpt","internal::AndThen","internal::And","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Into","internal::Map","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::MapRes","internal::FlatMap"],"G":["core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Map","internal::And","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::AndThen","internal::And","internal::Or","internal::MapOpt","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into"],"G":["core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Map","internal::Into","std::boxed::Box","internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"G":["internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB) as branch::Permutation<Input, (A, B), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB) as branch::Permutation<Input, (A, B), Error>>::permutation(p0, p1);
+<(FnA, FnB)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC) as branch::Permutation<Input, (A, B, C), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC) as branch::Permutation<Input, (A, B, C), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC) as branch::Permutation<Input, (A, B, C), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"FnA":["internal::AndThen","internal::MapRes","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map"],"FnB":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Map","std::boxed::Box","internal::And","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap"],"FnC":["internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::And"],"Input":["error::VerboseErrorKind","error::Error","internal::Err","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","number::Endianness","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &T>"]},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::And","internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"],"G":["internal::Or","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Map","internal::MapOpt","internal::FlatMap","internal::And"]},"internal::AndThen":{"F":["internal::MapRes","internal::MapOpt","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap"],"G":["internal::Map","internal::AndThen","internal::And","internal::FlatMap","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","std::boxed::Box"]},"internal::Err":{"E":["error::VerboseError","error::ErrorKind","error::Error","internal::Err","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Or","internal::Map","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeDefault"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::FlatMap","internal::MapOpt","internal::Or","internal::Into","internal::AndThen","internal::Map","std::boxed::Box","internal::And","internal::MapRes","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::FlatMap","internal::And","std::boxed::Box"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::Or","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes"],"G":["core::str::LinesAnyMap","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["std::boxed::Box","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Or","internal::Map","internal::And","internal::MapRes"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::MapOpt","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::And","internal::FlatMap","internal::Map","internal::Into","internal::AndThen"],"G":["internal::Map","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC) as branch::Permutation<Input, (A, B, C), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC) as branch::Permutation<Input, (A, B, C), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD) as branch::Permutation<Input, (A, B, C, D), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD) as branch::Permutation<Input, (A, B, C, D), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD) as branch::Permutation<Input, (A, B, C, D), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"FnA":["internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Or","internal::FlatMap","internal::And","internal::Map","internal::Into"],"FnB":["internal::Map","internal::MapRes","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Into","internal::And","std::boxed::Box"],"FnC":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","internal::Or","internal::And","internal::MapRes"],"FnD":["internal::Into","std::boxed::Box","internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapOpt"],"Input":["number::Endianness","error::Error","internal::Err","error::ErrorKind","internal::Needed","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into","internal::And","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::AndThen"],"G":["internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::Or","internal::Into","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::Map","std::boxed::Box","internal::MapRes","internal::And","internal::FlatMap"],"G":["internal::MapRes","internal::And","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Or","internal::FlatMap"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","number::Endianness","internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseError","error::ErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::AndThen","internal::Or","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map"],"G":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::MapOpt","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Into","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Map","internal::Into","internal::And","internal::FlatMap","internal::AndThen","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Or","internal::Map","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Into"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Map","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or"],"G":["internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD) as branch::Permutation<Input, (A, B, C, D), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD) as branch::Permutation<Input, (A, B, C, D), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE) as branch::Permutation<Input, (A, B, C, D, E), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE) as branch::Permutation<Input, (A, B, C, D, E), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE) as branch::Permutation<Input, (A, B, C, D, E), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"FnA":["internal::Into","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::And"],"FnB":["internal::FlatMap","internal::Or","std::boxed::Box","internal::Into","internal::MapRes","internal::Map","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::MapOpt"],"FnC":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into","internal::Or","internal::Map","internal::And","internal::MapRes","internal::AndThen"],"FnD":["internal::AndThen","internal::MapOpt","std::boxed::Box","internal::And","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::Or"],"FnE":["internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Into","internal::Map"],"Input":["number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","error::Error","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","error::VerboseError","internal::Needed","error::VerboseErrorKind","error::ErrorKind"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::Map","internal::AndThen","internal::MapOpt","internal::Or","internal::MapRes"],"G":["internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::AndThen"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::Or","internal::Into","internal::Map","internal::And","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen"]},"internal::Err":{"E":["error::Error","error::VerboseErrorKind","number::Endianness","error::ErrorKind","internal::Needed","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err"]},"internal::FlatMap":{"F":["internal::Into","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::Map","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Into","internal::MapRes","internal::FlatMap","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::Or","internal::Into","internal::MapRes","internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Or"],"G":["core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into","internal::FlatMap","internal::Map","internal::And","internal::Or","<F as internal::Parser<I>>","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::Or","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Map"],"G":["internal::Map","internal::And","internal::Or","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE) as branch::Permutation<Input, (A, B, C, D, E), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE) as branch::Permutation<Input, (A, B, C, D, E), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF) as branch::Permutation<Input, (A, B, C, D, E, F), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF) as branch::Permutation<Input, (A, B, C, D, E, F), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF) as branch::Permutation<Input, (A, B, C, D, E, F), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Into"],"FnB":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","internal::And","internal::MapRes"],"FnC":["internal::FlatMap","internal::Or","internal::Map","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::AndThen","internal::MapOpt"],"FnD":["internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::And"],"FnE":["internal::Or","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box"],"FnF":["internal::FlatMap","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"Input":["error::VerboseError","internal::Err","error::Error","error::ErrorKind","error::VerboseErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness"]},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::Or","internal::MapOpt","internal::Map","internal::And","internal::AndThen","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"G":["std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map","internal::Or","internal::MapRes","internal::And"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::And","internal::Or","internal::AndThen"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::Map","internal::FlatMap"]},"internal::Err":{"E":["internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","error::ErrorKind","number::Endianness","error::VerboseError","error::VerboseErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::Into","internal::AndThen","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapOpt","std::boxed::Box","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And","internal::Or","internal::Into","internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::AndThen","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map"],"G":["core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::Or","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","internal::And","<F as internal::Parser<I>>"],"G":["core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["internal::Into","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Or","internal::MapOpt","internal::And"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::And","internal::Into","internal::FlatMap","internal::Or","internal::MapOpt"],"G":["internal::Map","internal::FlatMap","internal::Or","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Into","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF) as branch::Permutation<Input, (A, B, C, D, E, F), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF) as branch::Permutation<Input, (A, B, C, D, E, F), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as branch::Permutation<Input, (A, B, C, D, E, F, G), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as branch::Permutation<Input, (A, B, C, D, E, F, G), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as branch::Permutation<Input, (A, B, C, D, E, F, G), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Map","internal::FlatMap","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::Into"],"FnB":["internal::Into","internal::Or","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Map","internal::FlatMap"],"FnC":["std::boxed::Box","internal::Map","internal::MapOpt","internal::AndThen","internal::And","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"FnD":["internal::MapOpt","internal::MapRes","internal::Map","internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen"],"FnE":["internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::And","internal::Or"],"FnF":["internal::Into","internal::And","internal::Map","internal::FlatMap","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box"],"FnG":["internal::MapRes","internal::AndThen","internal::Or","internal::Map","internal::And","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>"],"G":["RUG_ANY"],"Input":["error::VerboseErrorKind","internal::Needed","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","error::ErrorKind"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Or","internal::FlatMap","internal::And","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","internal::Map","<F as internal::Parser<I>>"],"G":["internal::AndThen","internal::Map","internal::Or","std::boxed::Box","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And"]},"internal::AndThen":{"F":["internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Into","internal::Map","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt"],"G":["internal::Into","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","error::ErrorKind","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","internal::Err","error::Error"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapRes","internal::Map","std::boxed::Box","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And"],"G":["core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["<F as internal::Parser<I>>","internal::Into","internal::Or","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::And","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Or","internal::Into","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::And","std::boxed::Box"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::FlatMap","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes","std::boxed::Box","internal::And","internal::AndThen"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::Into","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And"],"G":["core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::Or","internal::FlatMap","internal::MapRes","internal::And"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::And","internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as branch::Permutation<Input, (A, B, C, D, E, F, G), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as branch::Permutation<Input, (A, B, C, D, E, F, G), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as branch::Permutation<Input, (A, B, C, D, E, F, G, H), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as branch::Permutation<Input, (A, B, C, D, E, F, G, H), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as branch::Permutation<Input, (A, B, C, D, E, F, G, H), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::MapOpt","internal::Or","internal::And","std::boxed::Box","internal::Map","internal::AndThen"],"FnB":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Map"],"FnC":["internal::MapOpt","internal::Into","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::AndThen","internal::Or"],"FnD":["internal::And","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Map","std::boxed::Box","internal::FlatMap"],"FnE":["internal::And","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","internal::Into","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes"],"FnF":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Or","internal::AndThen","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into"],"FnG":["internal::MapRes","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::And","internal::Or","internal::Into"],"FnH":["internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into","internal::And","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapOpt","internal::MapRes"],"G":["RUG_ANY"],"H":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::ErrorKind","internal::Err","internal::Needed","error::VerboseError","error::Error","error::VerboseErrorKind"]},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::And","std::boxed::Box","internal::Or","internal::Into","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapOpt"],"G":["internal::FlatMap","internal::Map","internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Map"],"G":["internal::Map","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into"]},"internal::Err":{"E":["internal::Err","number::Endianness","internal::Needed","error::Error","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::MapOpt","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Into"],"G":["core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or","std::boxed::Box","internal::And","internal::AndThen","internal::Map","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","internal::And"],"G":["core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Into","internal::Or","internal::MapRes","internal::Map","internal::And","internal::FlatMap","internal::MapOpt"],"G":["core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And"],"G":["std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::MapOpt","internal::And","internal::Or","internal::Map","internal::Into","internal::MapRes","internal::FlatMap","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>"],"G":["internal::Into","internal::AndThen","internal::And","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as branch::Permutation<Input, (A, B, C, D, E, F, G, H), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as branch::Permutation<Input, (A, B, C, D, E, F, G, H), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::Or","internal::MapRes","internal::FlatMap","internal::Into"],"FnB":["internal::And","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt"],"FnC":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::AndThen","internal::Or","internal::And","internal::MapOpt","internal::MapRes","internal::FlatMap","std::boxed::Box"],"FnD":["internal::MapRes","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap"],"FnE":["internal::AndThen","internal::FlatMap","internal::And","internal::Or","internal::MapOpt","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"FnF":["std::boxed::Box","internal::Map","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes","internal::And","internal::Or","<F as internal::Parser<I>>","internal::MapOpt"],"FnG":["internal::AndThen","internal::Into","internal::FlatMap","internal::Or","internal::And","internal::Map","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box"],"FnH":["internal::And","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","internal::Or"],"FnI":["internal::AndThen","internal::Map","internal::And","internal::Or","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","error::VerboseErrorKind","error::VerboseError","internal::Err","error::Error","number::Endianness"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Map","internal::Or","internal::AndThen","internal::Into","<F as internal::Parser<I>>"],"G":["internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box"]},"internal::AndThen":{"F":["internal::MapOpt","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::And"],"G":["internal::MapRes","internal::And","internal::MapOpt","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box"]},"internal::Err":{"E":["std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","number::Endianness","error::VerboseErrorKind","error::VerboseError","internal::Err","error::Error","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Into","internal::Or","internal::Map","internal::And","internal::MapRes","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::And","internal::Or","internal::Into","internal::MapRes","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::Map"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::Into","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","internal::Map","internal::FlatMap","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace"]},"internal::MapRes":{"F":["std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapOpt","internal::And"],"G":["core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::MapRes","internal::Into","internal::Or","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::And"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::AndThen","std::boxed::Box","internal::Map","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::And","internal::FlatMap","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapOpt","internal::Into","internal::AndThen"],"FnB":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::And","internal::Into","internal::FlatMap","internal::Or","internal::MapOpt","internal::Map"],"FnC":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Or","internal::MapOpt","internal::And","internal::Map"],"FnD":["std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","internal::MapOpt","internal::MapRes","internal::Into","internal::Map"],"FnE":["internal::MapRes","internal::Or","internal::Into","internal::MapOpt","internal::And","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen"],"FnF":["internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map","std::boxed::Box","internal::Into"],"FnG":["internal::MapOpt","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","internal::Map","internal::Or","<F as internal::Parser<I>>"],"FnH":["internal::And","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt","internal::Into","internal::AndThen","std::boxed::Box","internal::Map","internal::MapRes"],"FnI":["internal::MapOpt","internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box"],"FnJ":["internal::MapRes","internal::FlatMap","internal::Map","std::boxed::Box","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Or"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","internal::Err","error::VerboseError","internal::Needed","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","error::Error"],"J":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Or","internal::MapOpt","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Map"],"G":["internal::AndThen","internal::And","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::Or","std::boxed::Box","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Map","internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::MapRes","internal::And"],"G":["internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","internal::AndThen","internal::And","internal::FlatMap"]},"internal::Err":{"E":["error::VerboseErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","internal::Needed","error::ErrorKind","internal::Err","error::Error"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","internal::And","internal::FlatMap","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","internal::Into","internal::MapRes","internal::Or","<F as internal::Parser<I>>"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapOpt","internal::And"],"G":["internal::MapOpt","internal::MapRes","internal::AndThen","internal::Or","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::And"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map","internal::MapOpt","internal::FlatMap"],"FnB":["internal::Map","internal::Into","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes"],"FnC":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt","internal::Into","internal::Or","internal::AndThen"],"FnD":["internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Map","internal::MapOpt","internal::Into","std::boxed::Box"],"FnE":["internal::AndThen","internal::MapOpt","internal::Or","internal::FlatMap","internal::Into","internal::Map","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>"],"FnF":["internal::FlatMap","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapOpt"],"FnG":["internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Map","internal::Into","internal::And","internal::FlatMap","internal::MapOpt"],"FnH":["internal::Map","internal::MapOpt","internal::MapRes","internal::Or","internal::Into","internal::FlatMap","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And"],"FnI":["internal::MapOpt","internal::Map","internal::MapRes","internal::And","internal::FlatMap","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box"],"FnJ":["internal::And","internal::FlatMap","std::boxed::Box","internal::Into","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::AndThen"],"FnK":["internal::MapOpt","internal::FlatMap","internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseError","error::VerboseErrorKind","internal::Err","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","error::ErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapOpt","internal::FlatMap","internal::And","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::Map","std::boxed::Box"],"G":["internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into","internal::AndThen","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::MapRes","internal::And","internal::AndThen"],"G":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::And","internal::Map","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Into"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::ErrorKind","internal::Err","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","std::boxed::Box","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::And","internal::FlatMap","internal::Or"],"G":["core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::MapOpt","internal::FlatMap","internal::And","internal::Or","std::boxed::Box","internal::Into","internal::AndThen"],"G":["core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["std::boxed::Box","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::And","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::Map"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::FlatMap","internal::MapRes","internal::Into","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::Or"],"G":["internal::FlatMap","internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt","internal::And","internal::Into","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::AndThen"],"FnB":["internal::Or","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap"],"FnC":["internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","internal::And","internal::Map"],"FnD":["internal::AndThen","internal::Map","internal::Into","internal::Or","internal::FlatMap","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::And","std::boxed::Box"],"FnE":["internal::MapOpt","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::AndThen","std::boxed::Box","internal::Map"],"FnF":["internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::MapOpt","internal::MapRes"],"FnG":["internal::Or","internal::MapRes","internal::Into","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Map","std::boxed::Box"],"FnH":["std::boxed::Box","internal::MapOpt","internal::And","internal::MapRes","internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap"],"FnI":["internal::FlatMap","internal::Map","internal::Into","internal::Or","std::boxed::Box","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes"],"FnJ":["internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::Or","internal::FlatMap","internal::AndThen","internal::Into","<F as internal::Parser<I>>"],"FnK":["internal::Map","internal::FlatMap","internal::Into","internal::Or","internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes"],"FnL":["internal::FlatMap","internal::And","internal::MapOpt","internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapRes"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","error::Error","internal::Needed","error::VerboseError","number::Endianness"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::Or","internal::And","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Into"],"G":["internal::Into","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map","internal::Or"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Map","internal::Into","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapOpt","internal::Or"],"G":["internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","internal::Err","error::VerboseErrorKind","error::Error","error::VerboseError","number::Endianness","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::Or","internal::MapOpt","internal::MapRes","internal::Map","internal::AndThen","internal::Into","internal::FlatMap","std::boxed::Box","internal::And","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","std::boxed::Box","internal::Into","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Or","internal::And","internal::MapRes","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::MapRes","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::Into"],"G":["core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::And","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Map","internal::FlatMap","internal::Into"],"G":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","std::boxed::Box","internal::And","internal::MapRes","internal::Into","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::MapRes","internal::Map","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","internal::And","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"FnB":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Map","internal::Or","internal::And"],"FnC":["internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::Or","internal::Map","internal::Into"],"FnD":["internal::MapRes","internal::FlatMap","internal::Map","internal::And","internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>"],"FnE":["internal::Or","internal::Into","internal::AndThen","internal::Map","internal::FlatMap","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::And","<F as internal::Parser<I>>"],"FnF":["internal::Into","internal::AndThen","internal::Map","internal::MapOpt","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap"],"FnG":["internal::AndThen","internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes"],"FnH":["internal::Map","internal::FlatMap","std::boxed::Box","internal::Into","internal::AndThen","internal::Or","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"FnI":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapRes","internal::AndThen","internal::MapOpt","internal::Or","internal::And","std::boxed::Box","internal::FlatMap"],"FnJ":["std::boxed::Box","internal::Map","internal::Into","internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::And"],"FnK":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Map"],"FnL":["internal::And","internal::MapOpt","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map","internal::Or","std::boxed::Box"],"FnM":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::And"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","error::ErrorKind","internal::Err","error::Error","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Needed"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::And","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box"],"G":["internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::AndThen"]},"internal::AndThen":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","internal::FlatMap","internal::Or"],"G":["internal::Or","internal::Map","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes","internal::And","internal::MapOpt"]},"internal::Err":{"E":["internal::Needed","error::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","internal::Err","error::ErrorKind","error::VerboseError","number::Endianness"]},"internal::FlatMap":{"F":["internal::MapRes","internal::Map","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::Or","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Map","internal::FlatMap","internal::And","internal::AndThen","internal::Into","internal::MapOpt"],"G":["core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Or","std::boxed::Box","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Into","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::And","std::boxed::Box","internal::MapRes","internal::Or","internal::AndThen","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::IsNotEmpty"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Into","internal::Or","internal::MapRes","internal::Map"],"G":["internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::AndThen","internal::Map","internal::Into","internal::FlatMap","std::boxed::Box"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::FlatMap","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::And"],"FnB":["internal::FlatMap","internal::MapRes","internal::MapOpt","internal::And","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"],"FnC":["internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::FlatMap","internal::MapRes","internal::And"],"FnD":["<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Or","internal::MapOpt","internal::Into"],"FnE":["internal::Into","<F as internal::Parser<I>>","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map","internal::FlatMap","internal::And","internal::MapRes"],"FnF":["internal::Into","internal::AndThen","internal::And","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::MapOpt","internal::FlatMap"],"FnG":["internal::Into","std::boxed::Box","internal::And","internal::AndThen","internal::Or","internal::Map","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>"],"FnH":["internal::MapRes","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","std::boxed::Box","internal::And","internal::Into","internal::AndThen"],"FnI":["internal::Into","std::boxed::Box","internal::Or","internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::FlatMap"],"FnJ":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::And","internal::FlatMap","internal::Into","internal::Map","internal::AndThen","internal::Or","std::boxed::Box"],"FnK":["internal::MapOpt","internal::Into","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And"],"FnL":["internal::AndThen","internal::Map","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt"],"FnM":["internal::Map","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::And"],"FnN":["internal::Into","internal::And","internal::Map","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Or","internal::FlatMap"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseError","internal::Err","error::ErrorKind","internal::Needed","number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","error::Error"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::And","internal::Or","std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Map","internal::Into","std::boxed::Box","internal::And","internal::FlatMap","internal::MapOpt","internal::MapRes"]},"internal::AndThen":{"F":["internal::Map","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Map","internal::Into","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box"]},"internal::Err":{"E":["error::VerboseError","error::Error","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","number::Endianness","error::VerboseErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["internal::And","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Into","internal::Map","internal::FlatMap","internal::Or","<F as internal::Parser<I>>"],"G":["core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","internal::Into","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","internal::AndThen","internal::Into","internal::MapOpt","internal::FlatMap","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::Or","internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::AndThen"],"G":["core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::And","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt"],"G":["core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::Into","internal::And","internal::Map","internal::AndThen","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt"],"G":["internal::MapOpt","internal::And","internal::FlatMap","internal::Into","internal::Map","internal::Or","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["std::marker::Sized","internal::Parser"],"FnM":["internal::Parser","std::marker::Sized"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt"],"FnB":["internal::And","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::AndThen"],"FnC":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","internal::AndThen","internal::FlatMap","internal::And"],"FnD":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","internal::Or","internal::And"],"FnE":["internal::AndThen","internal::MapRes","internal::MapOpt","internal::Map","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::FlatMap"],"FnF":["std::boxed::Box","internal::FlatMap","internal::Into","internal::MapOpt","internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"FnG":["internal::Or","internal::Into","internal::MapOpt","internal::And","internal::MapRes","internal::FlatMap","internal::Map","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"FnH":["internal::And","internal::Into","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen"],"FnI":["std::boxed::Box","internal::Map","internal::MapOpt","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::Into"],"FnJ":["internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::Into"],"FnK":["internal::Into","internal::And","internal::MapRes","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map"],"FnL":["internal::Map","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::Into"],"FnM":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::And","internal::MapRes","internal::Into","internal::MapOpt","internal::Or"],"FnN":["internal::And","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::FlatMap"],"FnO":["internal::FlatMap","internal::Or","std::boxed::Box","internal::MapRes","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Map"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::ErrorKind","number::Endianness","internal::Err","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","error::Error"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Map"],"G":["internal::Into","internal::Or","internal::MapOpt","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes","internal::And"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Into","internal::MapRes","internal::Map","internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::And","std::boxed::Box"],"G":["internal::MapRes","internal::Into","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And"]},"internal::Err":{"E":["error::Error","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","number::Endianness","internal::Needed","error::VerboseError","internal::Err"]},"internal::FlatMap":{"F":["internal::AndThen","internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::FlatMap","internal::MapRes","internal::And"],"G":["core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::Map","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Map","internal::Or","internal::And"],"G":["core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::MapRes"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::And","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Into","std::boxed::Box","internal::Or"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::And","internal::MapOpt","internal::AndThen","internal::FlatMap"],"G":["internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::FlatMap"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["internal::Parser","std::marker::Sized"],"FnN":["std::marker::Sized","internal::Parser"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::Into","internal::FlatMap","internal::Map","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::And"],"FnB":["<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapRes","internal::And","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Map"],"FnC":["internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Or"],"FnD":["internal::Or","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapOpt"],"FnE":["internal::Into","internal::MapRes","internal::And","std::boxed::Box","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or"],"FnF":["internal::MapOpt","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen","internal::Into","std::boxed::Box","internal::And"],"FnG":["internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Or"],"FnH":["internal::And","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Or","internal::FlatMap","internal::Map"],"FnI":["internal::AndThen","internal::MapOpt","internal::Map","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Or","internal::FlatMap"],"FnJ":["internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Into","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen"],"FnK":["internal::MapOpt","internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map"],"FnL":["internal::AndThen","internal::Into","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::FlatMap","internal::MapOpt","internal::MapRes"],"FnM":["internal::Into","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or"],"FnN":["internal::Into","internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::And","internal::MapRes"],"FnO":["internal::Or","internal::AndThen","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box"],"FnP":["internal::Into","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","number::Endianness","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","error::ErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for &T>"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::And","internal::MapOpt","internal::Or","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::MapRes","internal::MapOpt","internal::Into","internal::And","<F as internal::Parser<I>>","internal::Map","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::MapOpt","internal::Map","internal::Or","internal::Into","internal::And","internal::FlatMap","std::boxed::Box"],"G":["internal::MapOpt","internal::Map","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","internal::Needed","number::Endianness","error::VerboseErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","internal::AndThen","internal::MapRes","internal::Into","std::boxed::Box","internal::Or"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::And","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::MapOpt","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Map","internal::And","internal::Into"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Into","internal::And","internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","internal::MapOpt"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","internal::AndThen","internal::And"],"G":["internal::MapOpt","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["std::marker::Sized","internal::Parser"],"FnQ":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::AndThen","internal::Or","internal::MapRes","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And","std::boxed::Box"],"FnB":["internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map","internal::Or","std::boxed::Box"],"FnC":["internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::And"],"FnD":["internal::Map","<F as internal::Parser<I>>","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::And","internal::Or","internal::MapOpt"],"FnE":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::And","internal::MapOpt","internal::Map","internal::Into","internal::AndThen"],"FnF":["internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box"],"FnG":["internal::MapRes","internal::And","internal::Into","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen"],"FnH":["internal::MapRes","internal::MapOpt","internal::Map","internal::AndThen","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","std::boxed::Box"],"FnI":["internal::And","internal::Into","internal::MapOpt","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::FlatMap","internal::Map"],"FnJ":["internal::AndThen","internal::Into","internal::MapOpt","internal::And","internal::Or","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"FnK":["<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or","internal::AndThen","internal::Map","internal::And","internal::MapRes","internal::MapOpt"],"FnL":["internal::Map","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Into"],"FnM":["internal::MapRes","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And","internal::FlatMap","internal::Into"],"FnN":["internal::Into","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Map","std::boxed::Box"],"FnO":["internal::Or","<F as internal::Parser<I>>","internal::Into","internal::And","internal::Map","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes"],"FnP":["<F as internal::Parser<I>>","internal::MapOpt","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen"],"FnQ":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::Map","std::boxed::Box","internal::AndThen","internal::MapOpt"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","error::VerboseErrorKind","error::VerboseError","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","number::Endianness"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::MapOpt"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Into","std::boxed::Box","internal::AndThen","internal::Or","internal::Map","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapRes","internal::FlatMap","internal::AndThen","internal::Into","std::boxed::Box","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::And"],"G":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::Map","internal::Into","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::AndThen"]},"internal::Err":{"E":["error::Error","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::ErrorKind","error::VerboseError","internal::Needed","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::And"],"G":["std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::Map","internal::And","internal::MapRes","internal::Or","internal::Into","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::And"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapRes","internal::MapOpt","internal::And","internal::Or","internal::Map","internal::AndThen"],"G":["core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::Or","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Into","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or","internal::And","std::boxed::Box","internal::Into"],"G":["internal::And","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapOpt","internal::Into","internal::MapRes","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["std::marker::Sized","internal::Parser"],"FnM":["internal::Parser","std::marker::Sized"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["internal::Parser","std::marker::Sized"],"FnR":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or","internal::Map","internal::Into","internal::And","internal::FlatMap","internal::MapOpt","internal::AndThen"],"FnB":["internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","internal::Into","internal::MapOpt","std::boxed::Box","internal::Or","internal::AndThen"],"FnC":["internal::Into","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And"],"FnD":["internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Map","internal::Into","<F as internal::Parser<I>>"],"FnE":["<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes","internal::MapOpt","internal::And","internal::Map","internal::Or"],"FnF":["internal::MapRes","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Into","internal::Or","internal::AndThen","internal::Map","internal::MapOpt","internal::FlatMap"],"FnG":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen"],"FnH":["internal::AndThen","internal::And","internal::Map","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Into","std::boxed::Box","internal::FlatMap"],"FnI":["internal::Or","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","internal::And","internal::MapRes"],"FnJ":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And","internal::FlatMap","internal::Or","internal::AndThen","internal::MapRes","internal::MapOpt","internal::Into"],"FnK":["<F as internal::Parser<I>>","internal::Map","internal::Or","internal::And","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen","std::boxed::Box"],"FnL":["internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into"],"FnM":["internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","internal::Map"],"FnN":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","internal::Map","internal::Into","std::boxed::Box"],"FnO":["internal::Or","std::boxed::Box","internal::Into","internal::Map","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::And"],"FnP":["internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Map","internal::And","internal::Into"],"FnQ":["internal::Into","std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>"],"FnR":["std::boxed::Box","internal::Into","internal::FlatMap","internal::And","internal::Map","internal::AndThen","internal::MapOpt","internal::Or","internal::MapRes","<F as internal::Parser<I>>"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for &T>","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","error::Error","internal::Err","error::VerboseError","error::VerboseErrorKind","error::ErrorKind","number::Endianness"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::And","internal::MapRes","internal::AndThen","internal::Into","internal::MapOpt","internal::Map","internal::FlatMap"],"G":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::AndThen","internal::MapRes","internal::FlatMap","internal::And","internal::Into","internal::Map","internal::MapOpt"]},"internal::AndThen":{"F":["internal::Into","internal::AndThen","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Or"],"G":["internal::AndThen","internal::MapRes","std::boxed::Box","internal::Into","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Map"]},"internal::Err":{"E":["internal::Err","number::Endianness","<*mut T as std::fmt::Debug>","error::ErrorKind","error::VerboseErrorKind","error::Error","internal::Needed","error::VerboseError"]},"internal::FlatMap":{"F":["internal::Or","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::MapRes","internal::Map","internal::MapOpt","internal::And","internal::AndThen","internal::FlatMap"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::AndThen","internal::Into","internal::MapRes","internal::MapOpt","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Or","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::MapRes","internal::Map","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::And","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::FlatMap","internal::AndThen","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Into","internal::Or","std::boxed::Box"],"G":["<F as internal::Parser<I>>","internal::Into","internal::And","internal::Or","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["internal::Parser","std::marker::Sized"],"FnR":["internal::Parser","std::marker::Sized"],"FnS":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","internal::Into","internal::And","std::boxed::Box"],"FnB":["internal::MapOpt","internal::AndThen","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::Or","internal::FlatMap","internal::And"],"FnC":["internal::FlatMap","internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Into","internal::Map","internal::MapRes"],"FnD":["internal::Or","internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt"],"FnE":["internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::Or"],"FnF":["internal::Map","internal::MapRes","internal::Or","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"FnG":["std::boxed::Box","internal::FlatMap","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapOpt","internal::AndThen","internal::And"],"FnH":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::And"],"FnI":["internal::And","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::Or"],"FnJ":["internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Or","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into","internal::MapRes"],"FnK":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::AndThen","internal::Map","internal::MapOpt","internal::And","internal::Or","internal::MapRes","internal::FlatMap"],"FnL":["internal::Map","internal::Into","internal::MapRes","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","internal::AndThen"],"FnM":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or","internal::Map","internal::AndThen","internal::And","std::boxed::Box","internal::MapRes"],"FnN":["internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Map","internal::Into","std::boxed::Box"],"FnO":["std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","internal::MapRes","internal::Into","internal::Map"],"FnP":["internal::AndThen","internal::Or","internal::Into","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::And","internal::MapRes","internal::FlatMap"],"FnQ":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map"],"FnR":["internal::Or","internal::FlatMap","internal::And","internal::AndThen","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Map"],"FnS":["std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or","internal::Map"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::Error","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind","error::VerboseError","internal::Err","internal::Needed","number::Endianness","error::VerboseErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["std::boxed::Box","internal::FlatMap","internal::Map","internal::And","internal::AndThen","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Into"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::AndThen","internal::Map","internal::And","internal::MapOpt","std::boxed::Box","internal::Into","internal::Or"]},"internal::AndThen":{"F":["internal::Into","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"G":["internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::And","internal::MapRes","internal::Map","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","error::Error","<*const T as std::fmt::Debug>","internal::Err","error::VerboseErrorKind","error::ErrorKind","internal::Needed"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::MapRes","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::Or","internal::Map","std::boxed::Box","internal::Into","internal::And","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::AndThen","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["internal::Map","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","internal::Into"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Or","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::MapRes","internal::MapOpt"],"G":["core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::Into","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Map","internal::Or","internal::FlatMap"],"G":["internal::MapOpt","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["std::marker::Sized","internal::Parser"],"FnM":["internal::Parser","std::marker::Sized"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["std::marker::Sized","internal::Parser"],"FnQ":["std::marker::Sized","internal::Parser"],"FnR":["internal::Parser","std::marker::Sized"],"FnS":["internal::Parser","std::marker::Sized"],"FnT":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"],"T":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Into","internal::MapRes","internal::AndThen","std::boxed::Box","internal::And"],"FnB":["internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::And"],"FnC":["internal::AndThen","internal::Map","internal::MapOpt","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::And"],"FnD":["internal::FlatMap","internal::Or","internal::Into","internal::Map","internal::MapOpt","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::And"],"FnE":["std::boxed::Box","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::And","internal::FlatMap","internal::MapOpt","internal::Into"],"FnF":["internal::Or","internal::Into","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::And","internal::AndThen"],"FnG":["internal::FlatMap","internal::Map","internal::Or","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"FnH":["internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map"],"FnI":["internal::MapRes","std::boxed::Box","internal::And","internal::AndThen","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::Map"],"FnJ":["<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::And"],"FnK":["internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Map","internal::And","internal::Into"],"FnL":["internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::Or","internal::FlatMap","internal::And"],"FnM":["internal::Map","internal::And","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::MapRes"],"FnN":["internal::FlatMap","internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt"],"FnO":["<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","internal::Into","internal::MapOpt","internal::And","internal::FlatMap","internal::MapRes","std::boxed::Box"],"FnP":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","internal::Into","internal::Or"],"FnQ":["internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Into","internal::And","internal::MapRes","internal::Or","internal::MapOpt"],"FnR":["internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::And"],"FnS":["internal::Or","internal::AndThen","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And","internal::MapRes","internal::Map"],"FnT":["internal::MapRes","std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::ErrorKind","error::VerboseError","error::VerboseErrorKind","internal::Err","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","number::Endianness","std::clone::impls::<impl std::clone::Clone for *const T>","error::Error"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"],"T":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["std::boxed::Box","internal::Or","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","internal::Into"],"G":["internal::MapRes","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::Or"]},"internal::AndThen":{"F":["internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::AndThen","internal::MapRes","internal::Into","internal::Or"],"G":["internal::And","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt"]},"internal::Err":{"E":["error::VerboseError","internal::Err","internal::Needed","error::ErrorKind","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness","error::Error"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Or","internal::And","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::Into","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::MapRes","internal::Map","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::MapRes","internal::AndThen","internal::And"],"G":["core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Into","internal::And","internal::Or","internal::Map","std::boxed::Box","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["std::boxed::Box","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Map","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::And"],"G":["internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT)>::permutation(p0, p1);
-----------------
src/branch/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::permutation
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::permutation":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["std::marker::Sized","internal::Parser"],"FnQ":["std::marker::Sized","internal::Parser"],"FnR":["std::marker::Sized","internal::Parser"],"FnS":["std::marker::Sized","internal::Parser"],"FnT":["internal::Parser","std::marker::Sized"],"FnU":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::permutation":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["std::boxed::Box","internal::And","internal::Map","internal::Or","internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Into"],"FnB":["<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Or","internal::Into","internal::FlatMap"],"FnC":["<F as internal::Parser<I>>","internal::Or","internal::Map","internal::And","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes"],"FnD":["<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::AndThen","internal::Map","internal::And","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapOpt"],"FnE":["internal::AndThen","internal::Or","internal::Into","internal::And","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt"],"FnF":["<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapRes","internal::Or","std::boxed::Box","internal::Into","internal::MapOpt","internal::And","internal::AndThen"],"FnG":["internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","internal::MapRes","internal::AndThen","internal::FlatMap"],"FnH":["internal::MapOpt","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::MapRes","internal::Into"],"FnI":["std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes","internal::MapOpt","internal::And"],"FnJ":["internal::AndThen","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Into","internal::Or"],"FnK":["internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Into","internal::And"],"FnL":["internal::AndThen","internal::MapRes","internal::Or","internal::Map","internal::MapOpt","std::boxed::Box","internal::Into","internal::FlatMap","internal::And","<F as internal::Parser<I>>"],"FnM":["internal::FlatMap","internal::Or","std::boxed::Box","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::MapRes","internal::And"],"FnN":["internal::MapOpt","internal::AndThen","internal::And","internal::Or","internal::Map","internal::FlatMap","std::boxed::Box","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"FnO":["internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::And","internal::Into","internal::Or","internal::Map","internal::MapRes"],"FnP":["internal::FlatMap","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Into","internal::Map","internal::Or","internal::AndThen","internal::MapRes","internal::MapOpt"],"FnQ":["<F as internal::Parser<I>>","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Into","internal::Map","internal::And","internal::FlatMap","internal::MapRes"],"FnR":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Into","internal::AndThen","internal::Map"],"FnS":["internal::Map","internal::FlatMap","internal::Into","internal::And","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen"],"FnT":["<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapRes","internal::Map","internal::MapOpt"],"FnU":["internal::FlatMap","std::boxed::Box","internal::Or","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::Into"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["internal::Needed","internal::Err","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &mut T>","error::Error","number::Endianness"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","internal::And","internal::Into"],"G":["internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Map","internal::MapOpt","internal::AndThen","internal::Or"]},"internal::AndThen":{"F":["internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Or"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapOpt","internal::And","internal::AndThen","internal::Or","std::boxed::Box","internal::Into"]},"internal::Err":{"E":["error::Error","error::ErrorKind","internal::Err","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::Or","internal::MapOpt","internal::Into","internal::And","std::boxed::Box","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::MapRes","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Map","internal::FlatMap","internal::And","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Or","internal::MapOpt","internal::And","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or","internal::AndThen","internal::And","internal::FlatMap","internal::Into","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::FlatMap","internal::Into","internal::AndThen","internal::Or","internal::MapOpt","internal::MapRes","internal::And"],"G":["core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Map","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Or","internal::And"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::And","std::boxed::Box","internal::Or","internal::FlatMap","internal::AndThen","internal::Into","internal::MapRes","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.permutation(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::permutation(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as branch::Permutation<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::permutation(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU)>::permutation(p0, p1);
-----------------
src/combinator/mod.rs combinator::ParserIterator::<I, E, F>::finish
deps:{"combinator::ParserIterator::<I, E, F>::finish":{"E":["std::marker::Sized"],"F":["std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"combinator::ParserIterator::<I, E, F>::finish":{"E":["RUG_ANY"],"F":["RUG_ANY"],"I":["error::VerboseError","error::VerboseErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind","number::Endianness","internal::Needed","error::Error"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","internal::Err","internal::Needed","error::ErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // combinator::ParserIterator<I, E, F>
+p0.finish();
+combinator::ParserIterator::<I, E, F>::finish(p0);
+crate::combinator::ParserIterator::<I, E, F>::finish(p0);
+<combinator::ParserIterator<I, E, F>>::finish(p0);
-----------------
src/combinator/mod.rs <&'a mut combinator::ParserIterator<Input, Error, F> as std::iter::Iterator>::next
'a
deps:{"<&'a mut combinator::ParserIterator<Input, Error, F> as std::iter::Iterator>::next":{"Error":["std::marker::Sized"],"F":["std::marker::Sized","std::ops::FnMut"],"Input":["std::marker::Sized","std::clone::Clone"],"Output":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&'a mut combinator::ParserIterator<Input, Error, F> as std::iter::Iterator>::next":{"Error":["RUG_ANY"],"F":["core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"],"Input":["error::ErrorKind","error::VerboseErrorKind","number::Endianness","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Needed","error::Error"],"Output":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["internal::Err","internal::Needed","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","number::Endianness","error::ErrorKind","error::VerboseErrorKind","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  &mut MaybeUninit::uninit().assume_init(); // combinator::ParserIterator<Input, Error, F>
+p0.next();
+<&'a mut combinator::ParserIterator<Input, Error, F> as std::iter::Iterator>::next(p0);
+crate::<&'a mut combinator::ParserIterator<Input, Error, F> as std::iter::Iterator>::next(p0);
+<&'a mut combinator::ParserIterator<Input, Error, F>>::next(p0);
-----------------
src/internal.rs <std::result::Result<(I, O), internal::Err<E>> as internal::Finish<I, O, E>>::finish
deps:{"<std::result::Result<(I, O), internal::Err<E>> as internal::Finish<I, O, E>>::finish":{"E":["std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]}}
candidates:{"<std::result::Result<(I, O), internal::Err<E>> as internal::Finish<I, O, E>>::finish":{"E":["RUG_ANY"],"I":["RUG_ANY"],"O":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::result::Result<(I, O), internal::Err<E>>
+p0.finish();
+<std::result::Result<(I, O), internal::Err<E>> as internal::Finish<I, O, E>>::finish(p0);
+crate::<std::result::Result<(I, O), internal::Err<E>> as internal::Finish<I, O, E>>::finish(p0);
+<std::result::Result<(I, O), internal::Err<E>>>::finish(p0);
-----------------
src/internal.rs <internal::Needed as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Needed
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<internal::Needed as std::fmt::Debug>::fmt(p0, p1);
+crate::<internal::Needed as std::fmt::Debug>::fmt(p0, p1);
+<internal::Needed>::fmt(p0, p1);
-----------------
src/internal.rs <internal::Needed as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Needed
let mut p1 = & MaybeUninit::uninit().assume_init(); // internal::Needed
+p0.eq(p1);
+<internal::Needed as std::cmp::PartialEq>::eq(p0, p1);
+crate::<internal::Needed as std::cmp::PartialEq>::eq(p0, p1);
+<internal::Needed>::eq(p0, p1);
-----------------
src/internal.rs <internal::Needed as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Needed
+p0.assert_receiver_is_total_eq();
+<internal::Needed as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<internal::Needed as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<internal::Needed>::assert_receiver_is_total_eq(p0);
-----------------
src/internal.rs <internal::Needed as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Needed
+p0.clone();
+<internal::Needed as std::clone::Clone>::clone(p0);
+crate::<internal::Needed as std::clone::Clone>::clone(p0);
+<internal::Needed>::clone(p0);
-----------------
src/internal.rs internal::Needed::new
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+internal::Needed::new(p0);
+crate::internal::Needed::new(p0);
+<internal::Needed>::new(p0);
-----------------
src/internal.rs internal::Needed::is_known
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Needed
+p0.is_known();
+internal::Needed::is_known(p0);
+crate::internal::Needed::is_known(p0);
+<internal::Needed>::is_known(p0);
-----------------
src/internal.rs internal::Needed::map
deps:{"internal::Needed::map":{"F":["std::ops::Fn","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"internal::Needed::map":{"F":["core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Needed
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map(p1);
+internal::Needed::map(p0, p1);
+crate::internal::Needed::map(p0, p1);
+<internal::Needed>::map(p0, p1);
-----------------
src/internal.rs <internal::Err<E> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::fmt::Debug>::fmt":{"E":["std::marker::Sized","std::fmt::Debug"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::fmt::Debug>::fmt":{"E":["error::ErrorKind","traits::CompareResult","error::VerboseError","error::Error","<*mut T as std::fmt::Debug>","internal::Err","<&T as std::fmt::Debug>","internal::Needed","error::VerboseErrorKind","number::Endianness"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","internal::Err","error::Error","internal::Needed","error::VerboseError","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<internal::Err<E> as std::fmt::Debug>::fmt(p0, p1);
+crate::<internal::Err<E> as std::fmt::Debug>::fmt(p0, p1);
+<internal::Err<E>>::fmt(p0, p1);
-----------------
src/internal.rs <internal::Err<E> as std::clone::Clone>::clone
deps:{"<internal::Err<E> as std::clone::Clone>::clone":{"E":["std::clone::Clone","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<internal::Err<E> as std::clone::Clone>::clone":{"E":["error::VerboseErrorKind","error::Error","number::Endianness","error::VerboseError","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Needed","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Err","error::ErrorKind","error::VerboseError","number::Endianness","error::VerboseErrorKind","error::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
+p0.clone();
+<internal::Err<E> as std::clone::Clone>::clone(p0);
+crate::<internal::Err<E> as std::clone::Clone>::clone(p0);
+<internal::Err<E>>::clone(p0);
-----------------
src/internal.rs <internal::Err<E> as std::cmp::PartialEq>::eq
deps:{"<internal::Err<E> as std::cmp::PartialEq>::eq":{"E":["std::cmp::PartialEq","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<internal::Err<E> as std::cmp::PartialEq>::eq":{"E":["number::Endianness","internal::Err","error::VerboseError","error::ErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","traits::CompareResult","internal::Needed","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["number::Endianness","error::Error","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::VerboseError","internal::Needed","error::VerboseErrorKind","internal::Err"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
let mut p1 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
+p0.eq(p1);
+<internal::Err<E> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<internal::Err<E> as std::cmp::PartialEq>::eq(p0, p1);
+<internal::Err<E>>::eq(p0, p1);
-----------------
src/internal.rs internal::Err::<E>::is_incomplete
deps:{"internal::Err::<E>::is_incomplete":{"E":["std::marker::Sized"]}}
candidates:{"internal::Err::<E>::is_incomplete":{"E":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
+p0.is_incomplete();
+internal::Err::<E>::is_incomplete(p0);
+crate::internal::Err::<E>::is_incomplete(p0);
+<internal::Err<E>>::is_incomplete(p0);
-----------------
src/internal.rs internal::Err::<E>::map
deps:{"internal::Err::<E>::map":{"E":["std::marker::Sized"],"E2":["std::marker::Sized"],"F":["std::marker::Sized","std::ops::FnOnce"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"internal::Err::<E>::map":{"E":["RUG_ANY"],"E2":["RUG_ANY"],"F":["core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::panic::AssertUnwindSafe<F>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<E>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map(p1);
+internal::Err::<E>::map(p0, p1);
+crate::internal::Err::<E>::map(p0, p1);
+<internal::Err<E>>::map(p0, p1);
-----------------
src/internal.rs internal::Err::<E>::convert
deps:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::Err::<E>::convert":{"E":["std::marker::Sized","std::convert::From"],"F":["std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::Err":{"E":["error::Error","number::Endianness","internal::Needed","<*mut T as std::fmt::Debug>","error::ErrorKind","error::VerboseErrorKind","internal::Err","error::VerboseError"]},"internal::Err::<E>::convert":{"E":["error::VerboseError","error::Error"],"F":["RUG_ANY"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<F>
+internal::Err::<E>::convert(p0);
+crate::internal::Err::<E>::convert(p0);
+<internal::Err<E>>::convert(p0);
-----------------
src/internal.rs internal::Err::<(T, error::ErrorKind)>::map_input
deps:{"internal::Err::<(T, error::ErrorKind)>::map_input":{"F":["std::ops::FnOnce","std::marker::Sized"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"internal::Err::<(T, error::ErrorKind)>::map_input":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::panic::AssertUnwindSafe<F>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<(T, error::ErrorKind)>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map_input(p1);
+internal::Err::<(T, error::ErrorKind)>::map_input(p0, p1);
+crate::internal::Err::<(T, error::ErrorKind)>::map_input(p0, p1);
+<internal::Err<(T, error::ErrorKind)>>::map_input(p0, p1);
-----------------
src/internal.rs internal::Err::<error::Error<T>>::map_input
deps:{"internal::Err::<error::Error<T>>::map_input":{"F":["std::ops::FnOnce","std::marker::Sized"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"internal::Err::<error::Error<T>>::map_input":{"F":["core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","std::panic::AssertUnwindSafe<F>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsNotEmpty"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<error::Error<T>>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.map_input(p1);
+internal::Err::<error::Error<T>>::map_input(p0, p1);
+crate::internal::Err::<error::Error<T>>::map_input(p0, p1);
+<internal::Err<error::Error<T>>>::map_input(p0, p1);
-----------------
src/internal.rs internal::Err::<(&[u8], error::ErrorKind)>::to_owned
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<(&[u8], error::ErrorKind)>
+p0.to_owned();
+internal::Err::<(&[u8], error::ErrorKind)>::to_owned(p0);
+crate::internal::Err::<(&[u8], error::ErrorKind)>::to_owned(p0);
+<internal::Err<(&[u8], error::ErrorKind)>>::to_owned(p0);
-----------------
src/internal.rs internal::Err::<(&str, error::ErrorKind)>::to_owned
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<(&str, error::ErrorKind)>
+p0.to_owned();
+internal::Err::<(&str, error::ErrorKind)>::to_owned(p0);
+crate::internal::Err::<(&str, error::ErrorKind)>::to_owned(p0);
+<internal::Err<(&str, error::ErrorKind)>>::to_owned(p0);
-----------------
src/internal.rs internal::Err::<error::Error<&[u8]>>::to_owned
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<error::Error<&[u8]>>
+p0.to_owned();
+internal::Err::<error::Error<&[u8]>>::to_owned(p0);
+crate::internal::Err::<error::Error<&[u8]>>::to_owned(p0);
+<internal::Err<error::Error<&[u8]>>>::to_owned(p0);
-----------------
src/internal.rs internal::Err::<error::Error<&str>>::to_owned
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // internal::Err<error::Error<&str>>
+p0.to_owned();
+internal::Err::<error::Error<&str>>::to_owned(p0);
+crate::internal::Err::<error::Error<&str>>::to_owned(p0);
+<internal::Err<error::Error<&str>>>::to_owned(p0);
-----------------
src/internal.rs <internal::Err<E> as std::fmt::Display>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::fmt::Display>::fmt":{"E":["std::fmt::Debug","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::fmt::Display>::fmt":{"E":["error::VerboseErrorKind","traits::CompareResult","internal::Needed","<*const T as std::fmt::Debug>","error::Error","internal::Err","error::ErrorKind","number::Endianness","error::VerboseError"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::VerboseError","error::Error","internal::Err","internal::Needed","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","number::Endianness"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<internal::Err<E> as std::fmt::Display>::fmt(p0, p1);
+crate::<internal::Err<E> as std::fmt::Display>::fmt(p0, p1);
+<internal::Err<E>>::fmt(p0, p1);
-----------------
src/internal.rs <internal::Err<E> as std::error::Error>::source
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::error::Error>::source":{"E":["std::fmt::Debug","std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<internal::Err<E> as std::error::Error>::source":{"E":["internal::Err","internal::Needed","error::Error","error::VerboseError","error::VerboseErrorKind","<&T as std::fmt::Debug>","error::ErrorKind","number::Endianness","traits::CompareResult","<*mut T as std::fmt::Debug>"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","error::Error","internal::Needed","error::VerboseError","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind"]},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // internal::Err<E>
+p0.source();
+<internal::Err<E> as std::error::Error>::source(p0);
+crate::<internal::Err<E> as std::error::Error>::source(p0);
+<internal::Err<E>>::source(p0);
-----------------
src/internal.rs <F as internal::Parser<I>>::parse
deps:{"<F as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","std::ops::FnMut"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<F as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"F":["core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","error::VerboseError","error::Error","number::Endianness","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // F
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<F as internal::Parser<I>>::parse(p0, p1);
+crate::<F as internal::Parser<I>>::parse(p0, p1);
+<F>::parse(p0, p1);
-----------------
src/internal.rs <(P1,) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1,) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1,) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"P1":["internal::Into","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::And","internal::FlatMap","internal::Map"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::MapOpt","internal::And","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Or"],"G":["internal::Into","internal::Map","internal::AndThen","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Or"]},"internal::AndThen":{"F":["internal::And","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Into","internal::AndThen"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","internal::AndThen","internal::And","internal::Or","std::boxed::Box","internal::MapRes","internal::FlatMap"]},"internal::Err":{"E":["number::Endianness","internal::Err","error::VerboseErrorKind","internal::Needed","error::VerboseError","error::Error","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"internal::FlatMap":{"F":["internal::AndThen","internal::Map","internal::FlatMap","internal::And","internal::MapOpt","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::MapRes","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::Map","internal::AndThen","std::boxed::Box","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::And","std::boxed::Box","internal::Or","internal::FlatMap","internal::AndThen"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"internal::MapOpt":{"F":["internal::Or","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::And","internal::Map","internal::Into","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::Or","internal::And","internal::Map"],"G":["std::boxed::Box","internal::MapRes","internal::Or","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::Into","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1,)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1,) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1,) as internal::Parser<I>>::parse(p0, p1);
+<(P1,)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"P1":["internal::Or","internal::AndThen","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Into","std::boxed::Box","internal::FlatMap"],"P2":["internal::MapOpt","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::Map","internal::And","internal::FlatMap"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Into","internal::FlatMap","internal::Or"],"G":["std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::And","internal::AndThen","internal::MapRes"]},"internal::AndThen":{"F":["internal::AndThen","internal::MapRes","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into","internal::And"],"G":["internal::Map","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapOpt"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Err"]},"internal::FlatMap":{"F":["internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::Or","std::boxed::Box","internal::Into","internal::AndThen","internal::FlatMap"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["<F as internal::Parser<I>>","internal::Map","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::Into","internal::MapOpt","internal::AndThen","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Map","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>"]},"internal::MapOpt":{"F":["internal::FlatMap","internal::And","internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::Or":{"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Map","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::And","internal::Into"],"G":["internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P2":["internal::Parser","std::marker::Sized"],"P3":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"P1":["internal::AndThen","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Map","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>"],"P2":["internal::FlatMap","internal::Or","std::boxed::Box","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Map","internal::MapOpt"],"P3":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::AndThen","internal::And","internal::Or","internal::Into","std::boxed::Box","internal::FlatMap"]},"<F as internal::Parser<I>>":{"F":["core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","internal::Into","internal::AndThen","internal::Or"],"G":["internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Into","internal::Or"]},"internal::AndThen":{"F":["internal::Map","internal::AndThen","internal::Into","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And"],"G":["internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::AndThen"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","error::Error","error::ErrorKind","internal::Err","number::Endianness","error::VerboseError","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::FlatMap","std::boxed::Box","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::And","internal::MapRes","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::And","internal::MapRes","std::boxed::Box"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::MapRes","internal::Into","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","internal::And","internal::Map","internal::Into","std::boxed::Box","internal::FlatMap"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapRes","internal::And","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::FlatMap"],"G":["internal::MapOpt","internal::Or","internal::Into","internal::And","internal::MapRes","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"],"P3":["internal::Parser","std::marker::Sized"],"P4":["std::marker::Sized","internal::Parser"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"P1":["internal::Map","internal::MapOpt","internal::FlatMap","internal::Or","internal::Into","internal::And","internal::AndThen","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"P2":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::And","internal::MapOpt","internal::Into"],"P3":["<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::FlatMap","internal::MapOpt","internal::Into","internal::MapRes","internal::AndThen","internal::Map","internal::Or"],"P4":["internal::MapRes","internal::Into","internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::And","internal::Or","internal::MapOpt"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::And"],"G":["internal::Into","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::Map"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Map","internal::And"],"G":["internal::And","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","std::boxed::Box","internal::Or","internal::FlatMap","internal::Into"]},"internal::Err":{"E":["error::ErrorKind","internal::Err","error::VerboseErrorKind","internal::Needed","error::Error","number::Endianness","error::VerboseError","<*mut T as std::fmt::Debug>"]},"internal::FlatMap":{"F":["internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::Or"],"G":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes","internal::Map","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","internal::Or","internal::Into","internal::And","internal::MapRes","internal::FlatMap","std::boxed::Box"],"G":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Map","internal::MapOpt","internal::AndThen","internal::Into","internal::MapRes","internal::Or","internal::FlatMap","internal::And","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::LinesAnyMap","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::AndThen","internal::Map","std::boxed::Box","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::FlatMap"],"G":["core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["std::boxed::Box","internal::Or","internal::MapRes","internal::MapOpt","internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::And"],"G":["internal::Or","internal::AndThen","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::And","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["std::marker::Sized","internal::Parser"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"P1":["internal::FlatMap","internal::MapRes","internal::And","internal::Into","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen"],"P2":["internal::MapRes","internal::Into","internal::MapOpt","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","std::boxed::Box"],"P3":["internal::MapOpt","internal::MapRes","internal::Map","internal::AndThen","internal::Or","std::boxed::Box","internal::Into","internal::And","<F as internal::Parser<I>>","internal::FlatMap"],"P4":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Or","internal::MapRes","internal::AndThen","internal::Into","internal::FlatMap"],"P5":["internal::MapOpt","internal::Or","internal::Into","internal::MapRes","internal::Map","internal::AndThen","internal::FlatMap","internal::And","<F as internal::Parser<I>>","std::boxed::Box"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen","internal::Or","internal::MapRes","internal::And","internal::Into","internal::MapOpt"],"G":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Into","internal::Or","internal::FlatMap","internal::And","internal::MapOpt","internal::MapRes","internal::AndThen"]},"internal::AndThen":{"F":["internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapRes"],"G":["internal::MapRes","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::AndThen"]},"internal::Err":{"E":["error::Error","error::ErrorKind","internal::Err","number::Endianness","internal::Needed","error::VerboseError","<*mut T as std::fmt::Debug>","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Map","internal::Into","internal::MapOpt","internal::FlatMap","internal::And","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<T>>"],"F":["internal::MapRes","internal::And","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box","internal::Map"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::Or","internal::AndThen","internal::Into","internal::MapRes"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Map","internal::MapRes","internal::And"],"G":["core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Or","internal::MapRes","internal::AndThen","internal::Into","std::boxed::Box","internal::MapOpt","internal::And"],"G":["internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["std::marker::Sized","internal::Parser"],"P6":["std::marker::Sized","internal::Parser"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6) as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"P1":["internal::MapOpt","internal::Map","internal::AndThen","internal::Or","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Into","std::boxed::Box"],"P2":["internal::MapOpt","internal::AndThen","internal::Map","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::And","internal::FlatMap","internal::Or"],"P3":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::Map","internal::Or","std::boxed::Box","internal::AndThen"],"P4":["internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Map","internal::MapRes","internal::MapOpt","internal::AndThen","internal::And","internal::Into"],"P5":["<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","internal::MapRes","internal::Into","internal::And","std::boxed::Box"],"P6":["internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Into","internal::And","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::FlatMap","std::boxed::Box","internal::And","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Into"],"G":["internal::MapOpt","internal::FlatMap","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::AndThen","internal::Map"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes","internal::And","internal::Or","internal::MapOpt","internal::Map"],"G":["internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Into","internal::MapOpt","internal::AndThen","std::boxed::Box"]},"internal::Err":{"E":["error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::VerboseError","error::Error","number::Endianness","internal::Err","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::Or","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Map","internal::And","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::FlatMap","internal::Map","internal::Into","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Or","internal::AndThen","std::boxed::Box"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::And","internal::Or","internal::AndThen","internal::Into","internal::MapOpt","internal::Map"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::And","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Map","internal::Into","internal::FlatMap","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::Or","internal::Map","std::boxed::Box","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Or","internal::MapOpt","internal::AndThen","internal::Map","internal::FlatMap","std::boxed::Box"],"G":["internal::Map","internal::AndThen","internal::Or","internal::And","internal::MapOpt","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"P1":["internal::And","internal::AndThen","std::boxed::Box","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapRes","internal::Map"],"P2":["internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Or","internal::Into","internal::FlatMap","std::boxed::Box","internal::Map"],"P3":["internal::Into","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","std::boxed::Box","internal::And","internal::Map","internal::MapRes"],"P4":["internal::MapRes","internal::Map","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::And","internal::FlatMap","internal::Or"],"P5":["std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Or"],"P6":["internal::AndThen","internal::Into","internal::MapRes","internal::MapOpt","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::And","internal::Or"],"P7":["internal::MapOpt","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::Map","internal::Into"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::Map","internal::MapRes","std::boxed::Box"],"G":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","internal::Or","internal::And"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","std::boxed::Box","internal::AndThen","internal::And","internal::MapRes","internal::Or"],"G":["std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::And","internal::FlatMap","internal::Into","internal::MapOpt","internal::Or"]},"internal::Err":{"E":["error::ErrorKind","<*mut T as std::fmt::Debug>","number::Endianness","error::VerboseError","internal::Needed","error::VerboseErrorKind","internal::Err","error::Error"]},"internal::FlatMap":{"F":["internal::Map","internal::And","internal::Into","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","internal::Into","internal::And","internal::Or","internal::FlatMap","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapRes","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Map","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into"],"G":["core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::Map","internal::MapRes","internal::AndThen","internal::And","internal::Into","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::And","internal::AndThen","internal::Map","internal::Into","std::boxed::Box"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::Map","internal::MapRes","internal::MapOpt","internal::Or","std::boxed::Box","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::And"],"G":["internal::Map","std::boxed::Box","internal::FlatMap","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Or","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["internal::Parser","std::marker::Sized"],"P7":["internal::Parser","std::marker::Sized"],"P8":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"P1":["internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapRes","internal::AndThen","internal::And"],"P2":["internal::Into","internal::Map","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Or","internal::MapRes"],"P3":["internal::Into","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::And","internal::Or","<F as internal::Parser<I>>"],"P4":["internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapRes","internal::And","internal::Into","internal::Or","internal::MapOpt","std::boxed::Box"],"P5":["internal::And","internal::MapOpt","internal::Map","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapRes"],"P6":["std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::MapRes","internal::MapOpt"],"P7":["internal::And","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::Or"],"P8":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Into","internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","internal::Or"]},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::Into","internal::And","internal::AndThen","std::boxed::Box","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Or"],"G":["internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Into"]},"internal::AndThen":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Into","internal::MapRes","std::boxed::Box","internal::And","internal::Map","internal::MapOpt"],"G":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::Map","std::boxed::Box"]},"internal::Err":{"E":["error::Error","internal::Needed","error::VerboseErrorKind","error::VerboseError","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","error::ErrorKind","internal::Err","number::Endianness"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Or","internal::Into","internal::AndThen","std::boxed::Box"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Into","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen","internal::Into","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::MapOpt","internal::And","internal::AndThen","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes","internal::Map","internal::Into","internal::Or","internal::FlatMap"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::Into","internal::And","internal::MapRes","internal::AndThen","internal::Map","internal::MapOpt"],"G":["internal::Map","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Or","internal::AndThen","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::And","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes"],"P2":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::Map"],"P3":["internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::And"],"P4":["internal::Map","internal::Or","internal::FlatMap","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapRes","internal::Into"],"P5":["std::boxed::Box","internal::MapRes","internal::And","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt"],"P6":["internal::MapOpt","internal::Or","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::AndThen","internal::And","std::boxed::Box"],"P7":["internal::AndThen","internal::FlatMap","internal::And","internal::Into","internal::MapRes","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt"],"P8":["<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::Or"],"P9":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::FlatMap","internal::MapOpt","internal::Or","internal::And","internal::MapRes","std::boxed::Box","internal::Map"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::MapOpt","internal::Map","internal::Or","internal::MapRes","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::And"],"G":["internal::MapOpt","internal::Into","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::And","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::And","internal::MapRes","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Into"],"G":["internal::AndThen","internal::Map","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","error::VerboseError","error::Error","internal::Needed","number::Endianness","internal::Err"]},"internal::FlatMap":{"F":["internal::Map","internal::Or","std::boxed::Box","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::MapOpt","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::Map","internal::FlatMap","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::Or","std::boxed::Box","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapOpt","internal::Into"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::Or","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"G":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Into","internal::And","internal::Or","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Map"],"G":["core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Map","internal::Or"],"G":["internal::Into","internal::MapOpt","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapRes"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["std::marker::Sized","internal::Parser"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Or","internal::Into","internal::AndThen"],"P10":["internal::AndThen","internal::Map","internal::MapRes","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Into","std::boxed::Box"],"P2":["internal::FlatMap","internal::Map","std::boxed::Box","internal::Or","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt","internal::And","<F as internal::Parser<I>>"],"P3":["std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Into","<F as internal::Parser<I>>"],"P4":["std::boxed::Box","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::FlatMap","internal::Into","internal::Map","internal::MapRes"],"P5":["internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or","internal::Map","internal::AndThen"],"P6":["internal::Map","internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::And","internal::AndThen"],"P7":["internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Or"],"P8":["std::boxed::Box","internal::MapRes","internal::Map","internal::Or","internal::And","internal::Into","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"P9":["internal::MapRes","std::boxed::Box","internal::Into","internal::FlatMap","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::AndThen"]},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::FlatMap","internal::Map","internal::Into","internal::AndThen","internal::Or","internal::And"],"G":["internal::MapRes","internal::MapOpt","internal::And","internal::Into","internal::FlatMap","internal::Map","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen"]},"internal::AndThen":{"F":["internal::Map","<F as internal::Parser<I>>","internal::Or","internal::And","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt"],"G":["internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes","internal::Or","internal::Into","internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","error::VerboseError","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","internal::Err","error::ErrorKind"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","internal::Or","internal::And","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::And","internal::AndThen","internal::Or","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::AndThen","internal::MapOpt","internal::And","internal::Into","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::Into","internal::And","internal::Or","internal::Map","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::And","internal::Map","internal::Into","internal::AndThen"],"G":["core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>"]},"internal::Or":{"F":["internal::Or","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Into","internal::FlatMap","internal::MapRes","internal::AndThen"],"G":["internal::MapRes","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Map","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["internal::Parser","std::marker::Sized"],"P11":["std::marker::Sized","internal::Parser"],"P2":["internal::Parser","std::marker::Sized"],"P3":["std::marker::Sized","internal::Parser"],"P4":["internal::Parser","std::marker::Sized"],"P5":["std::marker::Sized","internal::Parser"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["internal::Parser","std::marker::Sized"],"P9":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::Map","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapRes","std::boxed::Box","internal::Or","internal::MapOpt","internal::FlatMap"],"P10":["internal::AndThen","internal::MapRes","internal::And","internal::Map","internal::Or","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"],"P11":["internal::FlatMap","internal::AndThen","internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into","internal::And"],"P2":["internal::Map","internal::Or","internal::FlatMap","internal::Into","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::And","internal::MapRes","<F as internal::Parser<I>>"],"P3":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","internal::Map","internal::And","std::boxed::Box"],"P4":["internal::MapRes","internal::Into","internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>"],"P5":["internal::Into","internal::Or","internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::AndThen"],"P6":["internal::MapOpt","std::boxed::Box","internal::Map","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","internal::And","<F as internal::Parser<I>>"],"P7":["internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","internal::And","internal::Into"],"P8":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen"],"P9":["<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::And","internal::Or","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt","internal::Into"]},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::MapOpt","internal::MapRes","internal::Map"],"G":["internal::MapOpt","std::boxed::Box","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::Into","internal::And","internal::Or"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Map","internal::And","internal::FlatMap","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or"],"G":["<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","internal::Map","std::boxed::Box","internal::AndThen","internal::And"]},"internal::Err":{"E":["number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Needed","error::Error","error::VerboseError","error::ErrorKind","internal::Err"]},"internal::FlatMap":{"F":["internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Map"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::Map","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::Into","internal::Or","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Into","internal::MapOpt","internal::And","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Map","std::boxed::Box"],"G":["core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::And","std::boxed::Box"],"G":["core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::Map","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","internal::Into","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"G":["internal::MapRes","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Or"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["internal::Parser","std::marker::Sized"],"P11":["internal::Parser","std::marker::Sized"],"P12":["std::marker::Sized","internal::Parser"],"P2":["internal::Parser","std::marker::Sized"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["internal::Parser","std::marker::Sized"],"P7":["std::marker::Sized","internal::Parser"],"P8":["internal::Parser","std::marker::Sized"],"P9":["std::marker::Sized","internal::Parser"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::AndThen","internal::Or","internal::And","internal::Map","internal::FlatMap","internal::MapRes","internal::MapOpt"],"P10":["internal::Or","internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","<F as internal::Parser<I>>"],"P11":["internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes","internal::And","internal::AndThen","internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"],"P12":["internal::And","internal::AndThen","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapOpt"],"P2":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","internal::And","std::boxed::Box","internal::Into"],"P3":["internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map"],"P4":["internal::AndThen","internal::FlatMap","internal::Into","internal::Or","std::boxed::Box","internal::Map","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"P5":["internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","internal::Map","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Into"],"P6":["<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","internal::AndThen","internal::Into","internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes"],"P7":["internal::Or","internal::MapRes","internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::FlatMap"],"P8":["internal::Map","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::FlatMap"],"P9":["internal::FlatMap","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapRes","internal::MapOpt","internal::Map"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::FlatMap","internal::AndThen","internal::And","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Or"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::Map","internal::AndThen"]},"internal::AndThen":{"F":["internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::And"],"G":["internal::And","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Or"]},"internal::Err":{"E":["error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","number::Endianness","error::VerboseError","error::VerboseErrorKind","internal::Needed","error::ErrorKind"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapRes","internal::AndThen","internal::Or","internal::And","std::boxed::Box","internal::FlatMap","internal::MapOpt"],"G":["core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["std::boxed::Box","internal::Or","internal::Map","internal::And","internal::AndThen","internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::MapOpt","internal::Map","internal::Into","internal::And","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or"],"G":["std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::AndThen","internal::FlatMap","internal::Into","internal::MapOpt","internal::Map","std::boxed::Box","internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Into","internal::MapRes","internal::Map","internal::Or","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::And"],"G":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::And"],"G":["<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","std::boxed::Box","internal::Into","internal::Or","internal::FlatMap","internal::And","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P10":["internal::Parser","std::marker::Sized"],"P11":["std::marker::Sized","internal::Parser"],"P12":["std::marker::Sized","internal::Parser"],"P13":["internal::Parser","std::marker::Sized"],"P2":["std::marker::Sized","internal::Parser"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["std::marker::Sized","internal::Parser"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::Into","internal::MapRes","internal::MapOpt","internal::AndThen"],"P10":["internal::MapOpt","internal::Or","internal::AndThen","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::FlatMap"],"P11":["internal::Map","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::And","internal::Or"],"P12":["internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen"],"P13":["internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Map","internal::FlatMap","std::boxed::Box","internal::Or","internal::MapOpt","internal::And"],"P2":["internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into"],"P3":["internal::And","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box"],"P4":["internal::Or","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::And","<F as internal::Parser<I>>"],"P5":["std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::MapRes","internal::And","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap"],"P6":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::And","internal::Into","internal::MapRes","internal::Map","internal::Or","std::boxed::Box","internal::AndThen"],"P7":["internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::MapRes","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"],"P8":["internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen","internal::Map","internal::FlatMap"],"P9":["internal::Or","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","internal::MapRes","internal::AndThen","internal::And"]},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::Into","internal::MapRes","internal::Or","std::boxed::Box"],"G":["internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","internal::And","std::boxed::Box"]},"internal::AndThen":{"F":["internal::MapOpt","internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::Map","internal::FlatMap","internal::Or"],"G":["internal::Or","internal::And","internal::MapRes","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into"]},"internal::Err":{"E":["error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","number::Endianness","internal::Err","error::VerboseError","error::Error","internal::Needed","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::And","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Map","internal::AndThen","internal::MapRes"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::MapOpt","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","std::boxed::Box","internal::And"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Map","internal::AndThen","internal::MapOpt","internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap"],"G":["core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["internal::Into","std::boxed::Box","internal::FlatMap","internal::And","internal::MapRes","internal::Or","internal::AndThen","internal::MapOpt","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes"],"G":["internal::FlatMap","internal::MapOpt","internal::Into","internal::Or","std::boxed::Box","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["std::marker::Sized","internal::Parser"],"P11":["std::marker::Sized","internal::Parser"],"P12":["internal::Parser","std::marker::Sized"],"P13":["internal::Parser","std::marker::Sized"],"P14":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["std::marker::Sized","internal::Parser"],"P6":["internal::Parser","std::marker::Sized"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::Into","internal::And","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen"],"P10":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","internal::And","internal::MapOpt","internal::Or","internal::Into"],"P11":["internal::MapOpt","std::boxed::Box","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::MapRes","internal::Map","internal::And","<F as internal::Parser<I>>"],"P12":["internal::MapOpt","std::boxed::Box","internal::AndThen","internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::Map","internal::Into","<F as internal::Parser<I>>"],"P13":["internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Or","internal::FlatMap","internal::Into","internal::MapOpt"],"P14":["internal::Into","internal::MapRes","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And"],"P2":["internal::Into","internal::AndThen","internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::Map","std::boxed::Box","internal::FlatMap"],"P3":["internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Map","internal::And","internal::Or","internal::MapOpt","internal::Into"],"P4":["internal::Map","internal::FlatMap","internal::And","internal::Or","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>"],"P5":["internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt","internal::And"],"P6":["internal::Map","internal::FlatMap","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","internal::Into","internal::MapRes"],"P7":["<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::FlatMap","internal::Into","internal::Or","internal::And","internal::AndThen","internal::MapOpt","std::boxed::Box"],"P8":["internal::And","internal::MapOpt","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Into","std::boxed::Box","internal::MapRes","internal::Map"],"P9":["internal::Or","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::FlatMap","internal::Map","internal::MapOpt","internal::MapRes","internal::Into","std::boxed::Box"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","internal::Or","internal::Into","std::boxed::Box","internal::MapRes"],"G":["internal::MapRes","internal::FlatMap","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And","internal::AndThen"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapOpt","internal::Map","internal::Into","internal::MapRes","internal::FlatMap"],"G":["internal::And","internal::Or","internal::Map","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box"]},"internal::Err":{"E":["internal::Needed","error::Error","number::Endianness","error::VerboseErrorKind","error::VerboseError","error::ErrorKind","internal::Err","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>"]},"internal::FlatMap":{"F":["internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","internal::MapRes","internal::Or"],"G":["core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::And","std::boxed::Box","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Map","internal::Or"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::AndThen"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::AndThen","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Map"],"G":["core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::Into","std::boxed::Box","internal::FlatMap","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::MapRes","internal::And"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::MapRes","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Or"],"G":["internal::And","internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Map"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P10":["std::marker::Sized","internal::Parser"],"P11":["std::marker::Sized","internal::Parser"],"P12":["internal::Parser","std::marker::Sized"],"P13":["std::marker::Sized","internal::Parser"],"P14":["internal::Parser","std::marker::Sized"],"P15":["std::marker::Sized","internal::Parser"],"P2":["internal::Parser","std::marker::Sized"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["internal::Parser","std::marker::Sized"],"P9":["std::marker::Sized","internal::Parser"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"error::VerboseError":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::Or","internal::Into","internal::And"],"P10":["internal::Or","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Into","internal::Map","internal::MapOpt","internal::And"],"P11":["internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapRes","std::boxed::Box","internal::Or","internal::And","internal::FlatMap"],"P12":["internal::MapRes","internal::Or","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapOpt"],"P13":["internal::MapRes","internal::Into","internal::FlatMap","std::boxed::Box","internal::And","internal::AndThen","internal::Or","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"],"P14":["internal::And","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","internal::Map","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box"],"P15":["internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Into","internal::Map","internal::MapOpt"],"P2":["internal::Or","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::And","internal::MapRes","internal::MapOpt"],"P3":["internal::MapOpt","internal::Or","internal::And","internal::Map","internal::AndThen","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"P4":["internal::FlatMap","internal::Or","internal::Into","internal::AndThen","internal::And","internal::Map","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box"],"P5":["internal::Map","internal::FlatMap","internal::Or","internal::Into","internal::And","internal::MapRes","internal::AndThen","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>"],"P6":["internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::AndThen","internal::And"],"P7":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::Map","internal::Or","internal::MapRes"],"P8":["internal::Into","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::And","internal::MapOpt","internal::Map","internal::Or","internal::AndThen","internal::FlatMap"],"P9":["internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Into","internal::Or","internal::AndThen","internal::And","internal::MapOpt"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","std::boxed::Box","internal::Into","internal::Or","internal::MapOpt"],"G":["internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::And","std::boxed::Box","internal::Into","internal::Or","internal::MapOpt","internal::Map"]},"internal::AndThen":{"F":["internal::MapRes","internal::Or","internal::And","internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Into"],"G":["internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Map","internal::And"]},"internal::Err":{"E":["number::Endianness","error::Error","error::ErrorKind","error::VerboseErrorKind","internal::Needed","internal::Err","error::VerboseError","<*const T as std::fmt::Debug>"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::Map","internal::AndThen","internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And"],"G":["core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","internal::Map","internal::AndThen"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Or","internal::FlatMap","internal::Into"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["internal::Map","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::MapOpt","internal::MapRes","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::MapOpt","internal::And","internal::Into","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Map"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::Into","internal::AndThen","internal::Or","internal::FlatMap","internal::MapOpt","internal::And","internal::MapRes","std::boxed::Box","internal::Map","<F as internal::Parser<I>>"],"G":["internal::Or","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","internal::Into","internal::AndThen","internal::Map","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["internal::Parser","std::marker::Sized"],"P11":["internal::Parser","std::marker::Sized"],"P12":["internal::Parser","std::marker::Sized"],"P13":["internal::Parser","std::marker::Sized"],"P14":["std::marker::Sized","internal::Parser"],"P15":["std::marker::Sized","internal::Parser"],"P16":["internal::Parser","std::marker::Sized"],"P2":["internal::Parser","std::marker::Sized"],"P3":["internal::Parser","std::marker::Sized"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["internal::Parser","std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::MapRes","internal::Into","internal::Map"],"P10":["internal::Map","internal::FlatMap","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","<F as internal::Parser<I>>"],"P11":["internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box","internal::Map"],"P12":["<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Map","std::boxed::Box","internal::FlatMap","internal::Into","internal::And","internal::Or","internal::MapRes"],"P13":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Map","internal::MapOpt","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen","internal::And"],"P14":["internal::Into","internal::FlatMap","internal::And","std::boxed::Box","internal::AndThen","internal::Map","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt"],"P15":["internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::MapOpt","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And"],"P16":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Map"],"P2":["internal::Map","internal::Into","internal::FlatMap","internal::And","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","std::boxed::Box"],"P3":["internal::AndThen","internal::MapOpt","internal::Map","internal::FlatMap","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"P4":["internal::Or","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into","internal::MapOpt"],"P5":["internal::AndThen","internal::Or","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Map","internal::FlatMap","internal::And"],"P6":["internal::Into","internal::Or","internal::AndThen","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Map","internal::MapOpt"],"P7":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Or","internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes"],"P8":["<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapRes","internal::And","internal::Into","internal::Map","internal::MapOpt","internal::Or"],"P9":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::And","internal::Into","internal::MapOpt","internal::Map","internal::MapRes"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::Into","internal::MapRes","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map"],"G":["internal::AndThen","internal::Map","internal::Or","internal::MapOpt","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::And"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Into","internal::And","internal::AndThen","internal::Or","internal::FlatMap","internal::Map","internal::MapRes","std::boxed::Box","internal::MapOpt"],"G":["std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","internal::And","<F as internal::Parser<I>>"]},"internal::Err":{"E":["internal::Err","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","error::ErrorKind","error::VerboseErrorKind","internal::Needed","error::VerboseError"]},"internal::FlatMap":{"F":["internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","internal::Into","internal::MapRes"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::AndThen","internal::And","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","internal::Map","std::boxed::Box","internal::Into","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Or"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["internal::Or","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapRes","internal::And","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::AndThen","std::boxed::Box","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::Map","internal::Into","internal::MapOpt"],"G":["core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::Or":{"F":["internal::AndThen","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes"],"G":["<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Or","internal::Into","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O17":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["std::marker::Sized","internal::Parser"],"P11":["std::marker::Sized","internal::Parser"],"P12":["std::marker::Sized","internal::Parser"],"P13":["std::marker::Sized","internal::Parser"],"P14":["internal::Parser","std::marker::Sized"],"P15":["internal::Parser","std::marker::Sized"],"P16":["std::marker::Sized","internal::Parser"],"P17":["internal::Parser","std::marker::Sized"],"P2":["std::marker::Sized","internal::Parser"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O17":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::Or","internal::FlatMap","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::MapOpt","internal::Into","internal::And"],"P10":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Or","internal::Map","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And","internal::MapRes"],"P11":["internal::Or","internal::FlatMap","internal::Into","internal::AndThen","internal::Map","internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>"],"P12":["internal::Into","internal::MapRes","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And"],"P13":["internal::Into","internal::MapRes","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt"],"P14":["internal::AndThen","internal::Into","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap"],"P15":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","internal::Or","internal::FlatMap","internal::And","std::boxed::Box","internal::MapRes","internal::AndThen"],"P16":["internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","std::boxed::Box","internal::AndThen","internal::Into"],"P17":["internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Into","std::boxed::Box","internal::And"],"P2":["internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::And","internal::FlatMap","internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt"],"P3":["internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","std::boxed::Box","internal::And","internal::Map"],"P4":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::Map","internal::MapOpt"],"P5":["internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Into","internal::And"],"P6":["internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt","internal::Or","internal::AndThen"],"P7":["<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","internal::And","internal::MapRes","internal::Map","internal::Or","internal::MapOpt"],"P8":["internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::Into","internal::MapRes","internal::MapOpt","internal::And","std::boxed::Box"],"P9":["internal::MapOpt","std::boxed::Box","internal::Map","internal::And","internal::Into","internal::AndThen","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["std::boxed::Box","internal::Map","internal::And","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap"],"G":["internal::FlatMap","std::boxed::Box","internal::Map","internal::And","internal::AndThen","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or"]},"internal::AndThen":{"F":["internal::MapRes","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::AndThen","internal::MapOpt","internal::And","std::boxed::Box"],"G":["internal::FlatMap","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Into","internal::Map"]},"internal::Err":{"E":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError","internal::Err","error::Error","internal::Needed","error::VerboseErrorKind","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Map","internal::Into","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","internal::AndThen"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::And","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Into","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::And","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","internal::Map","internal::AndThen","internal::FlatMap","internal::Into"],"G":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Or"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Into","internal::Map","internal::MapOpt","internal::And","internal::Or","internal::FlatMap","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"G":["core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Map","internal::Or","std::boxed::Box","internal::AndThen"],"G":["internal::AndThen","internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::FlatMap","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O17":["std::marker::Sized"],"O18":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P10":["internal::Parser","std::marker::Sized"],"P11":["std::marker::Sized","internal::Parser"],"P12":["internal::Parser","std::marker::Sized"],"P13":["internal::Parser","std::marker::Sized"],"P14":["internal::Parser","std::marker::Sized"],"P15":["std::marker::Sized","internal::Parser"],"P16":["std::marker::Sized","internal::Parser"],"P17":["std::marker::Sized","internal::Parser"],"P18":["std::marker::Sized","internal::Parser"],"P2":["internal::Parser","std::marker::Sized"],"P3":["std::marker::Sized","internal::Parser"],"P4":["std::marker::Sized","internal::Parser"],"P5":["std::marker::Sized","internal::Parser"],"P6":["internal::Parser","std::marker::Sized"],"P7":["std::marker::Sized","internal::Parser"],"P8":["internal::Parser","std::marker::Sized"],"P9":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O17":["RUG_ANY"],"O18":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen"],"P10":["internal::Into","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or","std::boxed::Box","internal::And","internal::AndThen"],"P11":["internal::Or","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::Into","internal::AndThen","internal::MapOpt"],"P12":["std::boxed::Box","internal::Or","internal::And","internal::Into","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::FlatMap"],"P13":["internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::Or","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::And"],"P14":["internal::MapRes","internal::Into","internal::FlatMap","internal::And","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::MapOpt"],"P15":["internal::And","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Map","internal::Or","internal::MapOpt","std::boxed::Box"],"P16":["internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Map","internal::And"],"P17":["internal::Into","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Or"],"P18":["internal::Into","internal::MapRes","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Map","internal::MapOpt"],"P2":["internal::And","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt"],"P3":["internal::Into","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::Or","std::boxed::Box","internal::FlatMap"],"P4":["std::boxed::Box","internal::And","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Or"],"P5":["internal::FlatMap","internal::Into","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Map","internal::MapOpt"],"P6":["internal::Or","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::MapOpt","internal::Map","internal::AndThen","internal::And"],"P7":["internal::FlatMap","internal::And","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::AndThen"],"P8":["internal::FlatMap","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::Or","std::boxed::Box"],"P9":["internal::Into","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::And","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Map"],"G":["internal::MapOpt","internal::AndThen","internal::Map","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapRes","internal::Or"]},"internal::AndThen":{"F":["internal::Map","internal::AndThen","internal::MapRes","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::Or","internal::And","<F as internal::Parser<I>>"],"G":["internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::And","internal::MapOpt","internal::Into","internal::Map","std::boxed::Box"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","error::VerboseErrorKind","number::Endianness","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseError"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::Into","internal::MapRes","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::And","internal::AndThen","internal::MapOpt","internal::Or","internal::MapRes","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Into","internal::And","internal::Or","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::And","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Map","internal::Or","internal::Into","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeUnicode","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::And","internal::Map","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Or","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::MapRes","internal::And","internal::Or","internal::MapOpt","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap"],"G":["internal::Into","internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::MapOpt","internal::Map","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O17":["std::marker::Sized"],"O18":["std::marker::Sized"],"O19":["std::marker::Sized"],"O2":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["std::marker::Sized","internal::Parser"],"P10":["internal::Parser","std::marker::Sized"],"P11":["internal::Parser","std::marker::Sized"],"P12":["internal::Parser","std::marker::Sized"],"P13":["std::marker::Sized","internal::Parser"],"P14":["internal::Parser","std::marker::Sized"],"P15":["internal::Parser","std::marker::Sized"],"P16":["internal::Parser","std::marker::Sized"],"P17":["internal::Parser","std::marker::Sized"],"P18":["internal::Parser","std::marker::Sized"],"P19":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P3":["internal::Parser","std::marker::Sized"],"P4":["std::marker::Sized","internal::Parser"],"P5":["std::marker::Sized","internal::Parser"],"P6":["internal::Parser","std::marker::Sized"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O17":["RUG_ANY"],"O18":["RUG_ANY"],"O19":["RUG_ANY"],"O2":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::FlatMap","internal::Map","internal::MapOpt","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Into","internal::MapRes"],"P10":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And","std::boxed::Box","internal::AndThen","internal::Or","internal::Into"],"P11":["internal::AndThen","internal::MapOpt","internal::Into","internal::And","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes"],"P12":["std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::And"],"P13":["internal::Into","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box"],"P14":["internal::MapOpt","internal::Or","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::FlatMap","internal::Map","internal::MapRes"],"P15":["internal::Into","internal::AndThen","internal::MapOpt","internal::Or","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::And"],"P16":["<F as internal::Parser<I>>","internal::Or","internal::Into","std::boxed::Box","internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Map"],"P17":["internal::Or","internal::Into","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes"],"P18":["internal::Map","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Or","internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"],"P19":["internal::Or","internal::And","internal::Into","internal::MapRes","internal::FlatMap","internal::Map","internal::MapOpt","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>"],"P2":["<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Into","internal::And","internal::MapRes","internal::Map"],"P3":["internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Or"],"P4":["internal::Into","internal::Or","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::And","internal::MapOpt","internal::FlatMap"],"P5":["std::boxed::Box","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>"],"P6":["internal::FlatMap","std::boxed::Box","internal::Into","internal::MapOpt","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Map","internal::AndThen"],"P7":["internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::And"],"P8":["std::boxed::Box","internal::And","internal::Into","internal::Map","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::AndThen"],"P9":["internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::And","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Into"],"G":["internal::Map","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Into","internal::MapRes","internal::AndThen","internal::And","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","std::boxed::Box"],"G":["<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt","internal::Into","internal::And","internal::Map"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","internal::Err","number::Endianness","error::VerboseError","<*mut T as std::fmt::Debug>","error::Error","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::AndThen","internal::MapRes","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","std::boxed::Box","internal::Or"],"G":["core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::MapRes","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Map","internal::Or"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map","internal::And","internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::AndThen","std::boxed::Box","internal::And","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::FlatMap","internal::Or"],"G":["core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::AndThen","internal::Or","internal::And"],"G":["core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["std::boxed::Box","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Into"],"G":["internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapOpt","internal::Or","internal::FlatMap","internal::And","std::boxed::Box"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O17":["std::marker::Sized"],"O18":["std::marker::Sized"],"O19":["std::marker::Sized"],"O2":["std::marker::Sized"],"O20":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["internal::Parser","std::marker::Sized"],"P11":["std::marker::Sized","internal::Parser"],"P12":["internal::Parser","std::marker::Sized"],"P13":["internal::Parser","std::marker::Sized"],"P14":["std::marker::Sized","internal::Parser"],"P15":["internal::Parser","std::marker::Sized"],"P16":["internal::Parser","std::marker::Sized"],"P17":["internal::Parser","std::marker::Sized"],"P18":["internal::Parser","std::marker::Sized"],"P19":["std::marker::Sized","internal::Parser"],"P2":["std::marker::Sized","internal::Parser"],"P20":["std::marker::Sized","internal::Parser"],"P3":["internal::Parser","std::marker::Sized"],"P4":["std::marker::Sized","internal::Parser"],"P5":["internal::Parser","std::marker::Sized"],"P6":["std::marker::Sized","internal::Parser"],"P7":["internal::Parser","std::marker::Sized"],"P8":["std::marker::Sized","internal::Parser"],"P9":["std::marker::Sized","internal::Parser"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O17":["RUG_ANY"],"O18":["RUG_ANY"],"O19":["RUG_ANY"],"O2":["RUG_ANY"],"O20":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::AndThen","internal::And","std::boxed::Box","internal::Map","internal::Or","internal::MapRes","internal::Into","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>"],"P10":["internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Into","internal::Or"],"P11":["internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::FlatMap"],"P12":["internal::Into","internal::MapRes","internal::Or","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen"],"P13":["internal::FlatMap","internal::Into","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::Or","internal::AndThen"],"P14":["internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapRes","internal::And"],"P15":["internal::Into","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::And","internal::Or","std::boxed::Box","internal::FlatMap"],"P16":["internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"P17":["internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::Map"],"P18":["internal::FlatMap","internal::Or","internal::Into","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"P19":["internal::Map","internal::MapRes","internal::And","std::boxed::Box","internal::Into","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"],"P2":["std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","internal::Into","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::And"],"P20":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::Or","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Map"],"P3":["std::boxed::Box","internal::Or","internal::And","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::MapOpt"],"P4":["internal::Into","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","std::boxed::Box","internal::And","internal::Map"],"P5":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into","internal::Or","internal::Map","internal::AndThen","std::boxed::Box","internal::FlatMap"],"P6":["internal::Map","internal::MapOpt","internal::MapRes","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Or","internal::AndThen"],"P7":["internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","std::boxed::Box","internal::And","internal::MapRes"],"P8":["internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","internal::Or","internal::MapOpt","internal::Map"],"P9":["internal::FlatMap","internal::Or","internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Map"]},"<F as internal::Parser<I>>":{"F":["core::slice::ascii::EscapeByte","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::MapOpt","internal::MapRes","internal::And","std::boxed::Box","internal::AndThen","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Or"],"G":["internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Or","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapOpt"]},"internal::AndThen":{"F":["internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","std::boxed::Box"],"G":["internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Or","internal::And","internal::MapOpt"]},"internal::Err":{"E":["error::Error","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","internal::Needed","error::ErrorKind","error::VerboseErrorKind","error::VerboseError","number::Endianness","internal::Err"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::Map","internal::Into","internal::And","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or"],"G":["core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::AndThen","internal::Into","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::And","internal::MapRes","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Or","internal::MapRes","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::FlatMap","std::boxed::Box"],"G":["std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::And","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Or","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Map"],"G":["core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::And","std::boxed::Box","internal::Or","internal::FlatMap","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapOpt","internal::MapRes","internal::And","internal::Or","internal::Into","std::boxed::Box","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20)>::parse(p0, p1);
-----------------
src/internal.rs <(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O1":["std::marker::Sized"],"O10":["std::marker::Sized"],"O11":["std::marker::Sized"],"O12":["std::marker::Sized"],"O13":["std::marker::Sized"],"O14":["std::marker::Sized"],"O15":["std::marker::Sized"],"O16":["std::marker::Sized"],"O17":["std::marker::Sized"],"O18":["std::marker::Sized"],"O19":["std::marker::Sized"],"O2":["std::marker::Sized"],"O20":["std::marker::Sized"],"O21":["std::marker::Sized"],"O3":["std::marker::Sized"],"O4":["std::marker::Sized"],"O5":["std::marker::Sized"],"O6":["std::marker::Sized"],"O7":["std::marker::Sized"],"O8":["std::marker::Sized"],"O9":["std::marker::Sized"],"P1":["internal::Parser","std::marker::Sized"],"P10":["internal::Parser","std::marker::Sized"],"P11":["internal::Parser","std::marker::Sized"],"P12":["internal::Parser","std::marker::Sized"],"P13":["std::marker::Sized","internal::Parser"],"P14":["std::marker::Sized","internal::Parser"],"P15":["std::marker::Sized","internal::Parser"],"P16":["std::marker::Sized","internal::Parser"],"P17":["internal::Parser","std::marker::Sized"],"P18":["internal::Parser","std::marker::Sized"],"P19":["internal::Parser","std::marker::Sized"],"P2":["std::marker::Sized","internal::Parser"],"P20":["std::marker::Sized","internal::Parser"],"P21":["std::marker::Sized","internal::Parser"],"P3":["std::marker::Sized","internal::Parser"],"P4":["internal::Parser","std::marker::Sized"],"P5":["internal::Parser","std::marker::Sized"],"P6":["internal::Parser","std::marker::Sized"],"P7":["std::marker::Sized","internal::Parser"],"P8":["internal::Parser","std::marker::Sized"],"P9":["internal::Parser","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O1":["RUG_ANY"],"O10":["RUG_ANY"],"O11":["RUG_ANY"],"O12":["RUG_ANY"],"O13":["RUG_ANY"],"O14":["RUG_ANY"],"O15":["RUG_ANY"],"O16":["RUG_ANY"],"O17":["RUG_ANY"],"O18":["RUG_ANY"],"O19":["RUG_ANY"],"O2":["RUG_ANY"],"O20":["RUG_ANY"],"O21":["RUG_ANY"],"O3":["RUG_ANY"],"O4":["RUG_ANY"],"O5":["RUG_ANY"],"O6":["RUG_ANY"],"O7":["RUG_ANY"],"O8":["RUG_ANY"],"O9":["RUG_ANY"],"P1":["internal::AndThen","internal::And","internal::MapRes","internal::Map","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","std::boxed::Box"],"P10":["internal::MapOpt","internal::Or","internal::AndThen","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::And","internal::Map"],"P11":["internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::And","internal::Map","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen"],"P12":["internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Into","std::boxed::Box","internal::And","internal::Map","internal::AndThen","internal::Or"],"P13":["internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::And","internal::Into","internal::MapOpt"],"P14":["internal::FlatMap","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","internal::And"],"P15":["internal::Into","internal::MapOpt","internal::Map","internal::FlatMap","internal::Or","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen"],"P16":["std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::MapOpt"],"P17":["internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap"],"P18":["internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into","internal::Map","internal::Or","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes"],"P19":["internal::Or","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Map","std::boxed::Box","internal::Into","internal::And"],"P2":["internal::MapOpt","internal::AndThen","internal::Map","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapRes","internal::FlatMap"],"P20":["std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::And","internal::FlatMap","internal::AndThen","internal::Map"],"P21":["<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Map","internal::And","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes"],"P3":["internal::Into","internal::Or","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Map","internal::And","internal::MapOpt"],"P4":["internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapRes","internal::MapOpt","internal::And","internal::Into","std::boxed::Box","internal::Map"],"P5":["internal::FlatMap","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","internal::MapRes","internal::Or","internal::AndThen"],"P6":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Or","internal::FlatMap","internal::AndThen","internal::Map","internal::And","internal::Into","<F as internal::Parser<I>>"],"P7":["internal::MapOpt","internal::AndThen","internal::Or","internal::And","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","<F as internal::Parser<I>>"],"P8":["internal::And","internal::FlatMap","internal::Or","internal::AndThen","internal::Map","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","std::boxed::Box"],"P9":["internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap","internal::And","std::boxed::Box","internal::Or"]},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::AndThen","internal::Into","std::boxed::Box","internal::Map","internal::And","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::MapRes"],"G":["internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Map","internal::Into"]},"internal::AndThen":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","internal::Into"],"G":["internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::AndThen","internal::Into","internal::Or"]},"internal::Err":{"E":["internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","number::Endianness","internal::Err","error::ErrorKind","error::Error","error::VerboseErrorKind","error::VerboseError"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::Map"],"G":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::MapRes","internal::AndThen","internal::Into","internal::Map","internal::FlatMap","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","std::boxed::Box"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::Or","internal::And","std::boxed::Box","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","internal::And","internal::Or","std::boxed::Box","internal::MapOpt"],"G":["core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","internal::Or","internal::AndThen","internal::And","internal::Map","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Into"],"G":["core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::MapOpt","internal::Or","internal::FlatMap","internal::Into"],"G":["internal::AndThen","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::MapRes","internal::Map","internal::FlatMap","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21)
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) as internal::Parser<I>>::parse(p0, p1);
+crate::<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21) as internal::Parser<I>>::parse(p0, p1);
+<(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18, P19, P20, P21)>::parse(p0, p1);
-----------------
src/internal.rs <std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)> as internal::Parser<I>>::parse
deps:{"<std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)> as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"I":["std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)> as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"I":["RUG_ANY"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseError","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Err","error::VerboseErrorKind","internal::Needed","error::Error","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)> as internal::Parser<I>>::parse(p0, p1);
+crate::<std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)> as internal::Parser<I>>::parse(p0, p1);
+<std::boxed::Box<(dyn internal::Parser<I, Error = E, Output = O> + 'static)>>::parse(p0, p1);
-----------------
src/internal.rs <internal::Map<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"<internal::Map<F, G> as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"],"I":["std::marker::Sized"],"O2":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"<internal::Map<F, G> as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"F":["internal::Or","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode"],"I":["RUG_ANY"],"O2":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","internal::Into","internal::Map","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::And"],"G":["internal::Into","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Or","internal::MapOpt","internal::And","internal::FlatMap"]},"internal::AndThen":{"F":["internal::And","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Or"],"G":["internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::Into","internal::FlatMap","internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::ErrorKind","number::Endianness","error::VerboseErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Needed","internal::Err","error::VerboseError"]},"internal::FlatMap":{"F":["internal::Map","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::Map","internal::Into","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::MapRes","internal::Map","std::boxed::Box","internal::Into"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::MapOpt":{"F":["internal::Into","internal::MapRes","internal::AndThen","internal::Or","internal::And","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::MapOpt","internal::And","internal::Into","internal::FlatMap","internal::Or","internal::AndThen"],"G":["core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into","internal::FlatMap","internal::Map","internal::MapRes","std::boxed::Box","internal::Or","internal::AndThen"],"G":["internal::MapRes","std::boxed::Box","internal::Into","internal::AndThen","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::And"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::Map<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::Map<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::Map<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::Map<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::MapRes<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"<internal::MapRes<F, G> as internal::Parser<I>>::parse":{"<F as internal::Parser<I>>::Error":["error::FromExternalError"],"E2":["std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"],"I":["std::marker::Sized","std::clone::Clone"],"O2":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"<internal::MapRes<F, G> as internal::Parser<I>>::parse":{"<F as internal::Parser<I>>::Error":["error::Error","error::VerboseError"],"E2":["RUG_ANY"],"F":["internal::Or","internal::Into","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","std::boxed::Box","internal::Map","internal::MapRes"],"G":["core::str::IsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>"],"I":["error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","internal::Needed","error::Error","internal::Err","error::VerboseErrorKind","number::Endianness"],"O2":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Or","internal::MapOpt","internal::Map"],"G":["internal::AndThen","internal::Or","internal::MapRes","internal::Map","internal::And","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapRes","internal::Or"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Or","internal::And","internal::FlatMap","internal::Map","internal::MapRes","std::boxed::Box","internal::Into"]},"internal::Err":{"E":["error::Error","error::ErrorKind","number::Endianness","error::VerboseError","error::VerboseErrorKind","<*const T as std::fmt::Debug>","internal::Err","internal::Needed"]},"internal::FlatMap":{"F":["internal::Or","internal::Map","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::FlatMap"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Or","internal::MapOpt","internal::Map","internal::And","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into","<F as internal::Parser<I>>"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::And","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","internal::Into","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Map","internal::Or","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::And","internal::MapRes","internal::FlatMap"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::CharEscapeDefault"]},"internal::MapRes":{"F":["internal::MapOpt","internal::Or","internal::Map","std::boxed::Box","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::AndThen"],"G":["core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["std::boxed::Box","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::FlatMap","internal::Or","internal::MapOpt","internal::MapRes"],"G":["internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Or","internal::Into","internal::Map","std::boxed::Box","internal::FlatMap","internal::MapOpt"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::MapRes<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::MapRes<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::MapRes<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::MapRes<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::MapOpt<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<internal::MapOpt<F, G> as internal::Parser<I>>::parse":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"],"I":["std::clone::Clone","std::marker::Sized"],"O2":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<internal::MapOpt<F, G> as internal::Parser<I>>::parse":{"F":["internal::MapOpt","internal::AndThen","internal::Into","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsNotEmpty"],"I":["number::Endianness","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","error::VerboseError","error::Error","error::ErrorKind","internal::Err"],"O2":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Or","internal::Into"],"G":["<F as internal::Parser<I>>","internal::Or","internal::MapOpt","std::boxed::Box","internal::And","internal::Into","internal::Map","internal::AndThen","internal::MapRes","internal::FlatMap"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Or","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Map","internal::And","internal::MapOpt"],"G":["std::boxed::Box","internal::Or","internal::Map","internal::MapOpt","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::MapRes"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::Error","error::VerboseError","number::Endianness","<*mut T as std::fmt::Debug>","internal::Needed","internal::Err"]},"internal::FlatMap":{"F":["internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::Or","internal::FlatMap","internal::Map","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::Or","internal::Map","internal::MapRes","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Map","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::And","internal::MapRes","internal::Map","internal::AndThen"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","internal::Map","internal::MapRes","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box"],"G":["core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt","internal::And","internal::Or","internal::Map"],"G":["internal::And","internal::FlatMap","internal::MapRes","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::MapOpt<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::MapOpt<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::MapOpt<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::MapOpt<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::FlatMap<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<internal::FlatMap<F, G> as internal::Parser<I>>::parse":{"E":["error::ParseError","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"],"H":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<internal::FlatMap<F, G> as internal::Parser<I>>::parse":{"E":["error::VerboseError","error::Error"],"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::FlatMap","internal::Map","internal::And","internal::MapRes","internal::AndThen","internal::Or","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"],"H":["internal::MapRes","internal::MapOpt","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::Into","internal::And","std::boxed::Box"],"I":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::MapOpt","internal::Into","internal::And","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Or"],"G":["std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::AndThen","internal::Or","internal::Into","internal::MapOpt","internal::MapRes"]},"internal::AndThen":{"F":["internal::And","internal::Map","internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen","internal::MapOpt"],"G":["internal::FlatMap","internal::AndThen","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","std::boxed::Box"]},"internal::Err":{"E":["number::Endianness","error::Error","internal::Err","error::ErrorKind","internal::Needed","error::VerboseError","<*const T as std::fmt::Debug>","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::And"],"G":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::AndThen","internal::MapOpt","internal::Or","internal::Map","internal::FlatMap","internal::And","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","internal::Or","internal::MapOpt","internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::MapRes","internal::FlatMap","internal::Map","internal::And","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::Or","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapRes","internal::MapOpt","internal::Into","internal::Map"],"G":["core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And"],"G":["internal::And","internal::MapOpt","internal::Map","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::AndThen","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::FlatMap<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::FlatMap<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::FlatMap<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::FlatMap<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::AndThen<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<internal::AndThen<F, G> as internal::Parser<I>>::parse":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"],"I":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<internal::AndThen<F, G> as internal::Parser<I>>::parse":{"F":["internal::MapOpt","internal::Map","internal::Into","internal::FlatMap","internal::MapRes","internal::And","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::AndThen"],"G":["internal::MapOpt","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Into","internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or"],"I":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Into","internal::Map","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::Or"],"G":["internal::MapOpt","internal::Map","internal::And","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or","std::boxed::Box"]},"internal::AndThen":{"F":["internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Map","internal::Into"],"G":["<F as internal::Parser<I>>","internal::And","internal::Into","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Map","internal::MapOpt","internal::Or"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","internal::Err","number::Endianness","error::ErrorKind","error::VerboseError","internal::Needed","error::Error"]},"internal::FlatMap":{"F":["internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::And","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::MapOpt"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap"]},"internal::Into":{"E2":["i8","<T as std::convert::From<!>>","u8"],"F":["internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::Map","internal::Or","internal::And","std::boxed::Box","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapRes","internal::And","internal::MapOpt","internal::Or","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapRes","internal::Map","internal::Or","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Into","internal::Map"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::MapRes","std::boxed::Box","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::Map","internal::And","internal::FlatMap"],"G":["internal::AndThen","internal::Into","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::Map"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::AndThen<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::AndThen<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::AndThen<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::AndThen<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::And<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"<internal::And<F, G> as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"],"I":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"<internal::And<F, G> as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"F":["internal::AndThen","internal::And","internal::Or","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapOpt"],"G":["internal::And","internal::Map","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::Or"],"I":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::MapRes","internal::Into","std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","internal::Or","internal::And","internal::MapOpt","<F as internal::Parser<I>>"],"G":["internal::AndThen","internal::Or","internal::And","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapRes","internal::Or","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::MapOpt","internal::Into"],"G":["internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::And","internal::Or","std::boxed::Box","internal::FlatMap","internal::Into","internal::MapOpt"]},"internal::Err":{"E":["error::Error","internal::Err","error::VerboseError","error::ErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::Map","internal::MapOpt","internal::Or","internal::Into","internal::AndThen","std::boxed::Box","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::Or","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Or","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::And","internal::Into"],"G":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::Map","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::And"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::Into","internal::FlatMap","internal::And","internal::MapRes","internal::Or"],"G":["core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>"]},"internal::Or":{"F":["std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Map","internal::Or","internal::AndThen","internal::Into","internal::And","internal::FlatMap","<F as internal::Parser<I>>"],"G":["internal::Or","internal::AndThen","internal::And","internal::Map","internal::MapOpt","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::And<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::And<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::And<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::And<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::Or<F, G> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<internal::Or<F, G> as internal::Parser<I>>::parse":{"E":["std::marker::Sized","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized"],"O":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<internal::Or<F, G> as internal::Parser<I>>::parse":{"E":["error::Error","error::VerboseError"],"F":["internal::And","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapOpt","std::boxed::Box"],"G":["internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Or","internal::MapOpt","internal::And","internal::Into","internal::MapRes","<F as internal::Parser<I>>"],"I":["internal::Err","error::VerboseError","number::Endianness","internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","error::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseErrorKind"],"O":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::MapOpt","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::And","internal::Map","std::boxed::Box","internal::FlatMap","internal::AndThen"],"G":["internal::FlatMap","internal::And","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Into"]},"internal::AndThen":{"F":["internal::Map","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Into","internal::Or","std::boxed::Box","internal::FlatMap","internal::MapRes"],"G":["internal::Into","std::boxed::Box","internal::FlatMap","internal::Or","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::MapRes"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","internal::Err","number::Endianness","error::VerboseErrorKind","error::ErrorKind","internal::Needed","error::Error","error::VerboseError"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Into","internal::MapRes","internal::Map"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::FlatMap","internal::Map","internal::And","internal::Into","std::boxed::Box","internal::Or","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::Into","internal::And","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::AndThen"],"G":["core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::Map","internal::Into","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And"],"G":["core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"internal::MapRes":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::Or","internal::MapOpt","std::boxed::Box"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Or","internal::Into","internal::AndThen","internal::MapRes","internal::Map","std::boxed::Box","internal::And","internal::FlatMap","internal::MapOpt"],"G":["<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Map","internal::MapOpt","internal::Or","internal::Into","internal::And","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::Or<F, G>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::Or<F, G> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::Or<F, G> as internal::Parser<I>>::parse(p0, p1);
+<internal::Or<F, G>>::parse(p0, p1);
-----------------
src/internal.rs <internal::Into<F, O2, E2> as internal::Parser<I>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"<internal::Into<F, O2, E2> as internal::Parser<I>>::parse":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"I":["std::clone::Clone","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::fmt::Display","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"<internal::Into<F, O2, E2> as internal::Parser<I>>::parse":{"E2":["<T as std::convert::From<T>>","<T as std::convert::From<!>>","i8","u8"],"F":["internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::And","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen"],"I":["internal::Needed","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseErrorKind","error::VerboseError","internal::Err","error::Error","error::ErrorKind"],"O2":["error::Error","error::VerboseError"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["std::boxed::Box","internal::Or","internal::FlatMap","internal::MapRes","internal::Into","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::AndThen"],"G":["internal::AndThen","internal::MapRes","internal::FlatMap","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapOpt"]},"internal::AndThen":{"F":["std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::And","internal::MapRes","internal::Map","internal::Or","internal::AndThen"],"G":["std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::Or","internal::And","internal::FlatMap","internal::AndThen","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","number::Endianness","error::Error","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::Map","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::And","std::boxed::Box","internal::FlatMap","internal::Map","internal::Or","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::FlatMap","internal::Into","internal::MapOpt","internal::And","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::FlatMap","internal::AndThen","internal::And","internal::Or"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::Or","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::AndThen","internal::FlatMap","internal::Map","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::And","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Or","internal::FlatMap","internal::Map"],"G":["internal::Or","std::boxed::Box","internal::Map","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // internal::Into<F, O2, E2>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<internal::Into<F, O2, E2> as internal::Parser<I>>::parse(p0, p1);
+crate::<internal::Into<F, O2, E2> as internal::Parser<I>>::parse(p0, p1);
+<internal::Into<F, O2, E2>>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(F,) as sequence::Tuple<Input, (Output,), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(F,) as sequence::Tuple<Input, (Output,), Error>>::parse":{"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized"],"Output":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(F,) as sequence::Tuple<Input, (Output,), Error>>::parse":{"Error":["error::Error","error::VerboseError"],"F":["std::boxed::Box","internal::FlatMap","internal::Or","internal::AndThen","internal::Into","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt"],"Input":["RUG_ANY"],"Output":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Or"],"G":["internal::Or","internal::Into","internal::And","internal::FlatMap","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box"]},"internal::AndThen":{"F":["internal::And","internal::AndThen","internal::Or","internal::Into","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap"],"G":["internal::FlatMap","internal::Or","std::boxed::Box","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Map","internal::AndThen"]},"internal::Err":{"E":["error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::ErrorKind","error::VerboseError","internal::Err","error::Error","internal::Needed","number::Endianness"]},"internal::FlatMap":{"F":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Or","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Map"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["std::boxed::Box","internal::Map","internal::FlatMap","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen","internal::And"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::AndThen","internal::MapOpt","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Into","std::boxed::Box","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty"]},"internal::MapOpt":{"F":["internal::Map","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::Into","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::FlatMap"],"G":["core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::Into","internal::Or","internal::AndThen","std::boxed::Box","internal::And","internal::MapOpt"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::Or","internal::And","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","internal::FlatMap"],"G":["std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or","internal::AndThen","internal::And","internal::MapRes","internal::FlatMap"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (F,)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(F,) as sequence::Tuple<Input, (Output,), Error>>::parse(p0, p1);
+crate::<(F,) as sequence::Tuple<Input, (Output,), Error>>::parse(p0, p1);
+<(F,)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB) as sequence::Tuple<Input, (A, B), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB) as sequence::Tuple<Input, (A, B), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB) as sequence::Tuple<Input, (A, B), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"FnA":["internal::Or","internal::Map","internal::AndThen","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Into"],"FnB":["internal::And","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapOpt","internal::Or"],"Input":["std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::VerboseErrorKind","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","internal::Err","error::ErrorKind","error::VerboseError","error::Error"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box"],"G":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Map","internal::Or","internal::And","internal::Into","internal::MapOpt","internal::FlatMap","internal::AndThen"]},"internal::AndThen":{"F":["std::boxed::Box","internal::FlatMap","internal::Into","internal::AndThen","internal::MapRes","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::And"],"G":["internal::And","internal::AndThen","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Into","internal::Or","internal::MapOpt"]},"internal::Err":{"E":["std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::ErrorKind","error::VerboseError","error::Error","internal::Err","error::VerboseErrorKind","number::Endianness","internal::Needed"]},"internal::FlatMap":{"F":["internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Or","internal::And","internal::Map"],"G":["core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::AndThen","internal::Into","internal::MapOpt","internal::And","std::boxed::Box","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Map","internal::AndThen","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::Into","internal::And","std::boxed::Box"],"G":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::AndThen","internal::MapRes","internal::Into","internal::Map","internal::Or","internal::FlatMap"],"G":["core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::MapRes","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Map","std::boxed::Box","internal::And"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Map","internal::Or","internal::Into","internal::MapOpt","internal::MapRes","internal::And"],"G":["<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Map","internal::MapRes","std::boxed::Box","internal::And","internal::Or","internal::FlatMap","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB) as sequence::Tuple<Input, (A, B), Error>>::parse(p0, p1);
+crate::<(FnA, FnB) as sequence::Tuple<Input, (A, B), Error>>::parse(p0, p1);
+<(FnA, FnB)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC) as sequence::Tuple<Input, (A, B, C), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC) as sequence::Tuple<Input, (A, B, C), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"Input":["std::clone::Clone","std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::cmp::Eq","std::fmt::Debug"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","error::ParseError","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC) as sequence::Tuple<Input, (A, B, C), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"FnA":["internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Or","internal::And","internal::AndThen","std::boxed::Box","internal::MapRes","internal::Into"],"FnB":["internal::MapOpt","internal::FlatMap","internal::Into","internal::Or","internal::Map","internal::And","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes"],"FnC":["internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::AndThen","internal::MapOpt","internal::FlatMap"],"Input":["std::clone::impls::<impl std::clone::Clone for &mut T>","error::Error","internal::Needed","std::clone::impls::<impl std::clone::Clone for &T>","error::VerboseErrorKind","number::Endianness","error::VerboseError","internal::Err","error::ErrorKind"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeUnicode","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::MapRes","internal::FlatMap","internal::And","internal::Into","internal::AndThen","internal::Or","std::boxed::Box"],"G":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::Or","internal::FlatMap","internal::Into","internal::MapOpt","std::boxed::Box","internal::AndThen"]},"internal::AndThen":{"F":["internal::FlatMap","std::boxed::Box","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::And","internal::Into"],"G":["internal::And","std::boxed::Box","internal::Into","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::Or"]},"internal::Err":{"E":["error::Error","<*const T as std::fmt::Debug>","internal::Err","error::ErrorKind","error::VerboseError","internal::Needed","error::VerboseErrorKind","number::Endianness"]},"internal::FlatMap":{"F":["internal::Or","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapRes"],"G":["core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::MapOpt","std::boxed::Box","internal::And","internal::Map","internal::Or"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::And","internal::MapOpt","internal::MapRes","internal::Map","internal::Into","std::boxed::Box"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::MapOpt":{"F":["internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::Map","internal::MapRes","internal::And","internal::MapOpt"],"G":["core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::LinesAnyMap","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::MapOpt","internal::FlatMap","internal::And","std::boxed::Box","internal::Map","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::AndThen","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Map","std::boxed::Box","internal::MapRes","internal::Into","internal::And"],"G":["internal::MapOpt","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Map","internal::Into","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC) as sequence::Tuple<Input, (A, B, C), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC) as sequence::Tuple<Input, (A, B, C), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD) as sequence::Tuple<Input, (A, B, C, D), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD) as sequence::Tuple<Input, (A, B, C, D), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD) as sequence::Tuple<Input, (A, B, C, D), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"FnA":["internal::Or","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Into","std::boxed::Box","internal::FlatMap","internal::And"],"FnB":["<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::Map","internal::And","internal::MapOpt","internal::FlatMap","internal::AndThen","std::boxed::Box","internal::Into"],"FnC":["internal::Or","internal::FlatMap","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::And","internal::Map","internal::Into"],"FnD":["internal::FlatMap","internal::MapOpt","internal::And","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Map"],"Input":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","error::Error","error::VerboseError","internal::Err","internal::Needed","number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for &T>"]},"<F as internal::Parser<I>>":{"F":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Map","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And","internal::Or","internal::MapOpt"],"G":["internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Into","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Or","internal::FlatMap"]},"internal::AndThen":{"F":["internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::AndThen"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Map","internal::MapOpt","internal::Into","internal::FlatMap","internal::AndThen"]},"internal::Err":{"E":["error::Error","number::Endianness","error::ErrorKind","error::VerboseErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Needed","error::VerboseError","internal::Err"]},"internal::FlatMap":{"F":["internal::Map","internal::And","internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen"],"G":["core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<!>>"],"F":["internal::MapRes","internal::And","internal::MapOpt","internal::Into","internal::FlatMap","internal::Map","internal::Or","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::Map","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And","std::boxed::Box","internal::Into"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::FlatMap","internal::And"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Map","internal::And","internal::Or","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Into"],"G":["core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Into","internal::And","internal::FlatMap","internal::MapRes","internal::Or","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Map"],"G":["internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::AndThen","internal::MapOpt","internal::Map","internal::And"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD) as sequence::Tuple<Input, (A, B, C, D), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD) as sequence::Tuple<Input, (A, B, C, D), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE) as sequence::Tuple<Input, (A, B, C, D, E), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE) as sequence::Tuple<Input, (A, B, C, D, E), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE) as sequence::Tuple<Input, (A, B, C, D, E), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"FnA":["internal::Map","internal::FlatMap","internal::AndThen","internal::And","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::MapRes"],"FnB":["internal::MapRes","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen","internal::And","internal::Or","internal::FlatMap"],"FnC":["std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Into","internal::MapRes","internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Map"],"FnD":["internal::MapRes","internal::MapOpt","internal::Into","std::boxed::Box","internal::Map","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen"],"FnE":["std::boxed::Box","internal::AndThen","internal::MapOpt","internal::Or","internal::Into","internal::Map","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap"],"Input":["internal::Needed","error::Error","error::VerboseErrorKind","number::Endianness","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseError","internal::Err"]},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::IsWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Map","internal::Or","internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Into","internal::AndThen","internal::MapRes"],"G":["std::boxed::Box","internal::And","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap","internal::AndThen"]},"internal::AndThen":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::MapOpt","internal::Or","std::boxed::Box","internal::MapRes","internal::And","internal::Into"],"G":["internal::Map","internal::MapRes","internal::FlatMap","internal::Into","std::boxed::Box","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And"]},"internal::Err":{"E":["internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","error::VerboseError","internal::Err","error::Error","error::ErrorKind","number::Endianness"]},"internal::FlatMap":{"F":["internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","internal::MapOpt","std::boxed::Box","internal::Into","internal::And","internal::AndThen"],"G":["core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::Into":{"E2":["u8","i8","<T as std::convert::From<T>>"],"F":["internal::MapRes","internal::AndThen","internal::And","internal::Into","internal::Or","internal::Map","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","std::boxed::Box","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapRes"],"G":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::BytesIsNotEmpty"]},"internal::MapOpt":{"F":["internal::And","internal::Map","internal::MapRes","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","std::boxed::Box","internal::Or"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["std::boxed::Box","internal::AndThen","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","internal::Into","internal::Map"],"G":["core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::Or":{"F":["internal::And","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes"],"G":["internal::MapRes","std::boxed::Box","internal::Map","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE) as sequence::Tuple<Input, (A, B, C, D, E), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE) as sequence::Tuple<Input, (A, B, C, D, E), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF) as sequence::Tuple<Input, (A, B, C, D, E, F), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF) as sequence::Tuple<Input, (A, B, C, D, E, F), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"Input":["std::marker::Sized","std::clone::Clone"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF) as sequence::Tuple<Input, (A, B, C, D, E, F), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And","internal::Or","internal::AndThen","internal::MapRes","internal::MapOpt"],"FnB":["internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","internal::Or"],"FnC":["internal::AndThen","std::boxed::Box","internal::And","internal::Or","internal::MapRes","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::FlatMap"],"FnD":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt","internal::And","internal::Map","internal::AndThen"],"FnE":["std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::Into","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::And"],"FnF":["internal::AndThen","internal::Or","internal::MapRes","internal::Into","internal::FlatMap","std::boxed::Box","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"],"Input":["error::VerboseError","internal::Needed","number::Endianness","error::Error","internal::Err","error::VerboseErrorKind","std::clone::impls::<impl std::clone::Clone for &T>","error::ErrorKind"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Or","internal::Map","internal::MapRes","internal::MapOpt","internal::And","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Map","internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::MapOpt","std::boxed::Box"]},"internal::AndThen":{"F":["internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","internal::AndThen","internal::And"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::AndThen","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::FlatMap","internal::Or"]},"internal::Err":{"E":["error::VerboseErrorKind","<*const T as std::fmt::Debug>","number::Endianness","error::VerboseError","internal::Needed","internal::Err","error::ErrorKind","error::Error"]},"internal::FlatMap":{"F":["internal::Map","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::And","internal::Into"],"G":["core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Or","internal::AndThen","internal::Map","internal::FlatMap","internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt","internal::And","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::Or","internal::MapOpt","internal::Map","internal::FlatMap","internal::AndThen","internal::MapRes","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>"]},"internal::MapOpt":{"F":["internal::Into","internal::MapOpt","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Map"],"G":["std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace"]},"internal::MapRes":{"F":["internal::AndThen","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::MapOpt","internal::And","internal::Map","internal::MapRes","internal::Or"],"G":["core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["internal::MapOpt","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::Or","internal::Into","internal::MapRes","internal::AndThen"],"G":["internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::And","internal::MapRes","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF) as sequence::Tuple<Input, (A, B, C, D, E, F), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF) as sequence::Tuple<Input, (A, B, C, D, E, F), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Debug","std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::And","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::MapRes","internal::Or","std::boxed::Box","internal::Map"],"FnB":["internal::Map","internal::FlatMap","internal::Or","std::boxed::Box","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::And"],"FnC":["internal::MapRes","internal::Or","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::AndThen"],"FnD":["internal::Map","internal::MapRes","internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::And"],"FnE":["internal::FlatMap","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes","internal::MapOpt"],"FnF":["internal::MapRes","internal::Into","internal::AndThen","internal::And","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::FlatMap","internal::Or"],"FnG":["internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::AndThen","internal::And","internal::Or","internal::Into","std::boxed::Box","internal::MapRes"],"G":["RUG_ANY"],"Input":["error::ErrorKind","error::VerboseError","error::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","number::Endianness","error::VerboseErrorKind","internal::Err"]},"<F as internal::Parser<I>>":{"F":["core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::MapRes","internal::AndThen","internal::Or","internal::Into","internal::FlatMap","internal::Map","internal::And","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>"],"G":["internal::FlatMap","internal::And","internal::MapOpt","internal::Or","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Into"]},"internal::AndThen":{"F":["internal::Map","internal::Or","internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Into"],"G":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Or","internal::Into","internal::AndThen","std::boxed::Box","internal::Map","internal::MapOpt","internal::And"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","error::Error","number::Endianness","error::VerboseError","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err"]},"internal::FlatMap":{"F":["internal::Map","internal::AndThen","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","internal::Into","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"G":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace"]},"internal::Into":{"E2":["i8","u8","<T as std::convert::From<!>>"],"F":["internal::Into","internal::And","internal::FlatMap","internal::MapRes","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::AndThen","internal::Or"],"G":["core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::str::IsNotEmpty"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Or","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Map","internal::And","internal::Into","<F as internal::Parser<I>>","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsWhitespace"]},"internal::MapRes":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","internal::Or","internal::Into","internal::Map"],"G":["core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::BytesIsNotEmpty"]},"internal::Or":{"F":["internal::Or","std::boxed::Box","internal::Into","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Map","internal::FlatMap"],"G":["internal::MapRes","internal::AndThen","std::boxed::Box","internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG) as sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::clone::Clone"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::Map","internal::Or","internal::And","internal::AndThen","internal::MapRes","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap"],"FnB":["<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::MapOpt","internal::MapRes","internal::Or","std::boxed::Box","internal::And","internal::Map","internal::AndThen"],"FnC":["internal::And","internal::MapOpt","std::boxed::Box","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::AndThen","internal::FlatMap"],"FnD":["internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or","internal::MapRes","internal::And","internal::Into","internal::FlatMap","std::boxed::Box"],"FnE":["internal::Or","internal::AndThen","internal::MapOpt","internal::FlatMap","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Into"],"FnF":["internal::MapRes","internal::MapOpt","internal::AndThen","internal::Map","internal::And","internal::Into","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::FlatMap"],"FnG":["<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::MapOpt","internal::Map","std::boxed::Box","internal::AndThen","internal::And","internal::FlatMap","internal::Or"],"FnH":["internal::AndThen","internal::FlatMap","internal::And","internal::Or","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Map"],"G":["RUG_ANY"],"H":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","std::clone::impls::<impl std::clone::Clone for *mut T>","error::ErrorKind","error::VerboseError","error::Error","error::VerboseErrorKind","internal::Err","number::Endianness"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapOpt","internal::And","internal::Map","std::boxed::Box","internal::Or","internal::FlatMap"],"G":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::And","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes"]},"internal::AndThen":{"F":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And"],"G":["internal::Or","internal::MapOpt","internal::And","internal::Map","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::MapRes"]},"internal::Err":{"E":["error::Error","error::VerboseError","internal::Err","internal::Needed","error::VerboseErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::MapRes","internal::AndThen","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into","internal::Map","internal::Or"],"G":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["<F as internal::Parser<I>>","internal::Or","internal::Map","internal::And","internal::FlatMap","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Into","internal::MapRes"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::MapOpt","internal::Or","internal::FlatMap","internal::Map","internal::MapRes","internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::MapOpt":{"F":["internal::AndThen","internal::MapOpt","internal::Map","internal::Into","internal::Or","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>"]},"internal::MapRes":{"F":["internal::Map","internal::MapRes","std::boxed::Box","internal::FlatMap","internal::Into","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"G":["core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::Map","internal::Into","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And"],"G":["internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt","internal::Into","std::boxed::Box","internal::MapRes"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::Global","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::And","internal::AndThen","internal::Into","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or"],"FnB":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::And","internal::AndThen","internal::Into","internal::Map","std::boxed::Box","internal::FlatMap","internal::MapOpt"],"FnC":["<F as internal::Parser<I>>","internal::FlatMap","internal::Or","internal::And","internal::MapOpt","internal::MapRes","internal::Into","internal::Map","std::boxed::Box","internal::AndThen"],"FnD":["std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::And","internal::MapRes","internal::Or"],"FnE":["<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or","internal::AndThen","internal::And","internal::Into","internal::FlatMap","internal::MapRes"],"FnF":["internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::Or","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::Map"],"FnG":["std::boxed::Box","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::MapRes","internal::And","internal::MapOpt","internal::FlatMap"],"FnH":["internal::MapRes","internal::Or","std::boxed::Box","internal::Into","internal::MapOpt","internal::And","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap"],"FnI":["std::boxed::Box","internal::Into","internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::Map"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["number::Endianness","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseErrorKind","internal::Needed","error::Error","internal::Err","error::ErrorKind","error::VerboseError","std::clone::impls::<impl std::clone::Clone for &T>"]},"<F as internal::Parser<I>>":{"F":["core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Or","internal::FlatMap","internal::Into","internal::AndThen","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Map","std::boxed::Box"],"G":["internal::FlatMap","internal::And","internal::MapRes","internal::Into","internal::AndThen","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map"]},"internal::AndThen":{"F":["internal::MapRes","internal::Into","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::Map","internal::And"],"G":["std::boxed::Box","internal::MapOpt","internal::AndThen","internal::Or","internal::Into","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::And"]},"internal::Err":{"E":["number::Endianness","error::VerboseError","error::Error","internal::Err","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","error::VerboseErrorKind","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::MapRes","internal::And","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Map","internal::FlatMap","internal::MapOpt"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::AndThen","std::boxed::Box","internal::MapOpt","internal::And","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Into","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::FlatMap","internal::MapOpt","internal::Into","internal::And","internal::Map","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen"],"G":["core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::MapOpt":{"F":["internal::MapOpt","internal::AndThen","std::boxed::Box","internal::Or","internal::FlatMap","internal::MapRes","internal::Into","internal::And","<F as internal::Parser<I>>","internal::Map"],"G":["core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::Or","std::boxed::Box","internal::And","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::FlatMap","internal::MapOpt"],"G":["core::str::CharEscapeDebugContinue","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Map","internal::FlatMap","internal::Or","internal::MapOpt","internal::Into","std::boxed::Box","internal::AndThen"],"G":["internal::FlatMap","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","internal::MapOpt","internal::And","internal::Map","internal::MapRes","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::fmt::Display"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen","std::boxed::Box"],"FnB":["internal::MapRes","internal::FlatMap","internal::And","internal::MapOpt","internal::Map","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Or"],"FnC":["internal::Into","internal::MapOpt","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::And","internal::Or"],"FnD":["<F as internal::Parser<I>>","internal::And","internal::Or","internal::Map","internal::MapRes","internal::AndThen","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap"],"FnE":["<F as internal::Parser<I>>","internal::MapRes","internal::Map","std::boxed::Box","internal::MapOpt","internal::Into","internal::Or","internal::FlatMap","internal::AndThen","internal::And"],"FnF":["internal::MapOpt","internal::Into","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Or"],"FnG":["internal::MapOpt","internal::MapRes","internal::And","internal::AndThen","internal::Or","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","std::boxed::Box"],"FnH":["internal::Into","std::boxed::Box","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::FlatMap","internal::MapRes","internal::AndThen"],"FnI":["internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapOpt"],"FnJ":["std::boxed::Box","internal::Or","internal::MapRes","internal::FlatMap","internal::Into","internal::Map","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::And"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","error::ErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","error::Error","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>"],"J":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::MapOpt","internal::And","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen"],"G":["internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapOpt","internal::FlatMap","internal::Map"]},"internal::AndThen":{"F":["std::boxed::Box","internal::And","internal::MapOpt","internal::AndThen","internal::Map","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Or"],"G":["internal::FlatMap","internal::AndThen","internal::MapRes","internal::And","std::boxed::Box","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapOpt"]},"internal::Err":{"E":["error::ErrorKind","error::Error","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseErrorKind","error::VerboseError","number::Endianness","internal::Needed","internal::Err"]},"internal::FlatMap":{"F":["internal::FlatMap","internal::MapOpt","internal::Into","internal::AndThen","internal::And","internal::MapRes","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Map"],"G":["core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","u8","i8"],"F":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::And","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Map"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Or","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into"],"G":["core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["internal::Or","internal::AndThen","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::And"],"G":["core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::Or","internal::MapOpt","internal::And","std::boxed::Box","internal::Map","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::And","internal::Into","internal::Or","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Map","<F as internal::Parser<I>>"],"G":["<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::AndThen","internal::FlatMap","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::MapOpt"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::marker::Sized"]},"error::VerboseError":{"I":["std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::marker::Sized"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Or","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Into","internal::Map","internal::MapRes","internal::MapOpt","internal::And"],"FnB":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Map","internal::Into","internal::Or","internal::And","internal::AndThen","internal::MapOpt","std::boxed::Box"],"FnC":["internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Or"],"FnD":["internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::Map","std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::AndThen"],"FnE":["internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","internal::And","internal::Into","internal::AndThen","internal::MapRes","internal::Or","<F as internal::Parser<I>>"],"FnF":["<F as internal::Parser<I>>","internal::Or","internal::And","internal::MapOpt","internal::AndThen","internal::Into","internal::FlatMap","internal::MapRes","internal::Map","std::boxed::Box"],"FnG":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Into","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::And","internal::Map"],"FnH":["internal::Or","internal::And","internal::Map","std::boxed::Box","internal::Into","internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen"],"FnI":["internal::Or","<F as internal::Parser<I>>","internal::Into","internal::And","internal::MapOpt","internal::MapRes","internal::Map","std::boxed::Box","internal::AndThen","internal::FlatMap"],"FnJ":["internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap","internal::Into"],"FnK":["std::boxed::Box","internal::Map","internal::MapOpt","internal::And","internal::Or","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::FlatMap"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::Error","error::VerboseErrorKind","error::ErrorKind","std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","internal::Needed","number::Endianness","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError"],"J":["RUG_ANY"],"K":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","internal::MapOpt","internal::Or","internal::MapRes","internal::And","std::boxed::Box"],"G":["std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","internal::MapRes","internal::Map","internal::Into"]},"internal::AndThen":{"F":["internal::MapRes","internal::And","internal::Into","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapOpt","std::boxed::Box"],"G":["<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt","internal::And","std::boxed::Box","internal::Or","internal::FlatMap"]},"internal::Err":{"E":["error::VerboseErrorKind","number::Endianness","error::Error","error::ErrorKind","error::VerboseError","internal::Needed","internal::Err","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"internal::FlatMap":{"F":["internal::And","internal::MapRes","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::Map"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Map","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Or","internal::MapOpt"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::MapOpt","internal::Or","std::boxed::Box","internal::FlatMap","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeUnicode"]},"internal::MapOpt":{"F":["std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Or"],"G":["core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue"]},"internal::MapRes":{"F":["internal::MapRes","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Or","internal::Map","internal::MapOpt","internal::Into","internal::AndThen"],"G":["std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::LinesAnyMap"]},"internal::Or":{"F":["internal::MapRes","internal::MapOpt","internal::And","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::AndThen","internal::Or","internal::FlatMap"],"G":["internal::AndThen","internal::Or","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::And","internal::Map","internal::Into"]},"std::boxed::Box":{"A":["<&A as std::alloc::Allocator>","std::alloc::System","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","std::convert::From","error::ParseError"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::FlatMap","internal::MapRes","internal::AndThen","internal::Into","internal::Map","std::boxed::Box","internal::Or","internal::And","internal::MapOpt","<F as internal::Parser<I>>"],"FnB":["internal::MapRes","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::And","internal::MapOpt","internal::Into"],"FnC":["internal::And","internal::FlatMap","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Into"],"FnD":["std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","internal::AndThen","internal::Or","internal::MapRes","internal::Into"],"FnE":["internal::AndThen","std::boxed::Box","internal::And","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::Into","internal::MapRes","internal::MapOpt"],"FnF":["internal::And","std::boxed::Box","internal::Map","internal::MapOpt","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes"],"FnG":["internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::Map","std::boxed::Box","internal::And","internal::Or","internal::Into"],"FnH":["internal::Map","std::boxed::Box","internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Into"],"FnI":["std::boxed::Box","internal::Or","internal::MapRes","internal::Into","internal::MapOpt","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::FlatMap","internal::And"],"FnJ":["internal::Into","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::And","internal::Or","internal::AndThen"],"FnK":["internal::AndThen","std::boxed::Box","internal::And","internal::MapOpt","internal::Map","internal::MapRes","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"FnL":["internal::AndThen","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::Or","internal::Into","internal::MapOpt","internal::And"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Err","error::ErrorKind","error::Error","number::Endianness","error::VerboseErrorKind","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *mut T>"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::LinesAnyMap"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::And","internal::AndThen","internal::MapRes","std::boxed::Box","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or"],"G":["internal::MapOpt","std::boxed::Box","internal::AndThen","internal::Map","internal::MapRes","internal::FlatMap","internal::Or","internal::Into","internal::And","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["internal::And","internal::Map","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box"],"G":["internal::And","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen","internal::MapRes"]},"internal::Err":{"E":["error::VerboseError","error::VerboseErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","number::Endianness","internal::Err","error::ErrorKind"]},"internal::FlatMap":{"F":["std::boxed::Box","internal::And","internal::FlatMap","internal::Into","internal::AndThen","internal::Or","internal::MapRes","internal::MapOpt","internal::Map","<F as internal::Parser<I>>"],"G":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace"]},"internal::Into":{"E2":["<T as std::convert::From<T>>","i8","u8"],"F":["internal::AndThen","internal::Into","internal::And","internal::MapOpt","internal::FlatMap","internal::MapRes","internal::Map","internal::Or","std::boxed::Box","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Or","internal::Into","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::FlatMap","std::boxed::Box","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Or","internal::MapOpt","internal::Into","internal::AndThen","internal::And","std::boxed::Box","internal::Map"],"G":["core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["internal::Or","internal::AndThen","internal::MapRes","internal::And","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Map","std::boxed::Box"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Into","internal::FlatMap","internal::Or","internal::Map","std::boxed::Box"],"G":["internal::And","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen"]},"std::boxed::Box":{"A":["std::alloc::System","std::alloc::Global","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"]},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::Eq"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["error::ParseError","std::convert::From","std::marker::Sized"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","internal::And","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::Or"],"FnB":["internal::Map","internal::MapRes","internal::Or","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Into","internal::MapOpt"],"FnC":["<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","internal::Or"],"FnD":["internal::AndThen","internal::Or","std::boxed::Box","internal::Map","internal::MapRes","internal::And","internal::FlatMap","internal::Into","internal::MapOpt","<F as internal::Parser<I>>"],"FnE":["internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::And","internal::AndThen","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt"],"FnF":["internal::FlatMap","internal::MapOpt","internal::Into","internal::AndThen","internal::Or","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::MapRes"],"FnG":["<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::And","internal::MapOpt","internal::Map","internal::Into","internal::MapRes"],"FnH":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","std::boxed::Box","internal::And","internal::Map","internal::AndThen","internal::MapRes","internal::Into","internal::MapOpt"],"FnI":["internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Or","internal::AndThen","internal::Into","internal::And"],"FnJ":["internal::Map","internal::Or","internal::MapRes","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap"],"FnK":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Map","internal::Or","internal::FlatMap","internal::Into","internal::And"],"FnL":["internal::FlatMap","internal::Or","internal::AndThen","internal::MapRes","internal::Into","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::And"],"FnM":["internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::AndThen","internal::Or","internal::MapOpt","internal::Map"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["number::Endianness","error::Error","error::ErrorKind","internal::Err","std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","error::VerboseErrorKind","error::VerboseError"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"]},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Or","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::And","internal::Map","<F as internal::Parser<I>>","internal::AndThen","internal::MapRes","internal::Into"],"G":["internal::Into","internal::Or","internal::MapOpt","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Map","std::boxed::Box","internal::FlatMap"]},"internal::AndThen":{"F":["internal::MapRes","internal::Into","internal::Or","internal::FlatMap","internal::MapOpt","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Map"],"G":["internal::AndThen","internal::FlatMap","internal::And","internal::Map","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Or"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","internal::Needed","error::VerboseErrorKind","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","internal::Err","error::Error"]},"internal::FlatMap":{"F":["internal::Map","internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Into"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Or","std::boxed::Box","internal::MapRes","internal::AndThen","internal::FlatMap","internal::And","internal::Into"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Map","std::boxed::Box","internal::AndThen","internal::MapRes","internal::Into"],"G":["std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Into","internal::Map","std::boxed::Box","internal::MapOpt","internal::Or"],"G":["core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::UnsafeBytesToStr"]},"internal::MapRes":{"F":["internal::Map","internal::AndThen","internal::Or","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::And"],"G":["core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","std::boxed::Box<F, A>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::And","internal::Or","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Into","std::boxed::Box","internal::Map"],"G":["internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::And","std::boxed::Box","internal::FlatMap","internal::AndThen","internal::Into","internal::Or","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["std::marker::Sized","internal::Parser"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::Eq","std::cmp::PartialEq","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::AndThen","internal::MapRes","internal::Into","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Map","internal::FlatMap"],"FnB":["std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Map","internal::MapOpt"],"FnC":["internal::Into","internal::FlatMap","internal::AndThen","internal::Or","std::boxed::Box","internal::And","internal::Map","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>"],"FnD":["internal::Into","internal::MapRes","internal::MapOpt","internal::Or","internal::Map","internal::And","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box"],"FnE":["internal::Into","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::FlatMap","internal::MapRes"],"FnF":["internal::Or","<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::MapRes","internal::Into","std::boxed::Box","internal::Map","internal::AndThen","internal::MapOpt"],"FnG":["std::boxed::Box","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::MapOpt","internal::Into","internal::Map","internal::AndThen"],"FnH":["internal::MapOpt","internal::And","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::Map","<F as internal::Parser<I>>"],"FnI":["internal::Map","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::FlatMap","internal::Into","internal::Or","std::boxed::Box"],"FnJ":["internal::And","internal::Map","internal::MapRes","internal::FlatMap","internal::Into","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","std::boxed::Box"],"FnK":["std::boxed::Box","internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","internal::Map","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::Into"],"FnL":["internal::And","internal::MapRes","internal::FlatMap","internal::Into","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::Map"],"FnM":["internal::And","internal::Or","internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Map","internal::MapRes","internal::Into","std::boxed::Box","<F as internal::Parser<I>>"],"FnN":["internal::MapOpt","internal::And","internal::AndThen","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::Or","internal::Map","internal::MapRes","std::boxed::Box"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","std::clone::impls::<impl std::clone::Clone for &mut T>","internal::Needed","internal::Err","error::Error","error::VerboseErrorKind","error::VerboseError","error::ErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::FlatMap","internal::Map","internal::AndThen","std::boxed::Box","internal::Or","internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::Into"],"G":["internal::AndThen","internal::FlatMap","internal::MapOpt","internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::Into","internal::And"]},"internal::AndThen":{"F":["internal::FlatMap","internal::Into","internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes","internal::Or","internal::AndThen","<F as internal::Parser<I>>"],"G":["internal::Into","internal::AndThen","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Or","internal::And","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseErrorKind","number::Endianness","error::Error","internal::Needed","internal::Err","<*const T as std::fmt::Debug>","error::VerboseError"]},"internal::FlatMap":{"F":["<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::MapRes","internal::And","internal::Into","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box"],"G":["core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","u8","i8"],"F":["internal::Map","internal::And","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["std::boxed::Box","internal::And","internal::Or","internal::MapOpt","internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap"],"G":["core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace"]},"internal::MapOpt":{"F":["internal::Map","internal::Or","internal::And","internal::AndThen","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Into"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode"]},"internal::MapRes":{"F":["internal::Into","std::boxed::Box","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::Or","internal::Map","internal::AndThen"],"G":["core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::IsNotEmpty"]},"internal::Or":{"F":["internal::And","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","internal::Into","internal::FlatMap","internal::MapRes"],"G":["std::boxed::Box","internal::And","internal::AndThen","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap"]},"std::boxed::Box":{"A":["std::alloc::Global","std::alloc::System","<&A as std::alloc::Allocator>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["std::marker::Sized","internal::Parser"],"FnM":["internal::Parser","std::marker::Sized"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Display","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"error::VerboseError":{"I":["std::fmt::Display","std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::cmp::Eq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Or","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap"],"FnB":["std::boxed::Box","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::AndThen","internal::And","internal::Into","internal::MapOpt","internal::Map","internal::Or"],"FnC":["internal::MapOpt","internal::Into","internal::MapRes","std::boxed::Box","internal::And","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::AndThen"],"FnD":["internal::Or","internal::Map","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into","internal::FlatMap","internal::MapRes"],"FnE":["internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::AndThen"],"FnF":["internal::Into","internal::Or","std::boxed::Box","internal::MapRes","internal::AndThen","internal::MapOpt","internal::And","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"],"FnG":["internal::Or","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::And","internal::Into","std::boxed::Box","internal::MapRes","internal::FlatMap"],"FnH":["internal::Or","internal::MapOpt","internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>"],"FnI":["internal::Or","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::And","internal::FlatMap","internal::MapRes","internal::AndThen","internal::Into","std::boxed::Box"],"FnJ":["internal::Map","internal::MapRes","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::FlatMap","internal::And","std::boxed::Box"],"FnK":["<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or","internal::Map","internal::And","internal::MapOpt","internal::Into"],"FnL":["internal::Map","internal::FlatMap","internal::And","internal::Into","internal::AndThen","internal::MapOpt","internal::Or","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>"],"FnM":["internal::Into","internal::Or","internal::FlatMap","internal::And","internal::MapRes","std::boxed::Box","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"FnN":["internal::MapOpt","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Into"],"FnO":["std::boxed::Box","internal::Into","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::MapRes"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for *mut T>","number::Endianness","error::Error","internal::Needed","error::VerboseError","std::clone::impls::<impl std::clone::Clone for *const T>","error::VerboseErrorKind","internal::Err","error::ErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::And":{"F":["internal::Into","internal::FlatMap","internal::MapRes","internal::Map","internal::Or","internal::MapOpt","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And"],"G":["internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Into","internal::Map","internal::AndThen","internal::FlatMap","internal::MapOpt"]},"internal::AndThen":{"F":["internal::MapOpt","internal::And","internal::Map","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::Or","internal::FlatMap","internal::AndThen"],"G":["internal::AndThen","internal::MapOpt","internal::And","internal::Or","internal::FlatMap","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into"]},"internal::Err":{"E":["<*const T as std::fmt::Debug>","error::ErrorKind","error::Error","error::VerboseError","error::VerboseErrorKind","internal::Err","number::Endianness","internal::Needed"]},"internal::FlatMap":{"F":["internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::AndThen","std::boxed::Box"],"G":["core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::UnsafeBytesToStr"]},"internal::Into":{"E2":["u8","<T as std::convert::From<T>>","i8"],"F":["internal::And","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::MapRes","internal::MapOpt","internal::AndThen","internal::FlatMap"],"G":["core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"]},"internal::MapOpt":{"F":["internal::AndThen","internal::Into","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","internal::FlatMap","internal::Or"],"G":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::Or","internal::MapRes","internal::Map","internal::Into","std::boxed::Box","internal::MapOpt","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::And"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::str::CharEscapeDefault"]},"internal::Or":{"F":["internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Map","internal::Or","internal::AndThen"],"G":["internal::FlatMap","internal::MapOpt","internal::Map","internal::And","std::boxed::Box","internal::Into","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::Map","internal::And","std::boxed::Box","internal::Or","internal::AndThen","internal::FlatMap","internal::Into","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>"],"FnB":["internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Map","internal::MapRes","internal::Into","internal::Or","internal::AndThen","std::boxed::Box","internal::MapOpt"],"FnC":["std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::And","internal::Or","internal::MapOpt","internal::FlatMap","internal::Map"],"FnD":["internal::FlatMap","internal::Map","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::MapRes","internal::Or"],"FnE":["internal::FlatMap","internal::Or","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Into","internal::Map","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"FnF":["internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::Into","internal::AndThen"],"FnG":["internal::And","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box","internal::Into","internal::MapRes"],"FnH":["<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::AndThen","internal::Map","std::boxed::Box","internal::Into","internal::And"],"FnI":["internal::And","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::Map"],"FnJ":["internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::And","internal::AndThen","internal::MapRes","internal::Or","internal::Map","internal::FlatMap"],"FnK":["std::boxed::Box","internal::FlatMap","internal::Map","internal::MapRes","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen"],"FnL":["internal::FlatMap","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Or","internal::Map","internal::AndThen","internal::Into","internal::And","std::boxed::Box"],"FnM":["std::boxed::Box","internal::Or","internal::FlatMap","internal::And","internal::Into","internal::AndThen","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Map"],"FnN":["internal::MapOpt","internal::Map","internal::MapRes","internal::Into","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::Or","std::boxed::Box","internal::AndThen"],"FnO":["internal::AndThen","internal::And","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::Or","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::MapRes"],"FnP":["internal::And","internal::MapRes","internal::Or","internal::Map","internal::FlatMap","std::boxed::Box","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for &T>","internal::Err","error::Error","error::VerboseError","error::VerboseErrorKind","internal::Needed","error::ErrorKind","number::Endianness"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Map","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::MapOpt","internal::Into"],"G":["internal::MapRes","internal::Map","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::And","internal::Into","internal::Or","internal::AndThen","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Map","internal::Into","internal::FlatMap","internal::Or"],"G":["internal::Or","internal::And","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapOpt","std::boxed::Box","internal::Into","internal::FlatMap"]},"internal::Err":{"E":["internal::Needed","<*const T as std::fmt::Debug>","error::VerboseError","error::VerboseErrorKind","error::ErrorKind","internal::Err","error::Error","number::Endianness"]},"internal::FlatMap":{"F":["internal::AndThen","internal::Into","std::boxed::Box","internal::FlatMap","internal::Map","internal::MapRes","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapOpt"],"G":["core::str::CharEscapeDefault","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["std::boxed::Box","internal::Or","internal::And","internal::FlatMap","internal::AndThen","internal::MapRes","internal::Into","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","internal::MapOpt","internal::Or","std::boxed::Box","internal::Map","internal::MapRes","internal::FlatMap","internal::And","internal::AndThen","<F as internal::Parser<I>>"],"G":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::Or","internal::And","internal::Map","internal::Into","internal::AndThen"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::IsWhitespace"]},"internal::MapRes":{"F":["internal::MapRes","internal::And","internal::MapOpt","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen","internal::FlatMap","internal::Or"],"G":["core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::MapOpt","internal::AndThen","internal::And","internal::Into","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::Or","internal::FlatMap","internal::Map"],"G":["internal::MapRes","internal::Or","internal::Into","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::MapOpt","internal::And","<F as internal::Parser<I>>","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["std::marker::Sized","internal::Parser"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"FnO":["internal::Parser","std::marker::Sized"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Display","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::And","internal::MapRes","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::Or"],"FnB":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or","std::boxed::Box","internal::Map","internal::Into","internal::MapRes","internal::AndThen"],"FnC":["internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","internal::Into","internal::Or","internal::And","internal::AndThen"],"FnD":["std::boxed::Box","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::MapRes","internal::Or","internal::And","internal::Map"],"FnE":["internal::Into","internal::AndThen","internal::Or","internal::Map","std::boxed::Box","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::FlatMap"],"FnF":["internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapOpt","internal::Map"],"FnG":["internal::Into","internal::Map","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::Or","internal::MapRes","internal::And","internal::AndThen"],"FnH":["internal::And","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::AndThen","internal::Or","internal::Into","internal::MapOpt","internal::MapRes","internal::FlatMap"],"FnI":["<F as internal::Parser<I>>","internal::Into","internal::Or","internal::AndThen","internal::MapRes","internal::FlatMap","internal::And","internal::Map","std::boxed::Box","internal::MapOpt"],"FnJ":["internal::FlatMap","internal::Or","internal::And","internal::MapOpt","internal::Into","internal::Map","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::AndThen"],"FnK":["internal::Into","std::boxed::Box","internal::MapOpt","internal::Map","internal::MapRes","internal::And","internal::AndThen","internal::Or","internal::FlatMap","<F as internal::Parser<I>>"],"FnL":["internal::MapOpt","internal::FlatMap","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::And","internal::MapRes","internal::Into","std::boxed::Box","internal::AndThen"],"FnM":["internal::AndThen","internal::Into","internal::Or","internal::Map","internal::MapOpt","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::And","std::boxed::Box"],"FnN":["internal::FlatMap","internal::And","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::Or","internal::AndThen","std::boxed::Box","internal::Into"],"FnO":["internal::Map","internal::MapRes","<F as internal::Parser<I>>","internal::Into","internal::And","internal::MapOpt","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Or"],"FnP":["internal::Into","internal::MapOpt","internal::MapRes","internal::And","std::boxed::Box","internal::AndThen","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Or"],"FnQ":["std::boxed::Box","internal::And","internal::AndThen","internal::MapRes","internal::Or","internal::MapOpt","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::Into"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["number::Endianness","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError","internal::Needed","error::Error","error::ErrorKind","internal::Err","error::VerboseErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::IsAsciiWhitespace"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","internal::Err","error::VerboseError"]},"error::VerboseError":{"I":["error::Error","internal::Err","error::VerboseError"]},"internal::And":{"F":["internal::Into","std::boxed::Box","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::And","internal::MapRes","internal::AndThen"],"G":["std::boxed::Box","internal::MapRes","internal::Into","internal::Or","internal::FlatMap","internal::And","internal::AndThen","internal::Map","internal::MapOpt","<F as internal::Parser<I>>"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Or","internal::FlatMap","internal::Map","internal::And","internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","std::boxed::Box"],"G":["internal::Or","internal::And","internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::AndThen"]},"internal::Err":{"E":["error::ErrorKind","error::Error","error::VerboseError","number::Endianness","error::VerboseErrorKind","internal::Needed","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err"]},"internal::FlatMap":{"F":["internal::MapOpt","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Map","<F as internal::Parser<I>>","internal::Or","internal::And","internal::AndThen","internal::Into"],"G":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::MapOpt","std::boxed::Box","internal::Map","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::MapRes"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::Into","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::And","internal::MapRes","std::boxed::Box","internal::Or","internal::FlatMap","internal::AndThen"],"G":["std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["internal::MapRes","std::boxed::Box","internal::MapOpt","internal::Map","internal::And","internal::Into","internal::Or","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsNotEmpty"]},"internal::MapRes":{"F":["internal::Or","internal::FlatMap","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::Into","internal::AndThen","internal::MapOpt"],"G":["core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::LinesAnyMap"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Or","internal::Map","internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap","internal::MapRes"],"G":["internal::And","internal::AndThen","internal::Map","internal::Or","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::FlatMap","internal::Into","<F as internal::Parser<I>>"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["internal::Parser","std::marker::Sized"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["internal::Parser","std::marker::Sized"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["std::marker::Sized","internal::Parser"],"FnR":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::fmt::Debug"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::AndThen":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::Into":{"E2":["std::convert::From","std::marker::Sized","error::ParseError"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::marker::Sized","std::alloc::Allocator"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Into","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::MapRes","internal::And"],"FnB":["internal::Map","internal::FlatMap","internal::MapOpt","internal::AndThen","internal::Or","internal::And","internal::Into","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"FnC":["internal::MapOpt","internal::Or","internal::AndThen","std::boxed::Box","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::Map"],"FnD":["internal::Into","std::boxed::Box","internal::And","internal::FlatMap","internal::Map","internal::MapRes","internal::Or","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>"],"FnE":["internal::FlatMap","internal::Into","internal::Or","internal::Map","internal::MapOpt","std::boxed::Box","internal::And","internal::MapRes","internal::AndThen","<F as internal::Parser<I>>"],"FnF":["internal::And","internal::AndThen","internal::FlatMap","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::MapOpt"],"FnG":["std::boxed::Box","internal::MapOpt","internal::And","internal::Map","internal::FlatMap","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::Into"],"FnH":["std::boxed::Box","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::AndThen","internal::And","internal::MapOpt","internal::Into","internal::FlatMap"],"FnI":["internal::Map","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapRes","internal::AndThen","internal::Into"],"FnJ":["internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::Into","internal::And"],"FnK":["internal::Map","internal::Into","internal::MapRes","internal::AndThen","internal::And","std::boxed::Box","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::FlatMap"],"FnL":["<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::Or","internal::MapRes","std::boxed::Box","internal::Into","internal::Map","internal::FlatMap","internal::MapOpt"],"FnM":["internal::Map","internal::FlatMap","internal::MapRes","internal::Or","std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::And"],"FnN":["internal::And","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Map","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapRes"],"FnO":["<F as internal::Parser<I>>","std::boxed::Box","internal::Into","internal::And","internal::Or","internal::Map","internal::MapOpt","internal::AndThen","internal::MapRes","internal::FlatMap"],"FnP":["internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::Map","internal::And","internal::AndThen","std::boxed::Box","internal::MapRes"],"FnQ":["internal::And","internal::MapRes","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Into"],"FnR":["internal::AndThen","internal::And","<F as internal::Parser<I>>","std::boxed::Box","internal::Map","internal::MapRes","internal::Or","internal::Into","internal::MapOpt","internal::FlatMap"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for *mut T>","internal::Err","number::Endianness","error::VerboseErrorKind","error::ErrorKind","error::VerboseError","internal::Needed","error::Error"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::And":{"F":["std::boxed::Box","internal::FlatMap","internal::Into","internal::And","internal::AndThen","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::FlatMap","internal::And","std::boxed::Box","internal::MapRes","internal::MapOpt","internal::Into","internal::Map"]},"internal::AndThen":{"F":["internal::FlatMap","std::boxed::Box","<F as internal::Parser<I>>","internal::And","internal::Map","internal::AndThen","internal::Into","internal::MapOpt","internal::Or","internal::MapRes"],"G":["internal::Into","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::FlatMap","internal::And","std::boxed::Box","internal::MapRes","internal::Or"]},"internal::Err":{"E":["internal::Err","error::ErrorKind","error::Error","internal::Needed","<*const T as std::fmt::Debug>","number::Endianness","error::VerboseErrorKind","error::VerboseError"]},"internal::FlatMap":{"F":["internal::Or","internal::Into","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt"],"G":["core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::BytesIsNotEmpty"]},"internal::Into":{"E2":["u8","<T as std::convert::From<!>>","i8"],"F":["internal::FlatMap","std::boxed::Box","internal::Or","internal::Into","internal::MapOpt","internal::MapRes","internal::And","internal::AndThen","internal::Map","<F as internal::Parser<I>>"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::Or","internal::Into","internal::AndThen","std::boxed::Box","internal::Map","internal::MapRes","internal::And"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"internal::MapOpt":{"F":["internal::MapRes","internal::Map","std::boxed::Box","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen","internal::MapOpt","internal::And"],"G":["core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::BytesIsNotEmpty"]},"internal::MapRes":{"F":["internal::FlatMap","internal::Map","internal::MapRes","internal::MapOpt","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::And","internal::Into","internal::AndThen"],"G":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"internal::Or":{"F":["<F as internal::Parser<I>>","internal::And","internal::FlatMap","internal::Into","internal::AndThen","internal::Or","std::boxed::Box","internal::MapRes","internal::Map","internal::MapOpt"],"G":["std::boxed::Box","internal::Map","internal::And","internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::Into"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["std::marker::Sized","error::ParseError"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["std::marker::Sized","internal::Parser"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["std::marker::Sized","internal::Parser"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["std::marker::Sized","internal::Parser"],"FnQ":["internal::Parser","std::marker::Sized"],"FnR":["internal::Parser","std::marker::Sized"],"FnS":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::marker::Sized","std::clone::Clone"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Display","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::marker::Sized","std::convert::From"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::And","internal::MapOpt","std::boxed::Box","internal::Into","internal::Or","internal::AndThen","internal::MapRes"],"FnB":["std::boxed::Box","internal::Map","internal::Into","internal::Or","internal::MapOpt","internal::And","internal::AndThen","internal::MapRes","<F as internal::Parser<I>>","internal::FlatMap"],"FnC":["internal::Map","internal::MapRes","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::FlatMap","internal::Or","internal::MapOpt","internal::And","internal::AndThen"],"FnD":["<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::Into","internal::Map","internal::MapOpt","internal::And","std::boxed::Box","internal::AndThen","internal::Or"],"FnE":["std::boxed::Box","internal::MapRes","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Or","internal::And","internal::FlatMap","internal::Map"],"FnF":["internal::Map","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::AndThen","internal::Or","std::boxed::Box","internal::Into","internal::And"],"FnG":["internal::Or","internal::Into","std::boxed::Box","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::FlatMap","internal::Map","internal::MapRes","internal::AndThen"],"FnH":["internal::Or","internal::Into","internal::And","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::MapRes"],"FnI":["std::boxed::Box","internal::MapOpt","internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::AndThen","internal::And","internal::Or","internal::FlatMap"],"FnJ":["internal::MapRes","internal::AndThen","internal::Into","internal::Or","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","std::boxed::Box"],"FnK":["internal::And","internal::MapOpt","internal::AndThen","internal::Map","internal::Or","internal::Into","internal::FlatMap","std::boxed::Box","internal::MapRes","<F as internal::Parser<I>>"],"FnL":["internal::Or","internal::AndThen","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::And","internal::Map"],"FnM":["internal::And","std::boxed::Box","internal::MapRes","internal::AndThen","internal::Or","internal::MapOpt","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap"],"FnN":["internal::FlatMap","internal::AndThen","internal::MapRes","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::And","internal::Map"],"FnO":["<F as internal::Parser<I>>","internal::MapOpt","internal::FlatMap","internal::Map","internal::Into","internal::Or","internal::AndThen","internal::And","internal::MapRes","std::boxed::Box"],"FnP":["internal::And","internal::FlatMap","std::boxed::Box","internal::Map","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapOpt","internal::MapRes"],"FnQ":["internal::And","internal::Map","std::boxed::Box","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::MapOpt","internal::AndThen"],"FnR":["internal::And","internal::FlatMap","internal::MapOpt","internal::Map","internal::AndThen","internal::Or","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::MapRes"],"FnS":["internal::Map","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::FlatMap","internal::Into","internal::MapOpt","internal::And","internal::Or"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["error::VerboseErrorKind","internal::Needed","error::VerboseError","internal::Err","std::clone::impls::<impl std::clone::Clone for *const T>","number::Endianness","std::clone::impls::<impl std::clone::Clone for &T>","error::Error","error::ErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::And":{"F":["internal::Map","internal::Or","internal::FlatMap","internal::MapRes","internal::And","internal::Into","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt"],"G":["internal::Or","internal::MapRes","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::And","std::boxed::Box","internal::MapOpt","internal::Map","internal::FlatMap"]},"internal::AndThen":{"F":["internal::Map","internal::Or","internal::MapRes","internal::AndThen","std::boxed::Box","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::And","internal::Into"],"G":["internal::And","internal::Map","internal::MapOpt","internal::MapRes","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::Or","internal::FlatMap"]},"internal::Err":{"E":["error::VerboseErrorKind","internal::Needed","error::VerboseError","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::Error","number::Endianness","internal::Err","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Map","internal::MapOpt","internal::And","internal::Or","internal::MapRes","internal::FlatMap","<F as internal::Parser<I>>","internal::AndThen","internal::Into","std::boxed::Box"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["std::boxed::Box","internal::And","internal::MapOpt","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Or","internal::AndThen","internal::FlatMap","internal::Map"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::And","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::Map","internal::FlatMap","internal::MapRes"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr"]},"internal::MapOpt":{"F":["internal::And","internal::Or","internal::MapRes","internal::Into","internal::AndThen","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::FlatMap"],"G":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::Or","internal::And","internal::Into","internal::MapRes","std::boxed::Box","internal::Map","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt"],"G":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace"]},"internal::Or":{"F":["internal::AndThen","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::MapRes","internal::And","internal::Into","internal::Or","std::boxed::Box","internal::FlatMap"],"G":["internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Map","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::And"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["std::marker::Sized","internal::Parser"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["std::marker::Sized","internal::Parser"],"FnF":["std::marker::Sized","internal::Parser"],"FnG":["std::marker::Sized","internal::Parser"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["internal::Parser","std::marker::Sized"],"FnJ":["std::marker::Sized","internal::Parser"],"FnK":["std::marker::Sized","internal::Parser"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["std::marker::Sized","internal::Parser"],"FnR":["internal::Parser","std::marker::Sized"],"FnS":["std::marker::Sized","internal::Parser"],"FnT":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"],"T":["std::marker::Sized"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::ops::FnMut","std::marker::Sized"]},"<T as std::convert::From<!>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq"]},"error::VerboseError":{"I":["std::marker::Sized","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::cmp::Eq"]},"internal::And":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::fmt::Debug","std::cmp::PartialEq","std::cmp::Eq","std::marker::Sized"]},"internal::FlatMap":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["error::ParseError","std::marker::Sized","std::convert::From"],"F":["internal::Parser","std::marker::Sized"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["internal::Parser","std::marker::Sized"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","internal::Parser"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::VerboseError","error::Error"],"F":["RUG_ANY"],"FnA":["internal::MapOpt","internal::FlatMap","internal::And","internal::MapRes","internal::AndThen","std::boxed::Box","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::Map"],"FnB":["std::boxed::Box","internal::And","internal::AndThen","internal::FlatMap","internal::MapRes","internal::Or","internal::Map","internal::MapOpt","internal::Into","<F as internal::Parser<I>>"],"FnC":["internal::Into","internal::AndThen","internal::Or","internal::Map","internal::And","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","std::boxed::Box"],"FnD":["internal::Or","std::boxed::Box","internal::Into","internal::AndThen","internal::And","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::Map","<F as internal::Parser<I>>"],"FnE":["internal::MapOpt","<F as internal::Parser<I>>","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::Or","internal::Map","internal::FlatMap","internal::Into"],"FnF":["internal::Into","internal::AndThen","internal::And","internal::MapOpt","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Or"],"FnG":["internal::MapOpt","internal::FlatMap","internal::Map","internal::AndThen","internal::Into","<F as internal::Parser<I>>","internal::MapRes","internal::Or","std::boxed::Box","internal::And"],"FnH":["internal::MapOpt","internal::Map","std::boxed::Box","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::FlatMap","internal::Or","internal::And","internal::AndThen"],"FnI":["internal::MapRes","internal::MapOpt","internal::Into","internal::AndThen","internal::And","<F as internal::Parser<I>>","internal::Map","std::boxed::Box","internal::FlatMap","internal::Or"],"FnJ":["internal::And","std::boxed::Box","internal::Map","internal::MapRes","internal::FlatMap","internal::Or","internal::AndThen","internal::MapOpt","internal::Into","<F as internal::Parser<I>>"],"FnK":["std::boxed::Box","internal::FlatMap","internal::Into","<F as internal::Parser<I>>","internal::And","internal::AndThen","internal::Or","internal::MapRes","internal::Map","internal::MapOpt"],"FnL":["internal::Map","internal::AndThen","internal::And","internal::Into","std::boxed::Box","internal::MapRes","internal::Or","internal::FlatMap","<F as internal::Parser<I>>","internal::MapOpt"],"FnM":["internal::FlatMap","<F as internal::Parser<I>>","internal::MapRes","internal::Map","internal::MapOpt","internal::Into","internal::Or","internal::AndThen","std::boxed::Box","internal::And"],"FnN":["internal::MapRes","<F as internal::Parser<I>>","internal::Map","internal::MapOpt","internal::Into","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::And","internal::Or"],"FnO":["internal::AndThen","<F as internal::Parser<I>>","internal::MapOpt","std::boxed::Box","internal::And","internal::Into","internal::MapRes","internal::Or","internal::Map","internal::FlatMap"],"FnP":["internal::AndThen","internal::And","internal::MapRes","internal::Map","internal::Or","internal::Into","<F as internal::Parser<I>>","internal::FlatMap","internal::MapOpt","std::boxed::Box"],"FnQ":["internal::MapOpt","internal::Into","internal::Map","internal::Or","internal::MapRes","internal::FlatMap","internal::And","std::boxed::Box","<F as internal::Parser<I>>","internal::AndThen"],"FnR":["internal::Or","std::boxed::Box","internal::MapOpt","internal::FlatMap","internal::Into","internal::MapRes","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Map"],"FnS":["internal::Map","<F as internal::Parser<I>>","internal::MapRes","internal::Into","internal::MapOpt","internal::FlatMap","internal::Or","internal::AndThen","std::boxed::Box","internal::And"],"FnT":["std::boxed::Box","<F as internal::Parser<I>>","internal::Into","internal::FlatMap","internal::MapRes","internal::And","internal::MapOpt","internal::Map","internal::Or","internal::AndThen"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["internal::Needed","error::VerboseErrorKind","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseError","error::ErrorKind"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"],"T":["RUG_ANY"]},"<*mut T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::IsNotEmpty"]},"<T as std::convert::From<!>>":{"T":["RUG_ANY"]},"error::Error":{"I":["internal::Err","error::VerboseError","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::And":{"F":["internal::Into","internal::Or","internal::Map","internal::AndThen","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::And","<F as internal::Parser<I>>","internal::MapOpt"],"G":["<F as internal::Parser<I>>","internal::AndThen","internal::Into","internal::MapOpt","internal::And","internal::Map","internal::FlatMap","internal::Or","std::boxed::Box","internal::MapRes"]},"internal::AndThen":{"F":["internal::AndThen","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::And","internal::Or","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::Into"],"G":["internal::Map","internal::And","<F as internal::Parser<I>>","internal::Or","internal::MapOpt","internal::AndThen","internal::FlatMap","std::boxed::Box","internal::MapRes","internal::Into"]},"internal::Err":{"E":["number::Endianness","error::Error","internal::Err","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","internal::Needed","error::ErrorKind","error::VerboseError","error::VerboseErrorKind"]},"internal::FlatMap":{"F":["internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Into","internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::And","internal::Or"],"G":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte"]},"internal::Into":{"E2":["<T as std::convert::From<!>>","i8","u8"],"F":["internal::Map","internal::MapOpt","internal::FlatMap","internal::AndThen","<F as internal::Parser<I>>","internal::Or","internal::Into","internal::MapRes","std::boxed::Box","internal::And"],"O2":["error::VerboseError","error::Error"]},"internal::Map":{"F":["internal::MapOpt","internal::AndThen","internal::Or","internal::FlatMap","internal::MapRes","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Into","internal::Map"],"G":["core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::MapOpt":{"F":["internal::And","internal::MapRes","internal::FlatMap","std::boxed::Box","internal::Map","internal::Into","internal::MapOpt","internal::AndThen","<F as internal::Parser<I>>","internal::Or"],"G":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsWhitespace","core::slice::ascii::EscapeByte"]},"internal::MapRes":{"F":["internal::MapOpt","std::boxed::Box","internal::Or","internal::MapRes","internal::Map","internal::Into","internal::And","internal::AndThen","internal::FlatMap","<F as internal::Parser<I>>"],"G":["std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::IsWhitespace"]},"internal::Or":{"F":["internal::AndThen","internal::Map","internal::Into","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::MapRes","internal::And"],"G":["internal::MapOpt","internal::AndThen","internal::FlatMap","internal::Into","internal::And","internal::Or","std::boxed::Box","<F as internal::Parser<I>>","internal::Map","internal::MapRes"]},"std::boxed::Box":{"A":["std::alloc::Global","<&A as std::alloc::Allocator>","std::alloc::System"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::parse
deps:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::parse":{"A":["std::marker::Sized"],"B":["std::marker::Sized"],"C":["std::marker::Sized"],"D":["std::marker::Sized"],"E":["std::marker::Sized"],"Error":["error::ParseError","std::marker::Sized"],"F":["std::marker::Sized"],"FnA":["std::marker::Sized","internal::Parser"],"FnB":["internal::Parser","std::marker::Sized"],"FnC":["internal::Parser","std::marker::Sized"],"FnD":["std::marker::Sized","internal::Parser"],"FnE":["internal::Parser","std::marker::Sized"],"FnF":["internal::Parser","std::marker::Sized"],"FnG":["internal::Parser","std::marker::Sized"],"FnH":["internal::Parser","std::marker::Sized"],"FnI":["std::marker::Sized","internal::Parser"],"FnJ":["internal::Parser","std::marker::Sized"],"FnK":["internal::Parser","std::marker::Sized"],"FnL":["internal::Parser","std::marker::Sized"],"FnM":["std::marker::Sized","internal::Parser"],"FnN":["internal::Parser","std::marker::Sized"],"FnO":["std::marker::Sized","internal::Parser"],"FnP":["internal::Parser","std::marker::Sized"],"FnQ":["internal::Parser","std::marker::Sized"],"FnR":["std::marker::Sized","internal::Parser"],"FnS":["internal::Parser","std::marker::Sized"],"FnT":["std::marker::Sized","internal::Parser"],"FnU":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized"],"H":["std::marker::Sized"],"I":["std::marker::Sized"],"Input":["std::clone::Clone","std::marker::Sized"],"J":["std::marker::Sized"],"K":["std::marker::Sized"],"L":["std::marker::Sized"],"M":["std::marker::Sized"],"N":["std::marker::Sized"],"O":["std::marker::Sized"],"P":["std::marker::Sized"],"Q":["std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized"],"T":["std::marker::Sized"],"U":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["std::marker::Sized","std::ops::FnMut"]},"<T as std::convert::From<T>>":{"T":["std::marker::Sized"]},"error::Error":{"I":["std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone"]},"error::VerboseError":{"I":["std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::PartialEq","std::cmp::Eq","std::fmt::Display"]},"internal::And":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","internal::Parser"]},"internal::AndThen":{"F":["std::marker::Sized","internal::Parser"],"G":["internal::Parser","std::marker::Sized"]},"internal::Err":{"E":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"internal::FlatMap":{"F":["internal::Parser","std::marker::Sized"],"G":["std::marker::Sized","std::ops::FnMut"]},"internal::Into":{"E2":["std::marker::Sized","error::ParseError","std::convert::From"],"F":["std::marker::Sized","internal::Parser"],"O2":["std::convert::From","std::marker::Sized"]},"internal::Map":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::FnMut","std::marker::Sized"]},"internal::MapOpt":{"F":["std::marker::Sized","internal::Parser"],"G":["std::ops::Fn","std::marker::Sized"]},"internal::MapRes":{"F":["std::marker::Sized","internal::Parser"],"G":["std::marker::Sized","std::ops::Fn"]},"internal::Or":{"F":["internal::Parser","std::marker::Sized"],"G":["internal::Parser","std::marker::Sized"]},"std::boxed::Box":{"A":["std::alloc::Allocator","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&A as std::alloc::Allocator>":{},"<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::parse":{"A":["RUG_ANY"],"B":["RUG_ANY"],"C":["RUG_ANY"],"D":["RUG_ANY"],"E":["RUG_ANY"],"Error":["error::Error","error::VerboseError"],"F":["RUG_ANY"],"FnA":["internal::FlatMap","internal::AndThen","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::Or","std::boxed::Box","internal::MapOpt","internal::And","internal::Map"],"FnB":["internal::Or","internal::Into","internal::MapRes","<F as internal::Parser<I>>","internal::AndThen","internal::And","internal::MapOpt","internal::Map","std::boxed::Box","internal::FlatMap"],"FnC":["internal::MapRes","internal::And","internal::Or","internal::Map","internal::FlatMap","<F as internal::Parser<I>>","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box"],"FnD":["internal::And","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::MapOpt","internal::Or","internal::Into","std::boxed::Box","internal::Map","internal::AndThen"],"FnE":["internal::MapOpt","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::And","internal::Map","internal::FlatMap","internal::MapRes","std::boxed::Box","internal::Into"],"FnF":["internal::Into","internal::Or","internal::FlatMap","internal::MapOpt","internal::MapRes","internal::AndThen","internal::Map","<F as internal::Parser<I>>","std::boxed::Box","internal::And"],"FnG":["<F as internal::Parser<I>>","internal::MapRes","internal::And","internal::FlatMap","std::boxed::Box","internal::MapOpt","internal::Into","internal::AndThen","internal::Map","internal::Or"],"FnH":["internal::AndThen","internal::Into","internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::MapOpt","<F as internal::Parser<I>>","internal::Map","internal::And"],"FnI":["internal::Into","internal::AndThen","internal::MapRes","internal::Map","internal::Or","internal::MapOpt","internal::FlatMap","internal::And","std::boxed::Box","<F as internal::Parser<I>>"],"FnJ":["internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Into","internal::MapRes","internal::MapOpt","std::boxed::Box","internal::Map","internal::FlatMap","internal::And"],"FnK":["internal::And","internal::MapRes","internal::Map","internal::Into","<F as internal::Parser<I>>","internal::AndThen","internal::Or","internal::MapOpt","std::boxed::Box","internal::FlatMap"],"FnL":["internal::Map","internal::MapRes","internal::MapOpt","internal::FlatMap","internal::And","internal::Or","internal::AndThen","<F as internal::Parser<I>>","std::boxed::Box","internal::Into"],"FnM":["internal::And","std::boxed::Box","internal::AndThen","internal::FlatMap","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::MapOpt","internal::Map","internal::Into"],"FnN":["internal::Map","internal::Into","internal::AndThen","internal::MapOpt","std::boxed::Box","internal::Or","<F as internal::Parser<I>>","internal::FlatMap","internal::MapRes","internal::And"],"FnO":["internal::AndThen","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::Into","internal::MapRes","internal::And","std::boxed::Box","internal::MapOpt","internal::FlatMap"],"FnP":["internal::AndThen","internal::Or","internal::And","internal::MapOpt","<F as internal::Parser<I>>","internal::MapRes","internal::Map","std::boxed::Box","internal::FlatMap","internal::Into"],"FnQ":["internal::Into","internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::Map","internal::MapRes","internal::Or","std::boxed::Box","internal::MapOpt","internal::FlatMap"],"FnR":["internal::Into","internal::AndThen","internal::And","internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes","std::boxed::Box","internal::Map","internal::MapOpt"],"FnS":["internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::MapRes","internal::AndThen","internal::Map","std::boxed::Box","internal::MapOpt","internal::Into","internal::And"],"FnT":["internal::FlatMap","internal::Or","<F as internal::Parser<I>>","internal::AndThen","internal::MapOpt","internal::And","internal::Into","internal::MapRes","internal::Map","std::boxed::Box"],"FnU":["internal::Into","std::boxed::Box","internal::FlatMap","internal::Map","<F as internal::Parser<I>>","internal::MapOpt","internal::MapRes","internal::AndThen","internal::And","internal::Or"],"G":["RUG_ANY"],"H":["RUG_ANY"],"I":["RUG_ANY"],"Input":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::Error","error::VerboseErrorKind","error::ErrorKind","internal::Err","number::Endianness","std::clone::impls::<impl std::clone::Clone for &mut T>","error::VerboseError","internal::Needed"],"J":["RUG_ANY"],"K":["RUG_ANY"],"L":["RUG_ANY"],"M":["RUG_ANY"],"N":["RUG_ANY"],"O":["RUG_ANY"],"P":["RUG_ANY"],"Q":["RUG_ANY"],"R":["RUG_ANY"],"S":["RUG_ANY"],"T":["RUG_ANY"],"U":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"<F as internal::Parser<I>>":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::CharEscapeDefault"]},"<T as std::convert::From<T>>":{"T":["RUG_ANY"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::And":{"F":["internal::Into","internal::Or","internal::MapOpt","std::boxed::Box","internal::FlatMap","internal::MapRes","internal::Map","internal::And","<F as internal::Parser<I>>","internal::AndThen"],"G":["internal::Into","<F as internal::Parser<I>>","internal::FlatMap","std::boxed::Box","internal::AndThen","internal::Map","internal::MapOpt","internal::And","internal::Or","internal::MapRes"]},"internal::AndThen":{"F":["<F as internal::Parser<I>>","internal::Into","internal::Map","internal::AndThen","internal::MapRes","internal::Or","internal::FlatMap","std::boxed::Box","internal::And","internal::MapOpt"],"G":["internal::And","internal::MapRes","internal::Into","internal::Or","std::boxed::Box","internal::MapOpt","internal::Map","<F as internal::Parser<I>>","internal::FlatMap","internal::AndThen"]},"internal::Err":{"E":["error::Error","internal::Err","error::VerboseErrorKind","internal::Needed","error::VerboseError","number::Endianness","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","error::ErrorKind"]},"internal::FlatMap":{"F":["internal::Into","internal::MapOpt","internal::Or","<F as internal::Parser<I>>","internal::Map","internal::And","internal::MapRes","std::boxed::Box","internal::AndThen","internal::FlatMap"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"]},"internal::Into":{"E2":["i8","<T as std::convert::From<T>>","u8"],"F":["internal::And","<F as internal::Parser<I>>","internal::MapOpt","internal::Into","internal::Or","internal::Map","internal::AndThen","internal::MapRes","std::boxed::Box","internal::FlatMap"],"O2":["error::Error","error::VerboseError"]},"internal::Map":{"F":["internal::FlatMap","internal::Or","internal::MapRes","internal::MapOpt","internal::Into","<F as internal::Parser<I>>","std::boxed::Box","internal::And","internal::Map","internal::AndThen"],"G":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte"]},"internal::MapOpt":{"F":["<F as internal::Parser<I>>","std::boxed::Box","internal::MapOpt","internal::Or","internal::Into","internal::AndThen","internal::And","internal::FlatMap","internal::MapRes","internal::Map"],"G":["core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::boxed::Box<F, A>","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"internal::MapRes":{"F":["std::boxed::Box","internal::AndThen","<F as internal::Parser<I>>","internal::And","internal::Into","internal::Map","internal::Or","internal::MapRes","internal::MapOpt","internal::FlatMap"],"G":["core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::slice::ascii::EscapeByte","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault","core::str::CharEscapeUnicode"]},"internal::Or":{"F":["internal::And","<F as internal::Parser<I>>","internal::AndThen","internal::FlatMap","internal::MapOpt","std::boxed::Box","internal::Or","internal::Map","internal::Into","internal::MapRes"],"G":["internal::MapOpt","internal::Into","internal::Or","internal::MapRes","<F as internal::Parser<I>>","internal::And","internal::AndThen","std::boxed::Box","internal::FlatMap","internal::Map"]},"std::boxed::Box":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU)
let mut p1 = MaybeUninit::uninit().assume_init(); // Input
+p0.parse(p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::parse(p0, p1);
+crate::<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU) as sequence::Tuple<Input, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error>>::parse(p0, p1);
+<(FnA, FnB, FnC, FnD, FnE, FnF, FnG, FnH, FnI, FnJ, FnK, FnL, FnM, FnN, FnO, FnP, FnQ, FnR, FnS, FnT, FnU)>::parse(p0, p1);
-----------------
src/sequence/mod.rs <() as sequence::Tuple<I, (), E>>::parse
deps:{"<() as sequence::Tuple<I, (), E>>::parse":{"E":["std::marker::Sized","error::ParseError"],"I":["std::marker::Sized"]},"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::marker::Sized"]},"error::VerboseError":{"I":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::PartialEq","std::marker::Sized","std::clone::Clone","std::cmp::Eq"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<() as sequence::Tuple<I, (), E>>::parse":{"E":["error::Error","error::VerboseError"],"I":["RUG_ANY"]},"<*const T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["error::VerboseError","<*const T as std::fmt::Debug>","error::VerboseErrorKind","error::Error","internal::Err","internal::Needed","number::Endianness","error::ErrorKind"]},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = &mut (); // None+()
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.parse(p1);
+<() as sequence::Tuple<I, (), E>>::parse(p0, p1);
+crate::<() as sequence::Tuple<I, (), E>>::parse(p0, p1);
+<()>::parse(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::input_len
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.input_len();
+<&'a [u8] as traits::Input>::input_len(p0);
+crate::<&'a [u8] as traits::Input>::input_len(p0);
+<&'a [u8]>::input_len(p0);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::take
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 0usize; // None+usize
+p0.take(p1);
+<&'a [u8] as traits::Input>::take(p0, p1);
+crate::<&'a [u8] as traits::Input>::take(p0, p1);
+<&'a [u8]>::take(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::take_from
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 0usize; // None+usize
+p0.take_from(p1);
+<&'a [u8] as traits::Input>::take_from(p0, p1);
+crate::<&'a [u8] as traits::Input>::take_from(p0, p1);
+<&'a [u8]>::take_from(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::take_split
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 0usize; // None+usize
+p0.take_split(p1);
+<&'a [u8] as traits::Input>::take_split(p0, p1);
+crate::<&'a [u8] as traits::Input>::take_split(p0, p1);
+<&'a [u8]>::take_split(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::position
'a
deps:{"<&'a [u8] as traits::Input>::position":{"P":["std::ops::Fn","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<&'a [u8] as traits::Input>::position":{"P":["core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsWhitespace"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.position(p1);
+<&'a [u8] as traits::Input>::position(p0, p1);
+crate::<&'a [u8] as traits::Input>::position(p0, p1);
+<&'a [u8]>::position(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::iter_elements
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.iter_elements();
+<&'a [u8] as traits::Input>::iter_elements(p0);
+crate::<&'a [u8] as traits::Input>::iter_elements(p0);
+<&'a [u8]>::iter_elements(p0);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::iter_indices
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.iter_indices();
+<&'a [u8] as traits::Input>::iter_indices(p0);
+crate::<&'a [u8] as traits::Input>::iter_indices(p0);
+<&'a [u8]>::iter_indices(p0);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::slice_index
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 0usize; // None+usize
+p0.slice_index(p1);
+<&'a [u8] as traits::Input>::slice_index(p0, p1);
+crate::<&'a [u8] as traits::Input>::slice_index(p0, p1);
+<&'a [u8]>::slice_index(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::split_at_position
'a
deps:{"<&'a [u8] as traits::Input>::split_at_position":{"E":["error::ParseError","std::marker::Sized"],"P":["std::marker::Sized","std::ops::Fn"]},"error::Error":{"I":["std::fmt::Debug","std::clone::Clone","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::fmt::Display","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::clone::Clone","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&'a [u8] as traits::Input>::split_at_position":{"E":["error::Error","error::VerboseError"],"P":["core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","std::boxed::Box<F, A>"]},"error::Error":{"I":["internal::Err","error::Error","error::VerboseError"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["number::Endianness","error::Error","internal::Err","error::ErrorKind","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::VerboseError","internal::Needed","error::VerboseErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position(p1);
+<&'a [u8] as traits::Input>::split_at_position(p0, p1);
+crate::<&'a [u8] as traits::Input>::split_at_position(p0, p1);
+<&'a [u8]>::split_at_position(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::split_at_position1
'a
deps:{"<&'a [u8] as traits::Input>::split_at_position1":{"E":["error::ParseError","std::marker::Sized"],"P":["std::ops::Fn","std::marker::Sized"]},"error::Error":{"I":["std::fmt::Debug","std::fmt::Display","std::clone::Clone","std::cmp::Eq","std::marker::Sized","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"internal::Err":{"E":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&'a [u8] as traits::Input>::split_at_position1":{"E":["error::Error","error::VerboseError"],"P":["core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeDebugContinue","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *const T>","internal::Needed","error::ErrorKind","error::Error","number::Endianness","error::VerboseErrorKind","internal::Err","error::VerboseError"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1(p1, p2);
+<&'a [u8] as traits::Input>::split_at_position1(p0, p1, p2);
+crate::<&'a [u8] as traits::Input>::split_at_position1(p0, p1, p2);
+<&'a [u8]>::split_at_position1(p0, p1, p2);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::split_at_position_complete
'a
deps:{"<&'a [u8] as traits::Input>::split_at_position_complete":{"E":["std::marker::Sized","error::ParseError"],"P":["std::ops::Fn","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::fmt::Display"]},"error::VerboseError":{"I":["std::cmp::PartialEq","std::clone::Clone","std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::fmt::Display"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
candidates:{"<&'a [u8] as traits::Input>::split_at_position_complete":{"E":["error::VerboseError","error::Error"],"P":["core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::VerboseError","internal::Err","error::Error"]},"internal::Err":{"E":["std::clone::impls::<impl std::clone::Clone for *mut T>","error::VerboseErrorKind","number::Endianness","error::ErrorKind","internal::Err","error::Error","error::VerboseError","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position_complete(p1);
+<&'a [u8] as traits::Input>::split_at_position_complete(p0, p1);
+crate::<&'a [u8] as traits::Input>::split_at_position_complete(p0, p1);
+<&'a [u8]>::split_at_position_complete(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Input>::split_at_position1_complete
'a
deps:{"<&'a [u8] as traits::Input>::split_at_position1_complete":{"E":["std::marker::Sized","error::ParseError"],"P":["std::marker::Sized","std::ops::Fn"]},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["std::marker::Sized","std::clone::Clone","std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::fmt::Display"]},"internal::Err":{"E":["std::fmt::Debug","std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<&'a [u8] as traits::Input>::split_at_position1_complete":{"E":["error::Error","error::VerboseError"],"P":["core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue"]},"<*mut T as std::fmt::Debug>":{},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["internal::Err","error::Error","error::VerboseError"]},"internal::Err":{"E":["<*mut T as std::fmt::Debug>","error::VerboseErrorKind","internal::Err","number::Endianness","error::VerboseError","internal::Needed","error::Error","error::ErrorKind"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1_complete(p1, p2);
+<&'a [u8] as traits::Input>::split_at_position1_complete(p0, p1, p2);
+crate::<&'a [u8] as traits::Input>::split_at_position1_complete(p0, p1, p2);
+<&'a [u8]>::split_at_position1_complete(p0, p1, p2);
-----------------
src/traits.rs <&'a str as traits::Input>::input_len
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.input_len();
+<&'a str as traits::Input>::input_len(p0);
+crate::<&'a str as traits::Input>::input_len(p0);
+<&'a str>::input_len(p0);
-----------------
src/traits.rs <&'a str as traits::Input>::take
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 0usize; // None+usize
+p0.take(p1);
+<&'a str as traits::Input>::take(p0, p1);
+crate::<&'a str as traits::Input>::take(p0, p1);
+<&'a str>::take(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::take_from
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 0usize; // None+usize
+p0.take_from(p1);
+<&'a str as traits::Input>::take_from(p0, p1);
+crate::<&'a str as traits::Input>::take_from(p0, p1);
+<&'a str>::take_from(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::take_split
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 0usize; // None+usize
+p0.take_split(p1);
+<&'a str as traits::Input>::take_split(p0, p1);
+crate::<&'a str as traits::Input>::take_split(p0, p1);
+<&'a str>::take_split(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::position
'a
deps:{"<&'a str as traits::Input>::position":{"P":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<&'a str as traits::Input>::position":{"P":["core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::LinesAnyMap"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.position(p1);
+<&'a str as traits::Input>::position(p0, p1);
+crate::<&'a str as traits::Input>::position(p0, p1);
+<&'a str>::position(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::iter_elements
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.iter_elements();
+<&'a str as traits::Input>::iter_elements(p0);
+crate::<&'a str as traits::Input>::iter_elements(p0);
+<&'a str>::iter_elements(p0);
-----------------
src/traits.rs <&'a str as traits::Input>::iter_indices
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.iter_indices();
+<&'a str as traits::Input>::iter_indices(p0);
+crate::<&'a str as traits::Input>::iter_indices(p0);
+<&'a str>::iter_indices(p0);
-----------------
src/traits.rs <&'a str as traits::Input>::slice_index
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 0usize; // None+usize
+p0.slice_index(p1);
+<&'a str as traits::Input>::slice_index(p0, p1);
+crate::<&'a str as traits::Input>::slice_index(p0, p1);
+<&'a str>::slice_index(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::split_at_position
'a
deps:{"<&'a str as traits::Input>::split_at_position":{"E":["std::marker::Sized","error::ParseError"],"P":["std::marker::Sized","std::ops::Fn"]},"error::Error":{"I":["std::marker::Sized","std::cmp::Eq","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::fmt::Display"]},"error::VerboseError":{"I":["std::fmt::Debug","std::cmp::Eq","std::fmt::Display","std::clone::Clone","std::marker::Sized","std::cmp::PartialEq"]},"internal::Err":{"E":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::cmp::PartialEq","std::cmp::Eq"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&'a str as traits::Input>::split_at_position":{"E":["error::Error","error::VerboseError"],"P":["std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::BytesIsNotEmpty"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::VerboseError","internal::Needed","error::Error","error::VerboseErrorKind","internal::Err","error::ErrorKind","std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>","number::Endianness"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position(p1);
+<&'a str as traits::Input>::split_at_position(p0, p1);
+crate::<&'a str as traits::Input>::split_at_position(p0, p1);
+<&'a str>::split_at_position(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::split_at_position1
'a
deps:{"<&'a str as traits::Input>::split_at_position1":{"E":["std::marker::Sized","error::ParseError"],"P":["std::ops::Fn","std::marker::Sized"]},"error::Error":{"I":["std::cmp::PartialEq","std::fmt::Display","std::marker::Sized","std::cmp::Eq","std::clone::Clone","std::fmt::Debug"]},"error::VerboseError":{"I":["std::clone::Clone","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::fmt::Debug"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<&'a str as traits::Input>::split_at_position1":{"E":["error::VerboseError","error::Error"],"P":["core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty"]},"error::Error":{"I":["error::VerboseError","error::Error","internal::Err"]},"error::VerboseError":{"I":["error::Error","error::VerboseError","internal::Err"]},"internal::Err":{"E":["error::Error","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","internal::Err","internal::Needed","error::VerboseError","error::ErrorKind","error::VerboseErrorKind"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1(p1, p2);
+<&'a str as traits::Input>::split_at_position1(p0, p1, p2);
+crate::<&'a str as traits::Input>::split_at_position1(p0, p1, p2);
+<&'a str>::split_at_position1(p0, p1, p2);
-----------------
src/traits.rs <&'a str as traits::Input>::split_at_position_complete
'a
deps:{"<&'a str as traits::Input>::split_at_position_complete":{"E":["error::ParseError","std::marker::Sized"],"P":["std::ops::Fn","std::marker::Sized"]},"error::Error":{"I":["std::marker::Sized","std::cmp::PartialEq","std::clone::Clone","std::fmt::Display","std::cmp::Eq","std::fmt::Debug"]},"error::VerboseError":{"I":["std::fmt::Debug","std::marker::Sized","std::cmp::Eq","std::cmp::PartialEq","std::fmt::Display","std::clone::Clone"]},"internal::Err":{"E":["std::cmp::Eq","std::marker::Sized","std::fmt::Debug","std::cmp::PartialEq","std::clone::Clone"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
candidates:{"<&'a str as traits::Input>::split_at_position_complete":{"E":["error::Error","error::VerboseError"],"P":["core::slice::ascii::EscapeByte","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace"]},"error::Error":{"I":["error::VerboseError","internal::Err","error::Error"]},"error::VerboseError":{"I":["internal::Err","error::VerboseError","error::Error"]},"internal::Err":{"E":["error::ErrorKind","error::VerboseError","internal::Needed","internal::Err","number::Endianness","std::ptr::const_ptr::<impl std::cmp::Eq for *const T>","error::VerboseErrorKind","error::Error"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::Eq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Eq for *mut T>":{}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = MaybeUninit::uninit().assume_init(); // P
+p0.split_at_position_complete(p1);
+<&'a str as traits::Input>::split_at_position_complete(p0, p1);
+crate::<&'a str as traits::Input>::split_at_position_complete(p0, p1);
+<&'a str>::split_at_position_complete(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Input>::split_at_position1_complete
'a
deps:{"<&'a str as traits::Input>::split_at_position1_complete":{"E":["std::marker::Sized","error::ParseError"],"P":["std::ops::Fn","std::marker::Sized"]},"error::Error":{"I":["std::cmp::Eq","std::cmp::PartialEq","std::fmt::Debug","std::marker::Sized","std::fmt::Display","std::clone::Clone"]},"error::VerboseError":{"I":["std::cmp::Eq","std::fmt::Display","std::cmp::PartialEq","std::fmt::Debug","std::clone::Clone","std::marker::Sized"]},"internal::Err":{"E":["std::clone::Clone","std::cmp::PartialEq","std::fmt::Debug","std::cmp::Eq","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
candidates:{"<&'a str as traits::Input>::split_at_position1_complete":{"E":["error::VerboseError","error::Error"],"P":["core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::LinesAnyMap","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::str::CharEscapeDefault","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::BytesIsNotEmpty"]},"error::Error":{"I":["error::Error","error::VerboseError","internal::Err"]},"error::VerboseError":{"I":["error::VerboseError","error::Error","internal::Err"]},"internal::Err":{"E":["internal::Err","error::VerboseErrorKind","number::Endianness","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","error::Error","error::VerboseError","error::ErrorKind","internal::Needed"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{}}
let mut p0 = & "a"; // None+&'a str
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = MaybeUninit::uninit().assume_init(); // error::ErrorKind
+p0.split_at_position1_complete(p1, p2);
+<&'a str as traits::Input>::split_at_position1_complete(p0, p1, p2);
+crate::<&'a str as traits::Input>::split_at_position1_complete(p0, p1, p2);
+<&'a str>::split_at_position1_complete(p0, p1, p2);
-----------------
src/traits.rs <&'a [T] as traits::InputLength>::input_len
'a
deps:{"<&'a [T] as traits::InputLength>::input_len":{"T":["std::marker::Sized"]}}
candidates:{"<&'a [T] as traits::InputLength>::input_len":{"T":["RUG_ANY"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // [T]
+p0.input_len();
+<&'a [T] as traits::InputLength>::input_len(p0);
+crate::<&'a [T] as traits::InputLength>::input_len(p0);
+<&'a [T]>::input_len(p0);
-----------------
src/traits.rs <&'a str as traits::InputLength>::input_len
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.input_len();
+<&'a str as traits::InputLength>::input_len(p0);
+crate::<&'a str as traits::InputLength>::input_len(p0);
+<&'a str>::input_len(p0);
-----------------
src/traits.rs <(&'a [u8], usize) as traits::InputLength>::input_len
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // (&'a [u8], usize)
+p0.input_len();
+<(&'a [u8], usize) as traits::InputLength>::input_len(p0);
+crate::<(&'a [u8], usize) as traits::InputLength>::input_len(p0);
+<(&'a [u8], usize)>::input_len(p0);
-----------------
src/traits.rs <[u8] as traits::Offset>::offset
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.offset(p1);
+<[u8] as traits::Offset>::offset(p0, p1);
+crate::<[u8] as traits::Offset>::offset(p0, p1);
+<[u8]>::offset(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Offset>::offset
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.offset(p1);
+<&'a [u8] as traits::Offset>::offset(p0, p1);
+crate::<&'a [u8] as traits::Offset>::offset(p0, p1);
+<&'a [u8]>::offset(p0, p1);
-----------------
src/traits.rs <str as traits::Offset>::offset
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = "sample"; // None+&str
+p0.offset(&p1);
+<str as traits::Offset>::offset(&p0, &p1);
+crate::<str as traits::Offset>::offset(&p0, &p1);
+<str>::offset(&p0, &p1);
-----------------
src/traits.rs <&'a str as traits::Offset>::offset
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = & "a"; // None+&'a str
+p0.offset(p1);
+<&'a str as traits::Offset>::offset(p0, p1);
+crate::<&'a str as traits::Offset>::offset(p0, p1);
+<&'a str>::offset(p0, p1);
-----------------
src/traits.rs <&'a str as traits::AsBytes>::as_bytes
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
+p0.as_bytes();
+<&'a str as traits::AsBytes>::as_bytes(p0);
+crate::<&'a str as traits::AsBytes>::as_bytes(p0);
+<&'a str>::as_bytes(p0);
-----------------
src/traits.rs <str as traits::AsBytes>::as_bytes
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+p0.as_bytes();
+<str as traits::AsBytes>::as_bytes(&p0);
+crate::<str as traits::AsBytes>::as_bytes(&p0);
+<str>::as_bytes(&p0);
-----------------
src/traits.rs <&'a [u8] as traits::AsBytes>::as_bytes
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.as_bytes();
+<&'a [u8] as traits::AsBytes>::as_bytes(p0);
+crate::<&'a [u8] as traits::AsBytes>::as_bytes(p0);
+<&'a [u8]>::as_bytes(p0);
-----------------
src/traits.rs <[u8] as traits::AsBytes>::as_bytes
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.as_bytes();
+<[u8] as traits::AsBytes>::as_bytes(p0);
+crate::<[u8] as traits::AsBytes>::as_bytes(p0);
+<[u8]>::as_bytes(p0);
-----------------
src/traits.rs <&'a [u8; N] as traits::AsBytes>::as_bytes
'a
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+&'a [u8; N]
+p0.as_bytes();
+<&'a [u8; N] as traits::AsBytes>::as_bytes(p0);
+crate::<&'a [u8; N] as traits::AsBytes>::as_bytes(p0);
+<&'a [u8; N]>::as_bytes(p0);
-----------------
src/traits.rs <[u8; N] as traits::AsBytes>::as_bytes
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+[u8; N]
+p0.as_bytes();
+<[u8; N] as traits::AsBytes>::as_bytes(p0);
+crate::<[u8; N] as traits::AsBytes>::as_bytes(p0);
+<[u8; N]>::as_bytes(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::as_char
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.as_char();
+<u8 as traits::AsChar>::as_char(p0);
+crate::<u8 as traits::AsChar>::as_char(p0);
+<u8>::as_char(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::is_alpha
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.is_alpha();
+<u8 as traits::AsChar>::is_alpha(p0);
+crate::<u8 as traits::AsChar>::is_alpha(p0);
+<u8>::is_alpha(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::is_alphanum
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.is_alphanum();
+<u8 as traits::AsChar>::is_alphanum(p0);
+crate::<u8 as traits::AsChar>::is_alphanum(p0);
+<u8>::is_alphanum(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::is_dec_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.is_dec_digit();
+<u8 as traits::AsChar>::is_dec_digit(p0);
+crate::<u8 as traits::AsChar>::is_dec_digit(p0);
+<u8>::is_dec_digit(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::is_hex_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.is_hex_digit();
+<u8 as traits::AsChar>::is_hex_digit(p0);
+crate::<u8 as traits::AsChar>::is_hex_digit(p0);
+<u8>::is_hex_digit(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::is_oct_digit
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.is_oct_digit();
+<u8 as traits::AsChar>::is_oct_digit(p0);
+crate::<u8 as traits::AsChar>::is_oct_digit(p0);
+<u8>::is_oct_digit(p0);
-----------------
src/traits.rs <u8 as traits::AsChar>::len
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.len();
+<u8 as traits::AsChar>::len(p0);
+crate::<u8 as traits::AsChar>::len(p0);
+<u8>::len(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::as_char
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.as_char();
+<&'a u8 as traits::AsChar>::as_char(p0);
+crate::<&'a u8 as traits::AsChar>::as_char(p0);
+<&'a u8>::as_char(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::is_alpha
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.is_alpha();
+<&'a u8 as traits::AsChar>::is_alpha(p0);
+crate::<&'a u8 as traits::AsChar>::is_alpha(p0);
+<&'a u8>::is_alpha(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::is_alphanum
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.is_alphanum();
+<&'a u8 as traits::AsChar>::is_alphanum(p0);
+crate::<&'a u8 as traits::AsChar>::is_alphanum(p0);
+<&'a u8>::is_alphanum(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::is_dec_digit
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.is_dec_digit();
+<&'a u8 as traits::AsChar>::is_dec_digit(p0);
+crate::<&'a u8 as traits::AsChar>::is_dec_digit(p0);
+<&'a u8>::is_dec_digit(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::is_hex_digit
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.is_hex_digit();
+<&'a u8 as traits::AsChar>::is_hex_digit(p0);
+crate::<&'a u8 as traits::AsChar>::is_hex_digit(p0);
+<&'a u8>::is_hex_digit(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::is_oct_digit
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.is_oct_digit();
+<&'a u8 as traits::AsChar>::is_oct_digit(p0);
+crate::<&'a u8 as traits::AsChar>::is_oct_digit(p0);
+<&'a u8>::is_oct_digit(p0);
-----------------
src/traits.rs <&'a u8 as traits::AsChar>::len
'a
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.len();
+<&'a u8 as traits::AsChar>::len(p0);
+crate::<&'a u8 as traits::AsChar>::len(p0);
+<&'a u8>::len(p0);
-----------------
src/traits.rs <char as traits::AsChar>::as_char
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.as_char();
+<char as traits::AsChar>::as_char(p0);
+crate::<char as traits::AsChar>::as_char(p0);
+<char>::as_char(p0);
-----------------
src/traits.rs <char as traits::AsChar>::is_alpha
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_alpha();
+<char as traits::AsChar>::is_alpha(p0);
+crate::<char as traits::AsChar>::is_alpha(p0);
+<char>::is_alpha(p0);
-----------------
src/traits.rs <char as traits::AsChar>::is_alphanum
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_alphanum();
+<char as traits::AsChar>::is_alphanum(p0);
+crate::<char as traits::AsChar>::is_alphanum(p0);
+<char>::is_alphanum(p0);
-----------------
src/traits.rs <char as traits::AsChar>::is_dec_digit
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_dec_digit();
+<char as traits::AsChar>::is_dec_digit(p0);
+crate::<char as traits::AsChar>::is_dec_digit(p0);
+<char>::is_dec_digit(p0);
-----------------
src/traits.rs <char as traits::AsChar>::is_hex_digit
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_hex_digit();
+<char as traits::AsChar>::is_hex_digit(p0);
+crate::<char as traits::AsChar>::is_hex_digit(p0);
+<char>::is_hex_digit(p0);
-----------------
src/traits.rs <char as traits::AsChar>::is_oct_digit
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_oct_digit();
+<char as traits::AsChar>::is_oct_digit(p0);
+crate::<char as traits::AsChar>::is_oct_digit(p0);
+<char>::is_oct_digit(p0);
-----------------
src/traits.rs <char as traits::AsChar>::len
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.len();
+<char as traits::AsChar>::len(p0);
+crate::<char as traits::AsChar>::len(p0);
+<char>::len(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::as_char
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.as_char();
+<&'a char as traits::AsChar>::as_char(p0);
+crate::<&'a char as traits::AsChar>::as_char(p0);
+<&'a char>::as_char(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::is_alpha
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.is_alpha();
+<&'a char as traits::AsChar>::is_alpha(p0);
+crate::<&'a char as traits::AsChar>::is_alpha(p0);
+<&'a char>::is_alpha(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::is_alphanum
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.is_alphanum();
+<&'a char as traits::AsChar>::is_alphanum(p0);
+crate::<&'a char as traits::AsChar>::is_alphanum(p0);
+<&'a char>::is_alphanum(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::is_dec_digit
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.is_dec_digit();
+<&'a char as traits::AsChar>::is_dec_digit(p0);
+crate::<&'a char as traits::AsChar>::is_dec_digit(p0);
+<&'a char>::is_dec_digit(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::is_hex_digit
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.is_hex_digit();
+<&'a char as traits::AsChar>::is_hex_digit(p0);
+crate::<&'a char as traits::AsChar>::is_hex_digit(p0);
+<&'a char>::is_hex_digit(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::is_oct_digit
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.is_oct_digit();
+<&'a char as traits::AsChar>::is_oct_digit(p0);
+crate::<&'a char as traits::AsChar>::is_oct_digit(p0);
+<&'a char>::is_oct_digit(p0);
-----------------
src/traits.rs <&'a char as traits::AsChar>::len
'a
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.len();
+<&'a char as traits::AsChar>::len(p0);
+crate::<&'a char as traits::AsChar>::len(p0);
+<&'a char>::len(p0);
-----------------
src/traits.rs <traits::CompareResult as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // traits::CompareResult
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<traits::CompareResult as std::fmt::Debug>::fmt(p0, p1);
+crate::<traits::CompareResult as std::fmt::Debug>::fmt(p0, p1);
+<traits::CompareResult>::fmt(p0, p1);
-----------------
src/traits.rs <traits::CompareResult as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // traits::CompareResult
+p0.assert_receiver_is_total_eq();
+<traits::CompareResult as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<traits::CompareResult as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<traits::CompareResult>::assert_receiver_is_total_eq(p0);
-----------------
src/traits.rs <traits::CompareResult as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // traits::CompareResult
let mut p1 = & MaybeUninit::uninit().assume_init(); // traits::CompareResult
+p0.eq(p1);
+<traits::CompareResult as std::cmp::PartialEq>::eq(p0, p1);
+crate::<traits::CompareResult as std::cmp::PartialEq>::eq(p0, p1);
+<traits::CompareResult>::eq(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b [u8]>>::compare
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.compare(p1);
+<&'a [u8] as traits::Compare<&'b [u8]>>::compare(p0, p1);
+crate::<&'a [u8] as traits::Compare<&'b [u8]>>::compare(p0, p1);
+<&'a [u8]>::compare(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b [u8]>>::compare_no_case
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.compare_no_case(p1);
+<&'a [u8] as traits::Compare<&'b [u8]>>::compare_no_case(p0, p1);
+crate::<&'a [u8] as traits::Compare<&'b [u8]>>::compare_no_case(p0, p1);
+<&'a [u8]>::compare_no_case(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b str>>::compare
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = "sample"; // None+&str
+p0.compare(&p1);
+<&'a [u8] as traits::Compare<&'b str>>::compare(p0, &p1);
+crate::<&'a [u8] as traits::Compare<&'b str>>::compare(p0, &p1);
+<&'a [u8]>::compare(p0, &p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b str>>::compare_no_case
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = "sample"; // None+&str
+p0.compare_no_case(&p1);
+<&'a [u8] as traits::Compare<&'b str>>::compare_no_case(p0, &p1);
+crate::<&'a [u8] as traits::Compare<&'b str>>::compare_no_case(p0, &p1);
+<&'a [u8]>::compare_no_case(p0, &p1);
-----------------
src/traits.rs <&'a str as traits::Compare<&'b str>>::compare
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = "sample"; // None+&str
+p0.compare(&p1);
+<&'a str as traits::Compare<&'b str>>::compare(p0, &p1);
+crate::<&'a str as traits::Compare<&'b str>>::compare(p0, &p1);
+<&'a str>::compare(p0, &p1);
-----------------
src/traits.rs <&'a str as traits::Compare<&'b str>>::compare_no_case
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = "sample"; // None+&str
+p0.compare_no_case(&p1);
+<&'a str as traits::Compare<&'b str>>::compare_no_case(p0, &p1);
+crate::<&'a str as traits::Compare<&'b str>>::compare_no_case(p0, &p1);
+<&'a str>::compare_no_case(p0, &p1);
-----------------
src/traits.rs <&'a str as traits::Compare<&'b [u8]>>::compare
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.compare(p1);
+<&'a str as traits::Compare<&'b [u8]>>::compare(p0, p1);
+crate::<&'a str as traits::Compare<&'b [u8]>>::compare(p0, p1);
+<&'a str>::compare(p0, p1);
-----------------
src/traits.rs <&'a str as traits::Compare<&'b [u8]>>::compare_no_case
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.compare_no_case(p1);
+<&'a str as traits::Compare<&'b [u8]>>::compare_no_case(p0, p1);
+crate::<&'a str as traits::Compare<&'b [u8]>>::compare_no_case(p0, p1);
+<&'a str>::compare_no_case(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::FindToken<u8>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 0u8; // None+u8
+p0.find_token(p1);
+<&'a [u8] as traits::FindToken<u8>>::find_token(p0, p1);
+crate::<&'a [u8] as traits::FindToken<u8>>::find_token(p0, p1);
+<&'a [u8]>::find_token(p0, p1);
-----------------
src/traits.rs <&'a str as traits::FindToken<u8>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 0u8; // None+u8
+p0.find_token(p1);
+<&'a str as traits::FindToken<u8>>::find_token(p0, p1);
+crate::<&'a str as traits::FindToken<u8>>::find_token(p0, p1);
+<&'a str>::find_token(p0, p1);
-----------------
src/traits.rs <&'b [u8] as traits::FindToken<&'a u8>>::find_token
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'b [u8]
let mut p1 = & 0u8; // None+u8
+p0.find_token(p1);
+<&'b [u8] as traits::FindToken<&'a u8>>::find_token(p0, p1);
+crate::<&'b [u8] as traits::FindToken<&'a u8>>::find_token(p0, p1);
+<&'b [u8]>::find_token(p0, p1);
-----------------
src/traits.rs <&'b str as traits::FindToken<&'a u8>>::find_token
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'b str
let mut p1 = & 0u8; // None+u8
+p0.find_token(p1);
+<&'b str as traits::FindToken<&'a u8>>::find_token(p0, p1);
+crate::<&'b str as traits::FindToken<&'a u8>>::find_token(p0, p1);
+<&'b str>::find_token(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::FindToken<char>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = 'a'; // None+char
+p0.find_token(p1);
+<&'a [u8] as traits::FindToken<char>>::find_token(p0, p1);
+crate::<&'a [u8] as traits::FindToken<char>>::find_token(p0, p1);
+<&'a [u8]>::find_token(p0, p1);
-----------------
src/traits.rs <&'a str as traits::FindToken<char>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = 'a'; // None+char
+p0.find_token(p1);
+<&'a str as traits::FindToken<char>>::find_token(p0, p1);
+crate::<&'a str as traits::FindToken<char>>::find_token(p0, p1);
+<&'a str>::find_token(p0, p1);
-----------------
src/traits.rs <&'a [char] as traits::FindToken<char>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & ['a'].as_mut_slice(); // None+&'a [char]
let mut p1 = 'a'; // None+char
+p0.find_token(p1);
+<&'a [char] as traits::FindToken<char>>::find_token(p0, p1);
+crate::<&'a [char] as traits::FindToken<char>>::find_token(p0, p1);
+<&'a [char]>::find_token(p0, p1);
-----------------
src/traits.rs <&'b [char] as traits::FindToken<&'a char>>::find_token
'a,'b
deps:{}
candidates:{}
let mut p0 = & ['a'].as_mut_slice(); // None+&'b [char]
let mut p1 = & 'a'; // None+char
+p0.find_token(p1);
+<&'b [char] as traits::FindToken<&'a char>>::find_token(p0, p1);
+crate::<&'b [char] as traits::FindToken<&'a char>>::find_token(p0, p1);
+<&'b [char]>::find_token(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::FindSubstring<&'b [u8]>>::find_substring
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.find_substring(p1);
+<&'a [u8] as traits::FindSubstring<&'b [u8]>>::find_substring(p0, p1);
+crate::<&'a [u8] as traits::FindSubstring<&'b [u8]>>::find_substring(p0, p1);
+<&'a [u8]>::find_substring(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::FindSubstring<&'b str>>::find_substring
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = "sample"; // None+&str
+p0.find_substring(&p1);
+<&'a [u8] as traits::FindSubstring<&'b str>>::find_substring(p0, &p1);
+crate::<&'a [u8] as traits::FindSubstring<&'b str>>::find_substring(p0, &p1);
+<&'a [u8]>::find_substring(p0, &p1);
-----------------
src/traits.rs <&'a str as traits::FindSubstring<&'b str>>::find_substring
'a,'b
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&'a str
let mut p1 = "sample"; // None+&str
+p0.find_substring(&p1);
+<&'a str as traits::FindSubstring<&'b str>>::find_substring(p0, &p1);
+crate::<&'a str as traits::FindSubstring<&'b str>>::find_substring(p0, &p1);
+<&'a str>::find_substring(p0, &p1);
-----------------
src/traits.rs <&'a [u8] as traits::ParseTo<R>>::parse_to
'a
deps:{"<&'a [u8] as traits::ParseTo<R>>::parse_to":{"R":["std::str::FromStr","std::marker::Sized"]}}
candidates:{"<&'a [u8] as traits::ParseTo<R>>::parse_to":{"R":["char","i32","u32","i16","u8","usize","u16","bool","i64","u64","i8"]}}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
+p0.parse_to();
+<&'a [u8] as traits::ParseTo<R>>::parse_to(p0);
+crate::<&'a [u8] as traits::ParseTo<R>>::parse_to(p0);
+<&'a [u8]>::parse_to(p0);
-----------------
src/traits.rs <&'a str as traits::ParseTo<R>>::parse_to
'a
deps:{"<&'a str as traits::ParseTo<R>>::parse_to":{"R":["std::marker::Sized","std::str::FromStr"]}}
candidates:{"<&'a str as traits::ParseTo<R>>::parse_to":{"R":["i32","u16","u64","u32","u8","i16","bool","i8","i64","usize","char"]}}
let mut p0 = & "a"; // None+&'a str
+p0.parse_to();
+<&'a str as traits::ParseTo<R>>::parse_to(p0);
+crate::<&'a str as traits::ParseTo<R>>::parse_to(p0);
+<&'a str>::parse_to(p0);
-----------------
src/traits.rs <[u8; N] as traits::InputLength>::input_len
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+[u8; N]
+p0.input_len();
+<[u8; N] as traits::InputLength>::input_len(p0);
+crate::<[u8; N] as traits::InputLength>::input_len(p0);
+<[u8; N]>::input_len(p0);
-----------------
src/traits.rs <&'a [u8; N] as traits::InputLength>::input_len
'a
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+&'a [u8; N]
+p0.input_len();
+<&'a [u8; N] as traits::InputLength>::input_len(p0);
+crate::<&'a [u8; N] as traits::InputLength>::input_len(p0);
+<&'a [u8; N]>::input_len(p0);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<[u8; N]>>::compare
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = [0u8;1]; // None+[u8; N]
+p0.compare(p1);
+<&'a [u8] as traits::Compare<[u8; N]>>::compare(p0, p1);
+crate::<&'a [u8] as traits::Compare<[u8; N]>>::compare(p0, p1);
+<&'a [u8]>::compare(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<[u8; N]>>::compare_no_case
'a
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = [0u8;1]; // None+[u8; N]
+p0.compare_no_case(p1);
+<&'a [u8] as traits::Compare<[u8; N]>>::compare_no_case(p0, p1);
+crate::<&'a [u8] as traits::Compare<[u8; N]>>::compare_no_case(p0, p1);
+<&'a [u8]>::compare_no_case(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b [u8; N]>>::compare
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = & [0u8;1]; // None+[u8; N]
+p0.compare(p1);
+<&'a [u8] as traits::Compare<&'b [u8; N]>>::compare(p0, p1);
+crate::<&'a [u8] as traits::Compare<&'b [u8; N]>>::compare(p0, p1);
+<&'a [u8]>::compare(p0, p1);
-----------------
src/traits.rs <&'a [u8] as traits::Compare<&'b [u8; N]>>::compare_no_case
'a,'b
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&'a [u8]
let mut p1 = & [0u8;1]; // None+[u8; N]
+p0.compare_no_case(p1);
+<&'a [u8] as traits::Compare<&'b [u8; N]>>::compare_no_case(p0, p1);
+crate::<&'a [u8] as traits::Compare<&'b [u8; N]>>::compare_no_case(p0, p1);
+<&'a [u8]>::compare_no_case(p0, p1);
-----------------
src/traits.rs <[u8; N] as traits::FindToken<u8>>::find_token
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+[u8; N]
let mut p1 = 0u8; // None+u8
+p0.find_token(p1);
+<[u8; N] as traits::FindToken<u8>>::find_token(p0, p1);
+crate::<[u8; N] as traits::FindToken<u8>>::find_token(p0, p1);
+<[u8; N]>::find_token(p0, p1);
-----------------
src/traits.rs <[u8; N] as traits::FindToken<&'a u8>>::find_token
'a
deps:{}
candidates:{}
let mut p0 = & [0u8;1]; // None+[u8; N]
let mut p1 = & 0u8; // None+u8
+p0.find_token(p1);
+<[u8; N] as traits::FindToken<&'a u8>>::find_token(p0, p1);
+crate::<[u8; N] as traits::FindToken<&'a u8>>::find_token(p0, p1);
+<[u8; N]>::find_token(p0, p1);
-----------------
src/traits.rs <[u8] as traits::ExtendInto>::new_builder
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.new_builder();
+<[u8] as traits::ExtendInto>::new_builder(p0);
+crate::<[u8] as traits::ExtendInto>::new_builder(p0);
+<[u8]>::new_builder(p0);
-----------------
src/traits.rs <[u8] as traits::ExtendInto>::extend_into
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<u8>
+p0.extend_into(p1);
+<[u8] as traits::ExtendInto>::extend_into(p0, p1);
+crate::<[u8] as traits::ExtendInto>::extend_into(p0, p1);
+<[u8]>::extend_into(p0, p1);
-----------------
src/traits.rs <&[u8] as traits::ExtendInto>::new_builder
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&[u8]
+p0.new_builder();
+<&[u8] as traits::ExtendInto>::new_builder(p0);
+crate::<&[u8] as traits::ExtendInto>::new_builder(p0);
+<&[u8]>::new_builder(p0);
-----------------
src/traits.rs <&[u8] as traits::ExtendInto>::extend_into
deps:{}
candidates:{}
let mut p0 = & [0u8].as_mut_slice(); // None+&[u8]
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<u8>
+p0.extend_into(p1);
+<&[u8] as traits::ExtendInto>::extend_into(p0, p1);
+crate::<&[u8] as traits::ExtendInto>::extend_into(p0, p1);
+<&[u8]>::extend_into(p0, p1);
-----------------
src/traits.rs <str as traits::ExtendInto>::new_builder
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+p0.new_builder();
+<str as traits::ExtendInto>::new_builder(&p0);
+crate::<str as traits::ExtendInto>::new_builder(&p0);
+<str>::new_builder(&p0);
-----------------
src/traits.rs <str as traits::ExtendInto>::extend_into
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = &mut std::string::String::new(); // None+std::string::String
+p0.extend_into(p1);
+<str as traits::ExtendInto>::extend_into(&p0, p1);
+crate::<str as traits::ExtendInto>::extend_into(&p0, p1);
+<str>::extend_into(&p0, p1);
-----------------
src/traits.rs <&str as traits::ExtendInto>::new_builder
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&str
+p0.new_builder();
+<&str as traits::ExtendInto>::new_builder(p0);
+crate::<&str as traits::ExtendInto>::new_builder(p0);
+<&str>::new_builder(p0);
-----------------
src/traits.rs <&str as traits::ExtendInto>::extend_into
deps:{}
candidates:{}
let mut p0 = & "a"; // None+&str
let mut p1 = &mut std::string::String::new(); // None+std::string::String
+p0.extend_into(p1);
+<&str as traits::ExtendInto>::extend_into(p0, p1);
+crate::<&str as traits::ExtendInto>::extend_into(p0, p1);
+<&str>::extend_into(p0, p1);
-----------------
src/traits.rs <char as traits::ExtendInto>::new_builder
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
+p0.new_builder();
+<char as traits::ExtendInto>::new_builder(p0);
+crate::<char as traits::ExtendInto>::new_builder(p0);
+<char>::new_builder(p0);
-----------------
src/traits.rs <char as traits::ExtendInto>::extend_into
deps:{}
candidates:{}
let mut p0 = & 'a'; // None+char
let mut p1 = &mut std::string::String::new(); // None+std::string::String
+p0.extend_into(p1);
+<char as traits::ExtendInto>::extend_into(p0, p1);
+crate::<char as traits::ExtendInto>::extend_into(p0, p1);
+<char>::extend_into(p0, p1);
-----------------
src/traits.rs <u8 as traits::ToUsize>::to_usize
deps:{}
candidates:{}
let mut p0 = & 0u8; // None+u8
+p0.to_usize();
+<u8 as traits::ToUsize>::to_usize(p0);
+crate::<u8 as traits::ToUsize>::to_usize(p0);
+<u8>::to_usize(p0);
-----------------
src/traits.rs <u16 as traits::ToUsize>::to_usize
deps:{}
candidates:{}
let mut p0 = & 0u16; // None+u16
+p0.to_usize();
+<u16 as traits::ToUsize>::to_usize(p0);
+crate::<u16 as traits::ToUsize>::to_usize(p0);
+<u16>::to_usize(p0);
-----------------
src/traits.rs <usize as traits::ToUsize>::to_usize
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+p0.to_usize();
+<usize as traits::ToUsize>::to_usize(p0);
+crate::<usize as traits::ToUsize>::to_usize(p0);
+<usize>::to_usize(p0);
-----------------
src/traits.rs <u32 as traits::ToUsize>::to_usize
deps:{}
candidates:{}
let mut p0 = & 0u32; // None+u32
+p0.to_usize();
+<u32 as traits::ToUsize>::to_usize(p0);
+crate::<u32 as traits::ToUsize>::to_usize(p0);
+<u32>::to_usize(p0);
-----------------
src/traits.rs <u64 as traits::ToUsize>::to_usize
deps:{}
candidates:{}
let mut p0 = & 0u64; // None+u64
+p0.to_usize();
+<u64 as traits::ToUsize>::to_usize(p0);
+crate::<u64 as traits::ToUsize>::to_usize(p0);
+<u64>::to_usize(p0);
-----------------
src/traits.rs <((I, usize), error::ErrorKind) as traits::ErrorConvert<(I, error::ErrorKind)>>::convert
deps:{"<((I, usize), error::ErrorKind) as traits::ErrorConvert<(I, error::ErrorKind)>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<((I, usize), error::ErrorKind) as traits::ErrorConvert<(I, error::ErrorKind)>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // ((I, usize), error::ErrorKind)
+p0.convert();
+<((I, usize), error::ErrorKind) as traits::ErrorConvert<(I, error::ErrorKind)>>::convert(p0);
+crate::<((I, usize), error::ErrorKind) as traits::ErrorConvert<(I, error::ErrorKind)>>::convert(p0);
+<((I, usize), error::ErrorKind)>::convert(p0);
-----------------
src/traits.rs <(I, error::ErrorKind) as traits::ErrorConvert<((I, usize), error::ErrorKind)>>::convert
deps:{"<(I, error::ErrorKind) as traits::ErrorConvert<((I, usize), error::ErrorKind)>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<(I, error::ErrorKind) as traits::ErrorConvert<((I, usize), error::ErrorKind)>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // (I, error::ErrorKind)
+p0.convert();
+<(I, error::ErrorKind) as traits::ErrorConvert<((I, usize), error::ErrorKind)>>::convert(p0);
+crate::<(I, error::ErrorKind) as traits::ErrorConvert<((I, usize), error::ErrorKind)>>::convert(p0);
+<(I, error::ErrorKind)>::convert(p0);
-----------------
src/traits.rs <error::Error<(I, usize)> as traits::ErrorConvert<error::Error<I>>>::convert
deps:{"<error::Error<(I, usize)> as traits::ErrorConvert<error::Error<I>>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<error::Error<(I, usize)> as traits::ErrorConvert<error::Error<I>>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Error<(I, usize)>
+p0.convert();
+<error::Error<(I, usize)> as traits::ErrorConvert<error::Error<I>>>::convert(p0);
+crate::<error::Error<(I, usize)> as traits::ErrorConvert<error::Error<I>>>::convert(p0);
+<error::Error<(I, usize)>>::convert(p0);
-----------------
src/traits.rs <error::Error<I> as traits::ErrorConvert<error::Error<(I, usize)>>>::convert
deps:{"<error::Error<I> as traits::ErrorConvert<error::Error<(I, usize)>>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<error::Error<I> as traits::ErrorConvert<error::Error<(I, usize)>>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Error<I>
+p0.convert();
+<error::Error<I> as traits::ErrorConvert<error::Error<(I, usize)>>>::convert(p0);
+crate::<error::Error<I> as traits::ErrorConvert<error::Error<(I, usize)>>>::convert(p0);
+<error::Error<I>>::convert(p0);
-----------------
src/traits.rs <error::VerboseError<(I, usize)> as traits::ErrorConvert<error::VerboseError<I>>>::convert
deps:{"<error::VerboseError<(I, usize)> as traits::ErrorConvert<error::VerboseError<I>>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<(I, usize)> as traits::ErrorConvert<error::VerboseError<I>>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::VerboseError<(I, usize)>
+p0.convert();
+<error::VerboseError<(I, usize)> as traits::ErrorConvert<error::VerboseError<I>>>::convert(p0);
+crate::<error::VerboseError<(I, usize)> as traits::ErrorConvert<error::VerboseError<I>>>::convert(p0);
+<error::VerboseError<(I, usize)>>::convert(p0);
-----------------
src/traits.rs <error::VerboseError<I> as traits::ErrorConvert<error::VerboseError<(I, usize)>>>::convert
deps:{"<error::VerboseError<I> as traits::ErrorConvert<error::VerboseError<(I, usize)>>>::convert":{"I":["std::marker::Sized"]}}
candidates:{"<error::VerboseError<I> as traits::ErrorConvert<error::VerboseError<(I, usize)>>>::convert":{"I":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::VerboseError<I>
+p0.convert();
+<error::VerboseError<I> as traits::ErrorConvert<error::VerboseError<(I, usize)>>>::convert(p0);
+crate::<error::VerboseError<I> as traits::ErrorConvert<error::VerboseError<(I, usize)>>>::convert(p0);
+<error::VerboseError<I>>::convert(p0);
-----------------
src/traits.rs <() as traits::ErrorConvert<()>>::convert
deps:{}
candidates:{}
let mut p0 = (); // None+()
+p0.convert();
+<() as traits::ErrorConvert<()>>::convert(p0);
+crate::<() as traits::ErrorConvert<()>>::convert(p0);
+<()>::convert(p0);
-----------------
src/traits.rs <[u8] as traits::HexDisplay>::to_hex
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = 0usize; // None+usize
+p0.to_hex(p1);
+<[u8] as traits::HexDisplay>::to_hex(p0, p1);
+crate::<[u8] as traits::HexDisplay>::to_hex(p0, p1);
+<[u8]>::to_hex(p0, p1);
-----------------
src/traits.rs <[u8] as traits::HexDisplay>::to_hex_from
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.to_hex_from(p1, p2);
+<[u8] as traits::HexDisplay>::to_hex_from(p0, p1, p2);
+crate::<[u8] as traits::HexDisplay>::to_hex_from(p0, p1, p2);
+<[u8]>::to_hex_from(p0, p1, p2);
-----------------
src/traits.rs <str as traits::HexDisplay>::to_hex
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+p0.to_hex(p1);
+<str as traits::HexDisplay>::to_hex(&p0, p1);
+crate::<str as traits::HexDisplay>::to_hex(&p0, p1);
+<str>::to_hex(&p0, p1);
-----------------
src/traits.rs <str as traits::HexDisplay>::to_hex_from
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.to_hex_from(p1, p2);
+<str as traits::HexDisplay>::to_hex_from(&p0, p1, p2);
+crate::<str as traits::HexDisplay>::to_hex_from(&p0, p1, p2);
+<str>::to_hex_from(&p0, p1, p2);
-----------------
src/traits.rs <traits::SaturatingIterator as std::iter::Iterator>::next
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // traits::SaturatingIterator
+p0.next();
+<traits::SaturatingIterator as std::iter::Iterator>::next(p0);
+crate::<traits::SaturatingIterator as std::iter::Iterator>::next(p0);
+<traits::SaturatingIterator>::next(p0);
-----------------
src/traits.rs <std::ops::Range<usize> as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
+p0.bounds();
+<std::ops::Range<usize> as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::Range<usize> as traits::NomRange<usize>>::bounds(p0);
+<std::ops::Range<usize>>::bounds(p0);
-----------------
src/traits.rs <std::ops::Range<usize> as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::Range<usize> as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::Range<usize> as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::Range<usize>>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::Range<usize> as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
+p0.is_inverted();
+<std::ops::Range<usize> as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::Range<usize> as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::Range<usize>>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::Range<usize> as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
+p0.saturating_iter();
+<std::ops::Range<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::Range<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::Range<usize>>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::Range<usize> as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
+p0.bounded_iter();
+<std::ops::Range<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::Range<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::Range<usize>>::bounded_iter(p0);
-----------------
src/traits.rs <std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
+p0.bounds();
+<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounds(p0);
+<std::ops::RangeInclusive<usize>>::bounds(p0);
-----------------
src/traits.rs <std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::RangeInclusive<usize>>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
+p0.is_inverted();
+<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::RangeInclusive<usize>>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
+p0.saturating_iter();
+<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::RangeInclusive<usize>>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
+p0.bounded_iter();
+<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::RangeInclusive<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::RangeInclusive<usize>>::bounded_iter(p0);
-----------------
src/traits.rs <std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
+p0.bounds();
+<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounds(p0);
+<std::ops::RangeFrom<usize>>::bounds(p0);
-----------------
src/traits.rs <std::ops::RangeFrom<usize> as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::RangeFrom<usize>>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::RangeFrom<usize> as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
+p0.is_inverted();
+<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::RangeFrom<usize>>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::RangeFrom<usize> as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
+p0.saturating_iter();
+<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::RangeFrom<usize>>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
+p0.bounded_iter();
+<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::RangeFrom<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::RangeFrom<usize>>::bounded_iter(p0);
-----------------
src/traits.rs <std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
+p0.bounds();
+<std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounds(p0);
+<std::ops::RangeTo<usize>>::bounds(p0);
-----------------
src/traits.rs <std::ops::RangeTo<usize> as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::RangeTo<usize> as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::RangeTo<usize> as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::RangeTo<usize>>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::RangeTo<usize> as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
+p0.is_inverted();
+<std::ops::RangeTo<usize> as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::RangeTo<usize> as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::RangeTo<usize>>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::RangeTo<usize> as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
+p0.saturating_iter();
+<std::ops::RangeTo<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::RangeTo<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::RangeTo<usize>>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
+p0.bounded_iter();
+<std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::RangeTo<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::RangeTo<usize>>::bounded_iter(p0);
-----------------
src/traits.rs <std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
+p0.bounds();
+<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounds(p0);
+<std::ops::RangeToInclusive<usize>>::bounds(p0);
-----------------
src/traits.rs <std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::RangeToInclusive<usize>>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
+p0.is_inverted();
+<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::RangeToInclusive<usize>>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
+p0.saturating_iter();
+<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::RangeToInclusive<usize>>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
+p0.bounded_iter();
+<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::RangeToInclusive<usize> as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::RangeToInclusive<usize>>::bounded_iter(p0);
-----------------
src/traits.rs <std::ops::RangeFull as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
+p0.bounds();
+<std::ops::RangeFull as traits::NomRange<usize>>::bounds(p0);
+crate::<std::ops::RangeFull as traits::NomRange<usize>>::bounds(p0);
+<std::ops::RangeFull>::bounds(p0);
-----------------
src/traits.rs <std::ops::RangeFull as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<std::ops::RangeFull as traits::NomRange<usize>>::contains(p0, p1);
+crate::<std::ops::RangeFull as traits::NomRange<usize>>::contains(p0, p1);
+<std::ops::RangeFull>::contains(p0, p1);
-----------------
src/traits.rs <std::ops::RangeFull as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
+p0.is_inverted();
+<std::ops::RangeFull as traits::NomRange<usize>>::is_inverted(p0);
+crate::<std::ops::RangeFull as traits::NomRange<usize>>::is_inverted(p0);
+<std::ops::RangeFull>::is_inverted(p0);
-----------------
src/traits.rs <std::ops::RangeFull as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
+p0.saturating_iter();
+<std::ops::RangeFull as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<std::ops::RangeFull as traits::NomRange<usize>>::saturating_iter(p0);
+<std::ops::RangeFull>::saturating_iter(p0);
-----------------
src/traits.rs <std::ops::RangeFull as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
+p0.bounded_iter();
+<std::ops::RangeFull as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<std::ops::RangeFull as traits::NomRange<usize>>::bounded_iter(p0);
+<std::ops::RangeFull>::bounded_iter(p0);
-----------------
src/traits.rs <usize as traits::NomRange<usize>>::bounds
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+p0.bounds();
+<usize as traits::NomRange<usize>>::bounds(p0);
+crate::<usize as traits::NomRange<usize>>::bounds(p0);
+<usize>::bounds(p0);
-----------------
src/traits.rs <usize as traits::NomRange<usize>>::contains
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
let mut p1 = & 0usize; // None+usize
+p0.contains(p1);
+<usize as traits::NomRange<usize>>::contains(p0, p1);
+crate::<usize as traits::NomRange<usize>>::contains(p0, p1);
+<usize>::contains(p0, p1);
-----------------
src/traits.rs <usize as traits::NomRange<usize>>::is_inverted
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+p0.is_inverted();
+<usize as traits::NomRange<usize>>::is_inverted(p0);
+crate::<usize as traits::NomRange<usize>>::is_inverted(p0);
+<usize>::is_inverted(p0);
-----------------
src/traits.rs <usize as traits::NomRange<usize>>::saturating_iter
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+p0.saturating_iter();
+<usize as traits::NomRange<usize>>::saturating_iter(p0);
+crate::<usize as traits::NomRange<usize>>::saturating_iter(p0);
+<usize>::saturating_iter(p0);
-----------------
src/traits.rs <usize as traits::NomRange<usize>>::bounded_iter
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+p0.bounded_iter();
+<usize as traits::NomRange<usize>>::bounded_iter(p0);
+crate::<usize as traits::NomRange<usize>>::bounded_iter(p0);
+<usize>::bounded_iter(p0);
-----------------
src/number/mod.rs <number::Endianness as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // number::Endianness
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<number::Endianness as std::fmt::Debug>::fmt(p0, p1);
+crate::<number::Endianness as std::fmt::Debug>::fmt(p0, p1);
+<number::Endianness>::fmt(p0, p1);
-----------------
src/number/mod.rs <number::Endianness as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // number::Endianness
let mut p1 = & MaybeUninit::uninit().assume_init(); // number::Endianness
+p0.eq(p1);
+<number::Endianness as std::cmp::PartialEq>::eq(p0, p1);
+crate::<number::Endianness as std::cmp::PartialEq>::eq(p0, p1);
+<number::Endianness>::eq(p0, p1);
-----------------
src/number/mod.rs <number::Endianness as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // number::Endianness
+p0.assert_receiver_is_total_eq();
+<number::Endianness as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<number::Endianness as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<number::Endianness>::assert_receiver_is_total_eq(p0);
-----------------
src/number/mod.rs <number::Endianness as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // number::Endianness
+p0.clone();
+<number::Endianness as std::clone::Clone>::clone(p0);
+crate::<number::Endianness as std::clone::Clone>::clone(p0);
+<number::Endianness>::clone(p0);