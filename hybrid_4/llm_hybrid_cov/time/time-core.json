{"dependencies":{"<convert::Day as std::clone::Clone>::clone":["convert::Day"],"<convert::Day as std::fmt::Debug>::fmt":["convert::Day","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Hour as std::clone::Clone>::clone":["convert::Hour"],"<convert::Hour as std::fmt::Debug>::fmt":["convert::Hour","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Microsecond as std::clone::Clone>::clone":["convert::Microsecond"],"<convert::Microsecond as std::fmt::Debug>::fmt":["convert::Microsecond","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Millisecond as std::clone::Clone>::clone":["convert::Millisecond"],"<convert::Millisecond as std::fmt::Debug>::fmt":["convert::Millisecond","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Minute as std::clone::Clone>::clone":["convert::Minute"],"<convert::Minute as std::fmt::Debug>::fmt":["convert::Minute","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Nanosecond as std::clone::Clone>::clone":["convert::Nanosecond"],"<convert::Nanosecond as std::fmt::Debug>::fmt":["convert::Nanosecond","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Second as std::clone::Clone>::clone":["convert::Second"],"<convert::Second as std::fmt::Debug>::fmt":["convert::Second","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"<convert::Week as std::clone::Clone>::clone":["convert::Week"],"<convert::Week as std::fmt::Debug>::fmt":["convert::Week","std::fmt::Formatter","std::marker::Sized","std::result::Result"],"convert::Day":["convert::Day"],"convert::Day::per":["convert::Day","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Hour":["convert::Hour"],"convert::Hour::per":["convert::Day","convert::Hour","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Microsecond":["convert::Microsecond"],"convert::Microsecond::per":["convert::Day","convert::Microsecond","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Millisecond":["convert::Millisecond"],"convert::Millisecond::per":["convert::Day","convert::Millisecond","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Minute":["convert::Minute"],"convert::Minute::per":["convert::Day","convert::Minute","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Nanosecond":["convert::Nanosecond"],"convert::Nanosecond::per":["convert::Day","convert::Nanosecond","convert::Per","std::marker::Copy","std::marker::Sized"],"convert::Second":["convert::Second"],"convert::Second::per":["convert::Day","convert::Per","convert::Second","std::marker::Copy","std::marker::Sized"],"convert::Week":["convert::Week"],"convert::Week::per":["convert::Day","convert::Per","convert::Week","std::marker::Copy","std::marker::Sized"],"util::days_in_year":[],"util::is_leap_year":[],"util::weeks_in_year":[]},"glob_path_import":{},"self_to_fn":{"convert::Day":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Hour":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Microsecond":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Millisecond":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Minute":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Nanosecond":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Second":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"],"convert::Week":["Clone","Copy","Debug","impl $t {\n            pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,\n            {\n                <(Self, T)>::VALUE\n            }\n        }"]},"single_path_import":{},"srcs":{"convert::Day":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Day::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Hour":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Hour::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Microsecond":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Microsecond::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Millisecond":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Millisecond::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Minute":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Minute::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Nanosecond":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Nanosecond::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Per":["pub trait Per: sealed::Sealed {\n    type Output;\n\n    const VALUE: Self::Output;\n}","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Second":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Second::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Week":["pub struct $t;","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::Week::per":["pub const fn per<T>(self, _: T) -> <(Self, T) as Per>::Output\n            where\n                (Self, T): Per,\n                T: Copy,{\n                <(Self, T)>::VALUE\n            }","Real(LocalPath(\"time-core/src/convert.rs\"))"],"convert::sealed::Sealed":["pub trait Sealed {}","Real(LocalPath(\"time-core/src/convert.rs\"))"],"util::days_in_year":["/// Get the number of calendar days in a given year.\n///\n/// The returned value will always be either 365 or 366.\n///\n/// ```rust\n/// # use time::util::days_in_year;\n/// assert_eq!(days_in_year(1900), 365);\n/// assert_eq!(days_in_year(2000), 366);\n/// assert_eq!(days_in_year(2004), 366);\n/// assert_eq!(days_in_year(2005), 365);\n/// assert_eq!(days_in_year(2100), 365);\n/// ```\npub const fn days_in_year(year: i32) -> u16{\n    if is_leap_year(year) { 366 } else { 365 }\n}","Real(LocalPath(\"time-core/src/util.rs\"))"],"util::is_leap_year":["/// Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses\n/// [astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).\n///\n/// ```rust\n/// # use time::util::is_leap_year;\n/// assert!(!is_leap_year(1900));\n/// assert!(is_leap_year(2000));\n/// assert!(is_leap_year(2004));\n/// assert!(!is_leap_year(2005));\n/// assert!(!is_leap_year(2100));\n/// ```\npub const fn is_leap_year(year: i32) -> bool{\n    year % 4 == 0 && (year % 25 != 0 || year % 16 == 0)\n}","Real(LocalPath(\"time-core/src/util.rs\"))"],"util::weeks_in_year":["/// Get the number of weeks in the ISO year.\n///\n/// The returned value will always be either 52 or 53.\n///\n/// ```rust\n/// # use time::util::weeks_in_year;\n/// assert_eq!(weeks_in_year(2019), 52);\n/// assert_eq!(weeks_in_year(2020), 53);\n/// ```\npub const fn weeks_in_year(year: i32) -> u8{\n    match year.rem_euclid(400) {\n        4 | 9 | 15 | 20 | 26 | 32 | 37 | 43 | 48 | 54 | 60 | 65 | 71 | 76 | 82 | 88 | 93 | 99\n        | 105 | 111 | 116 | 122 | 128 | 133 | 139 | 144 | 150 | 156 | 161 | 167 | 172 | 178\n        | 184 | 189 | 195 | 201 | 207 | 212 | 218 | 224 | 229 | 235 | 240 | 246 | 252 | 257\n        | 263 | 268 | 274 | 280 | 285 | 291 | 296 | 303 | 308 | 314 | 320 | 325 | 331 | 336\n        | 342 | 348 | 353 | 359 | 364 | 370 | 376 | 381 | 387 | 392 | 398 => 53,\n        _ => 52,\n    }\n}","Real(LocalPath(\"time-core/src/util.rs\"))"]},"struct_constructor":{"<(convert::Day, T) as convert::Per>::Output":["per"],"<(convert::Hour, T) as convert::Per>::Output":["per"],"<(convert::Microsecond, T) as convert::Per>::Output":["per"],"<(convert::Millisecond, T) as convert::Per>::Output":["per"],"<(convert::Minute, T) as convert::Per>::Output":["per"],"<(convert::Nanosecond, T) as convert::Per>::Output":["per"],"<(convert::Second, T) as convert::Per>::Output":["per"],"<(convert::Week, T) as convert::Per>::Output":["per"],"bool":["is_leap_year"],"convert::Day":["clone"],"convert::Hour":["clone"],"convert::Microsecond":["clone"],"convert::Millisecond":["clone"],"convert::Minute":["clone"],"convert::Nanosecond":["clone"],"convert::Second":["clone"],"convert::Week":["clone"],"u16":["days_in_year"],"u8":["weeks_in_year"]},"struct_to_trait":{"convert::Day":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Hour":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Microsecond":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Millisecond":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Minute":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Nanosecond":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Second":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"],"convert::Week":["std::clone::Clone","std::fmt::Debug","std::marker::Copy"]},"targets":{"convert::Day::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Hour::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Microsecond::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Millisecond::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Minute::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Nanosecond::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Second::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"convert::Week::per":["per","Real(LocalPath(\"time-core/src/convert.rs\"))",""],"util::days_in_year":["days_in_year","Real(LocalPath(\"time-core/src/util.rs\"))",""],"util::is_leap_year":["is_leap_year","Real(LocalPath(\"time-core/src/util.rs\"))",""],"util::weeks_in_year":["weeks_in_year","Real(LocalPath(\"time-core/src/util.rs\"))",""]},"trait_to_struct":{"std::clone::Clone":["convert::Day","convert::Hour","convert::Microsecond","convert::Millisecond","convert::Minute","convert::Nanosecond","convert::Second","convert::Week"],"std::fmt::Debug":["convert::Day","convert::Hour","convert::Microsecond","convert::Millisecond","convert::Minute","convert::Nanosecond","convert::Second","convert::Week"],"std::marker::Copy":["convert::Day","convert::Hour","convert::Microsecond","convert::Millisecond","convert::Minute","convert::Nanosecond","convert::Second","convert::Week"]},"type_to_def_path":{"convert::Day":"convert::Day","convert::Hour":"convert::Hour","convert::Microsecond":"convert::Microsecond","convert::Millisecond":"convert::Millisecond","convert::Minute":"convert::Minute","convert::Nanosecond":"convert::Nanosecond","convert::Second":"convert::Second","convert::Week":"convert::Week"}}