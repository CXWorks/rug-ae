{"<&'a f32 as ops::inv::Inv>::inv": true, "<&'a f64 as ops::inv::Inv>::inv": true, "<&'a i128 as pow::Pow<u16>>::pow": true, "<&'a i128 as pow::Pow<u32>>::pow": true, "<&'a i128 as pow::Pow<u8>>::pow": true, "<&'a i128 as pow::Pow<usize>>::pow": false, "<&'a i16 as pow::Pow<u16>>::pow": true, "<&'a i16 as pow::Pow<u32>>::pow": true, "<&'a i16 as pow::Pow<u8>>::pow": true, "<&'a i16 as pow::Pow<usize>>::pow": false, "<&'a i32 as pow::Pow<u16>>::pow": true, "<&'a i32 as pow::Pow<u32>>::pow": true, "<&'a i32 as pow::Pow<u8>>::pow": true, "<&'a i32 as pow::Pow<usize>>::pow": false, "<&'a i64 as pow::Pow<u16>>::pow": true, "<&'a i64 as pow::Pow<u32>>::pow": true, "<&'a i64 as pow::Pow<u8>>::pow": true, "<&'a i64 as pow::Pow<usize>>::pow": false, "<&'a i8 as pow::Pow<u16>>::pow": true, "<&'a i8 as pow::Pow<u32>>::pow": true, "<&'a i8 as pow::Pow<u8>>::pow": true, "<&'a i8 as pow::Pow<usize>>::pow": false, "<&'a isize as pow::Pow<u16>>::pow": true, "<&'a isize as pow::Pow<u32>>::pow": true, "<&'a isize as pow::Pow<u8>>::pow": true, "<&'a isize as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<i128> as pow::Pow<u8>>::pow": false, "<&'a std::num::Wrapping<i128> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<i16> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<i16> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<i32> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<i32> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<i64> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<i64> as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<i8> as pow::Pow<u8>>::pow": false, "<&'a std::num::Wrapping<i8> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<isize> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<isize> as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<u128> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<u128> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<u16> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<u16> as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<u32> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<u32> as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<u64> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<u64> as pow::Pow<usize>>::pow": true, "<&'a std::num::Wrapping<u8> as pow::Pow<u8>>::pow": false, "<&'a std::num::Wrapping<u8> as pow::Pow<usize>>::pow": false, "<&'a std::num::Wrapping<usize> as pow::Pow<u8>>::pow": true, "<&'a std::num::Wrapping<usize> as pow::Pow<usize>>::pow": true, "<&'a u128 as pow::Pow<u16>>::pow": true, "<&'a u128 as pow::Pow<u32>>::pow": false, "<&'a u128 as pow::Pow<u8>>::pow": true, "<&'a u128 as pow::Pow<usize>>::pow": false, "<&'a u16 as pow::Pow<u16>>::pow": true, "<&'a u16 as pow::Pow<u32>>::pow": true, "<&'a u16 as pow::Pow<u8>>::pow": true, "<&'a u16 as pow::Pow<usize>>::pow": true, "<&'a u32 as pow::Pow<u16>>::pow": true, "<&'a u32 as pow::Pow<u32>>::pow": false, "<&'a u32 as pow::Pow<u8>>::pow": true, "<&'a u32 as pow::Pow<usize>>::pow": true, "<&'a u64 as pow::Pow<u16>>::pow": true, "<&'a u64 as pow::Pow<u32>>::pow": true, "<&'a u64 as pow::Pow<u8>>::pow": true, "<&'a u64 as pow::Pow<usize>>::pow": true, "<&'a u8 as pow::Pow<u16>>::pow": false, "<&'a u8 as pow::Pow<u32>>::pow": true, "<&'a u8 as pow::Pow<u8>>::pow": true, "<&'a u8 as pow::Pow<usize>>::pow": true, "<&'a usize as pow::Pow<u16>>::pow": false, "<&'a usize as pow::Pow<u32>>::pow": true, "<&'a usize as pow::Pow<u8>>::pow": true, "<&'a usize as pow::Pow<usize>>::pow": true, "<&'b i128 as pow::Pow<&'a u16>>::pow": true, "<&'b i128 as pow::Pow<&'a u32>>::pow": true, "<&'b i128 as pow::Pow<&'a u8>>::pow": true, "<&'b i128 as pow::Pow<&'a usize>>::pow": true, "<&'b i16 as pow::Pow<&'a u16>>::pow": true, "<&'b i16 as pow::Pow<&'a u32>>::pow": true, "<&'b i16 as pow::Pow<&'a u8>>::pow": true, "<&'b i16 as pow::Pow<&'a usize>>::pow": true, "<&'b i32 as pow::Pow<&'a u16>>::pow": false, "<&'b i32 as pow::Pow<&'a u32>>::pow": true, "<&'b i32 as pow::Pow<&'a u8>>::pow": true, "<&'b i32 as pow::Pow<&'a usize>>::pow": true, "<&'b i64 as pow::Pow<&'a u16>>::pow": true, "<&'b i64 as pow::Pow<&'a u32>>::pow": true, "<&'b i64 as pow::Pow<&'a u8>>::pow": true, "<&'b i64 as pow::Pow<&'a usize>>::pow": true, "<&'b i8 as pow::Pow<&'a u16>>::pow": true, "<&'b i8 as pow::Pow<&'a u32>>::pow": true, "<&'b i8 as pow::Pow<&'a u8>>::pow": true, "<&'b i8 as pow::Pow<&'a usize>>::pow": true, "<&'b isize as pow::Pow<&'a u16>>::pow": true, "<&'b isize as pow::Pow<&'a u32>>::pow": true, "<&'b isize as pow::Pow<&'a u8>>::pow": true, "<&'b isize as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<i128> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<i128> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<i16> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<i16> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<i32> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<i32> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<i64> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<i64> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<i8> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<i8> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<isize> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<isize> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<u128> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<u128> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<u16> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<u16> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<u32> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<u32> as pow::Pow<&'a usize>>::pow": false, "<&'b std::num::Wrapping<u64> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<u64> as pow::Pow<&'a usize>>::pow": false, "<&'b std::num::Wrapping<u8> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<u8> as pow::Pow<&'a usize>>::pow": true, "<&'b std::num::Wrapping<usize> as pow::Pow<&'a u8>>::pow": true, "<&'b std::num::Wrapping<usize> as pow::Pow<&'a usize>>::pow": true, "<&'b u128 as pow::Pow<&'a u16>>::pow": true, "<&'b u128 as pow::Pow<&'a u32>>::pow": true, "<&'b u128 as pow::Pow<&'a u8>>::pow": true, "<&'b u128 as pow::Pow<&'a usize>>::pow": true, "<&'b u16 as pow::Pow<&'a u16>>::pow": true, "<&'b u16 as pow::Pow<&'a u32>>::pow": true, "<&'b u16 as pow::Pow<&'a u8>>::pow": true, "<&'b u16 as pow::Pow<&'a usize>>::pow": false, "<&'b u32 as pow::Pow<&'a u16>>::pow": true, "<&'b u32 as pow::Pow<&'a u32>>::pow": true, "<&'b u32 as pow::Pow<&'a u8>>::pow": true, "<&'b u32 as pow::Pow<&'a usize>>::pow": true, "<&'b u64 as pow::Pow<&'a u16>>::pow": true, "<&'b u64 as pow::Pow<&'a u32>>::pow": true, "<&'b u64 as pow::Pow<&'a u8>>::pow": true, "<&'b u64 as pow::Pow<&'a usize>>::pow": true, "<&'b u8 as pow::Pow<&'a u16>>::pow": true, "<&'b u8 as pow::Pow<&'a u32>>::pow": true, "<&'b u8 as pow::Pow<&'a u8>>::pow": true, "<&'b u8 as pow::Pow<&'a usize>>::pow": true, "<&'b usize as pow::Pow<&'a u16>>::pow": true, "<&'b usize as pow::Pow<&'a u32>>::pow": true, "<&'b usize as pow::Pow<&'a u8>>::pow": true, "<&'b usize as pow::Pow<&'a usize>>::pow": true, "<() as bounds::Bounded>::max_value": true, "<() as bounds::Bounded>::min_value": true, "<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": false, "<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": false, "<(B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": false, "<(G, H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": false, "<(H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": false, "<(H, I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(I, J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(J, K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(K, L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(L, M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(M, N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(M, N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(N, O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(N, O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(O, P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(O, P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(P, Q, R, S, T) as bounds::Bounded>::max_value": true, "<(P, Q, R, S, T) as bounds::Bounded>::min_value": true, "<(Q, R, S, T) as bounds::Bounded>::max_value": false, "<(Q, R, S, T) as bounds::Bounded>::min_value": true, "<(R, S, T) as bounds::Bounded>::max_value": true, "<(R, S, T) as bounds::Bounded>::min_value": true, "<(S, T) as bounds::Bounded>::max_value": true, "<(S, T) as bounds::Bounded>::min_value": true, "<(T,) as bounds::Bounded>::max_value": true, "<(T,) as bounds::Bounded>::min_value": true, "<T as bounds::LowerBounded>::min_value": true, "<T as bounds::UpperBounded>::max_value": true, "<T as real::Real>::abs": true, "<T as real::Real>::abs_sub": true, "<T as real::Real>::acos": true, "<T as real::Real>::acosh": false, "<T as real::Real>::asin": true, "<T as real::Real>::asinh": true, "<T as real::Real>::atan": true, "<T as real::Real>::atan2": true, "<T as real::Real>::atanh": true, "<T as real::Real>::cbrt": false, "<T as real::Real>::ceil": true, "<T as real::Real>::cos": true, "<T as real::Real>::cosh": true, "<T as real::Real>::epsilon": true, "<T as real::Real>::exp": true, "<T as real::Real>::exp2": true, "<T as real::Real>::exp_m1": true, "<T as real::Real>::floor": true, "<T as real::Real>::fract": false, "<T as real::Real>::hypot": true, "<T as real::Real>::is_sign_negative": true, "<T as real::Real>::is_sign_positive": true, "<T as real::Real>::ln": true, "<T as real::Real>::ln_1p": true, "<T as real::Real>::log": true, "<T as real::Real>::log10": true, "<T as real::Real>::log2": true, "<T as real::Real>::max": true, "<T as real::Real>::max_value": true, "<T as real::Real>::min": false, "<T as real::Real>::min_positive_value": false, "<T as real::Real>::min_value": true, "<T as real::Real>::mul_add": true, "<T as real::Real>::powf": true, "<T as real::Real>::powi": true, "<T as real::Real>::recip": true, "<T as real::Real>::round": true, "<T as real::Real>::signum": true, "<T as real::Real>::sin": true, "<T as real::Real>::sin_cos": true, "<T as real::Real>::sinh": true, "<T as real::Real>::sqrt": true, "<T as real::Real>::tan": true, "<T as real::Real>::tanh": true, "<T as real::Real>::to_degrees": true, "<T as real::Real>::to_radians": true, "<T as real::Real>::trunc": true, "<bool as cast::AsPrimitive<i128>>::as_": true, "<bool as cast::AsPrimitive<i16>>::as_": false, "<bool as cast::AsPrimitive<i32>>::as_": true, "<bool as cast::AsPrimitive<i64>>::as_": true, "<bool as cast::AsPrimitive<i8>>::as_": true, "<bool as cast::AsPrimitive<isize>>::as_": true, "<bool as cast::AsPrimitive<u128>>::as_": false, "<bool as cast::AsPrimitive<u16>>::as_": true, "<bool as cast::AsPrimitive<u32>>::as_": true, "<bool as cast::AsPrimitive<u64>>::as_": true, "<bool as cast::AsPrimitive<u8>>::as_": true, "<bool as cast::AsPrimitive<usize>>::as_": true, "<char as cast::AsPrimitive<char>>::as_": true, "<char as cast::AsPrimitive<i128>>::as_": true, "<char as cast::AsPrimitive<i16>>::as_": true, "<char as cast::AsPrimitive<i32>>::as_": true, "<char as cast::AsPrimitive<i64>>::as_": true, "<char as cast::AsPrimitive<i8>>::as_": true, "<char as cast::AsPrimitive<isize>>::as_": true, "<char as cast::AsPrimitive<u128>>::as_": true, "<char as cast::AsPrimitive<u16>>::as_": true, "<char as cast::AsPrimitive<u32>>::as_": false, "<char as cast::AsPrimitive<u64>>::as_": true, "<char as cast::AsPrimitive<u8>>::as_": true, "<char as cast::AsPrimitive<usize>>::as_": true, "<f32 as Num>::from_str_radix": true, "<f32 as Num>::from_str_radix::pow": true, "<f32 as Num>::from_str_radix::slice_shift_char": false, "<f32 as bounds::Bounded>::max_value": true, "<f32 as bounds::Bounded>::min_value": true, "<f32 as cast::AsPrimitive<f32>>::as_": true, "<f32 as cast::AsPrimitive<f64>>::as_": true, "<f32 as cast::AsPrimitive<i128>>::as_": true, "<f32 as cast::AsPrimitive<i16>>::as_": true, "<f32 as cast::AsPrimitive<i32>>::as_": true, "<f32 as cast::AsPrimitive<i64>>::as_": true, "<f32 as cast::AsPrimitive<i8>>::as_": false, "<f32 as cast::AsPrimitive<isize>>::as_": false, "<f32 as cast::AsPrimitive<u128>>::as_": true, "<f32 as cast::AsPrimitive<u16>>::as_": true, "<f32 as cast::AsPrimitive<u32>>::as_": true, "<f32 as cast::AsPrimitive<u64>>::as_": true, "<f32 as cast::AsPrimitive<u8>>::as_": true, "<f32 as cast::AsPrimitive<usize>>::as_": true, "<f32 as cast::FromPrimitive>::from_f32": true, "<f32 as cast::FromPrimitive>::from_f64": true, "<f32 as cast::FromPrimitive>::from_i128": true, "<f32 as cast::FromPrimitive>::from_i16": true, "<f32 as cast::FromPrimitive>::from_i32": true, "<f32 as cast::FromPrimitive>::from_i64": true, "<f32 as cast::FromPrimitive>::from_i8": true, "<f32 as cast::FromPrimitive>::from_isize": true, "<f32 as cast::FromPrimitive>::from_u128": true, "<f32 as cast::FromPrimitive>::from_u16": true, "<f32 as cast::FromPrimitive>::from_u32": true, "<f32 as cast::FromPrimitive>::from_u64": true, "<f32 as cast::FromPrimitive>::from_u8": true, "<f32 as cast::FromPrimitive>::from_usize": true, "<f32 as cast::NumCast>::from": true, "<f32 as cast::ToPrimitive>::to_f32": true, "<f32 as cast::ToPrimitive>::to_f64": true, "<f32 as cast::ToPrimitive>::to_i128": true, "<f32 as cast::ToPrimitive>::to_i16": false, "<f32 as cast::ToPrimitive>::to_i32": true, "<f32 as cast::ToPrimitive>::to_i64": true, "<f32 as cast::ToPrimitive>::to_i8": true, "<f32 as cast::ToPrimitive>::to_isize": true, "<f32 as cast::ToPrimitive>::to_u128": true, "<f32 as cast::ToPrimitive>::to_u16": true, "<f32 as cast::ToPrimitive>::to_u32": true, "<f32 as cast::ToPrimitive>::to_u64": true, "<f32 as cast::ToPrimitive>::to_u8": true, "<f32 as cast::ToPrimitive>::to_usize": false, "<f32 as float::Float>::abs": true, "<f32 as float::Float>::abs_sub": true, "<f32 as float::Float>::acos": true, "<f32 as float::Float>::acosh": true, "<f32 as float::Float>::asin": true, "<f32 as float::Float>::asinh": true, "<f32 as float::Float>::atan": true, "<f32 as float::Float>::atan2": true, "<f32 as float::Float>::atanh": true, "<f32 as float::Float>::cbrt": true, "<f32 as float::Float>::ceil": true, "<f32 as float::Float>::classify": true, "<f32 as float::Float>::copysign": true, "<f32 as float::Float>::cos": true, "<f32 as float::Float>::cosh": true, "<f32 as float::Float>::epsilon": true, "<f32 as float::Float>::exp": true, "<f32 as float::Float>::exp2": true, "<f32 as float::Float>::exp_m1": true, "<f32 as float::Float>::floor": true, "<f32 as float::Float>::fract": true, "<f32 as float::Float>::hypot": true, "<f32 as float::Float>::infinity": true, "<f32 as float::Float>::integer_decode": true, "<f32 as float::Float>::is_finite": true, "<f32 as float::Float>::is_infinite": true, "<f32 as float::Float>::is_nan": true, "<f32 as float::Float>::is_normal": true, "<f32 as float::Float>::is_sign_negative": true, "<f32 as float::Float>::is_sign_positive": true, "<f32 as float::Float>::ln": true, "<f32 as float::Float>::ln_1p": true, "<f32 as float::Float>::log": true, "<f32 as float::Float>::log10": true, "<f32 as float::Float>::log2": true, "<f32 as float::Float>::max": true, "<f32 as float::Float>::max_value": true, "<f32 as float::Float>::min": true, "<f32 as float::Float>::min_positive_value": true, "<f32 as float::Float>::min_value": true, "<f32 as float::Float>::mul_add": true, "<f32 as float::Float>::nan": true, "<f32 as float::Float>::neg_infinity": true, "<f32 as float::Float>::neg_zero": true, "<f32 as float::Float>::powf": true, "<f32 as float::Float>::powi": true, "<f32 as float::Float>::recip": true, "<f32 as float::Float>::round": true, "<f32 as float::Float>::signum": true, "<f32 as float::Float>::sin": true, "<f32 as float::Float>::sin_cos": true, "<f32 as float::Float>::sinh": true, "<f32 as float::Float>::sqrt": true, "<f32 as float::Float>::tan": true, "<f32 as float::Float>::tanh": true, "<f32 as float::Float>::to_degrees": true, "<f32 as float::Float>::to_radians": true, "<f32 as float::Float>::trunc": true, "<f32 as float::FloatConst>::E": true, "<f32 as float::FloatConst>::FRAC_1_PI": false, "<f32 as float::FloatConst>::FRAC_1_SQRT_2": true, "<f32 as float::FloatConst>::FRAC_2_PI": false, "<f32 as float::FloatConst>::FRAC_2_SQRT_PI": false, "<f32 as float::FloatConst>::FRAC_PI_2": false, "<f32 as float::FloatConst>::FRAC_PI_3": true, "<f32 as float::FloatConst>::FRAC_PI_4": true, "<f32 as float::FloatConst>::FRAC_PI_6": true, "<f32 as float::FloatConst>::FRAC_PI_8": false, "<f32 as float::FloatConst>::LN_10": false, "<f32 as float::FloatConst>::LN_2": false, "<f32 as float::FloatConst>::LOG10_2": false, "<f32 as float::FloatConst>::LOG10_E": false, "<f32 as float::FloatConst>::LOG2_10": false, "<f32 as float::FloatConst>::LOG2_E": true, "<f32 as float::FloatConst>::PI": false, "<f32 as float::FloatConst>::SQRT_2": false, "<f32 as float::FloatConst>::TAU": false, "<f32 as float::FloatCore>::abs": true, "<f32 as float::FloatCore>::ceil": true, "<f32 as float::FloatCore>::classify": true, "<f32 as float::FloatCore>::epsilon": true, "<f32 as float::FloatCore>::floor": true, "<f32 as float::FloatCore>::fract": true, "<f32 as float::FloatCore>::infinity": false, "<f32 as float::FloatCore>::integer_decode": true, "<f32 as float::FloatCore>::is_finite": true, "<f32 as float::FloatCore>::is_infinite": true, "<f32 as float::FloatCore>::is_nan": true, "<f32 as float::FloatCore>::is_normal": true, "<f32 as float::FloatCore>::is_sign_negative": true, "<f32 as float::FloatCore>::is_sign_positive": true, "<f32 as float::FloatCore>::max": true, "<f32 as float::FloatCore>::max_value": false, "<f32 as float::FloatCore>::min": true, "<f32 as float::FloatCore>::min_positive_value": false, "<f32 as float::FloatCore>::min_value": true, "<f32 as float::FloatCore>::nan": true, "<f32 as float::FloatCore>::neg_infinity": true, "<f32 as float::FloatCore>::neg_zero": true, "<f32 as float::FloatCore>::powi": true, "<f32 as float::FloatCore>::recip": true, "<f32 as float::FloatCore>::round": true, "<f32 as float::FloatCore>::signum": true, "<f32 as float::FloatCore>::to_degrees": true, "<f32 as float::FloatCore>::to_radians": false, "<f32 as float::FloatCore>::trunc": true, "<f32 as identities::One>::is_one": true, "<f32 as identities::One>::one": true, "<f32 as identities::Zero>::is_zero": true, "<f32 as identities::Zero>::zero": true, "<f32 as ops::euclid::Euclid>::div_euclid": true, "<f32 as ops::euclid::Euclid>::rem_euclid": false, "<f32 as ops::inv::Inv>::inv": true, "<f32 as ops::mul_add::MulAdd>::mul_add": true, "<f32 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<f32 as sign::Signed>::abs": true, "<f32 as sign::Signed>::abs_sub": true, "<f32 as sign::Signed>::is_negative": true, "<f32 as sign::Signed>::is_positive": true, "<f32 as sign::Signed>::signum": true, "<f64 as Num>::from_str_radix": true, "<f64 as Num>::from_str_radix::pow": true, "<f64 as Num>::from_str_radix::slice_shift_char": false, "<f64 as bounds::Bounded>::max_value": true, "<f64 as bounds::Bounded>::min_value": true, "<f64 as cast::AsPrimitive<f32>>::as_": true, "<f64 as cast::AsPrimitive<f64>>::as_": true, "<f64 as cast::AsPrimitive<i128>>::as_": true, "<f64 as cast::AsPrimitive<i16>>::as_": true, "<f64 as cast::AsPrimitive<i32>>::as_": true, "<f64 as cast::AsPrimitive<i64>>::as_": true, "<f64 as cast::AsPrimitive<i8>>::as_": true, "<f64 as cast::AsPrimitive<isize>>::as_": true, "<f64 as cast::AsPrimitive<u128>>::as_": true, "<f64 as cast::AsPrimitive<u16>>::as_": true, "<f64 as cast::AsPrimitive<u32>>::as_": true, "<f64 as cast::AsPrimitive<u64>>::as_": true, "<f64 as cast::AsPrimitive<u8>>::as_": false, "<f64 as cast::AsPrimitive<usize>>::as_": true, "<f64 as cast::FromPrimitive>::from_f32": true, "<f64 as cast::FromPrimitive>::from_f64": true, "<f64 as cast::FromPrimitive>::from_i128": true, "<f64 as cast::FromPrimitive>::from_i16": true, "<f64 as cast::FromPrimitive>::from_i32": true, "<f64 as cast::FromPrimitive>::from_i64": true, "<f64 as cast::FromPrimitive>::from_i8": true, "<f64 as cast::FromPrimitive>::from_isize": true, "<f64 as cast::FromPrimitive>::from_u128": true, "<f64 as cast::FromPrimitive>::from_u16": true, "<f64 as cast::FromPrimitive>::from_u32": true, "<f64 as cast::FromPrimitive>::from_u64": true, "<f64 as cast::FromPrimitive>::from_u8": true, "<f64 as cast::FromPrimitive>::from_usize": true, "<f64 as cast::NumCast>::from": true, "<f64 as cast::ToPrimitive>::to_f32": true, "<f64 as cast::ToPrimitive>::to_f64": true, "<f64 as cast::ToPrimitive>::to_i128": true, "<f64 as cast::ToPrimitive>::to_i16": true, "<f64 as cast::ToPrimitive>::to_i32": true, "<f64 as cast::ToPrimitive>::to_i64": true, "<f64 as cast::ToPrimitive>::to_i8": true, "<f64 as cast::ToPrimitive>::to_isize": true, "<f64 as cast::ToPrimitive>::to_u128": true, "<f64 as cast::ToPrimitive>::to_u16": true, "<f64 as cast::ToPrimitive>::to_u32": true, "<f64 as cast::ToPrimitive>::to_u64": true, "<f64 as cast::ToPrimitive>::to_u8": true, "<f64 as cast::ToPrimitive>::to_usize": true, "<f64 as float::Float>::abs": true, "<f64 as float::Float>::abs_sub": true, "<f64 as float::Float>::acos": true, "<f64 as float::Float>::acosh": true, "<f64 as float::Float>::asin": true, "<f64 as float::Float>::asinh": true, "<f64 as float::Float>::atan": true, "<f64 as float::Float>::atan2": true, "<f64 as float::Float>::atanh": true, "<f64 as float::Float>::cbrt": true, "<f64 as float::Float>::ceil": true, "<f64 as float::Float>::classify": true, "<f64 as float::Float>::copysign": true, "<f64 as float::Float>::cos": true, "<f64 as float::Float>::cosh": true, "<f64 as float::Float>::epsilon": true, "<f64 as float::Float>::exp": true, "<f64 as float::Float>::exp2": true, "<f64 as float::Float>::exp_m1": true, "<f64 as float::Float>::floor": true, "<f64 as float::Float>::fract": true, "<f64 as float::Float>::hypot": true, "<f64 as float::Float>::infinity": true, "<f64 as float::Float>::integer_decode": true, "<f64 as float::Float>::is_finite": true, "<f64 as float::Float>::is_infinite": true, "<f64 as float::Float>::is_nan": true, "<f64 as float::Float>::is_normal": true, "<f64 as float::Float>::is_sign_negative": true, "<f64 as float::Float>::is_sign_positive": true, "<f64 as float::Float>::ln": true, "<f64 as float::Float>::ln_1p": true, "<f64 as float::Float>::log": true, "<f64 as float::Float>::log10": true, "<f64 as float::Float>::log2": false, "<f64 as float::Float>::max": true, "<f64 as float::Float>::max_value": true, "<f64 as float::Float>::min": true, "<f64 as float::Float>::min_positive_value": true, "<f64 as float::Float>::min_value": true, "<f64 as float::Float>::mul_add": true, "<f64 as float::Float>::nan": true, "<f64 as float::Float>::neg_infinity": false, "<f64 as float::Float>::neg_zero": true, "<f64 as float::Float>::powf": true, "<f64 as float::Float>::powi": true, "<f64 as float::Float>::recip": true, "<f64 as float::Float>::round": true, "<f64 as float::Float>::signum": true, "<f64 as float::Float>::sin": true, "<f64 as float::Float>::sin_cos": true, "<f64 as float::Float>::sinh": true, "<f64 as float::Float>::sqrt": true, "<f64 as float::Float>::tan": false, "<f64 as float::Float>::tanh": true, "<f64 as float::Float>::to_degrees": true, "<f64 as float::Float>::to_radians": true, "<f64 as float::Float>::trunc": true, "<f64 as float::FloatConst>::E": true, "<f64 as float::FloatConst>::FRAC_1_PI": true, "<f64 as float::FloatConst>::FRAC_1_SQRT_2": true, "<f64 as float::FloatConst>::FRAC_2_PI": false, "<f64 as float::FloatConst>::FRAC_2_SQRT_PI": false, "<f64 as float::FloatConst>::FRAC_PI_2": false, "<f64 as float::FloatConst>::FRAC_PI_3": false, "<f64 as float::FloatConst>::FRAC_PI_4": true, "<f64 as float::FloatConst>::FRAC_PI_6": false, "<f64 as float::FloatConst>::FRAC_PI_8": false, "<f64 as float::FloatConst>::LN_10": true, "<f64 as float::FloatConst>::LN_2": true, "<f64 as float::FloatConst>::LOG10_2": false, "<f64 as float::FloatConst>::LOG10_E": false, "<f64 as float::FloatConst>::LOG2_10": false, "<f64 as float::FloatConst>::LOG2_E": true, "<f64 as float::FloatConst>::PI": false, "<f64 as float::FloatConst>::SQRT_2": false, "<f64 as float::FloatConst>::TAU": false, "<f64 as float::FloatCore>::abs": true, "<f64 as float::FloatCore>::ceil": true, "<f64 as float::FloatCore>::classify": true, "<f64 as float::FloatCore>::epsilon": true, "<f64 as float::FloatCore>::floor": true, "<f64 as float::FloatCore>::fract": true, "<f64 as float::FloatCore>::infinity": true, "<f64 as float::FloatCore>::integer_decode": true, "<f64 as float::FloatCore>::is_finite": true, "<f64 as float::FloatCore>::is_infinite": true, "<f64 as float::FloatCore>::is_nan": true, "<f64 as float::FloatCore>::is_normal": true, "<f64 as float::FloatCore>::is_sign_negative": true, "<f64 as float::FloatCore>::is_sign_positive": true, "<f64 as float::FloatCore>::max": false, "<f64 as float::FloatCore>::max_value": true, "<f64 as float::FloatCore>::min": true, "<f64 as float::FloatCore>::min_positive_value": true, "<f64 as float::FloatCore>::min_value": true, "<f64 as float::FloatCore>::nan": true, "<f64 as float::FloatCore>::neg_infinity": true, "<f64 as float::FloatCore>::neg_zero": true, "<f64 as float::FloatCore>::powi": true, "<f64 as float::FloatCore>::recip": false, "<f64 as float::FloatCore>::round": true, "<f64 as float::FloatCore>::signum": true, "<f64 as float::FloatCore>::to_degrees": true, "<f64 as float::FloatCore>::to_radians": true, "<f64 as float::FloatCore>::trunc": true, "<f64 as identities::One>::is_one": true, "<f64 as identities::One>::one": true, "<f64 as identities::Zero>::is_zero": true, "<f64 as identities::Zero>::zero": true, "<f64 as ops::euclid::Euclid>::div_euclid": true, "<f64 as ops::euclid::Euclid>::rem_euclid": true, "<f64 as ops::inv::Inv>::inv": true, "<f64 as ops::mul_add::MulAdd>::mul_add": true, "<f64 as ops::mul_add::MulAddAssign>::mul_add_assign": false, "<f64 as sign::Signed>::abs": false, "<f64 as sign::Signed>::abs_sub": true, "<f64 as sign::Signed>::is_negative": true, "<f64 as sign::Signed>::is_positive": false, "<f64 as sign::Signed>::signum": true, "<i128 as Num>::from_str_radix": true, "<i128 as bounds::Bounded>::max_value": true, "<i128 as bounds::Bounded>::min_value": true, "<i128 as cast::AsPrimitive<f32>>::as_": true, "<i128 as cast::AsPrimitive<f64>>::as_": true, "<i128 as cast::AsPrimitive<i128>>::as_": true, "<i128 as cast::AsPrimitive<i16>>::as_": true, "<i128 as cast::AsPrimitive<i32>>::as_": true, "<i128 as cast::AsPrimitive<i64>>::as_": true, "<i128 as cast::AsPrimitive<i8>>::as_": true, "<i128 as cast::AsPrimitive<isize>>::as_": false, "<i128 as cast::AsPrimitive<u128>>::as_": true, "<i128 as cast::AsPrimitive<u16>>::as_": false, "<i128 as cast::AsPrimitive<u32>>::as_": true, "<i128 as cast::AsPrimitive<u64>>::as_": true, "<i128 as cast::AsPrimitive<u8>>::as_": true, "<i128 as cast::AsPrimitive<usize>>::as_": true, "<i128 as cast::FromPrimitive>::from_f32": true, "<i128 as cast::FromPrimitive>::from_f64": true, "<i128 as cast::FromPrimitive>::from_i128": true, "<i128 as cast::FromPrimitive>::from_i16": true, "<i128 as cast::FromPrimitive>::from_i32": true, "<i128 as cast::FromPrimitive>::from_i64": true, "<i128 as cast::FromPrimitive>::from_i8": true, "<i128 as cast::FromPrimitive>::from_isize": true, "<i128 as cast::FromPrimitive>::from_u128": true, "<i128 as cast::FromPrimitive>::from_u16": true, "<i128 as cast::FromPrimitive>::from_u32": true, "<i128 as cast::FromPrimitive>::from_u64": true, "<i128 as cast::FromPrimitive>::from_u8": true, "<i128 as cast::FromPrimitive>::from_usize": true, "<i128 as cast::NumCast>::from": true, "<i128 as cast::ToPrimitive>::to_f32": true, "<i128 as cast::ToPrimitive>::to_f64": true, "<i128 as cast::ToPrimitive>::to_i128": false, "<i128 as cast::ToPrimitive>::to_i16": true, "<i128 as cast::ToPrimitive>::to_i32": true, "<i128 as cast::ToPrimitive>::to_i64": true, "<i128 as cast::ToPrimitive>::to_i8": true, "<i128 as cast::ToPrimitive>::to_isize": true, "<i128 as cast::ToPrimitive>::to_u128": true, "<i128 as cast::ToPrimitive>::to_u16": true, "<i128 as cast::ToPrimitive>::to_u32": true, "<i128 as cast::ToPrimitive>::to_u64": true, "<i128 as cast::ToPrimitive>::to_u8": true, "<i128 as cast::ToPrimitive>::to_usize": false, "<i128 as identities::One>::is_one": true, "<i128 as identities::One>::one": true, "<i128 as identities::Zero>::is_zero": true, "<i128 as identities::Zero>::zero": true, "<i128 as int::PrimInt>::count_ones": true, "<i128 as int::PrimInt>::count_zeros": true, "<i128 as int::PrimInt>::from_be": true, "<i128 as int::PrimInt>::from_le": true, "<i128 as int::PrimInt>::leading_ones": true, "<i128 as int::PrimInt>::leading_zeros": true, "<i128 as int::PrimInt>::pow": true, "<i128 as int::PrimInt>::reverse_bits": true, "<i128 as int::PrimInt>::rotate_left": true, "<i128 as int::PrimInt>::rotate_right": true, "<i128 as int::PrimInt>::signed_shl": true, "<i128 as int::PrimInt>::signed_shr": true, "<i128 as int::PrimInt>::swap_bytes": true, "<i128 as int::PrimInt>::to_be": true, "<i128 as int::PrimInt>::to_le": true, "<i128 as int::PrimInt>::trailing_ones": true, "<i128 as int::PrimInt>::trailing_zeros": true, "<i128 as int::PrimInt>::unsigned_shl": true, "<i128 as int::PrimInt>::unsigned_shr": true, "<i128 as ops::checked::CheckedAdd>::checked_add": true, "<i128 as ops::checked::CheckedDiv>::checked_div": true, "<i128 as ops::checked::CheckedMul>::checked_mul": true, "<i128 as ops::checked::CheckedNeg>::checked_neg": true, "<i128 as ops::checked::CheckedRem>::checked_rem": true, "<i128 as ops::checked::CheckedShl>::checked_shl": true, "<i128 as ops::checked::CheckedShr>::checked_shr": true, "<i128 as ops::checked::CheckedSub>::checked_sub": false, "<i128 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<i128 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<i128 as ops::euclid::Euclid>::div_euclid": true, "<i128 as ops::euclid::Euclid>::rem_euclid": true, "<i128 as ops::mul_add::MulAdd>::mul_add": true, "<i128 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<i128 as ops::overflowing::OverflowingAdd>::overflowing_add": false, "<i128 as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<i128 as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<i128 as ops::saturating::Saturating>::saturating_add": true, "<i128 as ops::saturating::Saturating>::saturating_sub": true, "<i128 as ops::saturating::SaturatingAdd>::saturating_add": false, "<i128 as ops::saturating::SaturatingMul>::saturating_mul": true, "<i128 as ops::saturating::SaturatingSub>::saturating_sub": true, "<i128 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<i128 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<i128 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<i128 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<i128 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<i128 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<i128 as pow::Pow<&'a u16>>::pow": true, "<i128 as pow::Pow<&'a u32>>::pow": true, "<i128 as pow::Pow<&'a u8>>::pow": true, "<i128 as pow::Pow<&'a usize>>::pow": true, "<i128 as pow::Pow<u16>>::pow": true, "<i128 as pow::Pow<u32>>::pow": true, "<i128 as pow::Pow<u8>>::pow": true, "<i128 as pow::Pow<usize>>::pow": true, "<i128 as sign::Signed>::abs": true, "<i128 as sign::Signed>::abs_sub": true, "<i128 as sign::Signed>::is_negative": true, "<i128 as sign::Signed>::is_positive": true, "<i128 as sign::Signed>::signum": true, "<i16 as Num>::from_str_radix": true, "<i16 as bounds::Bounded>::max_value": true, "<i16 as bounds::Bounded>::min_value": true, "<i16 as cast::AsPrimitive<f32>>::as_": true, "<i16 as cast::AsPrimitive<f64>>::as_": true, "<i16 as cast::AsPrimitive<i128>>::as_": true, "<i16 as cast::AsPrimitive<i16>>::as_": true, "<i16 as cast::AsPrimitive<i32>>::as_": true, "<i16 as cast::AsPrimitive<i64>>::as_": true, "<i16 as cast::AsPrimitive<i8>>::as_": true, "<i16 as cast::AsPrimitive<isize>>::as_": true, "<i16 as cast::AsPrimitive<u128>>::as_": true, "<i16 as cast::AsPrimitive<u16>>::as_": true, "<i16 as cast::AsPrimitive<u32>>::as_": true, "<i16 as cast::AsPrimitive<u64>>::as_": true, "<i16 as cast::AsPrimitive<u8>>::as_": true, "<i16 as cast::AsPrimitive<usize>>::as_": true, "<i16 as cast::FromPrimitive>::from_f32": false, "<i16 as cast::FromPrimitive>::from_f64": true, "<i16 as cast::FromPrimitive>::from_i128": true, "<i16 as cast::FromPrimitive>::from_i16": true, "<i16 as cast::FromPrimitive>::from_i32": true, "<i16 as cast::FromPrimitive>::from_i64": true, "<i16 as cast::FromPrimitive>::from_i8": true, "<i16 as cast::FromPrimitive>::from_isize": true, "<i16 as cast::FromPrimitive>::from_u128": true, "<i16 as cast::FromPrimitive>::from_u16": true, "<i16 as cast::FromPrimitive>::from_u32": true, "<i16 as cast::FromPrimitive>::from_u64": true, "<i16 as cast::FromPrimitive>::from_u8": true, "<i16 as cast::FromPrimitive>::from_usize": true, "<i16 as cast::NumCast>::from": true, "<i16 as cast::ToPrimitive>::to_f32": true, "<i16 as cast::ToPrimitive>::to_f64": true, "<i16 as cast::ToPrimitive>::to_i128": true, "<i16 as cast::ToPrimitive>::to_i16": true, "<i16 as cast::ToPrimitive>::to_i32": true, "<i16 as cast::ToPrimitive>::to_i64": true, "<i16 as cast::ToPrimitive>::to_i8": true, "<i16 as cast::ToPrimitive>::to_isize": true, "<i16 as cast::ToPrimitive>::to_u128": true, "<i16 as cast::ToPrimitive>::to_u16": true, "<i16 as cast::ToPrimitive>::to_u32": true, "<i16 as cast::ToPrimitive>::to_u64": true, "<i16 as cast::ToPrimitive>::to_u8": true, "<i16 as cast::ToPrimitive>::to_usize": true, "<i16 as identities::One>::is_one": true, "<i16 as identities::One>::one": true, "<i16 as identities::Zero>::is_zero": true, "<i16 as identities::Zero>::zero": true, "<i16 as int::PrimInt>::count_ones": true, "<i16 as int::PrimInt>::count_zeros": true, "<i16 as int::PrimInt>::from_be": true, "<i16 as int::PrimInt>::from_le": true, "<i16 as int::PrimInt>::leading_ones": true, "<i16 as int::PrimInt>::leading_zeros": false, "<i16 as int::PrimInt>::pow": true, "<i16 as int::PrimInt>::reverse_bits": false, "<i16 as int::PrimInt>::rotate_left": false, "<i16 as int::PrimInt>::rotate_right": false, "<i16 as int::PrimInt>::signed_shl": true, "<i16 as int::PrimInt>::signed_shr": true, "<i16 as int::PrimInt>::swap_bytes": true, "<i16 as int::PrimInt>::to_be": true, "<i16 as int::PrimInt>::to_le": true, "<i16 as int::PrimInt>::trailing_ones": true, "<i16 as int::PrimInt>::trailing_zeros": true, "<i16 as int::PrimInt>::unsigned_shl": false, "<i16 as int::PrimInt>::unsigned_shr": false, "<i16 as ops::checked::CheckedAdd>::checked_add": true, "<i16 as ops::checked::CheckedDiv>::checked_div": true, "<i16 as ops::checked::CheckedMul>::checked_mul": true, "<i16 as ops::checked::CheckedNeg>::checked_neg": true, "<i16 as ops::checked::CheckedRem>::checked_rem": true, "<i16 as ops::checked::CheckedShl>::checked_shl": true, "<i16 as ops::checked::CheckedShr>::checked_shr": false, "<i16 as ops::checked::CheckedSub>::checked_sub": true, "<i16 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<i16 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<i16 as ops::euclid::Euclid>::div_euclid": true, "<i16 as ops::euclid::Euclid>::rem_euclid": true, "<i16 as ops::mul_add::MulAdd>::mul_add": true, "<i16 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<i16 as ops::overflowing::OverflowingAdd>::overflowing_add": false, "<i16 as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<i16 as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<i16 as ops::saturating::Saturating>::saturating_add": true, "<i16 as ops::saturating::Saturating>::saturating_sub": true, "<i16 as ops::saturating::SaturatingAdd>::saturating_add": true, "<i16 as ops::saturating::SaturatingMul>::saturating_mul": true, "<i16 as ops::saturating::SaturatingSub>::saturating_sub": true, "<i16 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<i16 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<i16 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<i16 as ops::wrapping::WrappingShl>::wrapping_shl": false, "<i16 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<i16 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<i16 as pow::Pow<&'a u16>>::pow": true, "<i16 as pow::Pow<&'a u32>>::pow": true, "<i16 as pow::Pow<&'a u8>>::pow": true, "<i16 as pow::Pow<&'a usize>>::pow": true, "<i16 as pow::Pow<u16>>::pow": true, "<i16 as pow::Pow<u32>>::pow": true, "<i16 as pow::Pow<u8>>::pow": true, "<i16 as pow::Pow<usize>>::pow": true, "<i16 as sign::Signed>::abs": true, "<i16 as sign::Signed>::abs_sub": true, "<i16 as sign::Signed>::is_negative": true, "<i16 as sign::Signed>::is_positive": true, "<i16 as sign::Signed>::signum": true, "<i32 as Num>::from_str_radix": true, "<i32 as bounds::Bounded>::max_value": true, "<i32 as bounds::Bounded>::min_value": true, "<i32 as cast::AsPrimitive<f32>>::as_": true, "<i32 as cast::AsPrimitive<f64>>::as_": true, "<i32 as cast::AsPrimitive<i128>>::as_": true, "<i32 as cast::AsPrimitive<i16>>::as_": true, "<i32 as cast::AsPrimitive<i32>>::as_": true, "<i32 as cast::AsPrimitive<i64>>::as_": true, "<i32 as cast::AsPrimitive<i8>>::as_": true, "<i32 as cast::AsPrimitive<isize>>::as_": true, "<i32 as cast::AsPrimitive<u128>>::as_": true, "<i32 as cast::AsPrimitive<u16>>::as_": false, "<i32 as cast::AsPrimitive<u32>>::as_": true, "<i32 as cast::AsPrimitive<u64>>::as_": true, "<i32 as cast::AsPrimitive<u8>>::as_": false, "<i32 as cast::AsPrimitive<usize>>::as_": true, "<i32 as cast::FromPrimitive>::from_f32": true, "<i32 as cast::FromPrimitive>::from_f64": true, "<i32 as cast::FromPrimitive>::from_i128": true, "<i32 as cast::FromPrimitive>::from_i16": true, "<i32 as cast::FromPrimitive>::from_i32": true, "<i32 as cast::FromPrimitive>::from_i64": true, "<i32 as cast::FromPrimitive>::from_i8": true, "<i32 as cast::FromPrimitive>::from_isize": true, "<i32 as cast::FromPrimitive>::from_u128": true, "<i32 as cast::FromPrimitive>::from_u16": true, "<i32 as cast::FromPrimitive>::from_u32": true, "<i32 as cast::FromPrimitive>::from_u64": true, "<i32 as cast::FromPrimitive>::from_u8": true, "<i32 as cast::FromPrimitive>::from_usize": true, "<i32 as cast::NumCast>::from": true, "<i32 as cast::ToPrimitive>::to_f32": true, "<i32 as cast::ToPrimitive>::to_f64": true, "<i32 as cast::ToPrimitive>::to_i128": true, "<i32 as cast::ToPrimitive>::to_i16": true, "<i32 as cast::ToPrimitive>::to_i32": true, "<i32 as cast::ToPrimitive>::to_i64": true, "<i32 as cast::ToPrimitive>::to_i8": true, "<i32 as cast::ToPrimitive>::to_isize": false, "<i32 as cast::ToPrimitive>::to_u128": false, "<i32 as cast::ToPrimitive>::to_u16": true, "<i32 as cast::ToPrimitive>::to_u32": true, "<i32 as cast::ToPrimitive>::to_u64": true, "<i32 as cast::ToPrimitive>::to_u8": true, "<i32 as cast::ToPrimitive>::to_usize": true, "<i32 as identities::One>::is_one": true, "<i32 as identities::One>::one": true, "<i32 as identities::Zero>::is_zero": true, "<i32 as identities::Zero>::zero": true, "<i32 as int::PrimInt>::count_ones": true, "<i32 as int::PrimInt>::count_zeros": true, "<i32 as int::PrimInt>::from_be": true, "<i32 as int::PrimInt>::from_le": true, "<i32 as int::PrimInt>::leading_ones": true, "<i32 as int::PrimInt>::leading_zeros": true, "<i32 as int::PrimInt>::pow": true, "<i32 as int::PrimInt>::reverse_bits": false, "<i32 as int::PrimInt>::rotate_left": false, "<i32 as int::PrimInt>::rotate_right": false, "<i32 as int::PrimInt>::signed_shl": false, "<i32 as int::PrimInt>::signed_shr": true, "<i32 as int::PrimInt>::swap_bytes": false, "<i32 as int::PrimInt>::to_be": true, "<i32 as int::PrimInt>::to_le": true, "<i32 as int::PrimInt>::trailing_ones": true, "<i32 as int::PrimInt>::trailing_zeros": true, "<i32 as int::PrimInt>::unsigned_shl": false, "<i32 as int::PrimInt>::unsigned_shr": true, "<i32 as ops::checked::CheckedAdd>::checked_add": true, "<i32 as ops::checked::CheckedDiv>::checked_div": true, "<i32 as ops::checked::CheckedMul>::checked_mul": true, "<i32 as ops::checked::CheckedNeg>::checked_neg": true, "<i32 as ops::checked::CheckedRem>::checked_rem": true, "<i32 as ops::checked::CheckedShl>::checked_shl": true, "<i32 as ops::checked::CheckedShr>::checked_shr": true, "<i32 as ops::checked::CheckedSub>::checked_sub": true, "<i32 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<i32 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<i32 as ops::euclid::Euclid>::div_euclid": true, "<i32 as ops::euclid::Euclid>::rem_euclid": true, "<i32 as ops::mul_add::MulAdd>::mul_add": true, "<i32 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<i32 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<i32 as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<i32 as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<i32 as ops::saturating::Saturating>::saturating_add": true, "<i32 as ops::saturating::Saturating>::saturating_sub": true, "<i32 as ops::saturating::SaturatingAdd>::saturating_add": true, "<i32 as ops::saturating::SaturatingMul>::saturating_mul": true, "<i32 as ops::saturating::SaturatingSub>::saturating_sub": true, "<i32 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<i32 as ops::wrapping::WrappingMul>::wrapping_mul": false, "<i32 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<i32 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<i32 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<i32 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<i32 as pow::Pow<&'a u16>>::pow": true, "<i32 as pow::Pow<&'a u32>>::pow": true, "<i32 as pow::Pow<&'a u8>>::pow": true, "<i32 as pow::Pow<&'a usize>>::pow": true, "<i32 as pow::Pow<u16>>::pow": true, "<i32 as pow::Pow<u32>>::pow": true, "<i32 as pow::Pow<u8>>::pow": true, "<i32 as pow::Pow<usize>>::pow": true, "<i32 as sign::Signed>::abs": true, "<i32 as sign::Signed>::abs_sub": true, "<i32 as sign::Signed>::is_negative": true, "<i32 as sign::Signed>::is_positive": true, "<i32 as sign::Signed>::signum": true, "<i64 as Num>::from_str_radix": true, "<i64 as bounds::Bounded>::max_value": true, "<i64 as bounds::Bounded>::min_value": true, "<i64 as cast::AsPrimitive<f32>>::as_": true, "<i64 as cast::AsPrimitive<f64>>::as_": true, "<i64 as cast::AsPrimitive<i128>>::as_": true, "<i64 as cast::AsPrimitive<i16>>::as_": true, "<i64 as cast::AsPrimitive<i32>>::as_": true, "<i64 as cast::AsPrimitive<i64>>::as_": true, "<i64 as cast::AsPrimitive<i8>>::as_": true, "<i64 as cast::AsPrimitive<isize>>::as_": true, "<i64 as cast::AsPrimitive<u128>>::as_": false, "<i64 as cast::AsPrimitive<u16>>::as_": true, "<i64 as cast::AsPrimitive<u32>>::as_": true, "<i64 as cast::AsPrimitive<u64>>::as_": true, "<i64 as cast::AsPrimitive<u8>>::as_": true, "<i64 as cast::AsPrimitive<usize>>::as_": true, "<i64 as cast::FromPrimitive>::from_f32": true, "<i64 as cast::FromPrimitive>::from_f64": true, "<i64 as cast::FromPrimitive>::from_i128": true, "<i64 as cast::FromPrimitive>::from_i16": true, "<i64 as cast::FromPrimitive>::from_i32": true, "<i64 as cast::FromPrimitive>::from_i64": true, "<i64 as cast::FromPrimitive>::from_i8": true, "<i64 as cast::FromPrimitive>::from_isize": true, "<i64 as cast::FromPrimitive>::from_u128": true, "<i64 as cast::FromPrimitive>::from_u16": true, "<i64 as cast::FromPrimitive>::from_u32": true, "<i64 as cast::FromPrimitive>::from_u64": true, "<i64 as cast::FromPrimitive>::from_u8": true, "<i64 as cast::FromPrimitive>::from_usize": true, "<i64 as cast::NumCast>::from": true, "<i64 as cast::ToPrimitive>::to_f32": true, "<i64 as cast::ToPrimitive>::to_f64": false, "<i64 as cast::ToPrimitive>::to_i128": true, "<i64 as cast::ToPrimitive>::to_i16": true, "<i64 as cast::ToPrimitive>::to_i32": true, "<i64 as cast::ToPrimitive>::to_i64": true, "<i64 as cast::ToPrimitive>::to_i8": true, "<i64 as cast::ToPrimitive>::to_isize": false, "<i64 as cast::ToPrimitive>::to_u128": true, "<i64 as cast::ToPrimitive>::to_u16": true, "<i64 as cast::ToPrimitive>::to_u32": true, "<i64 as cast::ToPrimitive>::to_u64": true, "<i64 as cast::ToPrimitive>::to_u8": true, "<i64 as cast::ToPrimitive>::to_usize": true, "<i64 as identities::One>::is_one": true, "<i64 as identities::One>::one": true, "<i64 as identities::Zero>::is_zero": true, "<i64 as identities::Zero>::zero": true, "<i64 as int::PrimInt>::count_ones": true, "<i64 as int::PrimInt>::count_zeros": true, "<i64 as int::PrimInt>::from_be": true, "<i64 as int::PrimInt>::from_le": true, "<i64 as int::PrimInt>::leading_ones": true, "<i64 as int::PrimInt>::leading_zeros": true, "<i64 as int::PrimInt>::pow": true, "<i64 as int::PrimInt>::reverse_bits": false, "<i64 as int::PrimInt>::rotate_left": true, "<i64 as int::PrimInt>::rotate_right": true, "<i64 as int::PrimInt>::signed_shl": true, "<i64 as int::PrimInt>::signed_shr": true, "<i64 as int::PrimInt>::swap_bytes": false, "<i64 as int::PrimInt>::to_be": true, "<i64 as int::PrimInt>::to_le": true, "<i64 as int::PrimInt>::trailing_ones": true, "<i64 as int::PrimInt>::trailing_zeros": true, "<i64 as int::PrimInt>::unsigned_shl": true, "<i64 as int::PrimInt>::unsigned_shr": true, "<i64 as ops::checked::CheckedAdd>::checked_add": true, "<i64 as ops::checked::CheckedDiv>::checked_div": true, "<i64 as ops::checked::CheckedMul>::checked_mul": true, "<i64 as ops::checked::CheckedNeg>::checked_neg": true, "<i64 as ops::checked::CheckedRem>::checked_rem": true, "<i64 as ops::checked::CheckedShl>::checked_shl": false, "<i64 as ops::checked::CheckedShr>::checked_shr": true, "<i64 as ops::checked::CheckedSub>::checked_sub": true, "<i64 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<i64 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<i64 as ops::euclid::Euclid>::div_euclid": true, "<i64 as ops::euclid::Euclid>::rem_euclid": true, "<i64 as ops::mul_add::MulAdd>::mul_add": true, "<i64 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<i64 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<i64 as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<i64 as ops::overflowing::OverflowingSub>::overflowing_sub": false, "<i64 as ops::saturating::Saturating>::saturating_add": true, "<i64 as ops::saturating::Saturating>::saturating_sub": true, "<i64 as ops::saturating::SaturatingAdd>::saturating_add": true, "<i64 as ops::saturating::SaturatingMul>::saturating_mul": true, "<i64 as ops::saturating::SaturatingSub>::saturating_sub": true, "<i64 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<i64 as ops::wrapping::WrappingMul>::wrapping_mul": false, "<i64 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<i64 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<i64 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<i64 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<i64 as pow::Pow<&'a u16>>::pow": true, "<i64 as pow::Pow<&'a u32>>::pow": true, "<i64 as pow::Pow<&'a u8>>::pow": true, "<i64 as pow::Pow<&'a usize>>::pow": true, "<i64 as pow::Pow<u16>>::pow": true, "<i64 as pow::Pow<u32>>::pow": true, "<i64 as pow::Pow<u8>>::pow": true, "<i64 as pow::Pow<usize>>::pow": true, "<i64 as sign::Signed>::abs": true, "<i64 as sign::Signed>::abs_sub": true, "<i64 as sign::Signed>::is_negative": true, "<i64 as sign::Signed>::is_positive": true, "<i64 as sign::Signed>::signum": true, "<i8 as Num>::from_str_radix": true, "<i8 as bounds::Bounded>::max_value": true, "<i8 as bounds::Bounded>::min_value": true, "<i8 as cast::AsPrimitive<f32>>::as_": true, "<i8 as cast::AsPrimitive<f64>>::as_": true, "<i8 as cast::AsPrimitive<i128>>::as_": true, "<i8 as cast::AsPrimitive<i16>>::as_": true, "<i8 as cast::AsPrimitive<i32>>::as_": true, "<i8 as cast::AsPrimitive<i64>>::as_": true, "<i8 as cast::AsPrimitive<i8>>::as_": true, "<i8 as cast::AsPrimitive<isize>>::as_": true, "<i8 as cast::AsPrimitive<u128>>::as_": true, "<i8 as cast::AsPrimitive<u16>>::as_": true, "<i8 as cast::AsPrimitive<u32>>::as_": true, "<i8 as cast::AsPrimitive<u64>>::as_": true, "<i8 as cast::AsPrimitive<u8>>::as_": true, "<i8 as cast::AsPrimitive<usize>>::as_": true, "<i8 as cast::FromPrimitive>::from_f32": true, "<i8 as cast::FromPrimitive>::from_f64": true, "<i8 as cast::FromPrimitive>::from_i128": true, "<i8 as cast::FromPrimitive>::from_i16": true, "<i8 as cast::FromPrimitive>::from_i32": true, "<i8 as cast::FromPrimitive>::from_i64": true, "<i8 as cast::FromPrimitive>::from_i8": true, "<i8 as cast::FromPrimitive>::from_isize": true, "<i8 as cast::FromPrimitive>::from_u128": true, "<i8 as cast::FromPrimitive>::from_u16": true, "<i8 as cast::FromPrimitive>::from_u32": true, "<i8 as cast::FromPrimitive>::from_u64": true, "<i8 as cast::FromPrimitive>::from_u8": true, "<i8 as cast::FromPrimitive>::from_usize": true, "<i8 as cast::NumCast>::from": false, "<i8 as cast::ToPrimitive>::to_f32": true, "<i8 as cast::ToPrimitive>::to_f64": true, "<i8 as cast::ToPrimitive>::to_i128": true, "<i8 as cast::ToPrimitive>::to_i16": true, "<i8 as cast::ToPrimitive>::to_i32": true, "<i8 as cast::ToPrimitive>::to_i64": true, "<i8 as cast::ToPrimitive>::to_i8": true, "<i8 as cast::ToPrimitive>::to_isize": true, "<i8 as cast::ToPrimitive>::to_u128": true, "<i8 as cast::ToPrimitive>::to_u16": true, "<i8 as cast::ToPrimitive>::to_u32": true, "<i8 as cast::ToPrimitive>::to_u64": true, "<i8 as cast::ToPrimitive>::to_u8": true, "<i8 as cast::ToPrimitive>::to_usize": true, "<i8 as identities::One>::is_one": true, "<i8 as identities::One>::one": true, "<i8 as identities::Zero>::is_zero": true, "<i8 as identities::Zero>::zero": true, "<i8 as int::PrimInt>::count_ones": false, "<i8 as int::PrimInt>::count_zeros": true, "<i8 as int::PrimInt>::from_be": true, "<i8 as int::PrimInt>::from_le": true, "<i8 as int::PrimInt>::leading_ones": true, "<i8 as int::PrimInt>::leading_zeros": false, "<i8 as int::PrimInt>::pow": false, "<i8 as int::PrimInt>::reverse_bits": false, "<i8 as int::PrimInt>::rotate_left": true, "<i8 as int::PrimInt>::rotate_right": false, "<i8 as int::PrimInt>::signed_shl": false, "<i8 as int::PrimInt>::signed_shr": false, "<i8 as int::PrimInt>::swap_bytes": true, "<i8 as int::PrimInt>::to_be": true, "<i8 as int::PrimInt>::to_le": true, "<i8 as int::PrimInt>::trailing_ones": true, "<i8 as int::PrimInt>::trailing_zeros": true, "<i8 as int::PrimInt>::unsigned_shl": true, "<i8 as int::PrimInt>::unsigned_shr": true, "<i8 as ops::checked::CheckedAdd>::checked_add": true, "<i8 as ops::checked::CheckedDiv>::checked_div": true, "<i8 as ops::checked::CheckedMul>::checked_mul": false, "<i8 as ops::checked::CheckedNeg>::checked_neg": false, "<i8 as ops::checked::CheckedRem>::checked_rem": true, "<i8 as ops::checked::CheckedShl>::checked_shl": false, "<i8 as ops::checked::CheckedShr>::checked_shr": false, "<i8 as ops::checked::CheckedSub>::checked_sub": false, "<i8 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<i8 as ops::euclid::CheckedEuclid>::checked_rem_euclid": false, "<i8 as ops::euclid::Euclid>::div_euclid": true, "<i8 as ops::euclid::Euclid>::rem_euclid": true, "<i8 as ops::mul_add::MulAdd>::mul_add": false, "<i8 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<i8 as ops::overflowing::OverflowingAdd>::overflowing_add": false, "<i8 as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<i8 as ops::overflowing::OverflowingSub>::overflowing_sub": false, "<i8 as ops::saturating::Saturating>::saturating_add": true, "<i8 as ops::saturating::Saturating>::saturating_sub": true, "<i8 as ops::saturating::SaturatingAdd>::saturating_add": true, "<i8 as ops::saturating::SaturatingMul>::saturating_mul": false, "<i8 as ops::saturating::SaturatingSub>::saturating_sub": true, "<i8 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<i8 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<i8 as ops::wrapping::WrappingNeg>::wrapping_neg": false, "<i8 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<i8 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<i8 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<i8 as pow::Pow<&'a u16>>::pow": true, "<i8 as pow::Pow<&'a u32>>::pow": true, "<i8 as pow::Pow<&'a u8>>::pow": true, "<i8 as pow::Pow<&'a usize>>::pow": true, "<i8 as pow::Pow<u16>>::pow": true, "<i8 as pow::Pow<u32>>::pow": true, "<i8 as pow::Pow<u8>>::pow": true, "<i8 as pow::Pow<usize>>::pow": true, "<i8 as sign::Signed>::abs": true, "<i8 as sign::Signed>::abs_sub": true, "<i8 as sign::Signed>::is_negative": true, "<i8 as sign::Signed>::is_positive": true, "<i8 as sign::Signed>::signum": true, "<isize as Num>::from_str_radix": true, "<isize as bounds::Bounded>::max_value": true, "<isize as bounds::Bounded>::min_value": true, "<isize as cast::AsPrimitive<f32>>::as_": true, "<isize as cast::AsPrimitive<f64>>::as_": true, "<isize as cast::AsPrimitive<i128>>::as_": true, "<isize as cast::AsPrimitive<i16>>::as_": true, "<isize as cast::AsPrimitive<i32>>::as_": true, "<isize as cast::AsPrimitive<i64>>::as_": true, "<isize as cast::AsPrimitive<i8>>::as_": true, "<isize as cast::AsPrimitive<isize>>::as_": true, "<isize as cast::AsPrimitive<u128>>::as_": false, "<isize as cast::AsPrimitive<u16>>::as_": true, "<isize as cast::AsPrimitive<u32>>::as_": true, "<isize as cast::AsPrimitive<u64>>::as_": true, "<isize as cast::AsPrimitive<u8>>::as_": false, "<isize as cast::AsPrimitive<usize>>::as_": true, "<isize as cast::FromPrimitive>::from_f32": true, "<isize as cast::FromPrimitive>::from_f64": true, "<isize as cast::FromPrimitive>::from_i128": true, "<isize as cast::FromPrimitive>::from_i16": true, "<isize as cast::FromPrimitive>::from_i32": true, "<isize as cast::FromPrimitive>::from_i64": false, "<isize as cast::FromPrimitive>::from_i8": true, "<isize as cast::FromPrimitive>::from_isize": true, "<isize as cast::FromPrimitive>::from_u128": true, "<isize as cast::FromPrimitive>::from_u16": true, "<isize as cast::FromPrimitive>::from_u32": false, "<isize as cast::FromPrimitive>::from_u64": true, "<isize as cast::FromPrimitive>::from_u8": true, "<isize as cast::FromPrimitive>::from_usize": true, "<isize as cast::NumCast>::from": false, "<isize as cast::ToPrimitive>::to_f32": true, "<isize as cast::ToPrimitive>::to_f64": true, "<isize as cast::ToPrimitive>::to_i128": true, "<isize as cast::ToPrimitive>::to_i16": true, "<isize as cast::ToPrimitive>::to_i32": true, "<isize as cast::ToPrimitive>::to_i64": true, "<isize as cast::ToPrimitive>::to_i8": true, "<isize as cast::ToPrimitive>::to_isize": false, "<isize as cast::ToPrimitive>::to_u128": true, "<isize as cast::ToPrimitive>::to_u16": true, "<isize as cast::ToPrimitive>::to_u32": true, "<isize as cast::ToPrimitive>::to_u64": true, "<isize as cast::ToPrimitive>::to_u8": true, "<isize as cast::ToPrimitive>::to_usize": true, "<isize as identities::One>::is_one": true, "<isize as identities::One>::one": true, "<isize as identities::Zero>::is_zero": true, "<isize as identities::Zero>::zero": true, "<isize as int::PrimInt>::count_ones": true, "<isize as int::PrimInt>::count_zeros": true, "<isize as int::PrimInt>::from_be": false, "<isize as int::PrimInt>::from_le": true, "<isize as int::PrimInt>::leading_ones": true, "<isize as int::PrimInt>::leading_zeros": true, "<isize as int::PrimInt>::pow": true, "<isize as int::PrimInt>::reverse_bits": true, "<isize as int::PrimInt>::rotate_left": true, "<isize as int::PrimInt>::rotate_right": true, "<isize as int::PrimInt>::signed_shl": true, "<isize as int::PrimInt>::signed_shr": true, "<isize as int::PrimInt>::swap_bytes": true, "<isize as int::PrimInt>::to_be": true, "<isize as int::PrimInt>::to_le": true, "<isize as int::PrimInt>::trailing_ones": true, "<isize as int::PrimInt>::trailing_zeros": true, "<isize as int::PrimInt>::unsigned_shl": true, "<isize as int::PrimInt>::unsigned_shr": true, "<isize as ops::checked::CheckedAdd>::checked_add": true, "<isize as ops::checked::CheckedDiv>::checked_div": true, "<isize as ops::checked::CheckedMul>::checked_mul": true, "<isize as ops::checked::CheckedNeg>::checked_neg": false, "<isize as ops::checked::CheckedRem>::checked_rem": true, "<isize as ops::checked::CheckedShl>::checked_shl": true, "<isize as ops::checked::CheckedShr>::checked_shr": true, "<isize as ops::checked::CheckedSub>::checked_sub": true, "<isize as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<isize as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<isize as ops::euclid::Euclid>::div_euclid": true, "<isize as ops::euclid::Euclid>::rem_euclid": true, "<isize as ops::mul_add::MulAdd>::mul_add": true, "<isize as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<isize as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<isize as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<isize as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<isize as ops::saturating::Saturating>::saturating_add": true, "<isize as ops::saturating::Saturating>::saturating_sub": true, "<isize as ops::saturating::SaturatingAdd>::saturating_add": true, "<isize as ops::saturating::SaturatingMul>::saturating_mul": true, "<isize as ops::saturating::SaturatingSub>::saturating_sub": true, "<isize as ops::wrapping::WrappingAdd>::wrapping_add": true, "<isize as ops::wrapping::WrappingMul>::wrapping_mul": true, "<isize as ops::wrapping::WrappingNeg>::wrapping_neg": false, "<isize as ops::wrapping::WrappingShl>::wrapping_shl": true, "<isize as ops::wrapping::WrappingShr>::wrapping_shr": true, "<isize as ops::wrapping::WrappingSub>::wrapping_sub": false, "<isize as pow::Pow<&'a u16>>::pow": true, "<isize as pow::Pow<&'a u32>>::pow": true, "<isize as pow::Pow<&'a u8>>::pow": true, "<isize as pow::Pow<&'a usize>>::pow": true, "<isize as pow::Pow<u16>>::pow": true, "<isize as pow::Pow<u32>>::pow": true, "<isize as pow::Pow<u8>>::pow": true, "<isize as pow::Pow<usize>>::pow": false, "<isize as sign::Signed>::abs": true, "<isize as sign::Signed>::abs_sub": true, "<isize as sign::Signed>::is_negative": true, "<isize as sign::Signed>::is_positive": true, "<isize as sign::Signed>::signum": true, "<std::num::Wrapping<T> as Num>::from_str_radix": true, "<std::num::Wrapping<T> as bounds::Bounded>::max_value": true, "<std::num::Wrapping<T> as bounds::Bounded>::min_value": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_f32": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_f64": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_i128": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_i16": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_i32": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_i64": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_i8": false, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_isize": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_u128": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_u16": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_u32": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_u64": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_u8": true, "<std::num::Wrapping<T> as cast::FromPrimitive>::from_usize": true, "<std::num::Wrapping<T> as cast::NumCast>::from": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_f32": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_f64": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_i128": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_i16": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_i32": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_i64": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_i8": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_isize": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_u128": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_u16": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_u32": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_u64": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_u8": true, "<std::num::Wrapping<T> as cast::ToPrimitive>::to_usize": true, "<std::num::Wrapping<T> as identities::One>::one": true, "<std::num::Wrapping<T> as identities::One>::set_one": true, "<std::num::Wrapping<T> as identities::Zero>::is_zero": true, "<std::num::Wrapping<T> as identities::Zero>::set_zero": true, "<std::num::Wrapping<T> as identities::Zero>::zero": true, "<std::num::Wrapping<T> as ops::wrapping::WrappingAdd>::wrapping_add": true, "<std::num::Wrapping<T> as ops::wrapping::WrappingMul>::wrapping_mul": false, "<std::num::Wrapping<T> as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<std::num::Wrapping<T> as ops::wrapping::WrappingShl>::wrapping_shl": true, "<std::num::Wrapping<T> as ops::wrapping::WrappingShr>::wrapping_shr": true, "<std::num::Wrapping<T> as ops::wrapping::WrappingSub>::wrapping_sub": true, "<std::num::Wrapping<T> as sign::Signed>::abs": true, "<std::num::Wrapping<T> as sign::Signed>::abs_sub": true, "<std::num::Wrapping<T> as sign::Signed>::is_negative": false, "<std::num::Wrapping<T> as sign::Signed>::is_positive": true, "<std::num::Wrapping<T> as sign::Signed>::signum": true, "<std::num::Wrapping<i128> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<i128> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<i128> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<i128> as pow::Pow<usize>>::pow": false, "<std::num::Wrapping<i16> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<i16> as pow::Pow<&'a usize>>::pow": true, "<std::num::Wrapping<i16> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<i16> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<i32> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<i32> as pow::Pow<&'a usize>>::pow": true, "<std::num::Wrapping<i32> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<i32> as pow::Pow<usize>>::pow": false, "<std::num::Wrapping<i64> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<i64> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<i64> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<i64> as pow::Pow<usize>>::pow": false, "<std::num::Wrapping<i8> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<i8> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<i8> as pow::Pow<u8>>::pow": false, "<std::num::Wrapping<i8> as pow::Pow<usize>>::pow": false, "<std::num::Wrapping<isize> as pow::Pow<&'a u8>>::pow": true, "<std::num::Wrapping<isize> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<isize> as pow::Pow<u8>>::pow": false, "<std::num::Wrapping<isize> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<u128> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<u128> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<u128> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<u128> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<u16> as pow::Pow<&'a u8>>::pow": true, "<std::num::Wrapping<u16> as pow::Pow<&'a usize>>::pow": true, "<std::num::Wrapping<u16> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<u16> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<u32> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<u32> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<u32> as pow::Pow<u8>>::pow": false, "<std::num::Wrapping<u32> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<u64> as pow::Pow<&'a u8>>::pow": true, "<std::num::Wrapping<u64> as pow::Pow<&'a usize>>::pow": false, "<std::num::Wrapping<u64> as pow::Pow<u8>>::pow": true, "<std::num::Wrapping<u64> as pow::Pow<usize>>::pow": true, "<std::num::Wrapping<u8> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<u8> as pow::Pow<&'a usize>>::pow": true, "<std::num::Wrapping<u8> as pow::Pow<u8>>::pow": false, "<std::num::Wrapping<u8> as pow::Pow<usize>>::pow": false, "<std::num::Wrapping<usize> as pow::Pow<&'a u8>>::pow": false, "<std::num::Wrapping<usize> as pow::Pow<&'a usize>>::pow": true, "<std::num::Wrapping<usize> as pow::Pow<u8>>::pow": false, "<std::num::Wrapping<usize> as pow::Pow<usize>>::pow": false, "<u128 as Num>::from_str_radix": true, "<u128 as bounds::Bounded>::max_value": true, "<u128 as bounds::Bounded>::min_value": true, "<u128 as cast::AsPrimitive<f32>>::as_": true, "<u128 as cast::AsPrimitive<f64>>::as_": true, "<u128 as cast::AsPrimitive<i128>>::as_": false, "<u128 as cast::AsPrimitive<i16>>::as_": true, "<u128 as cast::AsPrimitive<i32>>::as_": true, "<u128 as cast::AsPrimitive<i64>>::as_": true, "<u128 as cast::AsPrimitive<i8>>::as_": true, "<u128 as cast::AsPrimitive<isize>>::as_": true, "<u128 as cast::AsPrimitive<u128>>::as_": true, "<u128 as cast::AsPrimitive<u16>>::as_": true, "<u128 as cast::AsPrimitive<u32>>::as_": true, "<u128 as cast::AsPrimitive<u64>>::as_": true, "<u128 as cast::AsPrimitive<u8>>::as_": true, "<u128 as cast::AsPrimitive<usize>>::as_": true, "<u128 as cast::FromPrimitive>::from_f32": true, "<u128 as cast::FromPrimitive>::from_f64": true, "<u128 as cast::FromPrimitive>::from_i128": true, "<u128 as cast::FromPrimitive>::from_i16": true, "<u128 as cast::FromPrimitive>::from_i32": true, "<u128 as cast::FromPrimitive>::from_i64": true, "<u128 as cast::FromPrimitive>::from_i8": true, "<u128 as cast::FromPrimitive>::from_isize": true, "<u128 as cast::FromPrimitive>::from_u128": true, "<u128 as cast::FromPrimitive>::from_u16": true, "<u128 as cast::FromPrimitive>::from_u32": true, "<u128 as cast::FromPrimitive>::from_u64": true, "<u128 as cast::FromPrimitive>::from_u8": true, "<u128 as cast::FromPrimitive>::from_usize": true, "<u128 as cast::NumCast>::from": true, "<u128 as cast::ToPrimitive>::to_f32": true, "<u128 as cast::ToPrimitive>::to_f64": true, "<u128 as cast::ToPrimitive>::to_i128": true, "<u128 as cast::ToPrimitive>::to_i16": true, "<u128 as cast::ToPrimitive>::to_i32": true, "<u128 as cast::ToPrimitive>::to_i64": true, "<u128 as cast::ToPrimitive>::to_i8": true, "<u128 as cast::ToPrimitive>::to_isize": true, "<u128 as cast::ToPrimitive>::to_u128": true, "<u128 as cast::ToPrimitive>::to_u16": true, "<u128 as cast::ToPrimitive>::to_u32": true, "<u128 as cast::ToPrimitive>::to_u64": true, "<u128 as cast::ToPrimitive>::to_u8": true, "<u128 as cast::ToPrimitive>::to_usize": true, "<u128 as identities::One>::is_one": true, "<u128 as identities::One>::one": true, "<u128 as identities::Zero>::is_zero": true, "<u128 as identities::Zero>::zero": true, "<u128 as int::PrimInt>::count_ones": true, "<u128 as int::PrimInt>::count_zeros": true, "<u128 as int::PrimInt>::from_be": true, "<u128 as int::PrimInt>::from_le": true, "<u128 as int::PrimInt>::leading_ones": true, "<u128 as int::PrimInt>::leading_zeros": true, "<u128 as int::PrimInt>::pow": true, "<u128 as int::PrimInt>::reverse_bits": true, "<u128 as int::PrimInt>::rotate_left": true, "<u128 as int::PrimInt>::rotate_right": true, "<u128 as int::PrimInt>::signed_shl": true, "<u128 as int::PrimInt>::signed_shr": true, "<u128 as int::PrimInt>::swap_bytes": true, "<u128 as int::PrimInt>::to_be": true, "<u128 as int::PrimInt>::to_le": true, "<u128 as int::PrimInt>::trailing_ones": true, "<u128 as int::PrimInt>::trailing_zeros": true, "<u128 as int::PrimInt>::unsigned_shl": true, "<u128 as int::PrimInt>::unsigned_shr": true, "<u128 as ops::checked::CheckedAdd>::checked_add": true, "<u128 as ops::checked::CheckedDiv>::checked_div": false, "<u128 as ops::checked::CheckedMul>::checked_mul": false, "<u128 as ops::checked::CheckedNeg>::checked_neg": true, "<u128 as ops::checked::CheckedRem>::checked_rem": true, "<u128 as ops::checked::CheckedShl>::checked_shl": true, "<u128 as ops::checked::CheckedShr>::checked_shr": true, "<u128 as ops::checked::CheckedSub>::checked_sub": false, "<u128 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<u128 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<u128 as ops::euclid::Euclid>::div_euclid": true, "<u128 as ops::euclid::Euclid>::rem_euclid": true, "<u128 as ops::mul_add::MulAdd>::mul_add": true, "<u128 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<u128 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<u128 as ops::overflowing::OverflowingMul>::overflowing_mul": false, "<u128 as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<u128 as ops::saturating::Saturating>::saturating_add": false, "<u128 as ops::saturating::Saturating>::saturating_sub": true, "<u128 as ops::saturating::SaturatingAdd>::saturating_add": true, "<u128 as ops::saturating::SaturatingMul>::saturating_mul": true, "<u128 as ops::saturating::SaturatingSub>::saturating_sub": true, "<u128 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<u128 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<u128 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<u128 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<u128 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<u128 as ops::wrapping::WrappingSub>::wrapping_sub": false, "<u128 as pow::Pow<&'a u16>>::pow": true, "<u128 as pow::Pow<&'a u32>>::pow": true, "<u128 as pow::Pow<&'a u8>>::pow": true, "<u128 as pow::Pow<&'a usize>>::pow": true, "<u128 as pow::Pow<u16>>::pow": true, "<u128 as pow::Pow<u32>>::pow": true, "<u128 as pow::Pow<u8>>::pow": true, "<u128 as pow::Pow<usize>>::pow": true, "<u16 as Num>::from_str_radix": true, "<u16 as bounds::Bounded>::max_value": true, "<u16 as bounds::Bounded>::min_value": true, "<u16 as cast::AsPrimitive<f32>>::as_": true, "<u16 as cast::AsPrimitive<f64>>::as_": true, "<u16 as cast::AsPrimitive<i128>>::as_": true, "<u16 as cast::AsPrimitive<i16>>::as_": true, "<u16 as cast::AsPrimitive<i32>>::as_": true, "<u16 as cast::AsPrimitive<i64>>::as_": true, "<u16 as cast::AsPrimitive<i8>>::as_": true, "<u16 as cast::AsPrimitive<isize>>::as_": true, "<u16 as cast::AsPrimitive<u128>>::as_": true, "<u16 as cast::AsPrimitive<u16>>::as_": true, "<u16 as cast::AsPrimitive<u32>>::as_": true, "<u16 as cast::AsPrimitive<u64>>::as_": true, "<u16 as cast::AsPrimitive<u8>>::as_": true, "<u16 as cast::AsPrimitive<usize>>::as_": true, "<u16 as cast::FromPrimitive>::from_f32": true, "<u16 as cast::FromPrimitive>::from_f64": true, "<u16 as cast::FromPrimitive>::from_i128": true, "<u16 as cast::FromPrimitive>::from_i16": true, "<u16 as cast::FromPrimitive>::from_i32": true, "<u16 as cast::FromPrimitive>::from_i64": true, "<u16 as cast::FromPrimitive>::from_i8": true, "<u16 as cast::FromPrimitive>::from_isize": true, "<u16 as cast::FromPrimitive>::from_u128": true, "<u16 as cast::FromPrimitive>::from_u16": true, "<u16 as cast::FromPrimitive>::from_u32": true, "<u16 as cast::FromPrimitive>::from_u64": true, "<u16 as cast::FromPrimitive>::from_u8": true, "<u16 as cast::FromPrimitive>::from_usize": true, "<u16 as cast::NumCast>::from": true, "<u16 as cast::ToPrimitive>::to_f32": true, "<u16 as cast::ToPrimitive>::to_f64": true, "<u16 as cast::ToPrimitive>::to_i128": true, "<u16 as cast::ToPrimitive>::to_i16": true, "<u16 as cast::ToPrimitive>::to_i32": true, "<u16 as cast::ToPrimitive>::to_i64": true, "<u16 as cast::ToPrimitive>::to_i8": true, "<u16 as cast::ToPrimitive>::to_isize": true, "<u16 as cast::ToPrimitive>::to_u128": true, "<u16 as cast::ToPrimitive>::to_u16": true, "<u16 as cast::ToPrimitive>::to_u32": false, "<u16 as cast::ToPrimitive>::to_u64": true, "<u16 as cast::ToPrimitive>::to_u8": true, "<u16 as cast::ToPrimitive>::to_usize": true, "<u16 as identities::One>::is_one": true, "<u16 as identities::One>::one": true, "<u16 as identities::Zero>::is_zero": true, "<u16 as identities::Zero>::zero": true, "<u16 as int::PrimInt>::count_ones": true, "<u16 as int::PrimInt>::count_zeros": true, "<u16 as int::PrimInt>::from_be": true, "<u16 as int::PrimInt>::from_le": true, "<u16 as int::PrimInt>::leading_ones": true, "<u16 as int::PrimInt>::leading_zeros": true, "<u16 as int::PrimInt>::pow": false, "<u16 as int::PrimInt>::reverse_bits": true, "<u16 as int::PrimInt>::rotate_left": true, "<u16 as int::PrimInt>::rotate_right": true, "<u16 as int::PrimInt>::signed_shl": true, "<u16 as int::PrimInt>::signed_shr": true, "<u16 as int::PrimInt>::swap_bytes": true, "<u16 as int::PrimInt>::to_be": true, "<u16 as int::PrimInt>::to_le": true, "<u16 as int::PrimInt>::trailing_ones": true, "<u16 as int::PrimInt>::trailing_zeros": true, "<u16 as int::PrimInt>::unsigned_shl": true, "<u16 as int::PrimInt>::unsigned_shr": true, "<u16 as ops::checked::CheckedAdd>::checked_add": true, "<u16 as ops::checked::CheckedDiv>::checked_div": true, "<u16 as ops::checked::CheckedMul>::checked_mul": true, "<u16 as ops::checked::CheckedNeg>::checked_neg": true, "<u16 as ops::checked::CheckedRem>::checked_rem": true, "<u16 as ops::checked::CheckedShl>::checked_shl": true, "<u16 as ops::checked::CheckedShr>::checked_shr": true, "<u16 as ops::checked::CheckedSub>::checked_sub": true, "<u16 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<u16 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<u16 as ops::euclid::Euclid>::div_euclid": false, "<u16 as ops::euclid::Euclid>::rem_euclid": true, "<u16 as ops::mul_add::MulAdd>::mul_add": false, "<u16 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<u16 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<u16 as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<u16 as ops::overflowing::OverflowingSub>::overflowing_sub": false, "<u16 as ops::saturating::Saturating>::saturating_add": true, "<u16 as ops::saturating::Saturating>::saturating_sub": true, "<u16 as ops::saturating::SaturatingAdd>::saturating_add": true, "<u16 as ops::saturating::SaturatingMul>::saturating_mul": true, "<u16 as ops::saturating::SaturatingSub>::saturating_sub": true, "<u16 as ops::wrapping::WrappingAdd>::wrapping_add": false, "<u16 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<u16 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<u16 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<u16 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<u16 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<u16 as pow::Pow<&'a u16>>::pow": true, "<u16 as pow::Pow<&'a u32>>::pow": true, "<u16 as pow::Pow<&'a u8>>::pow": true, "<u16 as pow::Pow<&'a usize>>::pow": true, "<u16 as pow::Pow<u16>>::pow": true, "<u16 as pow::Pow<u32>>::pow": true, "<u16 as pow::Pow<u8>>::pow": true, "<u16 as pow::Pow<usize>>::pow": false, "<u32 as Num>::from_str_radix": true, "<u32 as bounds::Bounded>::max_value": true, "<u32 as bounds::Bounded>::min_value": true, "<u32 as cast::AsPrimitive<f32>>::as_": true, "<u32 as cast::AsPrimitive<f64>>::as_": true, "<u32 as cast::AsPrimitive<i128>>::as_": true, "<u32 as cast::AsPrimitive<i16>>::as_": true, "<u32 as cast::AsPrimitive<i32>>::as_": true, "<u32 as cast::AsPrimitive<i64>>::as_": true, "<u32 as cast::AsPrimitive<i8>>::as_": true, "<u32 as cast::AsPrimitive<isize>>::as_": true, "<u32 as cast::AsPrimitive<u128>>::as_": true, "<u32 as cast::AsPrimitive<u16>>::as_": false, "<u32 as cast::AsPrimitive<u32>>::as_": true, "<u32 as cast::AsPrimitive<u64>>::as_": true, "<u32 as cast::AsPrimitive<u8>>::as_": true, "<u32 as cast::AsPrimitive<usize>>::as_": true, "<u32 as cast::FromPrimitive>::from_f32": true, "<u32 as cast::FromPrimitive>::from_f64": true, "<u32 as cast::FromPrimitive>::from_i128": true, "<u32 as cast::FromPrimitive>::from_i16": true, "<u32 as cast::FromPrimitive>::from_i32": true, "<u32 as cast::FromPrimitive>::from_i64": true, "<u32 as cast::FromPrimitive>::from_i8": true, "<u32 as cast::FromPrimitive>::from_isize": true, "<u32 as cast::FromPrimitive>::from_u128": true, "<u32 as cast::FromPrimitive>::from_u16": true, "<u32 as cast::FromPrimitive>::from_u32": true, "<u32 as cast::FromPrimitive>::from_u64": true, "<u32 as cast::FromPrimitive>::from_u8": true, "<u32 as cast::FromPrimitive>::from_usize": true, "<u32 as cast::NumCast>::from": true, "<u32 as cast::ToPrimitive>::to_f32": true, "<u32 as cast::ToPrimitive>::to_f64": true, "<u32 as cast::ToPrimitive>::to_i128": true, "<u32 as cast::ToPrimitive>::to_i16": true, "<u32 as cast::ToPrimitive>::to_i32": true, "<u32 as cast::ToPrimitive>::to_i64": true, "<u32 as cast::ToPrimitive>::to_i8": true, "<u32 as cast::ToPrimitive>::to_isize": true, "<u32 as cast::ToPrimitive>::to_u128": true, "<u32 as cast::ToPrimitive>::to_u16": true, "<u32 as cast::ToPrimitive>::to_u32": true, "<u32 as cast::ToPrimitive>::to_u64": true, "<u32 as cast::ToPrimitive>::to_u8": true, "<u32 as cast::ToPrimitive>::to_usize": true, "<u32 as identities::One>::is_one": true, "<u32 as identities::One>::one": true, "<u32 as identities::Zero>::is_zero": true, "<u32 as identities::Zero>::zero": true, "<u32 as int::PrimInt>::count_ones": true, "<u32 as int::PrimInt>::count_zeros": true, "<u32 as int::PrimInt>::from_be": true, "<u32 as int::PrimInt>::from_le": true, "<u32 as int::PrimInt>::leading_ones": true, "<u32 as int::PrimInt>::leading_zeros": true, "<u32 as int::PrimInt>::pow": true, "<u32 as int::PrimInt>::reverse_bits": true, "<u32 as int::PrimInt>::rotate_left": true, "<u32 as int::PrimInt>::rotate_right": true, "<u32 as int::PrimInt>::signed_shl": true, "<u32 as int::PrimInt>::signed_shr": true, "<u32 as int::PrimInt>::swap_bytes": true, "<u32 as int::PrimInt>::to_be": true, "<u32 as int::PrimInt>::to_le": true, "<u32 as int::PrimInt>::trailing_ones": true, "<u32 as int::PrimInt>::trailing_zeros": true, "<u32 as int::PrimInt>::unsigned_shl": true, "<u32 as int::PrimInt>::unsigned_shr": true, "<u32 as ops::checked::CheckedAdd>::checked_add": true, "<u32 as ops::checked::CheckedDiv>::checked_div": true, "<u32 as ops::checked::CheckedMul>::checked_mul": false, "<u32 as ops::checked::CheckedNeg>::checked_neg": true, "<u32 as ops::checked::CheckedRem>::checked_rem": true, "<u32 as ops::checked::CheckedShl>::checked_shl": true, "<u32 as ops::checked::CheckedShr>::checked_shr": true, "<u32 as ops::checked::CheckedSub>::checked_sub": true, "<u32 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<u32 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<u32 as ops::euclid::Euclid>::div_euclid": true, "<u32 as ops::euclid::Euclid>::rem_euclid": true, "<u32 as ops::mul_add::MulAdd>::mul_add": true, "<u32 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<u32 as ops::overflowing::OverflowingAdd>::overflowing_add": false, "<u32 as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<u32 as ops::overflowing::OverflowingSub>::overflowing_sub": false, "<u32 as ops::saturating::Saturating>::saturating_add": true, "<u32 as ops::saturating::Saturating>::saturating_sub": true, "<u32 as ops::saturating::SaturatingAdd>::saturating_add": true, "<u32 as ops::saturating::SaturatingMul>::saturating_mul": true, "<u32 as ops::saturating::SaturatingSub>::saturating_sub": true, "<u32 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<u32 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<u32 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<u32 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<u32 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<u32 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<u32 as pow::Pow<&'a u16>>::pow": true, "<u32 as pow::Pow<&'a u32>>::pow": true, "<u32 as pow::Pow<&'a u8>>::pow": true, "<u32 as pow::Pow<&'a usize>>::pow": true, "<u32 as pow::Pow<u16>>::pow": true, "<u32 as pow::Pow<u32>>::pow": true, "<u32 as pow::Pow<u8>>::pow": true, "<u32 as pow::Pow<usize>>::pow": true, "<u64 as Num>::from_str_radix": true, "<u64 as bounds::Bounded>::max_value": true, "<u64 as bounds::Bounded>::min_value": true, "<u64 as cast::AsPrimitive<f32>>::as_": true, "<u64 as cast::AsPrimitive<f64>>::as_": true, "<u64 as cast::AsPrimitive<i128>>::as_": true, "<u64 as cast::AsPrimitive<i16>>::as_": true, "<u64 as cast::AsPrimitive<i32>>::as_": true, "<u64 as cast::AsPrimitive<i64>>::as_": true, "<u64 as cast::AsPrimitive<i8>>::as_": true, "<u64 as cast::AsPrimitive<isize>>::as_": true, "<u64 as cast::AsPrimitive<u128>>::as_": true, "<u64 as cast::AsPrimitive<u16>>::as_": true, "<u64 as cast::AsPrimitive<u32>>::as_": true, "<u64 as cast::AsPrimitive<u64>>::as_": true, "<u64 as cast::AsPrimitive<u8>>::as_": true, "<u64 as cast::AsPrimitive<usize>>::as_": true, "<u64 as cast::FromPrimitive>::from_f32": true, "<u64 as cast::FromPrimitive>::from_f64": true, "<u64 as cast::FromPrimitive>::from_i128": true, "<u64 as cast::FromPrimitive>::from_i16": true, "<u64 as cast::FromPrimitive>::from_i32": true, "<u64 as cast::FromPrimitive>::from_i64": true, "<u64 as cast::FromPrimitive>::from_i8": true, "<u64 as cast::FromPrimitive>::from_isize": true, "<u64 as cast::FromPrimitive>::from_u128": true, "<u64 as cast::FromPrimitive>::from_u16": true, "<u64 as cast::FromPrimitive>::from_u32": true, "<u64 as cast::FromPrimitive>::from_u64": false, "<u64 as cast::FromPrimitive>::from_u8": true, "<u64 as cast::FromPrimitive>::from_usize": true, "<u64 as cast::NumCast>::from": true, "<u64 as cast::ToPrimitive>::to_f32": true, "<u64 as cast::ToPrimitive>::to_f64": true, "<u64 as cast::ToPrimitive>::to_i128": true, "<u64 as cast::ToPrimitive>::to_i16": true, "<u64 as cast::ToPrimitive>::to_i32": true, "<u64 as cast::ToPrimitive>::to_i64": true, "<u64 as cast::ToPrimitive>::to_i8": true, "<u64 as cast::ToPrimitive>::to_isize": true, "<u64 as cast::ToPrimitive>::to_u128": true, "<u64 as cast::ToPrimitive>::to_u16": true, "<u64 as cast::ToPrimitive>::to_u32": true, "<u64 as cast::ToPrimitive>::to_u64": true, "<u64 as cast::ToPrimitive>::to_u8": true, "<u64 as cast::ToPrimitive>::to_usize": true, "<u64 as identities::One>::is_one": true, "<u64 as identities::One>::one": true, "<u64 as identities::Zero>::is_zero": true, "<u64 as identities::Zero>::zero": true, "<u64 as int::PrimInt>::count_ones": true, "<u64 as int::PrimInt>::count_zeros": true, "<u64 as int::PrimInt>::from_be": true, "<u64 as int::PrimInt>::from_le": true, "<u64 as int::PrimInt>::leading_ones": true, "<u64 as int::PrimInt>::leading_zeros": true, "<u64 as int::PrimInt>::pow": true, "<u64 as int::PrimInt>::reverse_bits": true, "<u64 as int::PrimInt>::rotate_left": true, "<u64 as int::PrimInt>::rotate_right": true, "<u64 as int::PrimInt>::signed_shl": true, "<u64 as int::PrimInt>::signed_shr": true, "<u64 as int::PrimInt>::swap_bytes": true, "<u64 as int::PrimInt>::to_be": true, "<u64 as int::PrimInt>::to_le": true, "<u64 as int::PrimInt>::trailing_ones": true, "<u64 as int::PrimInt>::trailing_zeros": true, "<u64 as int::PrimInt>::unsigned_shl": true, "<u64 as int::PrimInt>::unsigned_shr": true, "<u64 as ops::checked::CheckedAdd>::checked_add": false, "<u64 as ops::checked::CheckedDiv>::checked_div": false, "<u64 as ops::checked::CheckedMul>::checked_mul": true, "<u64 as ops::checked::CheckedNeg>::checked_neg": false, "<u64 as ops::checked::CheckedRem>::checked_rem": true, "<u64 as ops::checked::CheckedShl>::checked_shl": true, "<u64 as ops::checked::CheckedShr>::checked_shr": true, "<u64 as ops::checked::CheckedSub>::checked_sub": true, "<u64 as ops::euclid::CheckedEuclid>::checked_div_euclid": false, "<u64 as ops::euclid::CheckedEuclid>::checked_rem_euclid": true, "<u64 as ops::euclid::Euclid>::div_euclid": true, "<u64 as ops::euclid::Euclid>::rem_euclid": true, "<u64 as ops::mul_add::MulAdd>::mul_add": true, "<u64 as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<u64 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<u64 as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<u64 as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<u64 as ops::saturating::Saturating>::saturating_add": true, "<u64 as ops::saturating::Saturating>::saturating_sub": true, "<u64 as ops::saturating::SaturatingAdd>::saturating_add": false, "<u64 as ops::saturating::SaturatingMul>::saturating_mul": true, "<u64 as ops::saturating::SaturatingSub>::saturating_sub": true, "<u64 as ops::wrapping::WrappingAdd>::wrapping_add": true, "<u64 as ops::wrapping::WrappingMul>::wrapping_mul": true, "<u64 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<u64 as ops::wrapping::WrappingShl>::wrapping_shl": true, "<u64 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<u64 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<u64 as pow::Pow<&'a u16>>::pow": true, "<u64 as pow::Pow<&'a u32>>::pow": true, "<u64 as pow::Pow<&'a u8>>::pow": true, "<u64 as pow::Pow<&'a usize>>::pow": false, "<u64 as pow::Pow<u16>>::pow": true, "<u64 as pow::Pow<u32>>::pow": true, "<u64 as pow::Pow<u8>>::pow": true, "<u64 as pow::Pow<usize>>::pow": true, "<u8 as Num>::from_str_radix": true, "<u8 as bounds::Bounded>::max_value": true, "<u8 as bounds::Bounded>::min_value": true, "<u8 as cast::AsPrimitive<char>>::as_": true, "<u8 as cast::AsPrimitive<f32>>::as_": true, "<u8 as cast::AsPrimitive<f64>>::as_": true, "<u8 as cast::AsPrimitive<i128>>::as_": true, "<u8 as cast::AsPrimitive<i16>>::as_": true, "<u8 as cast::AsPrimitive<i32>>::as_": true, "<u8 as cast::AsPrimitive<i64>>::as_": true, "<u8 as cast::AsPrimitive<i8>>::as_": true, "<u8 as cast::AsPrimitive<isize>>::as_": true, "<u8 as cast::AsPrimitive<u128>>::as_": true, "<u8 as cast::AsPrimitive<u16>>::as_": true, "<u8 as cast::AsPrimitive<u32>>::as_": true, "<u8 as cast::AsPrimitive<u64>>::as_": true, "<u8 as cast::AsPrimitive<u8>>::as_": true, "<u8 as cast::AsPrimitive<usize>>::as_": true, "<u8 as cast::FromPrimitive>::from_f32": true, "<u8 as cast::FromPrimitive>::from_f64": true, "<u8 as cast::FromPrimitive>::from_i128": true, "<u8 as cast::FromPrimitive>::from_i16": true, "<u8 as cast::FromPrimitive>::from_i32": true, "<u8 as cast::FromPrimitive>::from_i64": true, "<u8 as cast::FromPrimitive>::from_i8": true, "<u8 as cast::FromPrimitive>::from_isize": true, "<u8 as cast::FromPrimitive>::from_u128": true, "<u8 as cast::FromPrimitive>::from_u16": true, "<u8 as cast::FromPrimitive>::from_u32": true, "<u8 as cast::FromPrimitive>::from_u64": true, "<u8 as cast::FromPrimitive>::from_u8": true, "<u8 as cast::FromPrimitive>::from_usize": true, "<u8 as cast::NumCast>::from": true, "<u8 as cast::ToPrimitive>::to_f32": true, "<u8 as cast::ToPrimitive>::to_f64": true, "<u8 as cast::ToPrimitive>::to_i128": true, "<u8 as cast::ToPrimitive>::to_i16": true, "<u8 as cast::ToPrimitive>::to_i32": true, "<u8 as cast::ToPrimitive>::to_i64": true, "<u8 as cast::ToPrimitive>::to_i8": true, "<u8 as cast::ToPrimitive>::to_isize": true, "<u8 as cast::ToPrimitive>::to_u128": true, "<u8 as cast::ToPrimitive>::to_u16": true, "<u8 as cast::ToPrimitive>::to_u32": true, "<u8 as cast::ToPrimitive>::to_u64": true, "<u8 as cast::ToPrimitive>::to_u8": true, "<u8 as cast::ToPrimitive>::to_usize": true, "<u8 as identities::One>::is_one": true, "<u8 as identities::One>::one": true, "<u8 as identities::Zero>::is_zero": true, "<u8 as identities::Zero>::zero": true, "<u8 as int::PrimInt>::count_ones": true, "<u8 as int::PrimInt>::count_zeros": true, "<u8 as int::PrimInt>::from_be": true, "<u8 as int::PrimInt>::from_le": true, "<u8 as int::PrimInt>::leading_ones": true, "<u8 as int::PrimInt>::leading_zeros": true, "<u8 as int::PrimInt>::pow": true, "<u8 as int::PrimInt>::reverse_bits": true, "<u8 as int::PrimInt>::rotate_left": true, "<u8 as int::PrimInt>::rotate_right": true, "<u8 as int::PrimInt>::signed_shl": true, "<u8 as int::PrimInt>::signed_shr": true, "<u8 as int::PrimInt>::swap_bytes": true, "<u8 as int::PrimInt>::to_be": true, "<u8 as int::PrimInt>::to_le": true, "<u8 as int::PrimInt>::trailing_ones": true, "<u8 as int::PrimInt>::trailing_zeros": true, "<u8 as int::PrimInt>::unsigned_shl": true, "<u8 as int::PrimInt>::unsigned_shr": true, "<u8 as ops::checked::CheckedAdd>::checked_add": true, "<u8 as ops::checked::CheckedDiv>::checked_div": true, "<u8 as ops::checked::CheckedMul>::checked_mul": true, "<u8 as ops::checked::CheckedNeg>::checked_neg": true, "<u8 as ops::checked::CheckedRem>::checked_rem": true, "<u8 as ops::checked::CheckedShl>::checked_shl": true, "<u8 as ops::checked::CheckedShr>::checked_shr": true, "<u8 as ops::checked::CheckedSub>::checked_sub": true, "<u8 as ops::euclid::CheckedEuclid>::checked_div_euclid": true, "<u8 as ops::euclid::CheckedEuclid>::checked_rem_euclid": false, "<u8 as ops::euclid::Euclid>::div_euclid": true, "<u8 as ops::euclid::Euclid>::rem_euclid": false, "<u8 as ops::mul_add::MulAdd>::mul_add": false, "<u8 as ops::mul_add::MulAddAssign>::mul_add_assign": false, "<u8 as ops::overflowing::OverflowingAdd>::overflowing_add": true, "<u8 as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<u8 as ops::overflowing::OverflowingSub>::overflowing_sub": false, "<u8 as ops::saturating::Saturating>::saturating_add": true, "<u8 as ops::saturating::Saturating>::saturating_sub": true, "<u8 as ops::saturating::SaturatingAdd>::saturating_add": true, "<u8 as ops::saturating::SaturatingMul>::saturating_mul": false, "<u8 as ops::saturating::SaturatingSub>::saturating_sub": true, "<u8 as ops::wrapping::WrappingAdd>::wrapping_add": false, "<u8 as ops::wrapping::WrappingMul>::wrapping_mul": false, "<u8 as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<u8 as ops::wrapping::WrappingShl>::wrapping_shl": false, "<u8 as ops::wrapping::WrappingShr>::wrapping_shr": true, "<u8 as ops::wrapping::WrappingSub>::wrapping_sub": true, "<u8 as pow::Pow<&'a u16>>::pow": true, "<u8 as pow::Pow<&'a u32>>::pow": false, "<u8 as pow::Pow<&'a u8>>::pow": true, "<u8 as pow::Pow<&'a usize>>::pow": true, "<u8 as pow::Pow<u16>>::pow": false, "<u8 as pow::Pow<u32>>::pow": true, "<u8 as pow::Pow<u8>>::pow": true, "<u8 as pow::Pow<usize>>::pow": false, "<usize as Num>::from_str_radix": true, "<usize as bounds::Bounded>::max_value": true, "<usize as bounds::Bounded>::min_value": true, "<usize as cast::AsPrimitive<f32>>::as_": true, "<usize as cast::AsPrimitive<f64>>::as_": true, "<usize as cast::AsPrimitive<i128>>::as_": true, "<usize as cast::AsPrimitive<i16>>::as_": true, "<usize as cast::AsPrimitive<i32>>::as_": true, "<usize as cast::AsPrimitive<i64>>::as_": true, "<usize as cast::AsPrimitive<i8>>::as_": true, "<usize as cast::AsPrimitive<isize>>::as_": true, "<usize as cast::AsPrimitive<u128>>::as_": true, "<usize as cast::AsPrimitive<u16>>::as_": true, "<usize as cast::AsPrimitive<u32>>::as_": true, "<usize as cast::AsPrimitive<u64>>::as_": true, "<usize as cast::AsPrimitive<u8>>::as_": true, "<usize as cast::AsPrimitive<usize>>::as_": true, "<usize as cast::FromPrimitive>::from_f32": true, "<usize as cast::FromPrimitive>::from_f64": true, "<usize as cast::FromPrimitive>::from_i128": true, "<usize as cast::FromPrimitive>::from_i16": true, "<usize as cast::FromPrimitive>::from_i32": true, "<usize as cast::FromPrimitive>::from_i64": true, "<usize as cast::FromPrimitive>::from_i8": true, "<usize as cast::FromPrimitive>::from_isize": true, "<usize as cast::FromPrimitive>::from_u128": true, "<usize as cast::FromPrimitive>::from_u16": true, "<usize as cast::FromPrimitive>::from_u32": true, "<usize as cast::FromPrimitive>::from_u64": true, "<usize as cast::FromPrimitive>::from_u8": true, "<usize as cast::FromPrimitive>::from_usize": true, "<usize as cast::NumCast>::from": true, "<usize as cast::ToPrimitive>::to_f32": true, "<usize as cast::ToPrimitive>::to_f64": true, "<usize as cast::ToPrimitive>::to_i128": true, "<usize as cast::ToPrimitive>::to_i16": true, "<usize as cast::ToPrimitive>::to_i32": true, "<usize as cast::ToPrimitive>::to_i64": true, "<usize as cast::ToPrimitive>::to_i8": true, "<usize as cast::ToPrimitive>::to_isize": true, "<usize as cast::ToPrimitive>::to_u128": true, "<usize as cast::ToPrimitive>::to_u16": true, "<usize as cast::ToPrimitive>::to_u32": true, "<usize as cast::ToPrimitive>::to_u64": true, "<usize as cast::ToPrimitive>::to_u8": true, "<usize as cast::ToPrimitive>::to_usize": false, "<usize as identities::One>::is_one": true, "<usize as identities::One>::one": true, "<usize as identities::Zero>::is_zero": true, "<usize as identities::Zero>::zero": true, "<usize as int::PrimInt>::count_ones": true, "<usize as int::PrimInt>::count_zeros": true, "<usize as int::PrimInt>::from_be": true, "<usize as int::PrimInt>::from_le": true, "<usize as int::PrimInt>::leading_ones": true, "<usize as int::PrimInt>::leading_zeros": true, "<usize as int::PrimInt>::pow": true, "<usize as int::PrimInt>::reverse_bits": true, "<usize as int::PrimInt>::rotate_left": true, "<usize as int::PrimInt>::rotate_right": true, "<usize as int::PrimInt>::signed_shl": true, "<usize as int::PrimInt>::signed_shr": true, "<usize as int::PrimInt>::swap_bytes": true, "<usize as int::PrimInt>::to_be": true, "<usize as int::PrimInt>::to_le": true, "<usize as int::PrimInt>::trailing_ones": true, "<usize as int::PrimInt>::trailing_zeros": true, "<usize as int::PrimInt>::unsigned_shl": true, "<usize as int::PrimInt>::unsigned_shr": true, "<usize as ops::checked::CheckedAdd>::checked_add": true, "<usize as ops::checked::CheckedDiv>::checked_div": true, "<usize as ops::checked::CheckedMul>::checked_mul": true, "<usize as ops::checked::CheckedNeg>::checked_neg": true, "<usize as ops::checked::CheckedRem>::checked_rem": true, "<usize as ops::checked::CheckedShl>::checked_shl": true, "<usize as ops::checked::CheckedShr>::checked_shr": true, "<usize as ops::checked::CheckedSub>::checked_sub": true, "<usize as ops::euclid::CheckedEuclid>::checked_div_euclid": false, "<usize as ops::euclid::CheckedEuclid>::checked_rem_euclid": false, "<usize as ops::euclid::Euclid>::div_euclid": true, "<usize as ops::euclid::Euclid>::rem_euclid": true, "<usize as ops::mul_add::MulAdd>::mul_add": true, "<usize as ops::mul_add::MulAddAssign>::mul_add_assign": true, "<usize as ops::overflowing::OverflowingAdd>::overflowing_add": false, "<usize as ops::overflowing::OverflowingMul>::overflowing_mul": true, "<usize as ops::overflowing::OverflowingSub>::overflowing_sub": true, "<usize as ops::saturating::Saturating>::saturating_add": true, "<usize as ops::saturating::Saturating>::saturating_sub": true, "<usize as ops::saturating::SaturatingAdd>::saturating_add": true, "<usize as ops::saturating::SaturatingMul>::saturating_mul": true, "<usize as ops::saturating::SaturatingSub>::saturating_sub": true, "<usize as ops::wrapping::WrappingAdd>::wrapping_add": true, "<usize as ops::wrapping::WrappingMul>::wrapping_mul": true, "<usize as ops::wrapping::WrappingNeg>::wrapping_neg": true, "<usize as ops::wrapping::WrappingShl>::wrapping_shl": true, "<usize as ops::wrapping::WrappingShr>::wrapping_shr": true, "<usize as ops::wrapping::WrappingSub>::wrapping_sub": true, "<usize as pow::Pow<&'a u16>>::pow": true, "<usize as pow::Pow<&'a u32>>::pow": false, "<usize as pow::Pow<&'a u8>>::pow": true, "<usize as pow::Pow<&'a usize>>::pow": false, "<usize as pow::Pow<u16>>::pow": true, "<usize as pow::Pow<u32>>::pow": true, "<usize as pow::Pow<u8>>::pow": true, "<usize as pow::Pow<usize>>::pow": true, "cast::FromPrimitive::from_f32": false, "cast::FromPrimitive::from_f64": true, "cast::FromPrimitive::from_i128": true, "cast::FromPrimitive::from_i16": false, "cast::FromPrimitive::from_i32": true, "cast::FromPrimitive::from_i8": true, "cast::FromPrimitive::from_isize": true, "cast::FromPrimitive::from_u128": true, "cast::FromPrimitive::from_u16": true, "cast::FromPrimitive::from_u32": true, "cast::FromPrimitive::from_u8": true, "cast::FromPrimitive::from_usize": true, "cast::ToPrimitive::to_f32": true, "cast::ToPrimitive::to_f64": false, "cast::ToPrimitive::to_i128": true, "cast::ToPrimitive::to_i16": true, "cast::ToPrimitive::to_i32": true, "cast::ToPrimitive::to_i8": true, "cast::ToPrimitive::to_isize": true, "cast::ToPrimitive::to_u128": true, "cast::ToPrimitive::to_u16": true, "cast::ToPrimitive::to_u32": true, "cast::ToPrimitive::to_u8": true, "cast::ToPrimitive::to_usize": true, "cast::cast": true, "clamp": true, "clamp_max": true, "clamp_min": true, "float::Float::copysign": true, "float::Float::epsilon": true, "float::Float::to_degrees": false, "float::Float::to_radians": true, "float::FloatConst::LOG10_2": true, "float::FloatConst::LOG2_10": true, "float::FloatConst::TAU": true, "float::FloatCore::abs": true, "float::FloatCore::ceil": true, "float::FloatCore::floor": true, "float::FloatCore::fract": true, "float::FloatCore::is_finite": true, "float::FloatCore::is_infinite": true, "float::FloatCore::is_nan": true, "float::FloatCore::is_normal": true, "float::FloatCore::is_sign_negative": true, "float::FloatCore::is_sign_positive": true, "float::FloatCore::max": false, "float::FloatCore::min": false, "float::FloatCore::powi": false, "float::FloatCore::recip": true, "float::FloatCore::round": false, "float::FloatCore::signum": true, "float::FloatCore::trunc": true, "float::integer_decode_f32": true, "float::integer_decode_f64": true, "identities::One::is_one": true, "identities::One::set_one": true, "identities::Zero::set_zero": true, "identities::one": true, "identities::zero": true, "int::PrimInt::leading_ones": true, "int::PrimInt::reverse_bits": true, "int::PrimInt::trailing_ones": true, "int::one_per_byte": true, "int::reverse_bits_fallback": true, "pow::checked_pow": false, "pow::float_impls::<impl pow::Pow<&'a f32> for &'b f32>::pow": false, "pow::float_impls::<impl pow::Pow<&'a f32> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a f32> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a f32> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a f64> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a f64> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i16> for &'b f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i16> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i16> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i16> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i32> for &'b f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i32> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i32> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i32> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i8> for &'b f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i8> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i8> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a i8> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u16> for &'b f32>::pow": false, "pow::float_impls::<impl pow::Pow<&'a u16> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u16> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u16> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u8> for &'b f32>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u8> for &'b f64>::pow": true, "pow::float_impls::<impl pow::Pow<&'a u8> for f32>::pow": false, "pow::float_impls::<impl pow::Pow<&'a u8> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<f32> for &'a f32>::pow": true, "pow::float_impls::<impl pow::Pow<f32> for &'a f64>::pow": false, "pow::float_impls::<impl pow::Pow<f32> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<f32> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<f64> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<f64> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<i16> for &'a f32>::pow": true, "pow::float_impls::<impl pow::Pow<i16> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<i16> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<i16> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<i32> for &'a f32>::pow": true, "pow::float_impls::<impl pow::Pow<i32> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<i32> for f32>::pow": false, "pow::float_impls::<impl pow::Pow<i32> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<i8> for &'a f32>::pow": true, "pow::float_impls::<impl pow::Pow<i8> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<i8> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<i8> for f64>::pow": false, "pow::float_impls::<impl pow::Pow<u16> for &'a f32>::pow": false, "pow::float_impls::<impl pow::Pow<u16> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<u16> for f32>::pow": true, "pow::float_impls::<impl pow::Pow<u16> for f64>::pow": true, "pow::float_impls::<impl pow::Pow<u8> for &'a f32>::pow": false, "pow::float_impls::<impl pow::Pow<u8> for &'a f64>::pow": true, "pow::float_impls::<impl pow::Pow<u8> for f32>::pow": false, "pow::float_impls::<impl pow::Pow<u8> for f64>::pow": true, "pow::pow": true, "sign::abs": true, "sign::abs_sub": true, "sign::signum": true, "str_to_ascii_lower_eq_str": true}