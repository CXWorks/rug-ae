{"rustc_demangle": "```rust\n#[cfg(test)]\nmod tests {\n    use super::rustc_demangle;\n    use std::ffi::CString;\n    use std::os::raw::{c_char, c_int};\n\n    #[test]\n    fn demangle_rust_symbol() {\n        let mangled = CString::new(\"_ZN3foo3barE\").expect(\"CString::new failed\");\n        let mangled_ptr: *const c_char = mangled.as_ptr();\n\n        let mut out = vec![0u8; 128];\n        let out_ptr = out.as_mut_ptr() as *mut c_char;\n\n        unsafe {\n            let result = rustc_demangle(mangled_ptr, out_ptr, out.len());\n            assert_eq!(result, 1);\n\n            let demangled_str = std::ffi::CStr::from_ptr(out_ptr).to_str().unwrap();\n            assert_eq!(demangled_str, \"foo::bar\\0\");\n        }\n    }\n\n    #[test]\n    fn non_rust_symbol() {\n        let non_rust = CString::new(\"NotRustSymbol\").expect(\"CString::new failed\");\n        let non_rust_ptr: *const c_char = non_rust.as_ptr();\n\n        let mut out = vec![0u8; 128];\n        let out_ptr = out.as_mut_ptr() as *mut c_char;\n\n        unsafe {\n            let result = rustc_demangle(non_rust_ptr, out_ptr, out.len());\n            assert_eq!(result, 0);\n        }\n    }\n\n    #[test]\n    fn buffer_too_small() {\n        let mangled = CString::new(\"_ZN3foo3barE\").expect(\"CString::new failed\");\n        let mangled_ptr: *const c_char = mangled.as_ptr();\n\n        let mut out = vec![0u8; 4];  // deliberately small buffer\n        let out_ptr = out.as_mut_ptr() as *mut c_char;\n\n        unsafe {\n            let result = rustc_demangle(mangled_ptr, out_ptr, out.len());\n            assert_eq!(result, 0);\n        }\n    }\n}\n```"}