-----------------
src/legacy.rs legacy::demangle
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+legacy::demangle(&p0);
+crate::legacy::demangle(&p0);
+crate::legacy::demangle(&p0);
-----------------
src/legacy.rs legacy::is_rust_hash
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+legacy::is_rust_hash(&p0);
+crate::legacy::is_rust_hash(&p0);
+crate::legacy::is_rust_hash(&p0);
-----------------
src/v0.rs v0::demangle
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+v0::demangle(&p0);
+crate::v0::demangle(&p0);
+crate::v0::demangle(&p0);
-----------------
src/v0.rs v0::HexNibbles::<'s>::try_parse_str_chars::{closure#2}::{closure#0}::utf8_len_from_first_byte
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+v0::HexNibbles::<'s>::try_parse_str_chars::{closure#2}::{closure#0}::utf8_len_from_first_byte(p0);
+crate::v0::HexNibbles::<'s>::try_parse_str_chars::{closure#2}::{closure#0}::utf8_len_from_first_byte(p0);
+<v0::HexNibbles<'s>>::try_parse_str_chars::utf8_len_from_first_byte(p0);
-----------------
src/v0.rs v0::basic_type
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+v0::basic_type(p0);
+crate::v0::basic_type(p0);
+crate::v0::basic_type(p0);
-----------------
src/lib.rs demangle
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+demangle(&p0);
+crate::demangle(&p0);
+crate::demangle(&p0);
-----------------
src/lib.rs try_demangle
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+try_demangle(&p0);
+crate::try_demangle(&p0);
+crate::try_demangle(&p0);
-----------------
src/lib.rs is_symbol_like
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+is_symbol_like(&p0);
+crate::is_symbol_like(&p0);
+crate::is_symbol_like(&p0);
-----------------
src/lib.rs is_ascii_alphanumeric
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+is_ascii_alphanumeric(p0);
+crate::is_ascii_alphanumeric(p0);
+crate::is_ascii_alphanumeric(p0);
-----------------
src/lib.rs is_ascii_punctuation
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+is_ascii_punctuation(p0);
+crate::is_ascii_punctuation(p0);
+crate::is_ascii_punctuation(p0);
-----------------
src/legacy.rs <legacy::Demangle<'a> as std::fmt::Display>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // legacy::Demangle<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<legacy::Demangle<'a> as std::fmt::Display>::fmt(p0, p1);
+crate::<legacy::Demangle<'a> as std::fmt::Display>::fmt(p0, p1);
+<legacy::Demangle<'a>>::fmt(p0, p1);
-----------------
src/v0.rs <v0::ParseError as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::ParseError
let mut p1 = & MaybeUninit::uninit().assume_init(); // v0::ParseError
+p0.eq(p1);
+<v0::ParseError as std::cmp::PartialEq>::eq(p0, p1);
+crate::<v0::ParseError as std::cmp::PartialEq>::eq(p0, p1);
+<v0::ParseError>::eq(p0, p1);
-----------------
src/v0.rs <v0::ParseError as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::ParseError
+p0.assert_receiver_is_total_eq();
+<v0::ParseError as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<v0::ParseError as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<v0::ParseError>::assert_receiver_is_total_eq(p0);
-----------------
src/v0.rs <v0::ParseError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::ParseError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<v0::ParseError as std::fmt::Debug>::fmt(p0, p1);
+crate::<v0::ParseError as std::fmt::Debug>::fmt(p0, p1);
+<v0::ParseError>::fmt(p0, p1);
-----------------
src/v0.rs <v0::Demangle<'s> as std::fmt::Display>::fmt
's
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::Demangle<'s>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<v0::Demangle<'s> as std::fmt::Display>::fmt(p0, p1);
+crate::<v0::Demangle<'s> as std::fmt::Display>::fmt(p0, p1);
+<v0::Demangle<'s>>::fmt(p0, p1);
-----------------
src/v0.rs v0::Ident::<'s>::try_small_punycode_decode
's
deps:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Ident::<'s>::try_small_punycode_decode":{"F":["std::marker::Sized","std::ops::FnOnce"],"R":["std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Ident::<'s>::try_small_punycode_decode":{"F":["core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::panic::AssertUnwindSafe<F>","core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeUnicode","core::str::IsWhitespace","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty"],"R":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::Ident<'s>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.try_small_punycode_decode(p1);
+v0::Ident::<'s>::try_small_punycode_decode(p0, p1);
+crate::v0::Ident::<'s>::try_small_punycode_decode(p0, p1);
+<v0::Ident<'s>>::try_small_punycode_decode(p0, p1);
-----------------
src/v0.rs v0::Ident::<'s>::punycode_decode
's
deps:{"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"v0::Ident::<'s>::punycode_decode":{"F":["std::marker::Sized","std::ops::FnMut"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"v0::Ident::<'s>::punycode_decode":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::str::CharEscapeDebugContinue","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsWhitespace","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::LinesAnyMap"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::Ident<'s>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.punycode_decode(p1);
+v0::Ident::<'s>::punycode_decode(p0, p1);
+crate::v0::Ident::<'s>::punycode_decode(p0, p1);
+<v0::Ident<'s>>::punycode_decode(p0, p1);
-----------------
src/v0.rs <v0::Ident<'s> as std::fmt::Display>::fmt
's
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::Ident<'s>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<v0::Ident<'s> as std::fmt::Display>::fmt(p0, p1);
+crate::<v0::Ident<'s> as std::fmt::Display>::fmt(p0, p1);
+<v0::Ident<'s>>::fmt(p0, p1);
-----------------
src/v0.rs v0::HexNibbles::<'s>::try_parse_uint
's
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::HexNibbles<'s>
+p0.try_parse_uint();
+v0::HexNibbles::<'s>::try_parse_uint(p0);
+crate::v0::HexNibbles::<'s>::try_parse_uint(p0);
+<v0::HexNibbles<'s>>::try_parse_uint(p0);
-----------------
src/v0.rs v0::HexNibbles::<'s>::try_parse_str_chars
's
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::HexNibbles<'s>
+p0.try_parse_str_chars();
+v0::HexNibbles::<'s>::try_parse_str_chars(p0);
+crate::v0::HexNibbles::<'s>::try_parse_str_chars(p0);
+<v0::HexNibbles<'s>>::try_parse_str_chars(p0);
-----------------
src/v0.rs v0::Parser::<'s>::push_depth
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.push_depth();
+v0::Parser::<'s>::push_depth(p0);
+crate::v0::Parser::<'s>::push_depth(p0);
+<v0::Parser<'s>>::push_depth(p0);
-----------------
src/v0.rs v0::Parser::<'s>::pop_depth
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.pop_depth();
+v0::Parser::<'s>::pop_depth(p0);
+crate::v0::Parser::<'s>::pop_depth(p0);
+<v0::Parser<'s>>::pop_depth(p0);
-----------------
src/v0.rs v0::Parser::<'s>::peek
's
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.peek();
+v0::Parser::<'s>::peek(p0);
+crate::v0::Parser::<'s>::peek(p0);
+<v0::Parser<'s>>::peek(p0);
-----------------
src/v0.rs v0::Parser::<'s>::eat
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
let mut p1 = 0u8; // None+u8
+p0.eat(p1);
+v0::Parser::<'s>::eat(p0, p1);
+crate::v0::Parser::<'s>::eat(p0, p1);
+<v0::Parser<'s>>::eat(p0, p1);
-----------------
src/v0.rs v0::Parser::<'s>::next
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.next();
+v0::Parser::<'s>::next(p0);
+crate::v0::Parser::<'s>::next(p0);
+<v0::Parser<'s>>::next(p0);
-----------------
src/v0.rs v0::Parser::<'s>::hex_nibbles
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.hex_nibbles();
+v0::Parser::<'s>::hex_nibbles(p0);
+crate::v0::Parser::<'s>::hex_nibbles(p0);
+<v0::Parser<'s>>::hex_nibbles(p0);
-----------------
src/v0.rs v0::Parser::<'s>::digit_10
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.digit_10();
+v0::Parser::<'s>::digit_10(p0);
+crate::v0::Parser::<'s>::digit_10(p0);
+<v0::Parser<'s>>::digit_10(p0);
-----------------
src/v0.rs v0::Parser::<'s>::digit_62
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.digit_62();
+v0::Parser::<'s>::digit_62(p0);
+crate::v0::Parser::<'s>::digit_62(p0);
+<v0::Parser<'s>>::digit_62(p0);
-----------------
src/v0.rs v0::Parser::<'s>::integer_62
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.integer_62();
+v0::Parser::<'s>::integer_62(p0);
+crate::v0::Parser::<'s>::integer_62(p0);
+<v0::Parser<'s>>::integer_62(p0);
-----------------
src/v0.rs v0::Parser::<'s>::opt_integer_62
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
let mut p1 = 0u8; // None+u8
+p0.opt_integer_62(p1);
+v0::Parser::<'s>::opt_integer_62(p0, p1);
+crate::v0::Parser::<'s>::opt_integer_62(p0, p1);
+<v0::Parser<'s>>::opt_integer_62(p0, p1);
-----------------
src/v0.rs v0::Parser::<'s>::disambiguator
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.disambiguator();
+v0::Parser::<'s>::disambiguator(p0);
+crate::v0::Parser::<'s>::disambiguator(p0);
+<v0::Parser<'s>>::disambiguator(p0);
-----------------
src/v0.rs v0::Parser::<'s>::namespace
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.namespace();
+v0::Parser::<'s>::namespace(p0);
+crate::v0::Parser::<'s>::namespace(p0);
+<v0::Parser<'s>>::namespace(p0);
-----------------
src/v0.rs v0::Parser::<'s>::backref
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.backref();
+v0::Parser::<'s>::backref(p0);
+crate::v0::Parser::<'s>::backref(p0);
+<v0::Parser<'s>>::backref(p0);
-----------------
src/v0.rs v0::Parser::<'s>::ident
's
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Parser<'s>
+p0.ident();
+v0::Parser::<'s>::ident(p0);
+crate::v0::Parser::<'s>::ident(p0);
+<v0::Parser<'s>>::ident(p0);
-----------------
src/v0.rs v0::ParseError::message
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // v0::ParseError
+p0.message();
+v0::ParseError::message(p0);
+crate::v0::ParseError::message(p0);
+<v0::ParseError>::message(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::eat
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = 0u8; // None+u8
+p0.eat(p1);
+v0::Printer::<'a, 'b, 's>::eat(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::eat(p0, p1);
+<v0::Printer<'a, 'b, 's>>::eat(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::skipping_printing
'a,'b,'s
deps:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::skipping_printing":{"F":["std::ops::FnOnce","std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::skipping_printing":{"F":["core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::CharEscapeDefault","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","std::panic::AssertUnwindSafe<F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.skipping_printing(p1);
+v0::Printer::<'a, 'b, 's>::skipping_printing(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::skipping_printing(p0, p1);
+<v0::Printer<'a, 'b, 's>>::skipping_printing(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_backref
'a,'b,'s
deps:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::print_backref":{"F":["std::ops::FnOnce","std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::print_backref":{"F":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsNotEmpty","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::panic::AssertUnwindSafe<F>","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.print_backref(p1);
+v0::Printer::<'a, 'b, 's>::print_backref(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print_backref(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print_backref(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::pop_depth
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.pop_depth();
+v0::Printer::<'a, 'b, 's>::pop_depth(p0);
+crate::v0::Printer::<'a, 'b, 's>::pop_depth(p0);
+<v0::Printer<'a, 'b, 's>>::pop_depth(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print
'a,'b,'s
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"v0::Printer::<'a, 'b, 's>::print":{"impl fmt::Display":["std::fmt::Display","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"v0::Printer::<'a, 'b, 's>::print":{"impl fmt::Display":["legacy::Demangle","<&mut T as std::fmt::Display>","v0::Ident","<&T as std::fmt::Display>","v0::Demangle","DemangleStyle","Demangle"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl fmt::Display
+p0.print(p1);
+v0::Printer::<'a, 'b, 's>::print(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_quoted_escaped_chars
'a,'b,'s
deps:{"<&mut I as std::iter::Iterator>":{},"v0::Printer::<'a, 'b, 's>::print_quoted_escaped_chars":{"impl Iterator<Item = char>":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"v0::Printer::<'a, 'b, 's>::print_quoted_escaped_chars":{"impl Iterator<Item = char>":["std::char::CaseMappingIter","std::vec::Drain<'_, T, A>","std::slice::ArrayChunksMut<'a, T, N>","std::io::Split<B>","std::slice::GroupBy<'a, T, P>","std::collections::hash_map::Drain<'a, K, V>","std::iter::Empty<T>","std::io::Bytes<R>","std::ascii::EscapeDefault","std::slice::RChunksExactMut<'a, T>","std::slice::Windows<'a, T>","std::iter::TakeWhile<I, P>","std::sys::unix::os::SplitPaths<'a>","std::str::Matches<'a, P>","std::iter::Cloned<I>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::IterMut<'a, T>","std::sys::unix::args::Args","std::iter::Once<T>","std::collections::hash_set::Difference<'a, T, S>","std::sys::unix::os::Env","core::error::Source<'a>","std::path::Iter<'a>","<&mut I as std::iter::Iterator>","std::str::RSplitN<'a, P>","std::str::EscapeDebug<'a>","std::iter::FromFn<F>","std::char::EscapeDebug","std::path::Ancestors<'a>","std::str::EscapeDefault<'a>","std::option::Item<A>","std::iter::RepeatN<A>","std::slice::RSplitMut<'a, T, P>","std::iter::FilterMap<I, F>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::RSplit<'a, P>","std::collections::hash_map::IntoKeys<K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Fuse<I>","std::path::Components<'a>","std::os::unix::net::Incoming<'a>","std::slice::SplitMut<'a, T, P>","std::iter::MapWhile<I, P>","std::collections::binary_heap::IntoIterSorted<T>","std::os::unix::net::ScmRights<'a>","std::slice::ArrayChunks<'a, T, N>","std::iter::Copied<I>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Inspect<I, F>","std::iter::Skip<I>","std::slice::RChunks<'a, T>","std::collections::btree_set::SymmetricDifference<'a, T>","core::slice::iter::GenericSplitN<I>","std::str::CharIndices<'a>","std::collections::btree_set::Iter<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_set::Drain<'a, K>","std::collections::hash_map::Keys<'a, K, V>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Peekable<I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::Split<'a, T, P>","std::iter::Take<I>","std::str::SplitWhitespace<'a>","std::vec::IntoIter<T, A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::result::IterMut<'a, T>","std::slice::GroupByMut<'a, T, P>","std::array::IntoIter<T, N>","std::collections::btree_map::Range<'a, K, V>","std::iter::SkipWhile<I, P>","std::ops::Range<A>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::OnceWith<F>","std::str::Split<'a, P>","std::str::SplitN<'a, P>","std::iter::StepBy<I>","std::result::Iter<'a, T>","std::slice::RSplitN<'a, T, P>","std::env::Args","std::iter::RepeatWith<F>","std::str::LinesAny<'a>","std::slice::RSplitNMut<'a, T, P>","std::collections::vec_deque::IterMut<'a, T>","std::env::VarsOs","std::str::EscapeUnicode<'a>","std::collections::btree_set::Range<'a, T>","std::sync::mpsc::IntoIter<T>","std::vec::Splice<'_, I, A>","std::str::MatchIndices<'a, P>","std::boxed::Box<I, A>","std::char::DecodeUtf16<I>","std::string::Drain<'_>","std::collections::linked_list::IterMut<'a, T>","std::iter::Repeat<A>","std::collections::binary_heap::Iter<'a, T>","std::ops::RangeInclusive<A>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::linked_list::Iter<'a, T>","std::env::SplitPaths<'a>","std::slice::ChunksMut<'a, T>","std::result::IntoIter<T>","std::collections::btree_set::Difference<'a, T, A>","std::io::Lines<B>","std::collections::vec_deque::Drain<'_, T, A>","std::env::ArgsOs","std::collections::hash_map::IntoIter<K, V>","std::iter::Flatten<I>","std::slice::ChunksExact<'a, T>","std::iter::Chain<A, B>","std::slice::RChunksMut<'a, T>","std::iter::Scan<I, St, F>","std::sync::mpsc::TryIter<'a, T>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::os::unix::net::Messages<'a>","std::collections::linked_list::IntoIter<T>","std::str::RSplitTerminator<'a, P>","std::option::IntoIter<A>","std::net::Incoming<'a>","std::sys_common::net::LookupHost","std::ops::RangeFrom<A>","std::iter::ByRefSized<'_, I>","std::str::SplitInclusive<'a, P>","std::process::CommandArgs<'a>","std::str::RMatchIndices<'a, P>","std::collections::binary_heap::IntoIter<T>","std::option::Iter<'a, A>","std::slice::SplitInclusive<'a, T, P>","std::iter::Rev<I>","std::slice::RSplit<'a, T, P>","std::iter::IntersperseWith<I, G>","std::collections::hash_set::Iter<'a, K>","std::collections::btree_map::RangeMut<'a, K, V>","std::option::IterMut<'a, A>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::char::EscapeUnicode","std::collections::btree_set::Union<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::ArrayChunks<I, N>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::Iter<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::char::ToLowercase","std::sys::unix::fs::ReadDir","std::collections::btree_map::IntoIter<K, V, A>","std::slice::Chunks<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::char::ToUppercase","std::collections::vec_deque::IntoIter<T, A>","std::fs::ReadDir","std::slice::EscapeAscii<'a>","std::collections::vec_deque::Iter<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Zip<A, B>","std::iter::FlatMap<I, U, F>","std::str::Utf8Chunks<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::EncodeUtf16<'a>","std::str::RMatches<'a, P>","std::iter::Cycle<I>","std::slice::SplitN<'a, T, P>","std::env::Vars","std::net::IntoIncoming","std::iter::Map<I, F>","std::iter::Intersperse<I>","std::iter::Enumerate<I>","std::process::CommandEnvs<'a>","std::collections::hash_map::IntoValues<K, V>","std::char::EscapeDefault","std::ops::index_range::IndexRange","std::slice::RChunksExact<'a, T>","std::str::SplitAsciiWhitespace<'a>","std::slice::ChunksExactMut<'a, T>","std::str::Lines<'a>","std::slice::ArrayWindows<'a, T, N>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Successors<T, F>","std::slice::SplitNMut<'a, T, P>","std::str::SplitTerminator<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_set::IntoIter<K>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::str::Bytes<'_>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_map::Values<'a, K, V>","std::collections::btree_map::Iter<'a, K, V>","std::sync::mpsc::Iter<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::Filter<I, P>","std::collections::binary_heap::Drain<'_, T>","std::str::Chars<'a>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = 'a'; // None+char
let mut p2 = MaybeUninit::uninit().assume_init(); // impl Iterator<Item = char>
+p0.print_quoted_escaped_chars(p1, p2);
+v0::Printer::<'a, 'b, 's>::print_quoted_escaped_chars(p0, p1, p2);
+crate::v0::Printer::<'a, 'b, 's>::print_quoted_escaped_chars(p0, p1, p2);
+<v0::Printer<'a, 'b, 's>>::print_quoted_escaped_chars(p0, p1, p2);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_lifetime_from_index
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = 0u64; // None+u64
+p0.print_lifetime_from_index(p1);
+v0::Printer::<'a, 'b, 's>::print_lifetime_from_index(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print_lifetime_from_index(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print_lifetime_from_index(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::in_binder
'a,'b,'s
deps:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::in_binder":{"F":["std::marker::Sized","std::ops::FnOnce"]}}
candidates:{"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"v0::Printer::<'a, 'b, 's>::in_binder":{"F":["std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDefault","core::str::LinesAnyMap","std::panic::AssertUnwindSafe<F>","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::IsAsciiWhitespace","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.in_binder(p1);
+v0::Printer::<'a, 'b, 's>::in_binder(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::in_binder(p0, p1);
+<v0::Printer<'a, 'b, 's>>::in_binder(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_sep_list
'a,'b,'s
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"v0::Printer::<'a, 'b, 's>::print_sep_list":{"F":["std::marker::Sized","std::ops::Fn"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"v0::Printer::<'a, 'b, 's>::print_sep_list":{"F":["core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::LinesAnyMap","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::IsNotEmpty","core::str::BytesIsNotEmpty"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
let mut p2 = "sample"; // None+&str
+p0.print_sep_list(p1, &p2);
+v0::Printer::<'a, 'b, 's>::print_sep_list(p0, p1, &p2);
+crate::v0::Printer::<'a, 'b, 's>::print_sep_list(p0, p1, &p2);
+<v0::Printer<'a, 'b, 's>>::print_sep_list(p0, p1, &p2);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_path
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = true; // None+bool
+p0.print_path(p1);
+v0::Printer::<'a, 'b, 's>::print_path(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print_path(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print_path(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_generic_arg
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.print_generic_arg();
+v0::Printer::<'a, 'b, 's>::print_generic_arg(p0);
+crate::v0::Printer::<'a, 'b, 's>::print_generic_arg(p0);
+<v0::Printer<'a, 'b, 's>>::print_generic_arg(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_type
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.print_type();
+v0::Printer::<'a, 'b, 's>::print_type(p0);
+crate::v0::Printer::<'a, 'b, 's>::print_type(p0);
+<v0::Printer<'a, 'b, 's>>::print_type(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_path_maybe_open_generics
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.print_path_maybe_open_generics();
+v0::Printer::<'a, 'b, 's>::print_path_maybe_open_generics(p0);
+crate::v0::Printer::<'a, 'b, 's>::print_path_maybe_open_generics(p0);
+<v0::Printer<'a, 'b, 's>>::print_path_maybe_open_generics(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_dyn_trait
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.print_dyn_trait();
+v0::Printer::<'a, 'b, 's>::print_dyn_trait(p0);
+crate::v0::Printer::<'a, 'b, 's>::print_dyn_trait(p0);
+<v0::Printer<'a, 'b, 's>>::print_dyn_trait(p0);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_const
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = true; // None+bool
+p0.print_const(p1);
+v0::Printer::<'a, 'b, 's>::print_const(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print_const(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print_const(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_const_uint
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
let mut p1 = 0u8; // None+u8
+p0.print_const_uint(p1);
+v0::Printer::<'a, 'b, 's>::print_const_uint(p0, p1);
+crate::v0::Printer::<'a, 'b, 's>::print_const_uint(p0, p1);
+<v0::Printer<'a, 'b, 's>>::print_const_uint(p0, p1);
-----------------
src/v0.rs v0::Printer::<'a, 'b, 's>::print_const_str_literal
'a,'b,'s
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // v0::Printer<'a, 'b, 's>
+p0.print_const_str_literal();
+v0::Printer::<'a, 'b, 's>::print_const_str_literal(p0);
+crate::v0::Printer::<'a, 'b, 's>::print_const_str_literal(p0);
+<v0::Printer<'a, 'b, 's>>::print_const_str_literal(p0);
-----------------
src/lib.rs <TryDemangleError as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // TryDemangleError
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<TryDemangleError as std::fmt::Debug>::fmt(p0, p1);
+crate::<TryDemangleError as std::fmt::Debug>::fmt(p0, p1);
+<TryDemangleError>::fmt(p0, p1);
-----------------
src/lib.rs <TryDemangleError as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // TryDemangleError
+p0.clone();
+<TryDemangleError as std::clone::Clone>::clone(p0);
+crate::<TryDemangleError as std::clone::Clone>::clone(p0);
+<TryDemangleError>::clone(p0);
-----------------
src/lib.rs Demangle::<'a>::as_str
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Demangle<'a>
+p0.as_str();
+Demangle::<'a>::as_str(p0);
+crate::Demangle::<'a>::as_str(p0);
+<Demangle<'a>>::as_str(p0);
-----------------
src/lib.rs <DemangleStyle<'a> as std::fmt::Display>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // DemangleStyle<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<DemangleStyle<'a> as std::fmt::Display>::fmt(p0, p1);
+crate::<DemangleStyle<'a> as std::fmt::Display>::fmt(p0, p1);
+<DemangleStyle<'a>>::fmt(p0, p1);
-----------------
src/lib.rs <SizeLimitExhausted as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SizeLimitExhausted
+p0.clone();
+<SizeLimitExhausted as std::clone::Clone>::clone(p0);
+crate::<SizeLimitExhausted as std::clone::Clone>::clone(p0);
+<SizeLimitExhausted>::clone(p0);
-----------------
src/lib.rs <SizeLimitExhausted as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SizeLimitExhausted
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<SizeLimitExhausted as std::fmt::Debug>::fmt(p0, p1);
+crate::<SizeLimitExhausted as std::fmt::Debug>::fmt(p0, p1);
+<SizeLimitExhausted>::fmt(p0, p1);
-----------------
src/lib.rs <SizeLimitedFmtAdapter<F> as std::fmt::Write>::write_str
deps:{"<&mut W as std::fmt::Write>":{},"<SizeLimitedFmtAdapter<F> as std::fmt::Write>::write_str":{"F":["std::marker::Sized","std::fmt::Write"]},"SizeLimitedFmtAdapter":{"F":["std::fmt::Write","std::marker::Sized"]}}
candidates:{"<&mut W as std::fmt::Write>":{},"<SizeLimitedFmtAdapter<F> as std::fmt::Write>::write_str":{"F":["SizeLimitedFmtAdapter","<&mut W as std::fmt::Write>"]},"SizeLimitedFmtAdapter":{"F":["SizeLimitedFmtAdapter","<&mut W as std::fmt::Write>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // SizeLimitedFmtAdapter<F>
let mut p1 = "sample"; // None+&str
+p0.write_str(&p1);
+<SizeLimitedFmtAdapter<F> as std::fmt::Write>::write_str(p0, &p1);
+crate::<SizeLimitedFmtAdapter<F> as std::fmt::Write>::write_str(p0, &p1);
+<SizeLimitedFmtAdapter<F>>::write_str(p0, &p1);
-----------------
src/lib.rs <Demangle<'a> as std::fmt::Display>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Demangle<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<Demangle<'a> as std::fmt::Display>::fmt(p0, p1);
+crate::<Demangle<'a> as std::fmt::Display>::fmt(p0, p1);
+<Demangle<'a>>::fmt(p0, p1);
-----------------
src/lib.rs <Demangle<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Demangle<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<Demangle<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<Demangle<'a> as std::fmt::Debug>::fmt(p0, p1);
+<Demangle<'a>>::fmt(p0, p1);