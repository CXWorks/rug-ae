{"dependencies":{"<spanned::Spanned<T> as std::clone::Clone>::clone":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<T> as std::cmp::Ord>::cmp":["spanned::Spanned","std::cmp::Ordering","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<T> as std::cmp::PartialEq>::eq":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<T> as std::cmp::PartialOrd>::partial_cmp":["spanned::Spanned","std::marker::Sized","std::ops::Range","std::option::Option"],"<spanned::Spanned<T> as std::convert::AsMut<T>>::as_mut":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<T> as std::convert::AsRef<T>>::as_ref":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<T> as std::fmt::Debug>::fmt":["spanned::Spanned","std::fmt::Formatter","std::marker::Sized","std::ops::Range","std::result::Result"],"<spanned::Spanned<T> as std::hash::Hash>::hash":["spanned::Spanned","std::hash::Hasher","std::marker::Sized","std::ops::Range"],"<spanned::Spanned<std::string::String> as std::borrow::Borrow<str>>::borrow":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"spanned::Spanned":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"spanned::Spanned::<T>::get_mut":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"spanned::Spanned::<T>::get_ref":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"spanned::Spanned::<T>::into_inner":["spanned::Spanned","std::marker::Sized","std::ops::Range"],"spanned::Spanned::<T>::span":["spanned::Spanned","std::marker::Sized","std::ops::Range"]},"glob_path_import":{},"self_to_fn":{"spanned::Spanned":["Clone","Debug","impl std::borrow::Borrow<str> for Spanned<String> {\n    fn borrow(&self) -> &str {\n        self.get_ref()\n    }\n}","impl<T: Eq> Eq for Spanned<T> {}","impl<T: Hash> Hash for Spanned<T> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        self.value.hash(state);\n    }\n}","impl<T: Ord> Ord for Spanned<T> {\n    fn cmp(&self, other: &Self) -> Ordering {\n        self.value.cmp(&other.value)\n    }\n}","impl<T: PartialEq> PartialEq for Spanned<T> {\n    fn eq(&self, other: &Self) -> bool {\n        self.value.eq(&other.value)\n    }\n}","impl<T: PartialOrd> PartialOrd for Spanned<T> {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        self.value.partial_cmp(&other.value)\n    }\n}","impl<T> AsMut<T> for Spanned<T> {\n    fn as_mut(&mut self) -> &mut T {\n        self.get_mut()\n    }\n}","impl<T> AsRef<T> for Spanned<T> {\n    fn as_ref(&self) -> &T {\n        self.get_ref()\n    }\n}","impl<T> Spanned<T> {\n    /// Byte range\n    pub fn span(&self) -> std::ops::Range<usize> {\n        self.span.clone()\n    }\n\n    /// Consumes the spanned value and returns the contained value.\n    pub fn into_inner(self) -> T {\n        self.value\n    }\n\n    /// Returns a reference to the contained value.\n    pub fn get_ref(&self) -> &T {\n        &self.value\n    }\n\n    /// Returns a mutable reference to the contained value.\n    pub fn get_mut(&mut self) -> &mut T {\n        &mut self.value\n    }\n}"]},"single_path_import":{"spanned::Spanned":"Spanned"},"srcs":{"<spanned::Spanned<T> as std::cmp::Ord>::cmp":["fn cmp(&self, other: &Self) -> Ordering{\n        self.value.cmp(&other.value)\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<T> as std::cmp::PartialEq>::eq":["fn eq(&self, other: &Self) -> bool{\n        self.value.eq(&other.value)\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<T> as std::cmp::PartialOrd>::partial_cmp":["fn partial_cmp(&self, other: &Self) -> Option<Ordering>{\n        self.value.partial_cmp(&other.value)\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<T> as std::convert::AsMut<T>>::as_mut":["fn as_mut(&mut self) -> &mut T{\n        self.get_mut()\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<T> as std::convert::AsRef<T>>::as_ref":["fn as_ref(&self) -> &T{\n        self.get_ref()\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<T> as std::hash::Hash>::hash":["fn hash<H: Hasher>(&self, state: &mut H){\n        self.value.hash(state);\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"<spanned::Spanned<std::string::String> as std::borrow::Borrow<str>>::borrow":["fn borrow(&self) -> &str{\n        self.get_ref()\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"spanned::Spanned":["/// A spanned value, indicating the range at which it is defined in the source.\npub struct Spanned<T> {\n    /// Byte range\n    span: std::ops::Range<usize>,\n    /// The spanned value.\n    value: T,\n}","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"spanned::Spanned::<T>::get_mut":["/// Returns a mutable reference to the contained value.\npub fn get_mut(&mut self) -> &mut T{\n        &mut self.value\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"spanned::Spanned::<T>::get_ref":["/// Returns a reference to the contained value.\npub fn get_ref(&self) -> &T{\n        &self.value\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"spanned::Spanned::<T>::into_inner":["/// Consumes the spanned value and returns the contained value.\npub fn into_inner(self) -> T{\n        self.value\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"],"spanned::Spanned::<T>::span":["/// Byte range\npub fn span(&self) -> std::ops::Range<usize>{\n        self.span.clone()\n    }","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))"]},"struct_constructor":{"&str":["borrow"],"bool":["eq"],"spanned::Spanned":["clone"],"std::cmp::Ordering":["cmp","partial_cmp"],"std::ops::Range":["span"]},"struct_to_trait":{"spanned::Spanned":["std::borrow::Borrow","std::clone::Clone","std::cmp::Eq","std::cmp::Ord","std::cmp::PartialEq","std::cmp::PartialOrd","std::convert::AsMut","std::convert::AsRef","std::fmt::Debug","std::hash::Hash"]},"targets":{"<spanned::Spanned<T> as std::cmp::Ord>::cmp":["cmp","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::cmp::Ord"],"<spanned::Spanned<T> as std::cmp::PartialEq>::eq":["eq","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::cmp::PartialEq"],"<spanned::Spanned<T> as std::cmp::PartialOrd>::partial_cmp":["partial_cmp","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::cmp::PartialOrd"],"<spanned::Spanned<T> as std::convert::AsMut<T>>::as_mut":["as_mut","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::convert::AsMut"],"<spanned::Spanned<T> as std::convert::AsRef<T>>::as_ref":["as_ref","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::convert::AsRef"],"<spanned::Spanned<T> as std::hash::Hash>::hash":["hash","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::hash::Hash"],"<spanned::Spanned<std::string::String> as std::borrow::Borrow<str>>::borrow":["borrow","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))","std::borrow::Borrow"],"spanned::Spanned::<T>::get_mut":["get_mut","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))",""],"spanned::Spanned::<T>::get_ref":["get_ref","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))",""],"spanned::Spanned::<T>::into_inner":["into_inner","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))",""],"spanned::Spanned::<T>::span":["span","Real(LocalPath(\"crates/serde_spanned/src/spanned.rs\"))",""]},"trait_to_struct":{"std::borrow::Borrow":["spanned::Spanned"],"std::clone::Clone":["spanned::Spanned"],"std::cmp::Eq":["spanned::Spanned"],"std::cmp::Ord":["spanned::Spanned"],"std::cmp::PartialEq":["spanned::Spanned"],"std::cmp::PartialOrd":["spanned::Spanned"],"std::convert::AsMut":["spanned::Spanned"],"std::convert::AsRef":["spanned::Spanned"],"std::fmt::Debug":["spanned::Spanned"],"std::hash::Hash":["spanned::Spanned"]},"type_to_def_path":{"spanned::Spanned<T>":"spanned::Spanned"}}