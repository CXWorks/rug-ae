//! A fallback for any OS not covered.

use crate::{OffsetDateTime, UtcOffset};

pub(super) fn local_offset_at(_datetime: OffsetDateTime) -> Option<UtcOffset> {
    None
}

#[cfg(test)]
mod rusty_tests {
	use crate::*;

//#[no_coverage]
#[test]
//#[should_panic]
#[timeout(30000)]fn rusty_test_7525() {
//    rusty_monitor::set_test_id(7525);
    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Sunday;
    let mut f32_0: f32 = 1315859240.000000f32;
    let mut i128_0: i128 = 1000000i128;
    let mut i64_0: i64 = 1000000000i64;
    let mut i64_1: i64 = -99i64;
    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
    let mut i8_0: i8 = 5i8;
    let mut i8_1: i8 = 0i8;
    let mut i8_2: i8 = 3i8;
    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
    let mut i64_2: i64 = 24i64;
    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
    let mut i32_0: i32 = 111i32;
    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
    let mut i64_3: i64 = -31i64;
    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
    let mut i32_1: i32 = 365i32;
    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
    let mut i64_4: i64 = 60i64;
    let mut duration_5: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
    let mut i32_2: i32 = 6i32;
    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
    let mut f32_1: f32 = 1315859240.000000f32;
    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
    let mut i32_3: i32 = 4i32;
    let mut i64_5: i64 = 1000000i64;
    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new(i64_5, i32_3);
    let mut i64_6: i64 = 12i64;
    let mut duration_8: crate::duration::Duration = crate::duration::Duration::weeks(i64_6);
    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_8, duration_7);
    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_9);
    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
    let mut i64_7: i64 = 1i64;
    let mut duration_10: crate::duration::Duration = crate::duration::Duration::hours(i64_7);
    let mut i8_3: i8 = 36i8;
    let mut i8_4: i8 = 3i8;
    let mut i8_5: i8 = 3i8;
    let mut i8_6: i8 = -47i8;
    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
    let mut i64_8: i64 = 60i64;
    let mut duration_11: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
    let mut i8_7: i8 = 60i8;
    let mut i8_8: i8 = 1i8;
    let mut i8_9: i8 = 0i8;
    let mut i64_9: i64 = 12i64;
    let mut duration_12: crate::duration::Duration = crate::duration::Duration::microseconds(i64_8);
    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
    let mut duration_13: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
    let mut duration_14: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_12, duration_5);
    let mut u32_0: u32 = 1000000u32;
    let mut u8_0: u8 = 11u8;
    let mut u8_1: u8 = 31u8;
    let mut i64_10: i64 = -101i64;
    let mut duration_15: crate::duration::Duration = crate::duration::Duration::microseconds(i64_9);
    let mut i128_1: i128 = 1000000000i128;
    let mut duration_16: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
    let mut duration_17: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_6, duration_15);
    let mut i8_10: i8 = 127i8;
    let mut i8_11: i8 = 1i8;
    let mut i8_12: i8 = 0i8;
    let mut u8_2: u8 = 52u8;
    let mut u8_3: u8 = 11u8;
    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_0, u8_1, u8_2, u32_0);
    let mut duration_18: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
    let mut i8_13: i8 = 1i8;
    let mut i8_14: i8 = 43i8;
    let mut i8_15: i8 = 24i8;
    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_10, i8_12, i8_7);
    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
    let mut u8_4: u8 = 7u8;
    let mut u8_5: u8 = 62u8;
    let mut u8_6: u8 = 6u8;
    let mut i8_16: i8 = 0i8;
    let mut i8_17: i8 = 0i8;
    let mut i8_18: i8 = 24i8;
    let mut i8_19: i8 = 24i8;
    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_18, i8_11, i8_19);
    let mut duration_19: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
    let mut i64_11: i64 = 9223372036854775807i64;
    let mut duration_20: crate::duration::Duration = crate::duration::Duration::microseconds(i64_10);
    let mut i8_20: i8 = 6i8;
    let mut i8_21: i8 = 3i8;
    let mut i8_22: i8 = 3i8;
    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_20, i8_21, i8_8);
    let mut i8_23: i8 = 1i8;
    let mut i8_24: i8 = 1i8;
    let mut i8_25: i8 = 5i8;
    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_13, i8_6, i8_16);
    let mut i32_4: i32 = -54i32;
    let mut i64_12: i64 = 1000000000i64;
    let mut duration_21: crate::duration::Duration = crate::duration::Duration::days(i64_11);
    let mut duration_22: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_13, i32_4);
    let mut i64_13: i64 = -159i64;
    let mut duration_23: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_12);
    let mut i8_26: i8 = 59i8;
    let mut i8_27: i8 = -22i8;
    let mut i8_28: i8 = 2i8;
    let mut utcoffset_6: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_17, i8_26, i8_25);
    let mut u32_1: u32 = 100000000u32;
    let mut u8_7: u8 = 30u8;
    let mut u8_8: u8 = 6u8;
    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_4, u8_3, u8_7, u32_1);
    let mut i8_29: i8 = 60i8;
    let mut i8_30: i8 = 6i8;
    let mut utcoffset_7: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_14, i8_30, i8_24);
    let mut u8_9: u8 = 28u8;
    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
    let mut duration_24: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
    let mut i8_31: i8 = 1i8;
    let mut i8_32: i8 = 23i8;
    let mut utcoffset_8: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_15, i8_9, i8_22);
    let mut i32_5: i32 = 263i32;
    let mut i64_14: i64 = 12i64;
    let mut duration_25: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_13, i32_5);
    let mut i8_33: i8 = 1i8;
    let mut i8_34: i8 = 1i8;
    let mut utcoffset_9: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_31, i8_23, i8_32);
    let mut i32_6: i32 = 305i32;
    let mut i64_15: i64 = 1000000i64;
    let mut duration_26: crate::duration::Duration = crate::duration::Duration::new(i64_14, i32_6);
    let mut i64_16: i64 = 1000000i64;
    let mut duration_27: crate::duration::Duration = crate::duration::Duration::hours(i64_15);
    let mut u8_10: u8 = 98u8;
    let mut u8_11: u8 = 44u8;
    let mut utcoffset_10: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_27, i8_34, i8_29);
    let mut i8_35: i8 = 5i8;
    let mut utcoffset_11: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_28, i8_33, i8_35);
    let mut i64_17: i64 = 1000i64;
    let mut duration_28: crate::duration::Duration = crate::duration::Duration::minutes(i64_16);
    let mut i64_18: i64 = 86400i64;
    let mut duration_29: crate::duration::Duration = crate::duration::Duration::days(i64_17);
    let mut duration_30: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
    let mut i64_19: i64 = 1000000000i64;
    let mut duration_31: crate::duration::Duration = crate::duration::Duration::weeks(i64_18);
    let mut duration_32: std::time::Duration = crate::duration::Duration::abs_std(duration_21);
    let mut duration_33: crate::duration::Duration = crate::duration::Duration::seconds(i64_19);
    let mut i32_7: i32 = 364i32;
    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Wednesday;
    let mut i32_8: i32 = 36525i32;
    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Thursday;
    let mut weekday_3: weekday::Weekday = crate::weekday::Weekday::previous(weekday_1);
    let mut i32_9: i32 = -46i32;
    let mut weekday_4: weekday::Weekday = crate::weekday::Weekday::Friday;
    let mut i32_10: i32 = 25i32;
    let mut weekday_5: weekday::Weekday = crate::weekday::Weekday::Saturday;
    let mut i32_11: i32 = 342i32;
    let mut weekday_6: weekday::Weekday = crate::weekday::Weekday::Sunday;
    let mut i32_12: i32 = 314i32;
    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_8, u8_11, weekday_6);
    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_11, u8_10, weekday_3);
    let mut result_2: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_7, u8_5, weekday_4);
    let mut result_3: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_10, u8_8, weekday_2);
    let mut result_4: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_12, u8_9, weekday_5);
    let mut result_5: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_9, u8_6, weekday_0);
//    panic!("From RustyUnit with love");
}
}