/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/date.rs:
    1|       |//! The [`Date`] struct and its associated `impl`s.
    2|       |
    3|       |use core::fmt;
    4|       |use core::ops::{Add, Sub};
    5|       |use core::time::Duration as StdDuration;
    6|       |#[cfg(feature = "formatting")]
    7|       |use std::io;
    8|       |
    9|       |#[cfg(feature = "formatting")]
   10|       |use crate::formatting::Formattable;
   11|       |#[cfg(feature = "parsing")]
   12|       |use crate::parsing::Parsable;
   13|       |use crate::util::{days_in_year, days_in_year_month, is_leap_year, weeks_in_year};
   14|       |use crate::{error, Duration, Month, PrimitiveDateTime, Time, Weekday};
   15|       |
   16|       |/// The minimum valid year.
   17|       |#[cfg(feature = "large-dates")]
   18|       |pub(crate) const MIN_YEAR: i32 = -999_999;
   19|       |/// The maximum valid year.
   20|       |#[cfg(feature = "large-dates")]
   21|       |pub(crate) const MAX_YEAR: i32 = 999_999;
   22|       |
   23|       |/// The minimum valid year.
   24|       |#[cfg(not(feature = "large-dates"))]
   25|       |pub(crate) const MIN_YEAR: i32 = -9999;
   26|       |/// The maximum valid year.
   27|       |#[cfg(not(feature = "large-dates"))]
   28|       |pub(crate) const MAX_YEAR: i32 = 9999;
   29|       |
   30|       |/// Date in the proleptic Gregorian calendar.
   31|       |///
   32|       |/// By default, years between ±9999 inclusive are representable. This can be expanded to ±999,999
   33|       |/// inclusive by enabling the `large-dates` crate feature. Doing so has performance implications
   34|       |/// and introduces some ambiguities when parsing.
   35|      0|#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
   36|       |pub struct Date {
   37|       |    /// Bitpacked field containing both the year and ordinal.
   38|       |    // |     xx     | xxxxxxxxxxxxxxxxxxxxx | xxxxxxxxx |
   39|       |    // |   2 bits   |        21 bits        |  9 bits   |
   40|       |    // | unassigned |         year          |  ordinal  |
   41|       |    // The year is 15 bits when `large-dates` is not enabled.
   42|       |    pub(crate) value: i32,
   43|       |}
   44|       |
   45|       |impl fmt::Debug for Date {
   46|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {
   47|      0|        f.debug_struct("Date")
   48|      0|            .field("year", &self.year())
   49|      0|            .field("ordinal", &self.ordinal())
   50|      0|            .finish()
   51|      0|    }
   52|       |}
   53|       |
   54|       |impl Date {
   55|       |    /// The minimum valid `Date`.
   56|       |    ///
   57|       |    /// The value of this may vary depending on the feature flags enabled.
   58|       |    pub const MIN: Self = Self::__from_ordinal_date_unchecked(MIN_YEAR, 1);
   59|       |
   60|       |    /// The maximum valid `Date`.
   61|       |    ///
   62|       |    /// The value of this may vary depending on the feature flags enabled.
   63|       |    pub const MAX: Self = Self::__from_ordinal_date_unchecked(MAX_YEAR, days_in_year(MAX_YEAR));
   64|       |
   65|       |    // region: constructors
   66|       |    /// Construct a `Date` from the year and ordinal values, the validity of which must be
   67|       |    /// guaranteed by the caller.
   68|       |    #[doc(hidden)]
   69|      0|    pub const fn __from_ordinal_date_unchecked(year: i32, ordinal: u16) -> Self {
   70|      0|        Self {
   71|      0|            value: (year << 9) | ordinal as i32,
   72|      0|        }
   73|      0|    }
   74|       |
   75|       |    /// Attempt to create a `Date` from the year, month, and day.
   76|       |    ///
   77|       |    /// ```rust
   78|       |    /// # use time::{Date, Month};
   79|       |    /// assert!(Date::from_calendar_date(2019, Month::January, 1).is_ok());
   80|       |    /// assert!(Date::from_calendar_date(2019, Month::December, 31).is_ok());
   81|       |    /// ```
   82|       |    ///
   83|       |    /// ```rust
   84|       |    /// # use time::{Date, Month};
   85|       |    /// assert!(Date::from_calendar_date(2019, Month::February, 29).is_err()); // 2019 isn't a leap year.
   86|       |    /// ```
   87|      0|    pub const fn from_calendar_date(
   88|      0|        year: i32,
   89|      0|        month: Month,
   90|      0|        day: u8,
   91|      0|    ) -> Result<Self, error::ComponentRange> {
   92|      0|        /// Cumulative days through the beginning of a month in both common and leap years.
   93|      0|        const DAYS_CUMULATIVE_COMMON_LEAP: [[u16; 12]; 2] = [
   94|      0|            [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
   95|      0|            [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],
   96|      0|        ];
   97|      0|
   98|      0|        ensure_value_in_range!(year in MIN_YEAR => MAX_YEAR);
   99|      0|        ensure_value_in_range!(day conditionally in 1 => days_in_year_month(year, month));
  100|       |
  101|      0|        Ok(Self::__from_ordinal_date_unchecked(
  102|      0|            year,
  103|      0|            DAYS_CUMULATIVE_COMMON_LEAP[is_leap_year(year) as usize][month as usize - 1]
  104|      0|                + day as u16,
  105|      0|        ))
  106|      0|    }
  107|       |
  108|       |    /// Attempt to create a `Date` from the year and ordinal day number.
  109|       |    ///
  110|       |    /// ```rust
  111|       |    /// # use time::Date;
  112|       |    /// assert!(Date::from_ordinal_date(2019, 1).is_ok());
  113|       |    /// assert!(Date::from_ordinal_date(2019, 365).is_ok());
  114|       |    /// ```
  115|       |    ///
  116|       |    /// ```rust
  117|       |    /// # use time::Date;
  118|       |    /// assert!(Date::from_ordinal_date(2019, 366).is_err()); // 2019 isn't a leap year.
  119|       |    /// ```
  120|      0|    pub const fn from_ordinal_date(year: i32, ordinal: u16) -> Result<Self, error::ComponentRange> {
  121|      0|        ensure_value_in_range!(year in MIN_YEAR => MAX_YEAR);
  122|      0|        ensure_value_in_range!(ordinal conditionally in 1 => days_in_year(year));
  123|      0|        Ok(Self::__from_ordinal_date_unchecked(year, ordinal))
  124|      0|    }
  125|       |
  126|       |    /// Attempt to create a `Date` from the ISO year, week, and weekday.
  127|       |    ///
  128|       |    /// ```rust
  129|       |    /// # use time::{Date, Weekday::*};
  130|       |    /// assert!(Date::from_iso_week_date(2019, 1, Monday).is_ok());
  131|       |    /// assert!(Date::from_iso_week_date(2019, 1, Tuesday).is_ok());
  132|       |    /// assert!(Date::from_iso_week_date(2020, 53, Friday).is_ok());
  133|       |    /// ```
  134|       |    ///
  135|       |    /// ```rust
  136|       |    /// # use time::{Date, Weekday::*};
  137|       |    /// assert!(Date::from_iso_week_date(2019, 53, Monday).is_err()); // 2019 doesn't have 53 weeks.
  138|       |    /// ```
  139|      0|    pub const fn from_iso_week_date(
  140|      0|        year: i32,
  141|      0|        week: u8,
  142|      0|        weekday: Weekday,
  143|      0|    ) -> Result<Self, error::ComponentRange> {
  144|      0|        ensure_value_in_range!(year in MIN_YEAR => MAX_YEAR);
  145|      0|        ensure_value_in_range!(week conditionally in 1 => weeks_in_year(year));
  146|       |
  147|      0|        let adj_year = year - 1;
  148|      0|        let raw = 365 * adj_year + div_floor!(adj_year, 4) - div_floor!(adj_year, 100)
  149|      0|            + div_floor!(adj_year, 400);
  150|      0|        let jan_4 = match (raw % 7) as i8 {
  151|      0|            -6 | 1 => 8,
  152|      0|            -5 | 2 => 9,
  153|      0|            -4 | 3 => 10,
  154|      0|            -3 | 4 => 4,
  155|      0|            -2 | 5 => 5,
  156|      0|            -1 | 6 => 6,
  157|      0|            _ => 7,
  158|       |        };
  159|      0|        let ordinal = week as i16 * 7 + weekday.number_from_monday() as i16 - jan_4;
  160|      0|
  161|      0|        Ok(if ordinal <= 0 {
  162|      0|            Self::__from_ordinal_date_unchecked(
  163|      0|                year - 1,
  164|      0|                (ordinal as u16).wrapping_add(days_in_year(year - 1)),
  165|      0|            )
  166|      0|        } else if ordinal > days_in_year(year) as i16 {
  167|      0|            Self::__from_ordinal_date_unchecked(year + 1, ordinal as u16 - days_in_year(year))
  168|       |        } else {
  169|      0|            Self::__from_ordinal_date_unchecked(year, ordinal as _)
  170|       |        })
  171|      0|    }
  172|       |
  173|       |    /// Create a `Date` from the Julian day.
  174|       |    ///
  175|       |    /// The algorithm to perform this conversion is derived from one provided by Peter Baum; it is
  176|       |    /// freely available [here](https://www.researchgate.net/publication/316558298_Date_Algorithms).
  177|       |    ///
  178|       |    /// ```rust
  179|       |    /// # use time::{Date, macros::date};
  180|       |    /// assert_eq!(Date::from_julian_day(0), Ok(date!(-4713 - 11 - 24)));
  181|       |    /// assert_eq!(Date::from_julian_day(2_451_545), Ok(date!(2000 - 01 - 01)));
  182|       |    /// assert_eq!(Date::from_julian_day(2_458_485), Ok(date!(2019 - 01 - 01)));
  183|       |    /// assert_eq!(Date::from_julian_day(2_458_849), Ok(date!(2019 - 12 - 31)));
  184|       |    /// ```
  185|       |    #[doc(alias = "from_julian_date")]
  186|      0|    pub const fn from_julian_day(julian_day: i32) -> Result<Self, error::ComponentRange> {
  187|      0|        ensure_value_in_range!(
  188|      0|            julian_day in Self::MIN.to_julian_day() => Self::MAX.to_julian_day()
  189|      0|        );
  190|      0|        Ok(Self::from_julian_day_unchecked(julian_day))
  191|      0|    }
  192|       |
  193|       |    /// Create a `Date` from the Julian day.
  194|       |    ///
  195|       |    /// This does not check the validity of the provided Julian day, and as such may result in an
  196|       |    /// internally invalid value.
  197|       |    #[doc(alias = "from_julian_date_unchecked")]
  198|      0|    pub(crate) const fn from_julian_day_unchecked(julian_day: i32) -> Self {
  199|      0|        #![allow(trivial_numeric_casts)] // cast depends on type alias
  200|      0|
  201|      0|        /// A type that is either `i32` or `i64`. This subtle difference allows for optimization
  202|      0|        /// based on the valid values.
  203|      0|        #[cfg(feature = "large-dates")]
  204|      0|        type MaybeWidened = i64;
  205|      0|        #[allow(clippy::missing_docs_in_private_items)]
  206|      0|        #[cfg(not(feature = "large-dates"))]
  207|      0|        type MaybeWidened = i32;
  208|      0|
  209|      0|        // To avoid a potential overflow, the value may need to be widened for some arithmetic.
  210|      0|
  211|      0|        let z = julian_day - 1_721_119;
  212|      0|        let g = 100 * z as MaybeWidened - 25;
  213|      0|        let a = (g / 3_652_425) as i32;
  214|      0|        let b = a - a / 4;
  215|      0|        let mut year = div_floor!(100 * b as MaybeWidened + g, 36525) as i32;
  216|      0|        let mut ordinal = (b + z - div_floor!(36525 * year as MaybeWidened, 100) as i32) as _;
  217|       |
  218|      0|        if is_leap_year(year) {
  219|      0|            ordinal += 60;
  220|      0|            cascade!(ordinal in 1..367 => year);
  221|       |        } else {
  222|      0|            ordinal += 59;
  223|      0|            cascade!(ordinal in 1..366 => year);
  224|       |        }
  225|       |
  226|      0|        Self::__from_ordinal_date_unchecked(year, ordinal)
  227|      0|    }
  228|       |    // endregion constructors
  229|       |
  230|       |    // region: getters
  231|       |    /// Get the year of the date.
  232|       |    ///
  233|       |    /// ```rust
  234|       |    /// # use time::macros::date;
  235|       |    /// assert_eq!(date!(2019 - 01 - 01).year(), 2019);
  236|       |    /// assert_eq!(date!(2019 - 12 - 31).year(), 2019);
  237|       |    /// assert_eq!(date!(2020 - 01 - 01).year(), 2020);
  238|       |    /// ```
  239|      0|    pub const fn year(self) -> i32 {
  240|      0|        self.value >> 9
  241|      0|    }
  242|       |
  243|       |    /// Get the month.
  244|       |    ///
  245|       |    /// ```rust
  246|       |    /// # use time::{macros::date, Month};
  247|       |    /// assert_eq!(date!(2019 - 01 - 01).month(), Month::January);
  248|       |    /// assert_eq!(date!(2019 - 12 - 31).month(), Month::December);
  249|       |    /// ```
  250|      0|    pub const fn month(self) -> Month {
  251|      0|        self.month_day().0
  252|      0|    }
  253|       |
  254|       |    /// Get the day of the month.
  255|       |    ///
  256|       |    /// The returned value will always be in the range `1..=31`.
  257|       |    ///
  258|       |    /// ```rust
  259|       |    /// # use time::macros::date;
  260|       |    /// assert_eq!(date!(2019 - 01 - 01).day(), 1);
  261|       |    /// assert_eq!(date!(2019 - 12 - 31).day(), 31);
  262|       |    /// ```
  263|      0|    pub const fn day(self) -> u8 {
  264|      0|        self.month_day().1
  265|      0|    }
  266|       |
  267|       |    /// Get the month and day. This is more efficient than fetching the components individually.
  268|       |    // For whatever reason, rustc has difficulty optimizing this function. It's significantly faster
  269|       |    // to write the statements out by hand.
  270|      0|    pub(crate) const fn month_day(self) -> (Month, u8) {
  271|      0|        /// The number of days up to and including the given month. Common years
  272|      0|        /// are first, followed by leap years.
  273|      0|        const CUMULATIVE_DAYS_IN_MONTH_COMMON_LEAP: [[u16; 11]; 2] = [
  274|      0|            [31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
  275|      0|            [31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],
  276|      0|        ];
  277|      0|
  278|      0|        let days = CUMULATIVE_DAYS_IN_MONTH_COMMON_LEAP[is_leap_year(self.year()) as usize];
  279|      0|        let ordinal = self.ordinal();
  280|      0|
  281|      0|        if ordinal > days[10] {
  282|      0|            (Month::December, (ordinal - days[10]) as _)
  283|      0|        } else if ordinal > days[9] {
  284|      0|            (Month::November, (ordinal - days[9]) as _)
  285|      0|        } else if ordinal > days[8] {
  286|      0|            (Month::October, (ordinal - days[8]) as _)
  287|      0|        } else if ordinal > days[7] {
  288|      0|            (Month::September, (ordinal - days[7]) as _)
  289|      0|        } else if ordinal > days[6] {
  290|      0|            (Month::August, (ordinal - days[6]) as _)
  291|      0|        } else if ordinal > days[5] {
  292|      0|            (Month::July, (ordinal - days[5]) as _)
  293|      0|        } else if ordinal > days[4] {
  294|      0|            (Month::June, (ordinal - days[4]) as _)
  295|      0|        } else if ordinal > days[3] {
  296|      0|            (Month::May, (ordinal - days[3]) as _)
  297|      0|        } else if ordinal > days[2] {
  298|      0|            (Month::April, (ordinal - days[2]) as _)
  299|      0|        } else if ordinal > days[1] {
  300|      0|            (Month::March, (ordinal - days[1]) as _)
  301|      0|        } else if ordinal > days[0] {
  302|      0|            (Month::February, (ordinal - days[0]) as _)
  303|       |        } else {
  304|      0|            (Month::January, ordinal as _)
  305|       |        }
  306|      0|    }
  307|       |
  308|       |    /// Get the day of the year.
  309|       |    ///
  310|       |    /// The returned value will always be in the range `1..=366` (`1..=365` for common years).
  311|       |    ///
  312|       |    /// ```rust
  313|       |    /// # use time::macros::date;
  314|       |    /// assert_eq!(date!(2019 - 01 - 01).ordinal(), 1);
  315|       |    /// assert_eq!(date!(2019 - 12 - 31).ordinal(), 365);
  316|       |    /// ```
  317|      0|    pub const fn ordinal(self) -> u16 {
  318|      0|        (self.value & 0x1FF) as _
  319|      0|    }
  320|       |
  321|       |    /// Get the ISO 8601 year and week number.
  322|      0|    pub(crate) const fn iso_year_week(self) -> (i32, u8) {
  323|      0|        let (year, ordinal) = self.to_ordinal_date();
  324|      0|
  325|      0|        match ((ordinal + 10 - self.weekday().number_from_monday() as u16) / 7) as _ {
  326|      0|            0 => (year - 1, weeks_in_year(year - 1)),
  327|      0|            53 if weeks_in_year(year) == 52 => (year + 1, 1),
  328|      0|            week => (year, week),
  329|       |        }
  330|      0|    }
  331|       |
  332|       |    /// Get the ISO week number.
  333|       |    ///
  334|       |    /// The returned value will always be in the range `1..=53`.
  335|       |    ///
  336|       |    /// ```rust
  337|       |    /// # use time::macros::date;
  338|       |    /// assert_eq!(date!(2019 - 01 - 01).iso_week(), 1);
  339|       |    /// assert_eq!(date!(2019 - 10 - 04).iso_week(), 40);
  340|       |    /// assert_eq!(date!(2020 - 01 - 01).iso_week(), 1);
  341|       |    /// assert_eq!(date!(2020 - 12 - 31).iso_week(), 53);
  342|       |    /// assert_eq!(date!(2021 - 01 - 01).iso_week(), 53);
  343|       |    /// ```
  344|      0|    pub const fn iso_week(self) -> u8 {
  345|      0|        self.iso_year_week().1
  346|      0|    }
  347|       |
  348|       |    /// Get the week number where week 1 begins on the first Sunday.
  349|       |    ///
  350|       |    /// The returned value will always be in the range `0..=53`.
  351|       |    ///
  352|       |    /// ```rust
  353|       |    /// # use time::macros::date;
  354|       |    /// assert_eq!(date!(2019 - 01 - 01).sunday_based_week(), 0);
  355|       |    /// assert_eq!(date!(2020 - 01 - 01).sunday_based_week(), 0);
  356|       |    /// assert_eq!(date!(2020 - 12 - 31).sunday_based_week(), 52);
  357|       |    /// assert_eq!(date!(2021 - 01 - 01).sunday_based_week(), 0);
  358|       |    /// ```
  359|      0|    pub const fn sunday_based_week(self) -> u8 {
  360|      0|        ((self.ordinal() as i16 - self.weekday().number_days_from_sunday() as i16 + 6) / 7) as _
  361|      0|    }
  362|       |
  363|       |    /// Get the week number where week 1 begins on the first Monday.
  364|       |    ///
  365|       |    /// The returned value will always be in the range `0..=53`.
  366|       |    ///
  367|       |    /// ```rust
  368|       |    /// # use time::macros::date;
  369|       |    /// assert_eq!(date!(2019 - 01 - 01).monday_based_week(), 0);
  370|       |    /// assert_eq!(date!(2020 - 01 - 01).monday_based_week(), 0);
  371|       |    /// assert_eq!(date!(2020 - 12 - 31).monday_based_week(), 52);
  372|       |    /// assert_eq!(date!(2021 - 01 - 01).monday_based_week(), 0);
  373|       |    /// ```
  374|      0|    pub const fn monday_based_week(self) -> u8 {
  375|      0|        ((self.ordinal() as i16 - self.weekday().number_days_from_monday() as i16 + 6) / 7) as _
  376|      0|    }
  377|       |
  378|       |    /// Get the year, month, and day.
  379|       |    ///
  380|       |    /// ```rust
  381|       |    /// # use time::{macros::date, Month};
  382|       |    /// assert_eq!(
  383|       |    ///     date!(2019 - 01 - 01).to_calendar_date(),
  384|       |    ///     (2019, Month::January, 1)
  385|       |    /// );
  386|       |    /// ```
  387|      0|    pub const fn to_calendar_date(self) -> (i32, Month, u8) {
  388|      0|        let (month, day) = self.month_day();
  389|      0|        (self.year(), month, day)
  390|      0|    }
  391|       |
  392|       |    /// Get the year and ordinal day number.
  393|       |    ///
  394|       |    /// ```rust
  395|       |    /// # use time::macros::date;
  396|       |    /// assert_eq!(date!(2019 - 01 - 01).to_ordinal_date(), (2019, 1));
  397|       |    /// ```
  398|      0|    pub const fn to_ordinal_date(self) -> (i32, u16) {
  399|      0|        (self.year(), self.ordinal())
  400|      0|    }
  401|       |
  402|       |    /// Get the ISO 8601 year, week number, and weekday.
  403|       |    ///
  404|       |    /// ```rust
  405|       |    /// # use time::{Weekday::*, macros::date};
  406|       |    /// assert_eq!(date!(2019 - 01 - 01).to_iso_week_date(), (2019, 1, Tuesday));
  407|       |    /// assert_eq!(date!(2019 - 10 - 04).to_iso_week_date(), (2019, 40, Friday));
  408|       |    /// assert_eq!(
  409|       |    ///     date!(2020 - 01 - 01).to_iso_week_date(),
  410|       |    ///     (2020, 1, Wednesday)
  411|       |    /// );
  412|       |    /// assert_eq!(
  413|       |    ///     date!(2020 - 12 - 31).to_iso_week_date(),
  414|       |    ///     (2020, 53, Thursday)
  415|       |    /// );
  416|       |    /// assert_eq!(date!(2021 - 01 - 01).to_iso_week_date(), (2020, 53, Friday));
  417|       |    /// ```
  418|      0|    pub const fn to_iso_week_date(self) -> (i32, u8, Weekday) {
  419|      0|        let (year, ordinal) = self.to_ordinal_date();
  420|      0|        let weekday = self.weekday();
  421|      0|
  422|      0|        match ((ordinal + 10 - self.weekday().number_from_monday() as u16) / 7) as _ {
  423|      0|            0 => (year - 1, weeks_in_year(year - 1), weekday),
  424|      0|            53 if weeks_in_year(year) == 52 => (year + 1, 1, weekday),
  425|      0|            week => (year, week, weekday),
  426|       |        }
  427|      0|    }
  428|       |
  429|       |    /// Get the weekday.
  430|       |    ///
  431|       |    /// ```rust
  432|       |    /// # use time::{Weekday::*, macros::date};
  433|       |    /// assert_eq!(date!(2019 - 01 - 01).weekday(), Tuesday);
  434|       |    /// assert_eq!(date!(2019 - 02 - 01).weekday(), Friday);
  435|       |    /// assert_eq!(date!(2019 - 03 - 01).weekday(), Friday);
  436|       |    /// assert_eq!(date!(2019 - 04 - 01).weekday(), Monday);
  437|       |    /// assert_eq!(date!(2019 - 05 - 01).weekday(), Wednesday);
  438|       |    /// assert_eq!(date!(2019 - 06 - 01).weekday(), Saturday);
  439|       |    /// assert_eq!(date!(2019 - 07 - 01).weekday(), Monday);
  440|       |    /// assert_eq!(date!(2019 - 08 - 01).weekday(), Thursday);
  441|       |    /// assert_eq!(date!(2019 - 09 - 01).weekday(), Sunday);
  442|       |    /// assert_eq!(date!(2019 - 10 - 01).weekday(), Tuesday);
  443|       |    /// assert_eq!(date!(2019 - 11 - 01).weekday(), Friday);
  444|       |    /// assert_eq!(date!(2019 - 12 - 01).weekday(), Sunday);
  445|       |    /// ```
  446|      0|    pub const fn weekday(self) -> Weekday {
  447|      0|        match self.to_julian_day() % 7 {
  448|      0|            -6 | 1 => Weekday::Tuesday,
  449|      0|            -5 | 2 => Weekday::Wednesday,
  450|      0|            -4 | 3 => Weekday::Thursday,
  451|      0|            -3 | 4 => Weekday::Friday,
  452|      0|            -2 | 5 => Weekday::Saturday,
  453|      0|            -1 | 6 => Weekday::Sunday,
  454|      0|            _ => Weekday::Monday,
  455|       |        }
  456|      0|    }
  457|       |
  458|       |    /// Get the next calendar date.
  459|       |    ///
  460|       |    /// ```rust
  461|       |    /// # use time::{Date, macros::date};
  462|       |    /// assert_eq!(
  463|       |    ///     date!(2019 - 01 - 01).next_day(),
  464|       |    ///     Some(date!(2019 - 01 - 02))
  465|       |    /// );
  466|       |    /// assert_eq!(
  467|       |    ///     date!(2019 - 01 - 31).next_day(),
  468|       |    ///     Some(date!(2019 - 02 - 01))
  469|       |    /// );
  470|       |    /// assert_eq!(
  471|       |    ///     date!(2019 - 12 - 31).next_day(),
  472|       |    ///     Some(date!(2020 - 01 - 01))
  473|       |    /// );
  474|       |    /// assert_eq!(Date::MAX.next_day(), None);
  475|       |    /// ```
  476|      0|    pub const fn next_day(self) -> Option<Self> {
  477|      0|        if self.ordinal() == 366 || (self.ordinal() == 365 && !is_leap_year(self.year())) {
  478|      0|            if self.value == Self::MAX.value {
  479|      0|                None
  480|       |            } else {
  481|      0|                Some(Self::__from_ordinal_date_unchecked(self.year() + 1, 1))
  482|       |            }
  483|       |        } else {
  484|      0|            Some(Self {
  485|      0|                value: self.value + 1,
  486|      0|            })
  487|       |        }
  488|      0|    }
  489|       |
  490|       |    /// Get the previous calendar date.
  491|       |    ///
  492|       |    /// ```rust
  493|       |    /// # use time::{Date, macros::date};
  494|       |    /// assert_eq!(
  495|       |    ///     date!(2019 - 01 - 02).previous_day(),
  496|       |    ///     Some(date!(2019 - 01 - 01))
  497|       |    /// );
  498|       |    /// assert_eq!(
  499|       |    ///     date!(2019 - 02 - 01).previous_day(),
  500|       |    ///     Some(date!(2019 - 01 - 31))
  501|       |    /// );
  502|       |    /// assert_eq!(
  503|       |    ///     date!(2020 - 01 - 01).previous_day(),
  504|       |    ///     Some(date!(2019 - 12 - 31))
  505|       |    /// );
  506|       |    /// assert_eq!(Date::MIN.previous_day(), None);
  507|       |    /// ```
  508|      0|    pub const fn previous_day(self) -> Option<Self> {
  509|      0|        if self.ordinal() != 1 {
  510|      0|            Some(Self {
  511|      0|                value: self.value - 1,
  512|      0|            })
  513|      0|        } else if self.value == Self::MIN.value {
  514|      0|            None
  515|       |        } else {
  516|      0|            Some(Self::__from_ordinal_date_unchecked(
  517|      0|                self.year() - 1,
  518|      0|                days_in_year(self.year() - 1),
  519|      0|            ))
  520|       |        }
  521|      0|    }
  522|       |
  523|       |    /// Get the Julian day for the date.
  524|       |    ///
  525|       |    /// The algorithm to perform this conversion is derived from one provided by Peter Baum; it is
  526|       |    /// freely available [here](https://www.researchgate.net/publication/316558298_Date_Algorithms).
  527|       |    ///
  528|       |    /// ```rust
  529|       |    /// # use time::macros::date;
  530|       |    /// assert_eq!(date!(-4713 - 11 - 24).to_julian_day(), 0);
  531|       |    /// assert_eq!(date!(2000 - 01 - 01).to_julian_day(), 2_451_545);
  532|       |    /// assert_eq!(date!(2019 - 01 - 01).to_julian_day(), 2_458_485);
  533|       |    /// assert_eq!(date!(2019 - 12 - 31).to_julian_day(), 2_458_849);
  534|       |    /// ```
  535|      0|    pub const fn to_julian_day(self) -> i32 {
  536|      0|        let year = self.year() - 1;
  537|      0|        let ordinal = self.ordinal() as i32;
  538|      0|
  539|      0|        ordinal + 365 * year + div_floor!(year, 4) - div_floor!(year, 100)
  540|      0|            + div_floor!(year, 400)
  541|       |            + 1_721_425
  542|      0|    }
  543|       |    // endregion getters
  544|       |
  545|       |    // region: checked arithmetic
  546|       |    /// Computes `self + duration`, returning `None` if an overflow occurred.
  547|       |    ///
  548|       |    /// ```rust
  549|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  550|       |    /// assert_eq!(Date::MAX.checked_add(1.days()), None);
  551|       |    /// assert_eq!(Date::MIN.checked_add((-2).days()), None);
  552|       |    /// assert_eq!(
  553|       |    ///     date!(2020 - 12 - 31).checked_add(2.days()),
  554|       |    ///     Some(date!(2021 - 01 - 02))
  555|       |    /// );
  556|       |    /// ```
  557|       |    ///
  558|       |    /// # Note
  559|       |    ///
  560|       |    /// This function only takes whole days into account.
  561|       |    ///
  562|       |    /// ```rust
  563|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  564|       |    /// assert_eq!(Date::MAX.checked_add(23.hours()), Some(Date::MAX));
  565|       |    /// assert_eq!(Date::MIN.checked_add((-23).hours()), Some(Date::MIN));
  566|       |    /// assert_eq!(
  567|       |    ///     date!(2020 - 12 - 31).checked_add(23.hours()),
  568|       |    ///     Some(date!(2020 - 12 - 31))
  569|       |    /// );
  570|       |    /// assert_eq!(
  571|       |    ///     date!(2020 - 12 - 31).checked_add(47.hours()),
  572|       |    ///     Some(date!(2021 - 01 - 01))
  573|       |    /// );
  574|       |    /// ```
  575|      0|    pub const fn checked_add(self, duration: Duration) -> Option<Self> {
  576|      0|        let whole_days = duration.whole_days();
  577|      0|        if whole_days < i32::MIN as i64 || whole_days > i32::MAX as i64 {
  578|      0|            return None;
  579|      0|        }
  580|       |
  581|      0|        let julian_day = const_try_opt!(self.to_julian_day().checked_add(whole_days as _));
  582|      0|        if let Ok(date) = Self::from_julian_day(julian_day) {
  583|      0|            Some(date)
  584|       |        } else {
  585|      0|            None
  586|       |        }
  587|      0|    }
  588|       |
  589|       |    /// Computes `self - duration`, returning `None` if an overflow occurred.
  590|       |    ///
  591|       |    /// ```
  592|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  593|       |    /// assert_eq!(Date::MAX.checked_sub((-2).days()), None);
  594|       |    /// assert_eq!(Date::MIN.checked_sub(1.days()), None);
  595|       |    /// assert_eq!(
  596|       |    ///     date!(2020 - 12 - 31).checked_sub(2.days()),
  597|       |    ///     Some(date!(2020 - 12 - 29))
  598|       |    /// );
  599|       |    /// ```
  600|       |    ///
  601|       |    /// # Note
  602|       |    ///
  603|       |    /// This function only takes whole days into account.
  604|       |    ///
  605|       |    /// ```
  606|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  607|       |    /// assert_eq!(Date::MAX.checked_sub((-23).hours()), Some(Date::MAX));
  608|       |    /// assert_eq!(Date::MIN.checked_sub(23.hours()), Some(Date::MIN));
  609|       |    /// assert_eq!(
  610|       |    ///     date!(2020 - 12 - 31).checked_sub(23.hours()),
  611|       |    ///     Some(date!(2020 - 12 - 31))
  612|       |    /// );
  613|       |    /// assert_eq!(
  614|       |    ///     date!(2020 - 12 - 31).checked_sub(47.hours()),
  615|       |    ///     Some(date!(2020 - 12 - 30))
  616|       |    /// );
  617|       |    /// ```
  618|      0|    pub const fn checked_sub(self, duration: Duration) -> Option<Self> {
  619|      0|        let whole_days = duration.whole_days();
  620|      0|        if whole_days < i32::MIN as i64 || whole_days > i32::MAX as i64 {
  621|      0|            return None;
  622|      0|        }
  623|       |
  624|      0|        let julian_day = const_try_opt!(self.to_julian_day().checked_sub(whole_days as _));
  625|      0|        if let Ok(date) = Self::from_julian_day(julian_day) {
  626|      0|            Some(date)
  627|       |        } else {
  628|      0|            None
  629|       |        }
  630|      0|    }
  631|       |    // endregion: checked arithmetic
  632|       |
  633|       |    // region: saturating arithmetic
  634|       |    /// Computes `self + duration`, saturating value on overflow.
  635|       |    ///
  636|       |    /// ```rust
  637|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  638|       |    /// assert_eq!(Date::MAX.saturating_add(1.days()), Date::MAX);
  639|       |    /// assert_eq!(Date::MIN.saturating_add((-2).days()), Date::MIN);
  640|       |    /// assert_eq!(
  641|       |    ///     date!(2020 - 12 - 31).saturating_add(2.days()),
  642|       |    ///     date!(2021 - 01 - 02)
  643|       |    /// );
  644|       |    /// ```
  645|       |    ///
  646|       |    /// # Note
  647|       |    ///
  648|       |    /// This function only takes whole days into account.
  649|       |    ///
  650|       |    /// ```rust
  651|       |    /// # use time::{ext::NumericalDuration, macros::date};
  652|       |    /// assert_eq!(
  653|       |    ///     date!(2020 - 12 - 31).saturating_add(23.hours()),
  654|       |    ///     date!(2020 - 12 - 31)
  655|       |    /// );
  656|       |    /// assert_eq!(
  657|       |    ///     date!(2020 - 12 - 31).saturating_add(47.hours()),
  658|       |    ///     date!(2021 - 01 - 01)
  659|       |    /// );
  660|       |    /// ```
  661|       |    pub const fn saturating_add(self, duration: Duration) -> Self {
  662|      0|        if let Some(datetime) = self.checked_add(duration) {
  663|      0|            datetime
  664|      0|        } else if duration.is_negative() {
  665|      0|            Self::MIN
  666|       |        } else {
  667|      0|            Self::MAX
  668|       |        }
  669|      0|    }
  670|       |
  671|       |    /// Computes `self - duration`, saturating value on overflow.
  672|       |    ///
  673|       |    /// ```
  674|       |    /// # use time::{Date, ext::NumericalDuration, macros::date};
  675|       |    /// assert_eq!(Date::MAX.saturating_sub((-2).days()), Date::MAX);
  676|       |    /// assert_eq!(Date::MIN.saturating_sub(1.days()), Date::MIN);
  677|       |    /// assert_eq!(
  678|       |    ///     date!(2020 - 12 - 31).saturating_sub(2.days()),
  679|       |    ///     date!(2020 - 12 - 29)
  680|       |    /// );
  681|       |    /// ```
  682|       |    ///
  683|       |    /// # Note
  684|       |    ///
  685|       |    /// This function only takes whole days into account.
  686|       |    ///
  687|       |    /// ```
  688|       |    /// # use time::{ext::NumericalDuration, macros::date};
  689|       |    /// assert_eq!(
  690|       |    ///     date!(2020 - 12 - 31).saturating_sub(23.hours()),
  691|       |    ///     date!(2020 - 12 - 31)
  692|       |    /// );
  693|       |    /// assert_eq!(
  694|       |    ///     date!(2020 - 12 - 31).saturating_sub(47.hours()),
  695|       |    ///     date!(2020 - 12 - 30)
  696|       |    /// );
  697|       |    /// ```
  698|       |    pub const fn saturating_sub(self, duration: Duration) -> Self {
  699|      0|        if let Some(datetime) = self.checked_sub(duration) {
  700|      0|            datetime
  701|      0|        } else if duration.is_negative() {
  702|      0|            Self::MAX
  703|       |        } else {
  704|      0|            Self::MIN
  705|       |        }
  706|      0|    }
  707|       |    // region: saturating arithmetic
  708|       |}
  709|       |
  710|       |// region: attach time
  711|       |/// Methods to add a [`Time`] component, resulting in a [`PrimitiveDateTime`].
  712|       |impl Date {
  713|       |    /// Create a [`PrimitiveDateTime`] using the existing date. The [`Time`] component will be set
  714|       |    /// to midnight.
  715|       |    ///
  716|       |    /// ```rust
  717|       |    /// # use time::macros::{date, datetime};
  718|       |    /// assert_eq!(date!(1970-01-01).midnight(), datetime!(1970-01-01 0:00));
  719|       |    /// ```
  720|      0|    pub const fn midnight(self) -> PrimitiveDateTime {
  721|      0|        PrimitiveDateTime::new(self, Time::MIDNIGHT)
  722|      0|    }
  723|       |
  724|       |    /// Create a [`PrimitiveDateTime`] using the existing date and the provided [`Time`].
  725|       |    ///
  726|       |    /// ```rust
  727|       |    /// # use time::macros::{date, datetime, time};
  728|       |    /// assert_eq!(
  729|       |    ///     date!(1970-01-01).with_time(time!(0:00)),
  730|       |    ///     datetime!(1970-01-01 0:00),
  731|       |    /// );
  732|       |    /// ```
  733|      0|    pub const fn with_time(self, time: Time) -> PrimitiveDateTime {
  734|      0|        PrimitiveDateTime::new(self, time)
  735|      0|    }
  736|       |
  737|       |    /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
  738|       |    ///
  739|       |    /// ```rust
  740|       |    /// # use time::macros::date;
  741|       |    /// assert!(date!(1970 - 01 - 01).with_hms(0, 0, 0).is_ok());
  742|       |    /// assert!(date!(1970 - 01 - 01).with_hms(24, 0, 0).is_err());
  743|       |    /// ```
  744|      0|    pub const fn with_hms(
  745|      0|        self,
  746|      0|        hour: u8,
  747|      0|        minute: u8,
  748|      0|        second: u8,
  749|      0|    ) -> Result<PrimitiveDateTime, error::ComponentRange> {
  750|      0|        Ok(PrimitiveDateTime::new(
  751|      0|            self,
  752|      0|            const_try!(Time::from_hms(hour, minute, second)),
  753|       |        ))
  754|      0|    }
  755|       |
  756|       |    /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
  757|       |    ///
  758|       |    /// ```rust
  759|       |    /// # use time::macros::date;
  760|       |    /// assert!(date!(1970 - 01 - 01).with_hms_milli(0, 0, 0, 0).is_ok());
  761|       |    /// assert!(date!(1970 - 01 - 01).with_hms_milli(24, 0, 0, 0).is_err());
  762|       |    /// ```
  763|      0|    pub const fn with_hms_milli(
  764|      0|        self,
  765|      0|        hour: u8,
  766|      0|        minute: u8,
  767|      0|        second: u8,
  768|      0|        millisecond: u16,
  769|      0|    ) -> Result<PrimitiveDateTime, error::ComponentRange> {
  770|      0|        Ok(PrimitiveDateTime::new(
  771|      0|            self,
  772|      0|            const_try!(Time::from_hms_milli(hour, minute, second, millisecond)),
  773|       |        ))
  774|      0|    }
  775|       |
  776|       |    /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
  777|       |    ///
  778|       |    /// ```rust
  779|       |    /// # use time::macros::date;
  780|       |    /// assert!(date!(1970 - 01 - 01).with_hms_micro(0, 0, 0, 0).is_ok());
  781|       |    /// assert!(date!(1970 - 01 - 01).with_hms_micro(24, 0, 0, 0).is_err());
  782|       |    /// ```
  783|      0|    pub const fn with_hms_micro(
  784|      0|        self,
  785|      0|        hour: u8,
  786|      0|        minute: u8,
  787|      0|        second: u8,
  788|      0|        microsecond: u32,
  789|      0|    ) -> Result<PrimitiveDateTime, error::ComponentRange> {
  790|      0|        Ok(PrimitiveDateTime::new(
  791|      0|            self,
  792|      0|            const_try!(Time::from_hms_micro(hour, minute, second, microsecond)),
  793|       |        ))
  794|      0|    }
  795|       |
  796|       |    /// Attempt to create a [`PrimitiveDateTime`] using the existing date and the provided time.
  797|       |    ///
  798|       |    /// ```rust
  799|       |    /// # use time::macros::date;
  800|       |    /// assert!(date!(1970 - 01 - 01).with_hms_nano(0, 0, 0, 0).is_ok());
  801|       |    /// assert!(date!(1970 - 01 - 01).with_hms_nano(24, 0, 0, 0).is_err());
  802|       |    /// ```
  803|      0|    pub const fn with_hms_nano(
  804|      0|        self,
  805|      0|        hour: u8,
  806|      0|        minute: u8,
  807|      0|        second: u8,
  808|      0|        nanosecond: u32,
  809|      0|    ) -> Result<PrimitiveDateTime, error::ComponentRange> {
  810|      0|        Ok(PrimitiveDateTime::new(
  811|      0|            self,
  812|      0|            const_try!(Time::from_hms_nano(hour, minute, second, nanosecond)),
  813|       |        ))
  814|      0|    }
  815|       |}
  816|       |// endregion attach time
  817|       |
  818|       |// region: formatting & parsing
  819|       |#[cfg(feature = "formatting")]
  820|       |impl Date {
  821|       |    /// Format the `Date` using the provided [format description](crate::format_description).
  822|       |    pub fn format_into(
  823|       |        self,
  824|       |        output: &mut impl io::Write,
  825|       |        format: &(impl Formattable + ?Sized),
  826|       |    ) -> Result<usize, error::Format> {
  827|       |        format.format_into(output, Some(self), None, None)
  828|       |    }
  829|       |
  830|       |    /// Format the `Date` using the provided [format description](crate::format_description).
  831|       |    ///
  832|       |    /// ```rust
  833|       |    /// # use time::{format_description, macros::date};
  834|       |    /// let format = format_description::parse("[year]-[month]-[day]")?;
  835|       |    /// assert_eq!(date!(2020 - 01 - 02).format(&format)?, "2020-01-02");
  836|       |    /// # Ok::<_, time::Error>(())
  837|       |    /// ```
  838|       |    pub fn format(self, format: &(impl Formattable + ?Sized)) -> Result<String, error::Format> {
  839|       |        format.format(Some(self), None, None)
  840|       |    }
  841|       |}
  842|       |
  843|       |#[cfg(feature = "parsing")]
  844|       |impl Date {
  845|       |    /// Parse a `Date` from the input using the provided [format
  846|       |    /// description](crate::format_description).
  847|       |    ///
  848|       |    /// ```rust
  849|       |    /// # use time::{format_description, macros::date, Date};
  850|       |    /// let format = format_description::parse("[year]-[month]-[day]")?;
  851|       |    /// assert_eq!(Date::parse("2020-01-02", &format)?, date!(2020 - 01 - 02));
  852|       |    /// # Ok::<_, time::Error>(())
  853|       |    /// ```
  854|       |    pub fn parse(
  855|       |        input: &str,
  856|       |        description: &(impl Parsable + ?Sized),
  857|       |    ) -> Result<Self, error::Parse> {
  858|       |        description.parse_date(input.as_bytes())
  859|       |    }
  860|       |}
  861|       |
  862|       |impl fmt::Display for Date {
  863|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  864|      0|        if cfg!(feature = "large-dates") && self.year().abs() >= 10_000 {
  865|      0|            write!(
  866|      0|                f,
  867|      0|                "{:+}-{:02}-{:02}",
  868|      0|                self.year(),
  869|      0|                self.month() as u8,
  870|      0|                self.day()
  871|      0|            )
  872|       |        } else {
  873|      0|            write!(
  874|      0|                f,
  875|      0|                "{:0width$}-{:02}-{:02}",
  876|      0|                self.year(),
  877|      0|                self.month() as u8,
  878|      0|                self.day(),
  879|      0|                width = 4 + (self.year() < 0) as usize
  880|      0|            )
  881|       |        }
  882|      0|    }
  883|       |}
  884|       |// endregion formatting & parsing
  885|       |
  886|       |// region: trait impls
  887|       |impl Add<Duration> for Date {
  888|       |    type Output = Self;
  889|       |
  890|      0|    fn add(self, duration: Duration) -> Self::Output {
  891|      0|        self.checked_add(duration)
  892|      0|            .expect("overflow adding duration to date")
  893|      0|    }
  894|       |}
  895|       |
  896|       |impl Add<StdDuration> for Date {
  897|       |    type Output = Self;
  898|       |
  899|      0|    fn add(self, duration: StdDuration) -> Self::Output {
  900|      0|        Self::from_julian_day(self.to_julian_day() + (duration.as_secs() / 86_400) as i32)
  901|      0|            .expect("overflow adding duration to date")
  902|      0|    }
  903|       |}
  904|       |
  905|       |impl_add_assign!(Date: Duration, StdDuration);
  906|       |
  907|       |impl Sub<Duration> for Date {
  908|       |    type Output = Self;
  909|       |
  910|      0|    fn sub(self, duration: Duration) -> Self::Output {
  911|      0|        self.checked_sub(duration)
  912|      0|            .expect("overflow subtracting duration from date")
  913|      0|    }
  914|       |}
  915|       |
  916|       |impl Sub<StdDuration> for Date {
  917|       |    type Output = Self;
  918|       |
  919|      0|    fn sub(self, duration: StdDuration) -> Self::Output {
  920|      0|        Self::from_julian_day(self.to_julian_day() - (duration.as_secs() / 86_400) as i32)
  921|      0|            .expect("overflow subtracting duration from date")
  922|      0|    }
  923|       |}
  924|       |
  925|       |impl_sub_assign!(Date: Duration, StdDuration);
  926|       |
  927|       |impl Sub for Date {
  928|       |    type Output = Duration;
  929|       |
  930|      0|    fn sub(self, other: Self) -> Self::Output {
  931|      0|        Duration::days((self.to_julian_day() - other.to_julian_day()) as _)
  932|      0|    }
  933|       |}
  934|       |// endregion trait impls
  935|       |
  936|       |#[cfg(test)]
  937|       |mod rusty_tests {
  938|       |	use crate::*;
  939|       |	use std::cmp::Ord;
  940|       |	use std::clone::Clone;
  941|       |	use std::cmp::PartialEq;
  942|       |	use std::ops::Add;
  943|       |	use std::cmp::PartialOrd;
  944|       |	use std::ops::Sub;
  945|       |	use std::cmp::Eq;
  946|       |//#[no_coverage]
  947|      1|#[test]
  948|       |#[should_panic]
  949|      1|#[timeout(3000)]
  950|      1|fn rusty_test_4778() {
  951|      1|    rusty_monitor::set_test_id(4778);
  952|      1|    let mut i64_0: i64 = 0i64;
  953|      1|    let mut u32_0: u32 = 91u32;
  954|      1|    let mut u8_0: u8 = 92u8;
  955|      1|    let mut u8_1: u8 = 97u8;
  956|      1|    let mut u8_2: u8 = 8u8;
  957|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
  958|      1|    let mut i32_0: i32 = -9i32;
  959|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  960|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_0);
  961|      1|    let mut i8_0: i8 = 5i8;
  962|      1|    let mut i8_1: i8 = 59i8;
  963|      1|    let mut i8_2: i8 = 89i8;
  964|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_0, i8_2, i8_1);
  965|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  966|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
  967|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  968|      1|    let mut u32_1: u32 = 1000000u32;
  969|      1|    let mut u8_3: u8 = 9u8;
  970|      1|    let mut u8_4: u8 = 30u8;
  971|      1|    let mut u8_5: u8 = 84u8;
  972|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  973|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  974|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_1);
  975|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  976|      1|    let mut i64_1: i64 = 2147483647i64;
  977|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  978|      1|    let mut u32_2: u32 = 10000u32;
  979|      1|    let mut u8_6: u8 = 24u8;
  980|      1|    let mut u8_7: u8 = 29u8;
  981|      1|    let mut u8_8: u8 = 12u8;
  982|      1|    let mut i32_1: i32 = 5i32;
  983|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
  984|      1|    let mut u32_3: u32 = 999999u32;
  985|      1|    let mut u8_9: u8 = 0u8;
  986|      1|    let mut u8_10: u8 = 12u8;
  987|      1|    let mut u8_11: u8 = 2u8;
  988|      1|    let mut i32_2: i32 = 16i32;
  989|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  990|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_3, u8_11, u8_10, u8_9, u32_3);
  991|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_2, u8_8, u8_7, u8_6, u32_2);
  992|      1|    let mut result_2: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_1, u8_2, u8_1, u8_0, u32_0);
  993|      1|    panic!("From RustyUnit with love");
  994|       |}
  995|       |
  996|       |//#[no_coverage]
  997|      1|#[test]
  998|       |#[should_panic]
  999|      1|#[timeout(3000)]
 1000|      1|fn rusty_test_362() {
 1001|      1|    rusty_monitor::set_test_id(362);
 1002|      1|    let mut i64_0: i64 = -170i64;
 1003|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1004|      1|    let mut i64_1: i64 = 86400i64;
 1005|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1006|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1007|      1|    let mut i64_2: i64 = 1000000000i64;
 1008|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1009|      1|    let mut u16_0: u16 = 7u16;
 1010|      1|    let mut i32_0: i32 = 16i32;
 1011|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1012|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_3);
 1013|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1014|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_0);
 1015|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1016|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1017|      1|    let mut u32_0: u32 = 999999999u32;
 1018|      1|    let mut u8_0: u8 = 31u8;
 1019|      1|    let mut u8_1: u8 = 7u8;
 1020|      1|    let mut u8_2: u8 = 7u8;
 1021|      1|    let mut i128_0: i128 = 0i128;
 1022|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1023|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_4);
 1024|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1025|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 1026|      1|    let mut date_3: crate::date::Date = std::ops::Sub::sub(date_2, duration_5);
 1027|      1|    panic!("From RustyUnit with love");
 1028|       |}
 1029|       |
 1030|       |//#[no_coverage]
 1031|      1|#[test]
 1032|       |#[should_panic]
 1033|      1|#[timeout(3000)]
 1034|      1|fn rusty_test_542() {
 1035|      1|    rusty_monitor::set_test_id(542);
 1036|      1|    let mut i64_0: i64 = 2147483647i64;
 1037|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1038|      1|    let mut i32_0: i32 = 331i32;
 1039|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1040|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_0);
 1041|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1042|      1|    let mut primitivedatetime_0_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
 1043|      1|    panic!("From RustyUnit with love");
 1044|       |}
 1045|       |
 1046|       |//#[no_coverage]
 1047|      1|#[test]
 1048|       |#[should_panic]
 1049|      1|#[timeout(3000)]
 1050|      1|fn rusty_test_90() {
 1051|      1|    rusty_monitor::set_test_id(90);
 1052|      1|    let mut i8_0: i8 = 6i8;
 1053|      1|    let mut i8_1: i8 = 105i8;
 1054|      1|    let mut i8_2: i8 = 1i8;
 1055|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1056|      1|    let mut i8_3: i8 = 1i8;
 1057|      1|    let mut i8_4: i8 = 6i8;
 1058|      1|    let mut i8_5: i8 = 23i8;
 1059|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1060|      1|    let mut u32_0: u32 = 10000u32;
 1061|      1|    let mut u8_0: u8 = 4u8;
 1062|      1|    let mut u8_1: u8 = 5u8;
 1063|      1|    let mut u8_2: u8 = 45u8;
 1064|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1065|      1|    let mut u32_1: u32 = 100000000u32;
 1066|      1|    let mut u8_3: u8 = 28u8;
 1067|      1|    let mut u8_4: u8 = 92u8;
 1068|      1|    let mut u8_5: u8 = 12u8;
 1069|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1070|      1|    let mut i32_0: i32 = 285i32;
 1071|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1072|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 1073|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 1074|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_1};
 1075|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 1076|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1077|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1078|      1|    let mut i64_0: i64 = -29i64;
 1079|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1080|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1081|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1082|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1083|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1084|      1|    let mut i64_1: i64 = 1000000000i64;
 1085|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1086|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1087|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_4, duration_3);
 1088|      1|    let mut time_3: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_5);
 1089|      1|    let mut i64_2: i64 = 1i64;
 1090|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 1091|      1|    let mut i32_1: i32 = -26i32;
 1092|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1093|      1|    let mut date_2: crate::date::Date = std::ops::Sub::sub(date_1, duration_4);
 1094|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1095|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_3, duration_0);
 1096|      1|    let mut u8_6: u8 = crate::time::Time::second(time_2);
 1097|      1|    let mut u16_0: u16 = crate::offset_date_time::OffsetDateTime::ordinal(offsetdatetime_1);
 1098|      1|    panic!("From RustyUnit with love");
 1099|       |}
 1100|       |
 1101|       |//#[no_coverage]
 1102|      1|#[test]
 1103|       |#[should_panic]
 1104|      1|#[timeout(3000)]
 1105|      1|fn rusty_test_603() {
 1106|      1|    rusty_monitor::set_test_id(603);
 1107|      1|    let mut i64_0: i64 = 12i64;
 1108|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1109|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1110|      1|    let mut i32_0: i32 = 71i32;
 1111|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1112|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1113|      1|    let mut i32_1: i32 = 398i32;
 1114|      1|    let mut i64_1: i64 = 1000000i64;
 1115|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1116|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1117|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
 1118|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1119|      1|    let mut i64_2: i64 = 1000000000i64;
 1120|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1121|      1|    let mut i8_0: i8 = 1i8;
 1122|      1|    let mut i8_1: i8 = 23i8;
 1123|      1|    let mut i8_2: i8 = 0i8;
 1124|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1125|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1126|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_1);
 1127|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1128|      1|    let mut i32_2: i32 = 376i32;
 1129|      1|    let mut i64_3: i64 = 2440588i64;
 1130|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_2);
 1131|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_4);
 1132|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1133|      1|    let mut duration_6: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1134|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1135|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_4, duration_6);
 1136|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_5);
 1137|      1|    let mut u8_0: u8 = crate::date::Date::day(date_1);
 1138|      1|    panic!("From RustyUnit with love");
 1139|       |}
 1140|       |
 1141|       |//#[no_coverage]
 1142|      1|#[test]
 1143|       |#[should_panic]
 1144|      1|#[timeout(3000)]
 1145|      1|fn rusty_test_3775() {
 1146|      1|    rusty_monitor::set_test_id(3775);
 1147|      1|    let mut i8_0: i8 = 44i8;
 1148|      1|    let mut i8_1: i8 = 1i8;
 1149|      1|    let mut i8_2: i8 = 1i8;
 1150|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1151|      1|    let mut i128_0: i128 = 0i128;
 1152|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1153|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1154|      1|    let mut i32_0: i32 = 26i32;
 1155|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1156|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_1);
 1157|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1158|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1159|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1160|      1|    let mut i8_3: i8 = 2i8;
 1161|      1|    let mut i8_4: i8 = 24i8;
 1162|      1|    let mut i8_5: i8 = 6i8;
 1163|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1164|      1|    let mut u32_0: u32 = 10000000u32;
 1165|      1|    let mut u8_0: u8 = 1u8;
 1166|      1|    let mut u8_1: u8 = 60u8;
 1167|      1|    let mut u8_2: u8 = 31u8;
 1168|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1169|      1|    let mut u32_1: u32 = 30u32;
 1170|      1|    let mut u8_3: u8 = 29u8;
 1171|      1|    let mut u8_4: u8 = 7u8;
 1172|      1|    let mut u8_5: u8 = 11u8;
 1173|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1174|      1|    let mut i64_0: i64 = 56i64;
 1175|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1176|      1|    let mut i32_1: i32 = 116i32;
 1177|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1178|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_2);
 1179|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_2);
 1180|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_2, time_1);
 1181|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_3, offset: utcoffset_1};
 1182|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1183|      1|    let mut i8_6: i8 = 23i8;
 1184|      1|    let mut i8_7: i8 = 60i8;
 1185|      1|    let mut i8_8: i8 = -17i8;
 1186|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1187|      1|    let mut i64_1: i64 = 3600i64;
 1188|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1189|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1190|      1|    let mut u16_0: u16 = 7u16;
 1191|      1|    let mut i32_2: i32 = 336i32;
 1192|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1193|      1|    let mut date_5: crate::date::Date = std::ops::Add::add(date_4, duration_4);
 1194|      1|    let mut i32_3: i32 = crate::offset_date_time::OffsetDateTime::year(offsetdatetime_1);
 1195|      1|    panic!("From RustyUnit with love");
 1196|       |}
 1197|       |
 1198|       |//#[no_coverage]
 1199|      1|#[test]
 1200|       |#[should_panic]
 1201|      1|#[timeout(3000)]
 1202|      1|fn rusty_test_425() {
 1203|      1|    rusty_monitor::set_test_id(425);
 1204|      1|    let mut i32_0: i32 = 1000000i32;
 1205|      1|    let mut i64_0: i64 = 2147483647i64;
 1206|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1207|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1208|      1|    let mut i8_0: i8 = 23i8;
 1209|      1|    let mut i8_1: i8 = 3i8;
 1210|      1|    let mut i8_2: i8 = 3i8;
 1211|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1212|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1213|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 1214|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 1215|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_1);
 1216|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
 1217|      1|    let mut i64_1: i64 = 2147483647i64;
 1218|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1219|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1220|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1221|      1|    let mut i8_3: i8 = 4i8;
 1222|      1|    let mut i8_4: i8 = 60i8;
 1223|      1|    let mut i8_5: i8 = 5i8;
 1224|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1225|      1|    let mut i8_6: i8 = 1i8;
 1226|      1|    let mut i8_7: i8 = 2i8;
 1227|      1|    let mut i8_8: i8 = 127i8;
 1228|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1229|      1|    let mut u32_0: u32 = 100000000u32;
 1230|      1|    let mut u8_0: u8 = 3u8;
 1231|      1|    let mut u8_1: u8 = 2u8;
 1232|      1|    let mut u8_2: u8 = 24u8;
 1233|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1234|      1|    let mut date_2: crate::date::Date = std::clone::Clone::clone(date_1_ref_0);
 1235|      1|    panic!("From RustyUnit with love");
 1236|       |}
 1237|       |
 1238|       |//#[no_coverage]
 1239|      1|#[test]
 1240|       |#[should_panic]
 1241|      1|#[timeout(3000)]
 1242|      1|fn rusty_test_5174() {
 1243|      1|    rusty_monitor::set_test_id(5174);
 1244|      1|    let mut i64_0: i64 = 60i64;
 1245|      1|    let mut i64_1: i64 = 12i64;
 1246|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1247|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1248|      1|    let mut i32_0: i32 = 145i32;
 1249|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1250|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1251|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
 1252|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1253|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1254|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1255|      1|    let mut f64_0: f64 = 0.000000f64;
 1256|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1257|      1|    let mut i8_0: i8 = 1i8;
 1258|      1|    let mut i8_1: i8 = 2i8;
 1259|      1|    let mut i8_2: i8 = 1i8;
 1260|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1261|      1|    let mut i32_1: i32 = 116i32;
 1262|      1|    let mut i64_2: i64 = 56i64;
 1263|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1264|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_1);
 1265|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1266|      1|    let mut i32_2: i32 = 511i32;
 1267|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1268|      1|    let mut date_3: crate::date::Date = std::ops::Sub::sub(date_2, duration_6);
 1269|      1|    let mut date_3_ref_0: &crate::date::Date = &mut date_3;
 1270|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(date_3_ref_0, date_1_ref_0);
 1271|      1|    panic!("From RustyUnit with love");
 1272|       |}
 1273|       |
 1274|       |//#[no_coverage]
 1275|      1|#[test]
 1276|       |#[should_panic]
 1277|      1|#[timeout(3000)]
 1278|      1|fn rusty_test_596() {
 1279|      1|    rusty_monitor::set_test_id(596);
 1280|      1|    let mut u8_0: u8 = 4u8;
 1281|      1|    let mut month_0: month::Month = crate::month::Month::April;
 1282|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1283|      1|    let mut i32_0: i32 = 132i32;
 1284|      1|    let mut u8_1: u8 = 9u8;
 1285|      1|    let mut month_2: month::Month = crate::month::Month::March;
 1286|      1|    let mut i32_1: i32 = 3600i32;
 1287|      1|    let mut u8_2: u8 = 56u8;
 1288|      1|    let mut month_3: month::Month = crate::month::Month::May;
 1289|      1|    let mut i32_2: i32 = 207i32;
 1290|      1|    let mut u8_3: u8 = 12u8;
 1291|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1292|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1293|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1294|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_0);
 1295|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_0);
 1296|      1|    let mut month_4: month::Month = crate::date::Date::month(date_1);
 1297|      1|    let mut i32_3: i32 = 4i32;
 1298|      1|    let mut u8_4: u8 = 7u8;
 1299|      1|    let mut month_5: month::Month = crate::month::Month::October;
 1300|      1|    let mut month_6: month::Month = crate::month::Month::previous(month_5);
 1301|      1|    let mut i32_4: i32 = 128i32;
 1302|      1|    let mut u8_5: u8 = 8u8;
 1303|      1|    let mut month_7: month::Month = crate::month::Month::October;
 1304|      1|    let mut i32_5: i32 = 0i32;
 1305|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_5, month_7, u8_5);
 1306|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_4, month_6, u8_4);
 1307|      1|    let mut result_2: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_4, u8_3);
 1308|      1|    let mut result_3: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_2, month_3, u8_2);
 1309|      1|    let mut result_4: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_1, month_2, u8_1);
 1310|      1|    let mut result_5: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_0, month_1, u8_0);
 1311|      1|    panic!("From RustyUnit with love");
 1312|       |}
 1313|       |
 1314|       |//#[no_coverage]
 1315|      1|#[test]
 1316|       |#[should_panic]
 1317|      1|#[timeout(3000)]
 1318|      1|fn rusty_test_63() {
 1319|      1|    rusty_monitor::set_test_id(63);
 1320|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1321|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1322|      1|    let mut i64_0: i64 = 86400i64;
 1323|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1324|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1325|      1|    let mut u16_0: u16 = 367u16;
 1326|      1|    let mut i32_0: i32 = 359i32;
 1327|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1328|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1329|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1330|      1|    let mut u32_0: u32 = 100u32;
 1331|      1|    let mut u8_0: u8 = 30u8;
 1332|      1|    let mut u8_1: u8 = 74u8;
 1333|      1|    let mut u8_2: u8 = 59u8;
 1334|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1335|      1|    let mut i8_0: i8 = 24i8;
 1336|      1|    let mut i8_1: i8 = 47i8;
 1337|      1|    let mut i8_2: i8 = 23i8;
 1338|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1339|      1|    let mut u32_1: u32 = 10000u32;
 1340|      1|    let mut u8_3: u8 = 11u8;
 1341|      1|    let mut u8_4: u8 = 3u8;
 1342|      1|    let mut u8_5: u8 = 30u8;
 1343|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1344|      1|    let mut i64_1: i64 = 0i64;
 1345|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1346|      1|    let mut u16_1: u16 = 367u16;
 1347|      1|    let mut i32_1: i32 = -223i32;
 1348|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1349|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_2);
 1350|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_2);
 1351|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 1352|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_1, time_1);
 1353|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1354|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1355|      1|    let mut time_3: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1356|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_nano(primitivedatetime_0);
 1357|      1|    panic!("From RustyUnit with love");
 1358|       |}
 1359|       |
 1360|       |//#[no_coverage]
 1361|      1|#[test]
 1362|       |#[should_panic]
 1363|      1|#[timeout(3000)]
 1364|      1|fn rusty_test_2916() {
 1365|      1|    rusty_monitor::set_test_id(2916);
 1366|      1|    let mut i32_0: i32 = -28i32;
 1367|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1368|      1|    let mut date_0_ref_0: &crate::date::Date = &mut date_0;
 1369|      1|    let mut i32_1: i32 = 178i32;
 1370|      1|    let mut u32_0: u32 = 91u32;
 1371|      1|    let mut u8_0: u8 = 92u8;
 1372|      1|    let mut u8_1: u8 = 97u8;
 1373|      1|    let mut u8_2: u8 = 8u8;
 1374|      1|    let mut i64_0: i64 = 1000000000i64;
 1375|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1376|      1|    let mut i32_2: i32 = -9i32;
 1377|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 1378|      1|    let mut date_2: crate::date::Date = std::ops::Add::add(date_1, duration_0);
 1379|      1|    let mut i8_0: i8 = 5i8;
 1380|      1|    let mut i8_1: i8 = 59i8;
 1381|      1|    let mut i8_2: i8 = 0i8;
 1382|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1383|      1|    let mut i8_3: i8 = 5i8;
 1384|      1|    let mut i8_4: i8 = 89i8;
 1385|      1|    let mut i8_5: i8 = 60i8;
 1386|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1387|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1388|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_1);
 1389|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1390|      1|    let mut i32_3: i32 = 76i32;
 1391|      1|    let mut i32_4: i32 = 139i32;
 1392|      1|    let mut i64_1: i64 = 1000i64;
 1393|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_4);
 1394|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_3);
 1395|      1|    let mut u32_1: u32 = 1000000u32;
 1396|      1|    let mut u8_3: u8 = 9u8;
 1397|      1|    let mut u8_4: u8 = 30u8;
 1398|      1|    let mut u8_5: u8 = 84u8;
 1399|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1400|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1401|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_1);
 1402|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
 1403|      1|    let mut i64_2: i64 = 2147483647i64;
 1404|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 1405|      1|    let mut u32_2: u32 = 10000u32;
 1406|      1|    let mut u8_6: u8 = 24u8;
 1407|      1|    let mut u8_7: u8 = 29u8;
 1408|      1|    let mut u8_8: u8 = 12u8;
 1409|      1|    let mut i32_5: i32 = 5i32;
 1410|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_5};
 1411|      1|    let mut u32_3: u32 = 999999u32;
 1412|      1|    let mut u8_9: u8 = 2u8;
 1413|      1|    let mut u8_10: u8 = 12u8;
 1414|      1|    let mut u8_11: u8 = 2u8;
 1415|      1|    let mut i32_6: i32 = 16i32;
 1416|      1|    let mut date_4: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_6);
 1417|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_4, u8_11, u8_10, u8_9, u32_3);
 1418|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_3, u8_8, u8_7, u8_6, u32_2);
 1419|      1|    let mut result_2: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_2, u8_2, u8_1, u8_0, u32_0);
 1420|      1|    let mut bool_0: bool = crate::util::is_leap_year(i32_1);
 1421|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(date_0_ref_0);
 1422|      1|    panic!("From RustyUnit with love");
 1423|       |}
 1424|       |
 1425|       |//#[no_coverage]
 1426|      1|#[test]
 1427|       |#[should_panic]
 1428|      1|#[timeout(3000)]
 1429|      1|fn rusty_test_1297() {
 1430|      1|    rusty_monitor::set_test_id(1297);
 1431|      1|    let mut i32_0: i32 = 76i32;
 1432|      1|    let mut i64_0: i64 = 1i64;
 1433|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1434|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_0);
 1435|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1436|      1|    let mut u16_0: u16 = 7u16;
 1437|      1|    let mut i32_1: i32 = 224i32;
 1438|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1439|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_2);
 1440|      1|    let mut weekday_0: weekday::Weekday = crate::date::Date::weekday(date_1);
 1441|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
 1442|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1443|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1444|      1|    let mut i8_0: i8 = -15i8;
 1445|      1|    let mut i8_1: i8 = 66i8;
 1446|      1|    let mut i8_2: i8 = -4i8;
 1447|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1448|      1|    let mut i8_3: i8 = 1i8;
 1449|      1|    let mut i8_4: i8 = 3i8;
 1450|      1|    let mut i8_5: i8 = 59i8;
 1451|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1452|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
 1453|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1454|      1|    let mut u32_0: u32 = 100000u32;
 1455|      1|    let mut u8_0: u8 = 29u8;
 1456|      1|    let mut u8_1: u8 = 30u8;
 1457|      1|    let mut u8_2: u8 = 6u8;
 1458|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1459|      1|    let mut i32_2: i32 = 387i32;
 1460|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1461|      1|    let mut month_0: month::Month = crate::month::Month::October;
 1462|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1463|      1|    let mut u8_3: u8 = crate::weekday::Weekday::number_from_monday(weekday_1);
 1464|      1|    panic!("From RustyUnit with love");
 1465|       |}
 1466|       |
 1467|       |//#[no_coverage]
 1468|      1|#[test]
 1469|       |#[should_panic]
 1470|      1|#[timeout(3000)]
 1471|      1|fn rusty_test_1544() {
 1472|      1|    rusty_monitor::set_test_id(1544);
 1473|      1|    let mut i32_0: i32 = 65i32;
 1474|      1|    let mut i64_0: i64 = 604800i64;
 1475|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1476|      1|    let mut i32_1: i32 = 195i32;
 1477|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1478|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_0);
 1479|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
 1480|      1|    let mut i32_2: i32 = 26i32;
 1481|      1|    let mut i64_1: i64 = 60i64;
 1482|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1483|      1|    let mut i64_2: i64 = 60i64;
 1484|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1485|      1|    let mut u16_0: u16 = 999u16;
 1486|      1|    let mut i32_3: i32 = -72i32;
 1487|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1488|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_2);
 1489|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
 1490|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_1);
 1491|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1492|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 1493|      1|    let mut u32_0: u32 = 999999999u32;
 1494|      1|    let mut u8_0: u8 = 29u8;
 1495|      1|    let mut u8_1: u8 = 5u8;
 1496|      1|    let mut u8_2: u8 = 75u8;
 1497|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1498|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1499|      1|    let mut i64_3: i64 = 2147483647i64;
 1500|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1501|      1|    let mut i128_0: i128 = 1000i128;
 1502|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1503|      1|    let mut i32_4: i32 = 32i32;
 1504|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_4};
 1505|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_4);
 1506|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_2, duration_4);
 1507|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1508|      1|    let mut u32_1: u32 = 10000000u32;
 1509|      1|    let mut u8_3: u8 = 29u8;
 1510|      1|    let mut u8_4: u8 = 1u8;
 1511|      1|    let mut u8_5: u8 = 1u8;
 1512|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1513|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1514|      1|    let mut date_5: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1515|      1|    let mut date_5_ref_0: &crate::date::Date = &mut date_5;
 1516|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(date_5_ref_0, date_1_ref_0);
 1517|      1|    panic!("From RustyUnit with love");
 1518|       |}
 1519|       |
 1520|       |//#[no_coverage]
 1521|      1|#[test]
 1522|       |#[should_panic]
 1523|      1|#[timeout(3000)]
 1524|      1|fn rusty_test_811() {
 1525|      1|    rusty_monitor::set_test_id(811);
 1526|      1|    let mut i128_0: i128 = 0i128;
 1527|      1|    let mut i64_0: i64 = 604800i64;
 1528|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1529|      1|    let mut u16_0: u16 = 59u16;
 1530|      1|    let mut i32_0: i32 = 359i32;
 1531|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1532|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_0);
 1533|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1534|      1|    let mut month_0: month::Month = crate::month::Month::March;
 1535|      1|    let mut u32_0: u32 = 10000000u32;
 1536|      1|    let mut u8_0: u8 = 60u8;
 1537|      1|    let mut u8_1: u8 = 12u8;
 1538|      1|    let mut u8_2: u8 = 3u8;
 1539|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1540|      1|    let mut i32_1: i32 = -61i32;
 1541|      1|    let mut i64_1: i64 = 12i64;
 1542|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1543|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1544|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_1);
 1545|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 1546|      1|    let mut i8_0: i8 = 5i8;
 1547|      1|    let mut i8_1: i8 = 3i8;
 1548|      1|    let mut i8_2: i8 = 23i8;
 1549|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1550|      1|    let mut u32_1: u32 = 10000000u32;
 1551|      1|    let mut u8_3: u8 = 59u8;
 1552|      1|    let mut u8_4: u8 = 30u8;
 1553|      1|    let mut u8_5: u8 = 76u8;
 1554|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1555|      1|    let mut i8_3: i8 = 23i8;
 1556|      1|    let mut i8_4: i8 = 127i8;
 1557|      1|    let mut i8_5: i8 = 60i8;
 1558|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1559|      1|    let mut i8_6: i8 = 24i8;
 1560|      1|    let mut i8_7: i8 = 23i8;
 1561|      1|    let mut i8_8: i8 = 5i8;
 1562|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1563|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1564|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1565|      1|    let mut f32_1: f32 = 1065353216.000000f32;
 1566|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1567|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_3, duration_2);
 1568|      1|    let mut i64_2: i64 = 60i64;
 1569|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 1570|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1571|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1572|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1573|      1|    panic!("From RustyUnit with love");
 1574|       |}
 1575|       |
 1576|       |//#[no_coverage]
 1577|      1|#[test]
 1578|       |#[should_panic]
 1579|      1|#[timeout(3000)]
 1580|      1|fn rusty_test_3489() {
 1581|      1|    rusty_monitor::set_test_id(3489);
 1582|      1|    let mut i32_0: i32 = 86399i32;
 1583|      1|    let mut i8_0: i8 = 2i8;
 1584|      1|    let mut i8_1: i8 = 60i8;
 1585|      1|    let mut i8_2: i8 = 2i8;
 1586|      1|    let mut i64_0: i64 = 12i64;
 1587|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1588|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1589|      1|    let mut i32_1: i32 = 145i32;
 1590|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1591|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1592|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
 1593|      1|    let mut u32_0: u32 = 72u32;
 1594|      1|    let mut u8_0: u8 = 10u8;
 1595|      1|    let mut u8_1: u8 = 5u8;
 1596|      1|    let mut u8_2: u8 = 1u8;
 1597|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1598|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1599|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1600|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1601|      1|    let mut i8_3: i8 = 127i8;
 1602|      1|    let mut i8_4: i8 = -36i8;
 1603|      1|    let mut i8_5: i8 = 24i8;
 1604|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1605|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1606|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_1);
 1607|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1608|      1|    let mut i64_1: i64 = 1000i64;
 1609|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1610|      1|    let mut i8_6: i8 = 1i8;
 1611|      1|    let mut i8_7: i8 = 2i8;
 1612|      1|    let mut i8_8: i8 = 1i8;
 1613|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1614|      1|    let mut i32_2: i32 = 116i32;
 1615|      1|    let mut i64_2: i64 = 56i64;
 1616|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1617|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_3, i32_2);
 1618|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1619|      1|    let mut i32_3: i32 = 511i32;
 1620|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1621|      1|    let mut date_3: crate::date::Date = std::ops::Sub::sub(date_2, duration_5);
 1622|      1|    let mut date_3_ref_0: &crate::date::Date = &mut date_3;
 1623|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(date_3_ref_0, date_1_ref_0);
 1624|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_hms(i8_2, i8_1, i8_0);
 1625|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_julian_day(i32_0);
 1626|      1|    panic!("From RustyUnit with love");
 1627|       |}
 1628|       |
 1629|       |//#[no_coverage]
 1630|      1|#[test]
 1631|       |#[should_panic]
 1632|      1|#[timeout(3000)]
 1633|      1|fn rusty_test_6406() {
 1634|      1|    rusty_monitor::set_test_id(6406);
 1635|      1|    let mut i32_0: i32 = 370i32;
 1636|      1|    let mut i64_0: i64 = 1000000000i64;
 1637|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1638|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1639|      1|    let mut i32_1: i32 = 37i32;
 1640|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1641|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_1);
 1642|      1|    let mut u16_0: u16 = 999u16;
 1643|      1|    let mut i32_2: i32 = 296i32;
 1644|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1645|      1|    let mut i32_3: i32 = 32i32;
 1646|      1|    let mut i64_1: i64 = 2147483647i64;
 1647|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_3);
 1648|      1|    let mut i32_4: i32 = 263i32;
 1649|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_4};
 1650|      1|    let mut date_4: crate::date::Date = std::ops::Sub::sub(date_3, duration_2);
 1651|      1|    let mut i64_2: i64 = 2440588i64;
 1652|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 1653|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1654|      1|    let mut u16_1: u16 = 0u16;
 1655|      1|    let mut i32_5: i32 = 2i32;
 1656|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_1);
 1657|      1|    let mut date_6: crate::date::Date = std::ops::Sub::sub(date_5, duration_4);
 1658|      1|    let mut date_6_ref_0: &crate::date::Date = &mut date_6;
 1659|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1660|      1|    let mut duration_5: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1661|      1|    let mut i32_6: i32 = 147i32;
 1662|      1|    let mut date_7: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_6);
 1663|      1|    let mut date_8: crate::date::Date = std::ops::Add::add(date_7, duration_5);
 1664|      1|    let mut date_8_ref_0: &crate::date::Date = &mut date_8;
 1665|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 1666|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(date_8_ref_0, date_6_ref_0);
 1667|      1|    panic!("From RustyUnit with love");
 1668|       |}
 1669|       |
 1670|       |//#[no_coverage]
 1671|      1|#[test]
 1672|       |#[should_panic]
 1673|      1|#[timeout(3000)]
 1674|      1|fn rusty_test_8314() {
 1675|      1|    rusty_monitor::set_test_id(8314);
 1676|      1|    let mut u16_0: u16 = 10u16;
 1677|      1|    let mut i32_0: i32 = 14i32;
 1678|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1679|      1|    let mut i64_0: i64 = 12i64;
 1680|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1681|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1682|      1|    let mut i32_1: i32 = 145i32;
 1683|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1684|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1685|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
 1686|      1|    let mut u32_0: u32 = 72u32;
 1687|      1|    let mut u8_0: u8 = 10u8;
 1688|      1|    let mut u8_1: u8 = 5u8;
 1689|      1|    let mut u8_2: u8 = 1u8;
 1690|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1691|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1692|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1693|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1694|      1|    let mut i8_0: i8 = 127i8;
 1695|      1|    let mut i8_1: i8 = -36i8;
 1696|      1|    let mut i8_2: i8 = 24i8;
 1697|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1698|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1699|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_1);
 1700|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1701|      1|    let mut i64_1: i64 = 1000i64;
 1702|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1703|      1|    let mut f64_0: f64 = 0.000000f64;
 1704|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1705|      1|    let mut i8_3: i8 = 1i8;
 1706|      1|    let mut i8_4: i8 = 2i8;
 1707|      1|    let mut i8_5: i8 = 1i8;
 1708|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1709|      1|    let mut i32_2: i32 = 116i32;
 1710|      1|    let mut i64_2: i64 = 56i64;
 1711|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1712|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_2);
 1713|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1714|      1|    let mut i32_3: i32 = 511i32;
 1715|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1716|      1|    let mut date_3: crate::date::Date = std::ops::Sub::sub(date_2, duration_6);
 1717|      1|    let mut date_3_ref_0: &crate::date::Date = &mut date_3;
 1718|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(date_3_ref_0, date_1_ref_0);
 1719|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1720|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_ordinal_date(i32_0, u16_0);
 1721|      1|    let mut tuple_0: (i8, i8, i8) = crate::utc_offset::UtcOffset::as_hms(utcoffset_0);
 1722|      1|    panic!("From RustyUnit with love");
 1723|       |}
 1724|       |
 1725|       |//#[no_coverage]
 1726|      1|#[test]
 1727|       |#[should_panic]
 1728|      1|#[timeout(3000)]
 1729|      1|fn rusty_test_275() {
 1730|      1|    rusty_monitor::set_test_id(275);
 1731|      1|    let mut i8_0: i8 = 0i8;
 1732|      1|    let mut i8_1: i8 = 0i8;
 1733|      1|    let mut i8_2: i8 = -116i8;
 1734|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1735|      1|    let mut i64_0: i64 = 70i64;
 1736|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1737|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1738|      1|    let mut i32_0: i32 = 150i32;
 1739|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1740|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_1);
 1741|      1|    let mut i64_1: i64 = 50i64;
 1742|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1743|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1744|      1|    let mut u32_0: u32 = 100u32;
 1745|      1|    let mut u8_0: u8 = 11u8;
 1746|      1|    let mut u8_1: u8 = 89u8;
 1747|      1|    let mut u8_2: u8 = 12u8;
 1748|      1|    let mut i32_1: i32 = 20i32;
 1749|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1750|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1751|      1|    let mut month_1: month::Month = crate::month::Month::January;
 1752|      1|    let mut month_2: month::Month = crate::month::Month::April;
 1753|      1|    let mut month_3: month::Month = crate::month::Month::previous(month_2);
 1754|      1|    let mut month_4: month::Month = crate::month::Month::previous(month_1);
 1755|      1|    let mut month_5: month::Month = crate::month::Month::previous(month_0);
 1756|      1|    panic!("From RustyUnit with love");
 1757|       |}
 1758|       |
 1759|       |//#[no_coverage]
 1760|      1|#[test]
 1761|       |#[should_panic]
 1762|      1|#[timeout(3000)]
 1763|      1|fn rusty_test_680() {
 1764|      1|    rusty_monitor::set_test_id(680);
 1765|      1|    let mut i64_0: i64 = 1000000i64;
 1766|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1767|      1|    let mut u16_0: u16 = 366u16;
 1768|      1|    let mut i32_0: i32 = 268i32;
 1769|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1770|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
 1771|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1772|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1773|      1|    let mut u16_1: u16 = 0u16;
 1774|      1|    let mut i32_1: i32 = 46i32;
 1775|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1776|      1|    let mut date_3: crate::date::Date = std::ops::Add::add(date_2, duration_1);
 1777|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
 1778|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_1);
 1779|      1|    let mut i64_1: i64 = 2440588i64;
 1780|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1781|      1|    let mut i64_2: i64 = 198i64;
 1782|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1783|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1784|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_3);
 1785|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1786|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1787|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1788|      1|    let mut i32_2: i32 = 15i32;
 1789|      1|    let mut date_4: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1790|      1|    let mut date_5: crate::date::Date = std::ops::Sub::sub(date_4, duration_4);
 1791|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_5, time_0);
 1792|      1|    let mut u32_0: u32 = crate::primitive_date_time::PrimitiveDateTime::microsecond(primitivedatetime_1);
 1793|      1|    let mut month_0: month::Month = crate::month::Month::February;
 1794|      1|    panic!("From RustyUnit with love");
 1795|       |}
 1796|       |
 1797|       |//#[no_coverage]
 1798|      1|#[test]
 1799|       |#[should_panic]
 1800|      1|#[timeout(3000)]
 1801|      1|fn rusty_test_306() {
 1802|      1|    rusty_monitor::set_test_id(306);
 1803|      1|    let mut i128_0: i128 = 1000000000i128;
 1804|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1805|      1|    let mut u16_0: u16 = 367u16;
 1806|      1|    let mut i32_0: i32 = -147i32;
 1807|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1808|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_0);
 1809|      1|    let mut i8_0: i8 = 6i8;
 1810|      1|    let mut i8_1: i8 = 3i8;
 1811|      1|    let mut i8_2: i8 = 6i8;
 1812|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1813|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1814|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1815|      1|    let mut u32_0: u32 = 1000u32;
 1816|      1|    let mut u8_0: u8 = 24u8;
 1817|      1|    let mut u8_1: u8 = 53u8;
 1818|      1|    let mut u8_2: u8 = 1u8;
 1819|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1820|      1|    let mut i64_0: i64 = 2440588i64;
 1821|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1822|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1823|      1|    let mut i32_1: i32 = 320i32;
 1824|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1825|      1|    let mut date_3: crate::date::Date = std::ops::Add::add(date_2, duration_3);
 1826|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 1827|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_1);
 1828|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1829|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_1);
 1830|      1|    let mut i64_1: i64 = 3600i64;
 1831|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1832|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1833|      1|    let mut i32_2: i32 = 189i32;
 1834|      1|    let mut date_4: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1835|      1|    let mut date_5: crate::date::Date = std::ops::Sub::sub(date_4, duration_5);
 1836|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1837|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_5);
 1838|      1|    let mut u8_3: u8 = crate::offset_date_time::OffsetDateTime::second(offsetdatetime_3);
 1839|      1|    let mut u8_4: u8 = crate::offset_date_time::OffsetDateTime::second(offsetdatetime_1);
 1840|      1|    panic!("From RustyUnit with love");
 1841|       |}
 1842|       |
 1843|       |//#[no_coverage]
 1844|      1|#[test]
 1845|       |#[should_panic]
 1846|      1|#[timeout(3000)]
 1847|      1|fn rusty_test_110() {
 1848|      1|    rusty_monitor::set_test_id(110);
 1849|      1|    let mut i64_0: i64 = 37i64;
 1850|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1851|      1|    let mut i64_1: i64 = 1000i64;
 1852|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1853|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1854|      1|    let mut i32_0: i32 = 392i32;
 1855|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1856|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_2);
 1857|      1|    let mut i8_0: i8 = -35i8;
 1858|      1|    let mut i8_1: i8 = 108i8;
 1859|      1|    let mut i8_2: i8 = 127i8;
 1860|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1861|      1|    let mut i8_3: i8 = 5i8;
 1862|      1|    let mut i8_4: i8 = 3i8;
 1863|      1|    let mut i8_5: i8 = 5i8;
 1864|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1865|      1|    let mut u32_0: u32 = 1000u32;
 1866|      1|    let mut u8_0: u8 = 60u8;
 1867|      1|    let mut u8_1: u8 = 8u8;
 1868|      1|    let mut u8_2: u8 = 6u8;
 1869|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1870|      1|    let mut i32_1: i32 = 195i32;
 1871|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1872|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
 1873|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_1);
 1874|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1875|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
 1876|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_1, date_1);
 1877|      1|    let mut bool_0: bool = crate::duration::Duration::is_negative(duration_0);
 1878|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Sunday;
 1879|      1|    panic!("From RustyUnit with love");
 1880|       |}
 1881|       |
 1882|       |//#[no_coverage]
 1883|      1|#[test]
 1884|       |#[should_panic]
 1885|      1|#[timeout(3000)]
 1886|      1|fn rusty_test_2339() {
 1887|      1|    rusty_monitor::set_test_id(2339);
 1888|      1|    let mut i32_0: i32 = 93i32;
 1889|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1890|      1|    let mut date_0_ref_0: &crate::date::Date = &mut date_0;
 1891|      1|    let mut i64_0: i64 = -176i64;
 1892|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1893|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1894|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_0);
 1895|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1896|      1|    let mut i32_1: i32 = 167i32;
 1897|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1898|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1899|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_1);
 1900|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1901|      1|    let mut i32_2: i32 = -34i32;
 1902|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 1903|      1|    let mut i32_3: i32 = 291i32;
 1904|      1|    let mut i64_1: i64 = 1000000000i64;
 1905|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_3);
 1906|      1|    let mut i32_4: i32 = 12i32;
 1907|      1|    let mut i64_2: i64 = 604800i64;
 1908|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_4);
 1909|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_5, duration_4);
 1910|      1|    let mut i8_0: i8 = 5i8;
 1911|      1|    let mut i8_1: i8 = -57i8;
 1912|      1|    let mut i8_2: i8 = 5i8;
 1913|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1914|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1915|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
 1916|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 1917|      1|    let mut date_2_ref_0: &crate::date::Date = &mut date_2;
 1918|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(date_2_ref_0, date_0_ref_0);
 1919|      1|    panic!("From RustyUnit with love");
 1920|       |}
 1921|       |
 1922|       |//#[no_coverage]
 1923|      1|#[test]
 1924|       |#[should_panic]
 1925|      1|#[timeout(3000)]
 1926|      1|fn rusty_test_422() {
 1927|      1|    rusty_monitor::set_test_id(422);
 1928|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1929|      1|    let mut i64_0: i64 = 24i64;
 1930|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1931|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1932|      1|    let mut i32_0: i32 = 184i32;
 1933|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1934|      1|    let mut date_1: crate::date::Date = std::ops::Add::add(date_0, duration_1);
 1935|      1|    let mut weekday_1: weekday::Weekday = crate::date::Date::weekday(date_1);
 1936|      1|    let mut i8_0: i8 = 127i8;
 1937|      1|    let mut i8_1: i8 = 5i8;
 1938|      1|    let mut i8_2: i8 = 1i8;
 1939|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1940|      1|    let mut i32_1: i32 = 16i32;
 1941|      1|    let mut i64_1: i64 = 253402300799i64;
 1942|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1943|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_1);
 1944|      1|    let mut f64_0: f64 = -37.658966f64;
 1945|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1946|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1947|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_4);
 1948|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1949|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1950|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1951|      1|    let mut i8_3: i8 = 24i8;
 1952|      1|    let mut i8_4: i8 = 4i8;
 1953|      1|    let mut i8_5: i8 = 59i8;
 1954|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1955|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Monday;
 1956|      1|    let mut u8_0: u8 = crate::weekday::Weekday::number_days_from_sunday(weekday_2);
 1957|      1|    let mut u8_1: u8 = crate::weekday::Weekday::number_days_from_sunday(weekday_1);
 1958|      1|    let mut u8_2: u8 = crate::weekday::Weekday::number_days_from_sunday(weekday_0);
 1959|      1|    panic!("From RustyUnit with love");
 1960|       |}
 1961|       |
 1962|       |//#[no_coverage]
 1963|      1|#[test]
 1964|       |#[should_panic]
 1965|      1|#[timeout(3000)]
 1966|      1|fn rusty_test_772() {
 1967|      1|    rusty_monitor::set_test_id(772);
 1968|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1969|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1970|      1|    let mut i64_0: i64 = -34i64;
 1971|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1972|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1973|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1974|      1|    let mut i32_0: i32 = 7i32;
 1975|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1976|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_3);
 1977|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1978|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1979|      1|    let mut i64_1: i64 = 1000i64;
 1980|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1981|      1|    let mut i8_0: i8 = 24i8;
 1982|      1|    let mut i8_1: i8 = 0i8;
 1983|      1|    let mut i8_2: i8 = 59i8;
 1984|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1985|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1986|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1987|      1|    let mut u32_0: u32 = 93u32;
 1988|      1|    let mut u8_0: u8 = 28u8;
 1989|      1|    let mut u8_1: u8 = 0u8;
 1990|      1|    let mut u8_2: u8 = 3u8;
 1991|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1992|      1|    let mut i64_2: i64 = -106i64;
 1993|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1994|      1|    let mut u16_0: u16 = 28u16;
 1995|      1|    let mut i32_1: i32 = 331i32;
 1996|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1997|      1|    let mut date_3: crate::date::Date = std::ops::Add::add(date_2, duration_6);
 1998|      1|    let mut i32_2: i32 = 150i32;
 1999|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_2};
 2000|      1|    let mut tuple_0: (month::Month, u8) = crate::date::Date::month_day(date_4);
 2001|      1|    let mut tuple_1: (month::Month, u8) = crate::date::Date::month_day(date_3);
 2002|      1|    let mut tuple_2: (month::Month, u8) = crate::date::Date::month_day(date_1);
 2003|      1|    panic!("From RustyUnit with love");
 2004|       |}
 2005|       |
 2006|       |//#[no_coverage]
 2007|      1|#[test]
 2008|       |#[should_panic]
 2009|      1|#[timeout(3000)]
 2010|      1|fn rusty_test_2284() {
 2011|      1|    rusty_monitor::set_test_id(2284);
 2012|      1|    let mut i64_0: i64 = 79i64;
 2013|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2014|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2015|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2016|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 2017|      1|    let mut i64_1: i64 = -27i64;
 2018|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 2019|      1|    let mut i64_2: i64 = 1000000000i64;
 2020|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 2021|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
 2022|      1|    let mut i64_3: i64 = 24i64;
 2023|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
 2024|      1|    let mut u16_0: u16 = 365u16;
 2025|      1|    let mut i32_0: i32 = 10i32;
 2026|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2027|      1|    let mut date_1: crate::date::Date = std::ops::Sub::sub(date_0, duration_6);
 2028|      1|    let mut i64_4: i64 = 0i64;
 2029|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 2030|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
 2031|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2032|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_0);
 2033|      1|    let mut date_3: crate::date::Date = std::ops::Sub::sub(date_2, duration_8);
 2034|      1|    let mut u16_1: u16 = 10u16;
 2035|      1|    let mut i32_1: i32 = 9i32;
 2036|      1|    let mut i64_5: i64 = 3600i64;
 2037|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2038|      1|    let mut i64_6: i64 = -52i64;
 2039|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_6);
 2040|      1|    let mut i32_2: i32 = -52i32;
 2041|      1|    let mut i64_7: i64 = 1000i64;
 2042|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_7, i32_2);
 2043|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::abs(duration_10);
 2044|      1|    let mut u16_2: u16 = 59u16;
 2045|      1|    let mut i32_3: i32 = 1721119i32;
 2046|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_2);
 2047|      1|    let mut date_5: crate::date::Date = crate::date::Date::saturating_sub(date_4, duration_11);
 2048|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_5);
 2049|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_9);
 2050|      1|    let mut f32_1: f32 = 1065353216.000000f32;
 2051|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 2052|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::abs(duration_12);
 2053|      1|    let mut i8_0: i8 = 6i8;
 2054|      1|    let mut i8_1: i8 = 2i8;
 2055|      1|    let mut i8_2: i8 = 2i8;
 2056|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2057|      1|    let mut u32_0: u32 = 38u32;
 2058|      1|    let mut u8_0: u8 = 10u8;
 2059|      1|    let mut u8_1: u8 = 10u8;
 2060|      1|    let mut u8_2: u8 = 86u8;
 2061|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2062|      1|    let mut i32_4: i32 = 252i32;
 2063|      1|    let mut date_6: crate::date::Date = crate::date::Date {value: i32_4};
 2064|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_6, time_0);
 2065|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_0};
 2066|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_13);
 2067|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2068|      1|    let mut i64_8: i64 = 1000i64;
 2069|      1|    let mut duration_15: crate::duration::Duration = crate::duration::Duration::hours(i64_5);
 2070|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2071|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 2072|      1|    let mut duration_16: crate::duration::Duration = crate::duration::Duration::minutes(i64_8);
 2073|      1|    let mut i32_5: i32 = 331i32;
 2074|      1|    let mut date_7: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 2075|      1|    let mut date_8: crate::date::Date = std::ops::Add::add(date_3, duration_14);
 2076|      1|    let mut date_9: crate::date::Date = crate::date::Date {value: i32_5};
 2077|      1|    let mut tuple_0: (month::Month, u8) = crate::date::Date::month_day(date_7);
 2078|      1|    let mut tuple_1: (month::Month, u8) = crate::date::Date::month_day(date_9);
 2079|      1|    let mut tuple_2: (month::Month, u8) = crate::date::Date::month_day(date_8);
 2080|      1|    let mut u8_3: u8 = crate::date::Date::monday_based_week(date_1);
 2081|      1|    let mut option_0: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_add(duration_5, duration_2);
 2082|      1|    panic!("From RustyUnit with love");
 2083|       |}
 2084|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/duration.rs:
    1|       |//! The [`Duration`] struct and its associated `impl`s.
    2|       |
    3|       |use core::cmp::Ordering;
    4|       |use core::convert::{TryFrom, TryInto};
    5|       |use core::fmt;
    6|       |use core::iter::Sum;
    7|       |use core::ops::{Add, Div, Mul, Neg, Sub, SubAssign};
    8|       |use core::time::Duration as StdDuration;
    9|       |
   10|       |use crate::error;
   11|       |#[cfg(feature = "std")]
   12|       |use crate::Instant;
   13|       |
   14|       |/// By explicitly inserting this enum where padding is expected, the compiler is able to better
   15|       |/// perform niche value optimization.
   16|       |#[repr(u32)]
   17|      0|#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
   18|       |pub(crate) enum Padding {
   19|       |    #[allow(clippy::missing_docs_in_private_items)]
   20|       |    Optimize,
   21|       |}
   22|       |
   23|       |impl Default for Padding {
   24|      0|    fn default() -> Self {
   25|      0|        Self::Optimize
   26|      0|    }
   27|       |}
   28|       |
   29|       |/// A span of time with nanosecond precision.
   30|       |///
   31|       |/// Each `Duration` is composed of a whole number of seconds and a fractional part represented in
   32|       |/// nanoseconds.
   33|       |///
   34|       |/// This implementation allows for negative durations, unlike [`core::time::Duration`].
   35|      0|#[derive(Clone, Copy, Default, PartialEq, Eq, Hash, PartialOrd, Ord)]
   36|       |pub struct Duration {
   37|       |    /// Number of whole seconds.
   38|       |    seconds: i64,
   39|       |    /// Number of nanoseconds within the second. The sign always matches the `seconds` field.
   40|       |    nanoseconds: i32, // always -10^9 < nanoseconds < 10^9
   41|       |    #[allow(clippy::missing_docs_in_private_items)]
   42|       |    padding: Padding,
   43|       |}
   44|       |
   45|       |impl fmt::Debug for Duration {
   46|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   47|      0|        f.debug_struct("Duration")
   48|      0|            .field("seconds", &self.seconds)
   49|      0|            .field("nanoseconds", &self.nanoseconds)
   50|      0|            .finish()
   51|      0|    }
   52|       |}
   53|       |
   54|       |impl Duration {
   55|       |    // region: constants
   56|       |    /// Equivalent to `0.seconds()`.
   57|       |    ///
   58|       |    /// ```rust
   59|       |    /// # use time::{Duration, ext::NumericalDuration};
   60|       |    /// assert_eq!(Duration::ZERO, 0.seconds());
   61|       |    /// ```
   62|       |    pub const ZERO: Self = Self::seconds(0);
   63|       |
   64|       |    /// Equivalent to `1.nanoseconds()`.
   65|       |    ///
   66|       |    /// ```rust
   67|       |    /// # use time::{Duration, ext::NumericalDuration};
   68|       |    /// assert_eq!(Duration::NANOSECOND, 1.nanoseconds());
   69|       |    /// ```
   70|       |    pub const NANOSECOND: Self = Self::nanoseconds(1);
   71|       |
   72|       |    /// Equivalent to `1.microseconds()`.
   73|       |    ///
   74|       |    /// ```rust
   75|       |    /// # use time::{Duration, ext::NumericalDuration};
   76|       |    /// assert_eq!(Duration::MICROSECOND, 1.microseconds());
   77|       |    /// ```
   78|       |    pub const MICROSECOND: Self = Self::microseconds(1);
   79|       |
   80|       |    /// Equivalent to `1.milliseconds()`.
   81|       |    ///
   82|       |    /// ```rust
   83|       |    /// # use time::{Duration, ext::NumericalDuration};
   84|       |    /// assert_eq!(Duration::MILLISECOND, 1.milliseconds());
   85|       |    /// ```
   86|       |    pub const MILLISECOND: Self = Self::milliseconds(1);
   87|       |
   88|       |    /// Equivalent to `1.seconds()`.
   89|       |    ///
   90|       |    /// ```rust
   91|       |    /// # use time::{Duration, ext::NumericalDuration};
   92|       |    /// assert_eq!(Duration::SECOND, 1.seconds());
   93|       |    /// ```
   94|       |    pub const SECOND: Self = Self::seconds(1);
   95|       |
   96|       |    /// Equivalent to `1.minutes()`.
   97|       |    ///
   98|       |    /// ```rust
   99|       |    /// # use time::{Duration, ext::NumericalDuration};
  100|       |    /// assert_eq!(Duration::MINUTE, 1.minutes());
  101|       |    /// ```
  102|       |    pub const MINUTE: Self = Self::minutes(1);
  103|       |
  104|       |    /// Equivalent to `1.hours()`.
  105|       |    ///
  106|       |    /// ```rust
  107|       |    /// # use time::{Duration, ext::NumericalDuration};
  108|       |    /// assert_eq!(Duration::HOUR, 1.hours());
  109|       |    /// ```
  110|       |    pub const HOUR: Self = Self::hours(1);
  111|       |
  112|       |    /// Equivalent to `1.days()`.
  113|       |    ///
  114|       |    /// ```rust
  115|       |    /// # use time::{Duration, ext::NumericalDuration};
  116|       |    /// assert_eq!(Duration::DAY, 1.days());
  117|       |    /// ```
  118|       |    pub const DAY: Self = Self::days(1);
  119|       |
  120|       |    /// Equivalent to `1.weeks()`.
  121|       |    ///
  122|       |    /// ```rust
  123|       |    /// # use time::{Duration, ext::NumericalDuration};
  124|       |    /// assert_eq!(Duration::WEEK, 1.weeks());
  125|       |    /// ```
  126|       |    pub const WEEK: Self = Self::weeks(1);
  127|       |
  128|       |    /// The minimum possible duration. Adding any negative duration to this will cause an overflow.
  129|       |    pub const MIN: Self = Self::new_unchecked(i64::MIN, -999_999_999);
  130|       |
  131|       |    /// The maximum possible duration. Adding any positive duration to this will cause an overflow.
  132|       |    pub const MAX: Self = Self::new_unchecked(i64::MAX, 999_999_999);
  133|       |    // endregion constants
  134|       |
  135|       |    // region: is_{sign}
  136|       |    /// Check if a duration is exactly zero.
  137|       |    ///
  138|       |    /// ```rust
  139|       |    /// # use time::ext::NumericalDuration;
  140|       |    /// assert!(0.seconds().is_zero());
  141|       |    /// assert!(!1.nanoseconds().is_zero());
  142|       |    /// ```
  143|      0|    pub const fn is_zero(self) -> bool {
  144|      0|        self.seconds == 0 && self.nanoseconds == 0
  145|      0|    }
  146|       |
  147|       |    /// Check if a duration is negative.
  148|       |    ///
  149|       |    /// ```rust
  150|       |    /// # use time::ext::NumericalDuration;
  151|       |    /// assert!((-1).seconds().is_negative());
  152|       |    /// assert!(!0.seconds().is_negative());
  153|       |    /// assert!(!1.seconds().is_negative());
  154|       |    /// ```
  155|      0|    pub const fn is_negative(self) -> bool {
  156|      0|        self.seconds < 0 || self.nanoseconds < 0
  157|      0|    }
  158|       |
  159|       |    /// Check if a duration is positive.
  160|       |    ///
  161|       |    /// ```rust
  162|       |    /// # use time::ext::NumericalDuration;
  163|       |    /// assert!(1.seconds().is_positive());
  164|       |    /// assert!(!0.seconds().is_positive());
  165|       |    /// assert!(!(-1).seconds().is_positive());
  166|       |    /// ```
  167|      0|    pub const fn is_positive(self) -> bool {
  168|      0|        self.seconds > 0 || self.nanoseconds > 0
  169|      0|    }
  170|       |    // endregion is_{sign}
  171|       |
  172|       |    // region: abs
  173|       |    /// Get the absolute value of the duration.
  174|       |    ///
  175|       |    /// This method saturates the returned value if it would otherwise overflow.
  176|       |    ///
  177|       |    /// ```rust
  178|       |    /// # use time::ext::NumericalDuration;
  179|       |    /// assert_eq!(1.seconds().abs(), 1.seconds());
  180|       |    /// assert_eq!(0.seconds().abs(), 0.seconds());
  181|       |    /// assert_eq!((-1).seconds().abs(), 1.seconds());
  182|       |    /// ```
  183|      0|    pub const fn abs(self) -> Self {
  184|      0|        Self::new_unchecked(self.seconds.saturating_abs(), self.nanoseconds.abs())
  185|      0|    }
  186|       |
  187|       |    /// Convert the existing `Duration` to a `std::time::Duration` and its sign. This doesn't
  188|       |    /// actually require the standard library, but is currently only used when it's enabled.
  189|       |    #[allow(clippy::missing_const_for_fn)] // false positive
  190|       |    #[cfg(feature = "std")]
  191|      0|    pub(crate) fn abs_std(self) -> StdDuration {
  192|      0|        StdDuration::new(self.seconds.unsigned_abs(), self.nanoseconds.unsigned_abs())
  193|      0|    }
  194|       |    // endregion abs
  195|       |
  196|       |    // region: constructors
  197|       |    /// Create a new `Duration` without checking the validity of the components.
  198|      0|    pub(crate) const fn new_unchecked(seconds: i64, nanoseconds: i32) -> Self {
  199|      0|        Self {
  200|      0|            seconds,
  201|      0|            nanoseconds,
  202|      0|            padding: Padding::Optimize,
  203|      0|        }
  204|      0|    }
  205|       |
  206|       |    /// Create a new `Duration` with the provided seconds and nanoseconds. If nanoseconds is at
  207|       |    /// least ±10<sup>9</sup>, it will wrap to the number of seconds.
  208|       |    ///
  209|       |    /// ```rust
  210|       |    /// # use time::{Duration, ext::NumericalDuration};
  211|       |    /// assert_eq!(Duration::new(1, 0), 1.seconds());
  212|       |    /// assert_eq!(Duration::new(-1, 0), (-1).seconds());
  213|       |    /// assert_eq!(Duration::new(1, 2_000_000_000), 3.seconds());
  214|       |    /// ```
  215|      0|    pub const fn new(mut seconds: i64, mut nanoseconds: i32) -> Self {
  216|      0|        seconds += nanoseconds as i64 / 1_000_000_000;
  217|      0|        nanoseconds %= 1_000_000_000;
  218|      0|
  219|      0|        if seconds > 0 && nanoseconds < 0 {
  220|      0|            seconds -= 1;
  221|      0|            nanoseconds += 1_000_000_000;
  222|      0|        } else if seconds < 0 && nanoseconds > 0 {
  223|      0|            seconds += 1;
  224|      0|            nanoseconds -= 1_000_000_000;
  225|      0|        }
  226|       |
  227|      0|        Self::new_unchecked(seconds, nanoseconds)
  228|      0|    }
  229|       |
  230|       |    /// Create a new `Duration` with the given number of weeks. Equivalent to
  231|       |    /// `Duration::seconds(weeks * 604_800)`.
  232|       |    ///
  233|       |    /// ```rust
  234|       |    /// # use time::{Duration, ext::NumericalDuration};
  235|       |    /// assert_eq!(Duration::weeks(1), 604_800.seconds());
  236|       |    /// ```
  237|      0|    pub const fn weeks(weeks: i64) -> Self {
  238|      0|        Self::seconds(weeks * 604_800)
  239|      0|    }
  240|       |
  241|       |    /// Create a new `Duration` with the given number of days. Equivalent to
  242|       |    /// `Duration::seconds(days * 86_400)`.
  243|       |    ///
  244|       |    /// ```rust
  245|       |    /// # use time::{Duration, ext::NumericalDuration};
  246|       |    /// assert_eq!(Duration::days(1), 86_400.seconds());
  247|       |    /// ```
  248|      0|    pub const fn days(days: i64) -> Self {
  249|      0|        Self::seconds(days * 86_400)
  250|      0|    }
  251|       |
  252|       |    /// Create a new `Duration` with the given number of hours. Equivalent to
  253|       |    /// `Duration::seconds(hours * 3_600)`.
  254|       |    ///
  255|       |    /// ```rust
  256|       |    /// # use time::{Duration, ext::NumericalDuration};
  257|       |    /// assert_eq!(Duration::hours(1), 3_600.seconds());
  258|       |    /// ```
  259|      0|    pub const fn hours(hours: i64) -> Self {
  260|      0|        Self::seconds(hours * 3_600)
  261|      0|    }
  262|       |
  263|       |    /// Create a new `Duration` with the given number of minutes. Equivalent to
  264|       |    /// `Duration::seconds(minutes * 60)`.
  265|       |    ///
  266|       |    /// ```rust
  267|       |    /// # use time::{Duration, ext::NumericalDuration};
  268|       |    /// assert_eq!(Duration::minutes(1), 60.seconds());
  269|       |    /// ```
  270|      0|    pub const fn minutes(minutes: i64) -> Self {
  271|      0|        Self::seconds(minutes * 60)
  272|      0|    }
  273|       |
  274|       |    /// Create a new `Duration` with the given number of seconds.
  275|       |    ///
  276|       |    /// ```rust
  277|       |    /// # use time::{Duration, ext::NumericalDuration};
  278|       |    /// assert_eq!(Duration::seconds(1), 1_000.milliseconds());
  279|       |    /// ```
  280|      0|    pub const fn seconds(seconds: i64) -> Self {
  281|      0|        Self::new_unchecked(seconds, 0)
  282|      0|    }
  283|       |
  284|       |    /// Creates a new `Duration` from the specified number of seconds represented as `f64`.
  285|       |    ///
  286|       |    /// ```rust
  287|       |    /// # use time::{Duration, ext::NumericalDuration};
  288|       |    /// assert_eq!(Duration::seconds_f64(0.5), 0.5.seconds());
  289|       |    /// assert_eq!(Duration::seconds_f64(-0.5), -0.5.seconds());
  290|       |    /// ```
  291|      0|    pub fn seconds_f64(seconds: f64) -> Self {
  292|      0|        Self::new_unchecked(seconds as _, ((seconds % 1.) * 1_000_000_000.) as _)
  293|      0|    }
  294|       |
  295|       |    /// Creates a new `Duration` from the specified number of seconds represented as `f32`.
  296|       |    ///
  297|       |    /// ```rust
  298|       |    /// # use time::{Duration, ext::NumericalDuration};
  299|       |    /// assert_eq!(Duration::seconds_f32(0.5), 0.5.seconds());
  300|       |    /// assert_eq!(Duration::seconds_f32(-0.5), (-0.5).seconds());
  301|       |    /// ```
  302|      0|    pub fn seconds_f32(seconds: f32) -> Self {
  303|      0|        Self::new_unchecked(seconds as _, ((seconds % 1.) * 1_000_000_000.) as _)
  304|      0|    }
  305|       |
  306|       |    /// Create a new `Duration` with the given number of milliseconds.
  307|       |    ///
  308|       |    /// ```rust
  309|       |    /// # use time::{Duration, ext::NumericalDuration};
  310|       |    /// assert_eq!(Duration::milliseconds(1), 1_000.microseconds());
  311|       |    /// assert_eq!(Duration::milliseconds(-1), (-1_000).microseconds());
  312|       |    /// ```
  313|      0|    pub const fn milliseconds(milliseconds: i64) -> Self {
  314|      0|        Self::new_unchecked(
  315|      0|            milliseconds / 1_000,
  316|      0|            ((milliseconds % 1_000) * 1_000_000) as _,
  317|      0|        )
  318|      0|    }
  319|       |
  320|       |    /// Create a new `Duration` with the given number of microseconds.
  321|       |    ///
  322|       |    /// ```rust
  323|       |    /// # use time::{Duration, ext::NumericalDuration};
  324|       |    /// assert_eq!(Duration::microseconds(1), 1_000.nanoseconds());
  325|       |    /// assert_eq!(Duration::microseconds(-1), (-1_000).nanoseconds());
  326|       |    /// ```
  327|      0|    pub const fn microseconds(microseconds: i64) -> Self {
  328|      0|        Self::new_unchecked(
  329|      0|            microseconds / 1_000_000,
  330|      0|            ((microseconds % 1_000_000) * 1_000) as _,
  331|      0|        )
  332|      0|    }
  333|       |
  334|       |    /// Create a new `Duration` with the given number of nanoseconds.
  335|       |    ///
  336|       |    /// ```rust
  337|       |    /// # use time::{Duration, ext::NumericalDuration};
  338|       |    /// assert_eq!(Duration::nanoseconds(1), 1.microseconds() / 1_000);
  339|       |    /// assert_eq!(Duration::nanoseconds(-1), (-1).microseconds() / 1_000);
  340|       |    /// ```
  341|      0|    pub const fn nanoseconds(nanoseconds: i64) -> Self {
  342|      0|        Self::new_unchecked(
  343|      0|            nanoseconds / 1_000_000_000,
  344|      0|            (nanoseconds % 1_000_000_000) as _,
  345|      0|        )
  346|      0|    }
  347|       |
  348|       |    /// Create a new `Duration` with the given number of nanoseconds.
  349|       |    ///
  350|       |    /// As the input range cannot be fully mapped to the output, this should only be used where it's
  351|       |    /// known to result in a valid value.
  352|      0|    pub(crate) const fn nanoseconds_i128(nanoseconds: i128) -> Self {
  353|      0|        Self::new_unchecked(
  354|      0|            (nanoseconds / 1_000_000_000) as _,
  355|      0|            (nanoseconds % 1_000_000_000) as _,
  356|      0|        )
  357|      0|    }
  358|       |    // endregion constructors
  359|       |
  360|       |    // region: getters
  361|       |    /// Get the number of whole weeks in the duration.
  362|       |    ///
  363|       |    /// ```rust
  364|       |    /// # use time::ext::NumericalDuration;
  365|       |    /// assert_eq!(1.weeks().whole_weeks(), 1);
  366|       |    /// assert_eq!((-1).weeks().whole_weeks(), -1);
  367|       |    /// assert_eq!(6.days().whole_weeks(), 0);
  368|       |    /// assert_eq!((-6).days().whole_weeks(), 0);
  369|       |    /// ```
  370|      0|    pub const fn whole_weeks(self) -> i64 {
  371|      0|        self.whole_seconds() / 604_800
  372|      0|    }
  373|       |
  374|       |    /// Get the number of whole days in the duration.
  375|       |    ///
  376|       |    /// ```rust
  377|       |    /// # use time::ext::NumericalDuration;
  378|       |    /// assert_eq!(1.days().whole_days(), 1);
  379|       |    /// assert_eq!((-1).days().whole_days(), -1);
  380|       |    /// assert_eq!(23.hours().whole_days(), 0);
  381|       |    /// assert_eq!((-23).hours().whole_days(), 0);
  382|       |    /// ```
  383|      0|    pub const fn whole_days(self) -> i64 {
  384|      0|        self.whole_seconds() / 86_400
  385|      0|    }
  386|       |
  387|       |    /// Get the number of whole hours in the duration.
  388|       |    ///
  389|       |    /// ```rust
  390|       |    /// # use time::ext::NumericalDuration;
  391|       |    /// assert_eq!(1.hours().whole_hours(), 1);
  392|       |    /// assert_eq!((-1).hours().whole_hours(), -1);
  393|       |    /// assert_eq!(59.minutes().whole_hours(), 0);
  394|       |    /// assert_eq!((-59).minutes().whole_hours(), 0);
  395|       |    /// ```
  396|      0|    pub const fn whole_hours(self) -> i64 {
  397|      0|        self.whole_seconds() / 3_600
  398|      0|    }
  399|       |
  400|       |    /// Get the number of whole minutes in the duration.
  401|       |    ///
  402|       |    /// ```rust
  403|       |    /// # use time::ext::NumericalDuration;
  404|       |    /// assert_eq!(1.minutes().whole_minutes(), 1);
  405|       |    /// assert_eq!((-1).minutes().whole_minutes(), -1);
  406|       |    /// assert_eq!(59.seconds().whole_minutes(), 0);
  407|       |    /// assert_eq!((-59).seconds().whole_minutes(), 0);
  408|       |    /// ```
  409|      0|    pub const fn whole_minutes(self) -> i64 {
  410|      0|        self.whole_seconds() / 60
  411|      0|    }
  412|       |
  413|       |    /// Get the number of whole seconds in the duration.
  414|       |    ///
  415|       |    /// ```rust
  416|       |    /// # use time::ext::NumericalDuration;
  417|       |    /// assert_eq!(1.seconds().whole_seconds(), 1);
  418|       |    /// assert_eq!((-1).seconds().whole_seconds(), -1);
  419|       |    /// assert_eq!(1.minutes().whole_seconds(), 60);
  420|       |    /// assert_eq!((-1).minutes().whole_seconds(), -60);
  421|       |    /// ```
  422|      0|    pub const fn whole_seconds(self) -> i64 {
  423|      0|        self.seconds
  424|      0|    }
  425|       |
  426|       |    /// Get the number of fractional seconds in the duration.
  427|       |    ///
  428|       |    /// ```rust
  429|       |    /// # use time::ext::NumericalDuration;
  430|       |    /// assert_eq!(1.5.seconds().as_seconds_f64(), 1.5);
  431|       |    /// assert_eq!((-1.5).seconds().as_seconds_f64(), -1.5);
  432|       |    /// ```
  433|      0|    pub fn as_seconds_f64(self) -> f64 {
  434|      0|        self.seconds as f64 + self.nanoseconds as f64 / 1_000_000_000.
  435|      0|    }
  436|       |
  437|       |    /// Get the number of fractional seconds in the duration.
  438|       |    ///
  439|       |    /// ```rust
  440|       |    /// # use time::ext::NumericalDuration;
  441|       |    /// assert_eq!(1.5.seconds().as_seconds_f32(), 1.5);
  442|       |    /// assert_eq!((-1.5).seconds().as_seconds_f32(), -1.5);
  443|       |    /// ```
  444|      0|    pub fn as_seconds_f32(self) -> f32 {
  445|      0|        self.seconds as f32 + self.nanoseconds as f32 / 1_000_000_000.
  446|      0|    }
  447|       |
  448|       |    /// Get the number of whole milliseconds in the duration.
  449|       |    ///
  450|       |    /// ```rust
  451|       |    /// # use time::ext::NumericalDuration;
  452|       |    /// assert_eq!(1.seconds().whole_milliseconds(), 1_000);
  453|       |    /// assert_eq!((-1).seconds().whole_milliseconds(), -1_000);
  454|       |    /// assert_eq!(1.milliseconds().whole_milliseconds(), 1);
  455|       |    /// assert_eq!((-1).milliseconds().whole_milliseconds(), -1);
  456|       |    /// ```
  457|      0|    pub const fn whole_milliseconds(self) -> i128 {
  458|      0|        self.seconds as i128 * 1_000 + self.nanoseconds as i128 / 1_000_000
  459|      0|    }
  460|       |
  461|       |    /// Get the number of milliseconds past the number of whole seconds.
  462|       |    ///
  463|       |    /// Always in the range `-1_000..1_000`.
  464|       |    ///
  465|       |    /// ```rust
  466|       |    /// # use time::ext::NumericalDuration;
  467|       |    /// assert_eq!(1.4.seconds().subsec_milliseconds(), 400);
  468|       |    /// assert_eq!((-1.4).seconds().subsec_milliseconds(), -400);
  469|       |    /// ```
  470|       |    // Allow the lint, as the value is guaranteed to be less than 1000.
  471|      0|    pub const fn subsec_milliseconds(self) -> i16 {
  472|      0|        (self.nanoseconds / 1_000_000) as _
  473|      0|    }
  474|       |
  475|       |    /// Get the number of whole microseconds in the duration.
  476|       |    ///
  477|       |    /// ```rust
  478|       |    /// # use time::ext::NumericalDuration;
  479|       |    /// assert_eq!(1.milliseconds().whole_microseconds(), 1_000);
  480|       |    /// assert_eq!((-1).milliseconds().whole_microseconds(), -1_000);
  481|       |    /// assert_eq!(1.microseconds().whole_microseconds(), 1);
  482|       |    /// assert_eq!((-1).microseconds().whole_microseconds(), -1);
  483|       |    /// ```
  484|      0|    pub const fn whole_microseconds(self) -> i128 {
  485|      0|        self.seconds as i128 * 1_000_000 + self.nanoseconds as i128 / 1_000
  486|      0|    }
  487|       |
  488|       |    /// Get the number of microseconds past the number of whole seconds.
  489|       |    ///
  490|       |    /// Always in the range `-1_000_000..1_000_000`.
  491|       |    ///
  492|       |    /// ```rust
  493|       |    /// # use time::ext::NumericalDuration;
  494|       |    /// assert_eq!(1.0004.seconds().subsec_microseconds(), 400);
  495|       |    /// assert_eq!((-1.0004).seconds().subsec_microseconds(), -400);
  496|       |    /// ```
  497|      0|    pub const fn subsec_microseconds(self) -> i32 {
  498|      0|        self.nanoseconds / 1_000
  499|      0|    }
  500|       |
  501|       |    /// Get the number of nanoseconds in the duration.
  502|       |    ///
  503|       |    /// ```rust
  504|       |    /// # use time::ext::NumericalDuration;
  505|       |    /// assert_eq!(1.microseconds().whole_nanoseconds(), 1_000);
  506|       |    /// assert_eq!((-1).microseconds().whole_nanoseconds(), -1_000);
  507|       |    /// assert_eq!(1.nanoseconds().whole_nanoseconds(), 1);
  508|       |    /// assert_eq!((-1).nanoseconds().whole_nanoseconds(), -1);
  509|       |    /// ```
  510|      0|    pub const fn whole_nanoseconds(self) -> i128 {
  511|      0|        self.seconds as i128 * 1_000_000_000 + self.nanoseconds as i128
  512|      0|    }
  513|       |
  514|       |    /// Get the number of nanoseconds past the number of whole seconds.
  515|       |    ///
  516|       |    /// The returned value will always be in the range `-1_000_000_000..1_000_000_000`.
  517|       |    ///
  518|       |    /// ```rust
  519|       |    /// # use time::ext::NumericalDuration;
  520|       |    /// assert_eq!(1.000_000_400.seconds().subsec_nanoseconds(), 400);
  521|       |    /// assert_eq!((-1.000_000_400).seconds().subsec_nanoseconds(), -400);
  522|       |    /// ```
  523|      0|    pub const fn subsec_nanoseconds(self) -> i32 {
  524|      0|        self.nanoseconds
  525|      0|    }
  526|       |    // endregion getters
  527|       |
  528|       |    // region: checked arithmetic
  529|       |    /// Computes `self + rhs`, returning `None` if an overflow occurred.
  530|       |    ///
  531|       |    /// ```rust
  532|       |    /// # use time::{Duration, ext::NumericalDuration};
  533|       |    /// assert_eq!(5.seconds().checked_add(5.seconds()), Some(10.seconds()));
  534|       |    /// assert_eq!(Duration::MAX.checked_add(1.nanoseconds()), None);
  535|       |    /// assert_eq!((-5).seconds().checked_add(5.seconds()), Some(0.seconds()));
  536|       |    /// ```
  537|      0|    pub const fn checked_add(self, rhs: Self) -> Option<Self> {
  538|      0|        let mut seconds = const_try_opt!(self.seconds.checked_add(rhs.seconds));
  539|      0|        let mut nanoseconds = self.nanoseconds + rhs.nanoseconds;
  540|      0|
  541|      0|        if nanoseconds >= 1_000_000_000 || seconds < 0 && nanoseconds > 0 {
  542|      0|            nanoseconds -= 1_000_000_000;
  543|      0|            seconds = const_try_opt!(seconds.checked_add(1));
  544|      0|        } else if nanoseconds <= -1_000_000_000 || seconds > 0 && nanoseconds < 0 {
  545|      0|            nanoseconds += 1_000_000_000;
  546|      0|            seconds = const_try_opt!(seconds.checked_sub(1));
  547|      0|        }
  548|       |
  549|      0|        Some(Self::new_unchecked(seconds, nanoseconds))
  550|      0|    }
  551|       |
  552|       |    /// Computes `self - rhs`, returning `None` if an overflow occurred.
  553|       |    ///
  554|       |    /// ```rust
  555|       |    /// # use time::{Duration, ext::NumericalDuration};
  556|       |    /// assert_eq!(5.seconds().checked_sub(5.seconds()), Some(Duration::ZERO));
  557|       |    /// assert_eq!(Duration::MIN.checked_sub(1.nanoseconds()), None);
  558|       |    /// assert_eq!(5.seconds().checked_sub(10.seconds()), Some((-5).seconds()));
  559|       |    /// ```
  560|      0|    pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
  561|      0|        let mut seconds = const_try_opt!(self.seconds.checked_sub(rhs.seconds));
  562|      0|        let mut nanoseconds = self.nanoseconds - rhs.nanoseconds;
  563|      0|
  564|      0|        if nanoseconds >= 1_000_000_000 || seconds < 0 && nanoseconds > 0 {
  565|      0|            nanoseconds -= 1_000_000_000;
  566|      0|            seconds = const_try_opt!(seconds.checked_add(1));
  567|      0|        } else if nanoseconds <= -1_000_000_000 || seconds > 0 && nanoseconds < 0 {
  568|      0|            nanoseconds += 1_000_000_000;
  569|      0|            seconds = const_try_opt!(seconds.checked_sub(1));
  570|      0|        }
  571|       |
  572|      0|        Some(Self::new_unchecked(seconds, nanoseconds))
  573|      0|    }
  574|       |
  575|       |    /// Computes `self * rhs`, returning `None` if an overflow occurred.
  576|       |    ///
  577|       |    /// ```rust
  578|       |    /// # use time::{Duration, ext::NumericalDuration};
  579|       |    /// assert_eq!(5.seconds().checked_mul(2), Some(10.seconds()));
  580|       |    /// assert_eq!(5.seconds().checked_mul(-2), Some((-10).seconds()));
  581|       |    /// assert_eq!(5.seconds().checked_mul(0), Some(0.seconds()));
  582|       |    /// assert_eq!(Duration::MAX.checked_mul(2), None);
  583|       |    /// assert_eq!(Duration::MIN.checked_mul(2), None);
  584|       |    /// ```
  585|      0|    pub const fn checked_mul(self, rhs: i32) -> Option<Self> {
  586|      0|        // Multiply nanoseconds as i64, because it cannot overflow that way.
  587|      0|        let total_nanos = self.nanoseconds as i64 * rhs as i64;
  588|      0|        let extra_secs = total_nanos / 1_000_000_000;
  589|      0|        let nanoseconds = (total_nanos % 1_000_000_000) as _;
  590|      0|        let seconds = const_try_opt!(
  591|      0|            const_try_opt!(self.seconds.checked_mul(rhs as _)).checked_add(extra_secs)
  592|       |        );
  593|       |
  594|      0|        Some(Self::new_unchecked(seconds, nanoseconds))
  595|      0|    }
  596|       |
  597|       |    /// Computes `self / rhs`, returning `None` if `rhs == 0` or if the result would overflow.
  598|       |    ///
  599|       |    /// ```rust
  600|       |    /// # use time::ext::NumericalDuration;
  601|       |    /// assert_eq!(10.seconds().checked_div(2), Some(5.seconds()));
  602|       |    /// assert_eq!(10.seconds().checked_div(-2), Some((-5).seconds()));
  603|       |    /// assert_eq!(1.seconds().checked_div(0), None);
  604|       |    /// ```
  605|      0|    pub const fn checked_div(self, rhs: i32) -> Option<Self> {
  606|      0|        let seconds = const_try_opt!(self.seconds.checked_div(rhs as i64));
  607|      0|        let carry = self.seconds - seconds * (rhs as i64);
  608|      0|        let extra_nanos = const_try_opt!((carry * 1_000_000_000).checked_div(rhs as i64));
  609|      0|        let nanoseconds = const_try_opt!(self.nanoseconds.checked_div(rhs)) + (extra_nanos as i32);
  610|      0|
  611|      0|        Some(Self::new_unchecked(seconds, nanoseconds))
  612|      0|    }
  613|       |    // endregion checked arithmetic
  614|       |
  615|       |    // region: saturating arithmetic
  616|       |    /// Computes `self + rhs`, saturating if an overflow occurred.
  617|       |    ///
  618|       |    /// ```rust
  619|       |    /// # use time::{Duration, ext::NumericalDuration};
  620|       |    /// assert_eq!(5.seconds().saturating_add(5.seconds()), 10.seconds());
  621|       |    /// assert_eq!(Duration::MAX.saturating_add(1.nanoseconds()), Duration::MAX);
  622|       |    /// assert_eq!(
  623|       |    ///     Duration::MIN.saturating_add((-1).nanoseconds()),
  624|       |    ///     Duration::MIN
  625|       |    /// );
  626|       |    /// assert_eq!((-5).seconds().saturating_add(5.seconds()), Duration::ZERO);
  627|       |    /// ```
  628|      0|    pub const fn saturating_add(self, rhs: Self) -> Self {
  629|      0|        let (mut seconds, overflow) = self.seconds.overflowing_add(rhs.seconds);
  630|      0|        if overflow {
  631|      0|            if self.seconds > 0 {
  632|      0|                return Self::MAX;
  633|      0|            }
  634|      0|            return Self::MIN;
  635|      0|        }
  636|      0|        let mut nanoseconds = self.nanoseconds + rhs.nanoseconds;
  637|      0|
  638|      0|        if nanoseconds >= 1_000_000_000 || seconds < 0 && nanoseconds > 0 {
  639|      0|            nanoseconds -= 1_000_000_000;
  640|      0|            seconds = match seconds.checked_add(1) {
  641|      0|                Some(seconds) => seconds,
  642|      0|                None => return Self::MAX,
  643|       |            };
  644|      0|        } else if nanoseconds <= -1_000_000_000 || seconds > 0 && nanoseconds < 0 {
  645|      0|            nanoseconds += 1_000_000_000;
  646|      0|            seconds = match seconds.checked_sub(1) {
  647|      0|                Some(seconds) => seconds,
  648|      0|                None => return Self::MIN,
  649|       |            };
  650|      0|        }
  651|       |
  652|      0|        Self::new_unchecked(seconds, nanoseconds)
  653|      0|    }
  654|       |
  655|       |    /// Computes `self - rhs`, saturating if an overflow occurred.
  656|       |    ///
  657|       |    /// ```rust
  658|       |    /// # use time::{Duration, ext::NumericalDuration};
  659|       |    /// assert_eq!(5.seconds().saturating_sub(5.seconds()), Duration::ZERO);
  660|       |    /// assert_eq!(Duration::MIN.saturating_sub(1.nanoseconds()), Duration::MIN);
  661|       |    /// assert_eq!(
  662|       |    ///     Duration::MAX.saturating_sub((-1).nanoseconds()),
  663|       |    ///     Duration::MAX
  664|       |    /// );
  665|       |    /// assert_eq!(5.seconds().saturating_sub(10.seconds()), (-5).seconds());
  666|       |    /// ```
  667|      0|    pub const fn saturating_sub(self, rhs: Self) -> Self {
  668|      0|        let (mut seconds, overflow) = self.seconds.overflowing_sub(rhs.seconds);
  669|      0|        if overflow {
  670|      0|            if self.seconds > 0 {
  671|      0|                return Self::MAX;
  672|      0|            }
  673|      0|            return Self::MIN;
  674|      0|        }
  675|      0|        let mut nanoseconds = self.nanoseconds - rhs.nanoseconds;
  676|      0|
  677|      0|        if nanoseconds >= 1_000_000_000 || seconds < 0 && nanoseconds > 0 {
  678|      0|            nanoseconds -= 1_000_000_000;
  679|      0|            seconds = match seconds.checked_add(1) {
  680|      0|                Some(seconds) => seconds,
  681|      0|                None => return Self::MAX,
  682|       |            };
  683|      0|        } else if nanoseconds <= -1_000_000_000 || seconds > 0 && nanoseconds < 0 {
  684|      0|            nanoseconds += 1_000_000_000;
  685|      0|            seconds = match seconds.checked_sub(1) {
  686|      0|                Some(seconds) => seconds,
  687|      0|                None => return Self::MIN,
  688|       |            };
  689|      0|        }
  690|       |
  691|      0|        Self::new_unchecked(seconds, nanoseconds)
  692|      0|    }
  693|       |
  694|       |    /// Computes `self * rhs`, saturating if an overflow occurred.
  695|       |    ///
  696|       |    /// ```rust
  697|       |    /// # use time::{Duration, ext::NumericalDuration};
  698|       |    /// assert_eq!(5.seconds().saturating_mul(2), 10.seconds());
  699|       |    /// assert_eq!(5.seconds().saturating_mul(-2), (-10).seconds());
  700|       |    /// assert_eq!(5.seconds().saturating_mul(0), Duration::ZERO);
  701|       |    /// assert_eq!(Duration::MAX.saturating_mul(2), Duration::MAX);
  702|       |    /// assert_eq!(Duration::MIN.saturating_mul(2), Duration::MIN);
  703|       |    /// assert_eq!(Duration::MAX.saturating_mul(-2), Duration::MIN);
  704|       |    /// assert_eq!(Duration::MIN.saturating_mul(-2), Duration::MAX);
  705|       |    /// ```
  706|      0|    pub const fn saturating_mul(self, rhs: i32) -> Self {
  707|      0|        // Multiply nanoseconds as i64, because it cannot overflow that way.
  708|      0|        let total_nanos = self.nanoseconds as i64 * rhs as i64;
  709|      0|        let extra_secs = total_nanos / 1_000_000_000;
  710|      0|        let nanoseconds = (total_nanos % 1_000_000_000) as _;
  711|      0|        let (seconds, overflow1) = self.seconds.overflowing_mul(rhs as _);
  712|      0|        if overflow1 {
  713|      0|            if self.seconds > 0 && rhs > 0 || self.seconds < 0 && rhs < 0 {
  714|      0|                return Self::MAX;
  715|      0|            }
  716|      0|            return Self::MIN;
  717|      0|        }
  718|      0|        let (seconds, overflow2) = seconds.overflowing_add(extra_secs);
  719|      0|        if overflow2 {
  720|      0|            if self.seconds > 0 && rhs > 0 {
  721|      0|                return Self::MAX;
  722|      0|            }
  723|      0|            return Self::MIN;
  724|      0|        }
  725|      0|
  726|      0|        Self::new_unchecked(seconds, nanoseconds)
  727|      0|    }
  728|       |    // endregion saturating arithmetic
  729|       |
  730|       |    /// Runs a closure, returning the duration of time it took to run. The return value of the
  731|       |    /// closure is provided in the second part of the tuple.
  732|       |    #[cfg(feature = "std")]
  733|      0|    pub fn time_fn<T>(f: impl FnOnce() -> T) -> (Self, T) {
  734|      0|        let start = Instant::now();
  735|      0|        let return_value = f();
  736|      0|        let end = Instant::now();
  737|      0|
  738|      0|        (end - start, return_value)
  739|      0|    }
  740|       |}
  741|       |
  742|       |// region: trait impls
  743|       |impl TryFrom<StdDuration> for Duration {
  744|       |    type Error = error::ConversionRange;
  745|       |
  746|      0|    fn try_from(original: StdDuration) -> Result<Self, error::ConversionRange> {
  747|      0|        Ok(Self::new(
  748|      0|            original
  749|      0|                .as_secs()
  750|      0|                .try_into()
  751|      0|                .map_err(|_| error::ConversionRange)?,
  752|      0|            original.subsec_nanos() as _,
  753|       |        ))
  754|      0|    }
  755|       |}
  756|       |
  757|       |impl TryFrom<Duration> for StdDuration {
  758|       |    type Error = error::ConversionRange;
  759|       |
  760|      0|    fn try_from(duration: Duration) -> Result<Self, error::ConversionRange> {
  761|      0|        Ok(Self::new(
  762|      0|            duration
  763|      0|                .seconds
  764|      0|                .try_into()
  765|      0|                .map_err(|_| error::ConversionRange)?,
  766|      0|            duration
  767|      0|                .nanoseconds
  768|      0|                .try_into()
  769|      0|                .map_err(|_| error::ConversionRange)?,
  770|       |        ))
  771|      0|    }
  772|       |}
  773|       |
  774|       |impl Add for Duration {
  775|       |    type Output = Self;
  776|       |
  777|      0|    fn add(self, rhs: Self) -> Self::Output {
  778|      0|        self.checked_add(rhs)
  779|      0|            .expect("overflow when adding durations")
  780|      0|    }
  781|       |}
  782|       |
  783|       |impl Add<StdDuration> for Duration {
  784|       |    type Output = Self;
  785|       |
  786|      0|    fn add(self, std_duration: StdDuration) -> Self::Output {
  787|      0|        self + Self::try_from(std_duration)
  788|      0|            .expect("overflow converting `std::time::Duration` to `time::Duration`")
  789|      0|    }
  790|       |}
  791|       |
  792|       |impl Add<Duration> for StdDuration {
  793|       |    type Output = Duration;
  794|       |
  795|      0|    fn add(self, rhs: Duration) -> Self::Output {
  796|      0|        rhs + self
  797|      0|    }
  798|       |}
  799|       |
  800|       |impl_add_assign!(Duration: Duration, StdDuration);
  801|       |
  802|       |impl Neg for Duration {
  803|       |    type Output = Self;
  804|       |
  805|      0|    fn neg(self) -> Self::Output {
  806|      0|        Self::new_unchecked(-self.seconds, -self.nanoseconds)
  807|      0|    }
  808|       |}
  809|       |
  810|       |impl Sub for Duration {
  811|       |    type Output = Self;
  812|       |
  813|      0|    fn sub(self, rhs: Self) -> Self::Output {
  814|      0|        self.checked_sub(rhs)
  815|      0|            .expect("overflow when subtracting durations")
  816|      0|    }
  817|       |}
  818|       |
  819|       |impl Sub<StdDuration> for Duration {
  820|       |    type Output = Self;
  821|       |
  822|      0|    fn sub(self, rhs: StdDuration) -> Self::Output {
  823|      0|        self - Self::try_from(rhs)
  824|      0|            .expect("overflow converting `std::time::Duration` to `time::Duration`")
  825|      0|    }
  826|       |}
  827|       |
  828|       |impl Sub<Duration> for StdDuration {
  829|       |    type Output = Duration;
  830|       |
  831|      0|    fn sub(self, rhs: Duration) -> Self::Output {
  832|      0|        Duration::try_from(self)
  833|      0|            .expect("overflow converting `std::time::Duration` to `time::Duration`")
  834|      0|            - rhs
  835|      0|    }
  836|       |}
  837|       |
  838|       |impl_sub_assign!(Duration: Duration, StdDuration);
  839|       |
  840|       |impl SubAssign<Duration> for StdDuration {
  841|      0|    fn sub_assign(&mut self, rhs: Duration) {
  842|      0|        *self = (*self - rhs).try_into().expect(
  843|      0|            "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will \
  844|      0|             change the type.",
  845|      0|        );
  846|      0|    }
  847|       |}
  848|       |
  849|       |/// Implement `Mul` (reflexively) and `Div` for `Duration` for various types.
  850|       |macro_rules! duration_mul_div_int {
  851|       |    ($($type:ty),+) => {$(
  852|       |        impl Mul<$type> for Duration {
  853|       |            type Output = Self;
  854|       |
  855|      0|            fn mul(self, rhs: $type) -> Self::Output {
  856|      0|                Self::nanoseconds_i128(
  857|      0|                    self.whole_nanoseconds()
  858|      0|                        .checked_mul(rhs as _)
  859|      0|                        .expect("overflow when multiplying duration")
  860|      0|                )
  861|      0|            }
  ------------------
  | Unexecuted instantiation: _RNvXsR_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulsE3mul
  ------------------
  | Unexecuted instantiation: _RNvXs13_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulmE3mul
  ------------------
  | Unexecuted instantiation: _RNvXs10_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MultE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsO_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulaE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsU_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MullE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsX_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulhE3mul
  ------------------
  862|       |        }
  863|       |
  864|       |        impl Mul<Duration> for $type {
  865|       |            type Output = Duration;
  866|       |
  867|      0|            fn mul(self, rhs: Duration) -> Self::Output {
  868|      0|                rhs * self
  869|      0|            }
  ------------------
  | Unexecuted instantiation: _RNvXsP_NtCsfCqjlVYlG65_4time8durationaINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB5_8DurationE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsS_NtCsfCqjlVYlG65_4time8durationsINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB5_8DurationE3mul
  ------------------
  | Unexecuted instantiation: _RNvXs14_NtCsfCqjlVYlG65_4time8durationmINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB6_8DurationE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsY_NtCsfCqjlVYlG65_4time8durationhINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB5_8DurationE3mul
  ------------------
  | Unexecuted instantiation: _RNvXsV_NtCsfCqjlVYlG65_4time8durationlINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB5_8DurationE3mul
  ------------------
  | Unexecuted instantiation: _RNvXs11_NtCsfCqjlVYlG65_4time8durationtINtNtNtCs3mU7IzMcIbP_4core3ops5arith3MulNtB6_8DurationE3mul
  ------------------
  870|       |        }
  871|       |
  872|       |        impl Div<$type> for Duration {
  873|       |            type Output = Self;
  874|       |
  875|      0|            fn div(self, rhs: $type) -> Self::Output {
  876|      0|                Self::nanoseconds_i128(self.whole_nanoseconds() / rhs as i128)
  877|      0|            }
  ------------------
  | Unexecuted instantiation: _RNvXs15_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivmE3div
  ------------------
  | Unexecuted instantiation: _RNvXs12_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivtE3div
  ------------------
  | Unexecuted instantiation: _RNvXsQ_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivaE3div
  ------------------
  | Unexecuted instantiation: _RNvXsZ_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivhE3div
  ------------------
  | Unexecuted instantiation: _RNvXsW_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivlE3div
  ------------------
  | Unexecuted instantiation: _RNvXsT_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith3DivsE3div
  ------------------
  878|       |        }
  879|       |    )+};
  880|       |}
  881|       |duration_mul_div_int![i8, i16, i32, u8, u16, u32];
  882|       |
  883|       |impl Mul<f32> for Duration {
  884|       |    type Output = Self;
  885|       |
  886|      0|    fn mul(self, rhs: f32) -> Self::Output {
  887|      0|        Self::seconds_f32(self.as_seconds_f32() * rhs)
  888|      0|    }
  889|       |}
  890|       |
  891|       |impl Mul<Duration> for f32 {
  892|       |    type Output = Duration;
  893|       |
  894|      0|    fn mul(self, rhs: Duration) -> Self::Output {
  895|      0|        rhs * self
  896|      0|    }
  897|       |}
  898|       |
  899|       |impl Mul<f64> for Duration {
  900|       |    type Output = Self;
  901|       |
  902|      0|    fn mul(self, rhs: f64) -> Self::Output {
  903|      0|        Self::seconds_f64(self.as_seconds_f64() * rhs)
  904|      0|    }
  905|       |}
  906|       |
  907|       |impl Mul<Duration> for f64 {
  908|       |    type Output = Duration;
  909|       |
  910|      0|    fn mul(self, rhs: Duration) -> Self::Output {
  911|      0|        rhs * self
  912|      0|    }
  913|       |}
  914|       |
  915|       |impl_mul_assign!(Duration: i8, i16, i32, u8, u16, u32, f32, f64);
  916|       |
  917|       |impl Div<f32> for Duration {
  918|       |    type Output = Self;
  919|       |
  920|      0|    fn div(self, rhs: f32) -> Self::Output {
  921|      0|        Self::seconds_f32(self.as_seconds_f32() / rhs)
  922|      0|    }
  923|       |}
  924|       |
  925|       |impl Div<f64> for Duration {
  926|       |    type Output = Self;
  927|       |
  928|      0|    fn div(self, rhs: f64) -> Self::Output {
  929|      0|        Self::seconds_f64(self.as_seconds_f64() / rhs)
  930|      0|    }
  931|       |}
  932|       |
  933|       |impl_div_assign!(Duration: i8, i16, i32, u8, u16, u32, f32, f64);
  934|       |
  935|       |impl Div for Duration {
  936|       |    type Output = f64;
  937|       |
  938|      0|    fn div(self, rhs: Self) -> Self::Output {
  939|      0|        self.as_seconds_f64() / rhs.as_seconds_f64()
  940|      0|    }
  941|       |}
  942|       |
  943|       |impl Div<StdDuration> for Duration {
  944|       |    type Output = f64;
  945|       |
  946|      0|    fn div(self, rhs: StdDuration) -> Self::Output {
  947|      0|        self.as_seconds_f64() / rhs.as_secs_f64()
  948|      0|    }
  949|       |}
  950|       |
  951|       |impl Div<Duration> for StdDuration {
  952|       |    type Output = f64;
  953|       |
  954|      0|    fn div(self, rhs: Duration) -> Self::Output {
  955|      0|        self.as_secs_f64() / rhs.as_seconds_f64()
  956|      0|    }
  957|       |}
  958|       |
  959|       |impl PartialEq<StdDuration> for Duration {
  960|      0|    fn eq(&self, rhs: &StdDuration) -> bool {
  961|      0|        Ok(*self) == Self::try_from(*rhs)
  962|      0|    }
  963|       |}
  964|       |
  965|       |impl PartialEq<Duration> for StdDuration {
  966|      0|    fn eq(&self, rhs: &Duration) -> bool {
  967|      0|        rhs == self
  968|      0|    }
  969|       |}
  970|       |
  971|       |impl PartialOrd<StdDuration> for Duration {
  972|      0|    fn partial_cmp(&self, rhs: &StdDuration) -> Option<Ordering> {
  973|      0|        if rhs.as_secs() > i64::MAX as _ {
  974|      0|            return Some(Ordering::Less);
  975|      0|        }
  976|      0|
  977|      0|        Some(
  978|      0|            self.seconds
  979|      0|                .cmp(&(rhs.as_secs() as _))
  980|      0|                .then_with(|| self.nanoseconds.cmp(&(rhs.subsec_nanos() as _))),
  981|      0|        )
  982|      0|    }
  983|       |}
  984|       |
  985|       |impl PartialOrd<Duration> for StdDuration {
  986|      0|    fn partial_cmp(&self, rhs: &Duration) -> Option<Ordering> {
  987|      0|        rhs.partial_cmp(self).map(Ordering::reverse)
  988|      0|    }
  989|       |}
  990|       |
  991|       |impl Sum for Duration {
  992|      0|    fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
  993|      0|        iter.reduce(|a, b| a + b).unwrap_or_default()
  994|      0|    }
  995|       |}
  996|       |
  997|       |impl<'a> Sum<&'a Self> for Duration {
  998|      0|    fn sum<I: Iterator<Item = &'a Self>>(iter: I) -> Self {
  999|      0|        iter.copied().sum()
 1000|      0|    }
 1001|       |}
 1002|       |// endregion trait impls
 1003|       |
 1004|       |
 1005|       |#[cfg(test)]
 1006|       |mod rusty_tests {
 1007|       |	use crate::*;
 1008|       |	use std::cmp::Ord;
 1009|       |	use std::default::Default;
 1010|       |	use std::cmp::PartialEq;
 1011|       |	use std::clone::Clone;
 1012|       |	use std::ops::Div;
 1013|       |	use std::ops::Mul;
 1014|       |	use std::ops::Add;
 1015|       |	use std::cmp::PartialOrd;
 1016|       |	use std::cmp::Eq;
 1017|       |	use std::ops::Sub;
 1018|       |	use std::ops::Neg;
 1019|       |//#[no_coverage]
 1020|      1|#[test]
 1021|       |#[should_panic]
 1022|      1|#[timeout(3000)]
 1023|      1|fn rusty_test_913() {
 1024|      1|    rusty_monitor::set_test_id(913);
 1025|      1|    let mut u16_0: u16 = 365u16;
 1026|      1|    let mut i64_0: i64 = 42i64;
 1027|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1028|      1|    let mut i64_1: i64 = 604800i64;
 1029|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1030|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1031|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 1032|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 1033|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 1034|      1|    let mut i64_2: i64 = 604800i64;
 1035|      1|    let mut i64_3: i64 = 0i64;
 1036|      1|    let mut u16_1: u16 = 94u16;
 1037|      1|    let mut i32_0: i32 = 303i32;
 1038|      1|    let mut i32_1: i32 = 336i32;
 1039|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1040|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1041|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_ordinal_date(i32_0, u16_1);
 1042|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 1043|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 1044|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_1_ref_0);
 1045|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1046|      1|    let mut duration_5: crate::duration::Duration = std::ops::Div::div(duration_2, u16_0);
 1047|      1|    panic!("From RustyUnit with love");
 1048|       |}
 1049|       |
 1050|       |//#[no_coverage]
 1051|      1|#[test]
 1052|       |#[should_panic]
 1053|      1|#[timeout(3000)]
 1054|      1|fn rusty_test_392() {
 1055|      1|    rusty_monitor::set_test_id(392);
 1056|      1|    let mut i16_0: i16 = 6i16;
 1057|      1|    let mut i64_0: i64 = 3600i64;
 1058|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1059|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i16_0);
 1060|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1061|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
 1062|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1063|      1|    let mut i64_1: i64 = 9223372036854775807i64;
 1064|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1065|      1|    let mut i32_0: i32 = 359i32;
 1066|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1067|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1068|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_4);
 1069|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1070|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1071|      1|    panic!("From RustyUnit with love");
 1072|       |}
 1073|       |
 1074|       |//#[no_coverage]
 1075|      1|#[test]
 1076|       |#[should_panic]
 1077|      1|#[timeout(3000)]
 1078|      1|fn rusty_test_1662() {
 1079|      1|    rusty_monitor::set_test_id(1662);
 1080|      1|    let mut i128_0: i128 = 0i128;
 1081|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1082|      1|    let mut u32_0: u32 = 62u32;
 1083|      1|    let mut u8_0: u8 = 23u8;
 1084|      1|    let mut u8_1: u8 = 44u8;
 1085|      1|    let mut u8_2: u8 = 6u8;
 1086|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1087|      1|    let mut i32_0: i32 = 296i32;
 1088|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1089|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1090|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 1091|      1|    let mut i64_0: i64 = 60i64;
 1092|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1093|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
 1094|      1|    let mut u32_1: u32 = 13u32;
 1095|      1|    let mut u8_3: u8 = 0u8;
 1096|      1|    let mut u8_4: u8 = 12u8;
 1097|      1|    let mut u8_5: u8 = 38u8;
 1098|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1099|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1100|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1101|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1102|      1|    let mut u32_2: u32 = 10000000u32;
 1103|      1|    let mut i16_0: i16 = 5i16;
 1104|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 1105|      1|    let mut duration_3: crate::duration::Duration = std::ops::Div::div(duration_2, i16_0);
 1106|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, u32_2);
 1107|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1108|      1|    let mut i32_1: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
 1109|      1|    panic!("From RustyUnit with love");
 1110|       |}
 1111|       |
 1112|       |//#[no_coverage]
 1113|      1|#[test]
 1114|       |#[should_panic]
 1115|      1|#[timeout(3000)]
 1116|      1|fn rusty_test_639() {
 1117|      1|    rusty_monitor::set_test_id(639);
 1118|      1|    let mut i8_0: i8 = 23i8;
 1119|      1|    let mut f64_0: f64 = 4741671816366391296.000000f64;
 1120|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1121|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i8_0);
 1122|      1|    let mut i32_0: i32 = 280i32;
 1123|      1|    let mut i64_0: i64 = 12i64;
 1124|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1125|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1126|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1127|      1|    let mut i64_1: i64 = 86400i64;
 1128|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1129|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 1130|      1|    let mut i32_1: i32 = 86399i32;
 1131|      1|    let mut i64_2: i64 = 1000i64;
 1132|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration {seconds: i64_2, nanoseconds: i32_1, padding: padding_0};
 1133|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_5, duration_4);
 1134|      1|    let mut i8_1: i8 = 4i8;
 1135|      1|    let mut duration_7: crate::duration::Duration = std::default::Default::default();
 1136|      1|    let mut duration_8: crate::duration::Duration = std::ops::Div::div(duration_7, i8_1);
 1137|      1|    let mut i64_3: i64 = 2147483647i64;
 1138|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_3);
 1139|      1|    let mut i64_4: i64 = 9223372036854775807i64;
 1140|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
 1141|      1|    let mut bool_0: bool = crate::duration::Duration::is_negative(duration_10);
 1142|      1|    let mut bool_1: bool = crate::duration::Duration::is_negative(duration_9);
 1143|      1|    let mut bool_2: bool = crate::duration::Duration::is_negative(duration_8);
 1144|      1|    let mut bool_3: bool = crate::duration::Duration::is_negative(duration_6);
 1145|      1|    let mut bool_4: bool = crate::duration::Duration::is_negative(duration_3);
 1146|      1|    let mut bool_5: bool = crate::duration::Duration::is_negative(duration_1);
 1147|      1|    panic!("From RustyUnit with love");
 1148|       |}
 1149|       |
 1150|       |//#[no_coverage]
 1151|      1|#[test]
 1152|       |#[should_panic]
 1153|      1|#[timeout(3000)]
 1154|      1|fn rusty_test_5107() {
 1155|      1|    rusty_monitor::set_test_id(5107);
 1156|      1|    let mut i128_0: i128 = 0i128;
 1157|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1158|      1|    let mut u32_0: u32 = 62u32;
 1159|      1|    let mut u8_0: u8 = 23u8;
 1160|      1|    let mut u8_1: u8 = 44u8;
 1161|      1|    let mut u8_2: u8 = 6u8;
 1162|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1163|      1|    let mut i64_0: i64 = 60i64;
 1164|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1165|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
 1166|      1|    let mut u32_1: u32 = 13u32;
 1167|      1|    let mut u8_3: u8 = 0u8;
 1168|      1|    let mut u8_4: u8 = 12u8;
 1169|      1|    let mut u8_5: u8 = 38u8;
 1170|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1171|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1172|      1|    let mut i8_0: i8 = 5i8;
 1173|      1|    let mut i8_1: i8 = -20i8;
 1174|      1|    let mut i8_2: i8 = 0i8;
 1175|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1176|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1177|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_1);
 1178|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1179|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1180|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1181|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1182|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1183|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 1184|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1185|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1186|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1187|      1|    panic!("From RustyUnit with love");
 1188|       |}
 1189|       |
 1190|       |//#[no_coverage]
 1191|      1|#[test]
 1192|       |#[should_panic]
 1193|      1|#[timeout(3000)]
 1194|      1|fn rusty_test_6464() {
 1195|      1|    rusty_monitor::set_test_id(6464);
 1196|      1|    let mut i8_0: i8 = 4i8;
 1197|      1|    let mut i8_1: i8 = 60i8;
 1198|      1|    let mut i8_2: i8 = 6i8;
 1199|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1200|      1|    let mut i64_0: i64 = 54i64;
 1201|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1202|      1|    let mut duration_0_ref_0: &crate::duration::Duration = &mut duration_0;
 1203|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1204|      1|    let mut i64_1: i64 = 24i64;
 1205|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1206|      1|    let mut duration_2: crate::duration::Duration = std::ops::Mul::mul(duration_1, f32_0);
 1207|      1|    let mut duration_2_ref_0: &crate::duration::Duration = &mut duration_2;
 1208|      1|    let mut i128_0: i128 = 0i128;
 1209|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1210|      1|    let mut u32_0: u32 = 62u32;
 1211|      1|    let mut u8_0: u8 = 23u8;
 1212|      1|    let mut u8_1: u8 = 44u8;
 1213|      1|    let mut u8_2: u8 = 6u8;
 1214|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1215|      1|    let mut i64_2: i64 = 60i64;
 1216|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1217|      1|    let mut duration_4_ref_0: &crate::duration::Duration = &mut duration_4;
 1218|      1|    let mut u32_1: u32 = 13u32;
 1219|      1|    let mut u8_3: u8 = 0u8;
 1220|      1|    let mut u8_4: u8 = 12u8;
 1221|      1|    let mut u8_5: u8 = 38u8;
 1222|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1223|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1224|      1|    let mut i8_3: i8 = 5i8;
 1225|      1|    let mut i8_4: i8 = -20i8;
 1226|      1|    let mut i8_5: i8 = 0i8;
 1227|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1228|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1229|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_2);
 1230|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1231|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1232|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_1);
 1233|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1234|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1235|      1|    let mut duration_5: crate::duration::Duration = std::default::Default::default();
 1236|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1237|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1238|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(duration_2_ref_0, duration_0_ref_0);
 1239|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_negative(utcoffset_0);
 1240|      1|    panic!("From RustyUnit with love");
 1241|       |}
 1242|       |
 1243|       |//#[no_coverage]
 1244|      1|#[test]
 1245|       |#[should_panic]
 1246|      1|#[timeout(3000)]
 1247|      1|fn rusty_test_241() {
 1248|      1|    rusty_monitor::set_test_id(241);
 1249|      1|    let mut i32_0: i32 = 150i32;
 1250|      1|    let mut i64_0: i64 = 0i64;
 1251|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1252|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i32_0);
 1253|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1254|      1|    let mut i64_1: i64 = 1i64;
 1255|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1256|      1|    let mut i64_2: i64 = 1000000i64;
 1257|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1258|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
 1259|      1|    let mut i8_0: i8 = 60i8;
 1260|      1|    let mut i64_3: i64 = 86400i64;
 1261|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::days(i64_3);
 1262|      1|    let mut duration_7: crate::duration::Duration = std::ops::Mul::mul(duration_6, i8_0);
 1263|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
 1264|      1|    let mut u8_0: u8 = 1u8;
 1265|      1|    let mut padding_0: duration::Padding = std::default::Default::default();
 1266|      1|    let mut i32_1: i32 = 212i32;
 1267|      1|    let mut i64_4: i64 = 1000i64;
 1268|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration {seconds: i64_4, nanoseconds: i32_1, padding: padding_0};
 1269|      1|    let mut duration_10: crate::duration::Duration = std::ops::Div::div(duration_9, u8_0);
 1270|      1|    let mut i32_2: i32 = 370i32;
 1271|      1|    let mut i64_5: i64 = 253402300799i64;
 1272|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::new(i64_5, i32_2);
 1273|      1|    let mut duration_12: std::time::Duration = crate::duration::Duration::abs_std(duration_11);
 1274|      1|    let mut i8_1: i8 = 4i8;
 1275|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1276|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1277|      1|    let mut duration_14: crate::duration::Duration = std::ops::Mul::mul(duration_13, i8_1);
 1278|      1|    let mut f64_0: f64 = std::ops::Div::div(duration_14, duration_12);
 1279|      1|    let mut f64_1: f64 = std::ops::Div::div(duration_10, duration_8);
 1280|      1|    let mut f64_2: f64 = std::ops::Div::div(duration_5, duration_2);
 1281|      1|    panic!("From RustyUnit with love");
 1282|       |}
 1283|       |
 1284|       |//#[no_coverage]
 1285|      1|#[test]
 1286|       |#[should_panic]
 1287|      1|#[timeout(3000)]
 1288|      1|fn rusty_test_67() {
 1289|      1|    rusty_monitor::set_test_id(67);
 1290|      1|    let mut u32_0: u32 = 10u32;
 1291|      1|    let mut u8_0: u8 = 10u8;
 1292|      1|    let mut u8_1: u8 = 8u8;
 1293|      1|    let mut u8_2: u8 = 28u8;
 1294|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1295|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1296|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1297|      1|    let mut u32_1: u32 = 10000u32;
 1298|      1|    let mut i128_0: i128 = 1000i128;
 1299|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1300|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, u32_1);
 1301|      1|    let mut i64_0: i64 = -61i64;
 1302|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1303|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 1304|      1|    let mut i32_0: i32 = 2147483647i32;
 1305|      1|    let mut i64_1: i64 = 12i64;
 1306|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1307|      1|    let mut u8_3: u8 = 23u8;
 1308|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
 1309|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1310|      1|    let mut duration_6: crate::duration::Duration = std::ops::Div::div(duration_5, u8_3);
 1311|      1|    let mut u16_0: u16 = 10u16;
 1312|      1|    let mut i32_1: i32 = 32i32;
 1313|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1314|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_6);
 1315|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1316|      1|    let mut u8_4: u8 = crate::primitive_date_time::PrimitiveDateTime::minute(primitivedatetime_0);
 1317|      1|    let mut duration_7: crate::duration::Duration = std::default::Default::default();
 1318|      1|    let mut i64_2: i64 = crate::duration::Duration::whole_minutes(duration_4);
 1319|      1|    let mut option_0: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_sub(duration_3, duration_1);
 1320|      1|    let mut u8_5: u8 = crate::offset_date_time::OffsetDateTime::day(offsetdatetime_1);
 1321|      1|    panic!("From RustyUnit with love");
 1322|       |}
 1323|       |
 1324|       |//#[no_coverage]
 1325|      1|#[test]
 1326|       |#[should_panic]
 1327|      1|#[timeout(3000)]
 1328|      1|fn rusty_test_232() {
 1329|      1|    rusty_monitor::set_test_id(232);
 1330|      1|    let mut i64_0: i64 = 3600i64;
 1331|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1332|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1333|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 1334|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1335|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1336|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1337|      1|    let mut i32_0: i32 = 381i32;
 1338|      1|    let mut i64_1: i64 = 0i64;
 1339|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
 1340|      1|    let mut i64_2: i64 = 86400i64;
 1341|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1342|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_6, duration_5);
 1343|      1|    let mut f64_1: f64 = 4652007308841189376.000000f64;
 1344|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_1);
 1345|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
 1346|      1|    let mut i32_1: i32 = 353i32;
 1347|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1348|      1|    let mut duration_10: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1349|      1|    let mut duration_11: crate::duration::Duration = std::ops::Div::div(duration_10, i32_1);
 1350|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1351|      1|    let mut duration_12: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 1352|      1|    let mut duration_13: std::time::Duration = crate::duration::Duration::abs_std(duration_12);
 1353|      1|    let mut i8_0: i8 = 24i8;
 1354|      1|    let mut i64_3: i64 = 2440588i64;
 1355|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1356|      1|    let mut duration_15: crate::duration::Duration = std::ops::Div::div(duration_14, i8_0);
 1357|      1|    let mut duration_16: crate::duration::Duration = std::ops::Add::add(duration_15, duration_13);
 1358|      1|    let mut duration_17: crate::duration::Duration = std::ops::Add::add(duration_11, duration_9);
 1359|      1|    let mut duration_18: crate::duration::Duration = std::ops::Add::add(duration_7, duration_4);
 1360|      1|    let mut duration_19: crate::duration::Duration = std::ops::Add::add(duration_2, duration_1);
 1361|      1|    panic!("From RustyUnit with love");
 1362|       |}
 1363|       |
 1364|       |//#[no_coverage]
 1365|      1|#[test]
 1366|       |#[should_panic]
 1367|      1|#[timeout(3000)]
 1368|      1|fn rusty_test_186() {
 1369|      1|    rusty_monitor::set_test_id(186);
 1370|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 1371|      1|    let mut i32_0: i32 = 1721425i32;
 1372|      1|    let mut i64_0: i64 = 1000i64;
 1373|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1374|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, f64_0);
 1375|      1|    let mut i64_1: i64 = 1000000000i64;
 1376|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1377|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1378|      1|    let mut i32_1: i32 = 1000000000i32;
 1379|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1380|      1|    let mut i32_2: i32 = 359i32;
 1381|      1|    let mut i64_2: i64 = 2147483647i64;
 1382|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
 1383|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1384|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1385|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1386|      1|    let mut i64_3: i64 = 2147483647i64;
 1387|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1388|      1|    let mut u32_0: u32 = 100u32;
 1389|      1|    let mut u8_0: u8 = 76u8;
 1390|      1|    let mut u8_1: u8 = 58u8;
 1391|      1|    let mut u8_2: u8 = 0u8;
 1392|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1393|      1|    let mut i64_4: i64 = 60i64;
 1394|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
 1395|      1|    let mut i8_0: i8 = 60i8;
 1396|      1|    let mut i8_1: i8 = 23i8;
 1397|      1|    let mut i8_2: i8 = 2i8;
 1398|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1399|      1|    panic!("From RustyUnit with love");
 1400|       |}
 1401|       |
 1402|       |//#[no_coverage]
 1403|      1|#[test]
 1404|       |#[should_panic]
 1405|      1|#[timeout(3000)]
 1406|      1|fn rusty_test_69() {
 1407|      1|    rusty_monitor::set_test_id(69);
 1408|      1|    let mut i32_0: i32 = 3600i32;
 1409|      1|    let mut i64_0: i64 = 86400i64;
 1410|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1411|      1|    let mut i32_1: i32 = 195i32;
 1412|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1413|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_0);
 1414|      1|    let mut month_0: month::Month = crate::date::Date::month(date_1);
 1415|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
 1416|      1|    let mut i64_1: i64 = 2440588i64;
 1417|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1418|      1|    let mut i32_2: i32 = 82i32;
 1419|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1420|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1421|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1422|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
 1423|      1|    let mut i32_3: i32 = 285i32;
 1424|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1425|      1|    let mut weekday_0: weekday::Weekday = crate::date::Date::weekday(date_3);
 1426|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
 1427|      1|    let mut u8_0: u8 = 68u8;
 1428|      1|    let mut i32_4: i32 = 359i32;
 1429|      1|    let mut u32_0: u32 = 100u32;
 1430|      1|    let mut u8_1: u8 = 60u8;
 1431|      1|    let mut u8_2: u8 = 29u8;
 1432|      1|    let mut u8_3: u8 = 2u8;
 1433|      1|    let mut i64_2: i64 = 604800i64;
 1434|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1435|      1|    let mut i64_3: i64 = 60i64;
 1436|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
 1437|      1|    let mut duration_4: crate::duration::Duration = std::ops::Add::add(duration_3, duration_2);
 1438|      1|    let mut duration_4_ref_0: &crate::duration::Duration = &mut duration_4;
 1439|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(duration_4_ref_0);
 1440|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_2, u8_1, u32_0);
 1441|      1|    let mut u32_1: u32 = crate::time::Time::microsecond(time_0);
 1442|      1|    let mut month_1: month::Month = crate::month::Month::July;
 1443|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_4, u8_0, weekday_1);
 1444|      1|    let mut tuple_1: (u8, u8, u8, u32) = crate::offset_date_time::OffsetDateTime::to_hms_micro(offsetdatetime_1);
 1445|      1|    let mut month_1_ref_0: &month::Month = &mut month_1;
 1446|      1|    panic!("From RustyUnit with love");
 1447|       |}
 1448|       |
 1449|       |//#[no_coverage]
 1450|      1|#[test]
 1451|       |#[should_panic]
 1452|      1|#[timeout(3000)]
 1453|      1|fn rusty_test_1714() {
 1454|      1|    rusty_monitor::set_test_id(1714);
 1455|      1|    let mut f64_0: f64 = 4696837146684686336.000000f64;
 1456|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1457|      1|    let mut duration_0_ref_0: &crate::duration::Duration = &mut duration_0;
 1458|      1|    let mut i64_0: i64 = 60i64;
 1459|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1460|      1|    let mut u16_0: u16 = 999u16;
 1461|      1|    let mut i32_0: i32 = -72i32;
 1462|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1463|      1|    let mut u32_0: u32 = 999999999u32;
 1464|      1|    let mut u8_0: u8 = 29u8;
 1465|      1|    let mut u8_1: u8 = 5u8;
 1466|      1|    let mut u8_2: u8 = 75u8;
 1467|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1468|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 1469|      1|    let mut i64_1: i64 = 2147483647i64;
 1470|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1471|      1|    let mut i128_0: i128 = 1000i128;
 1472|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1473|      1|    let mut i32_1: i32 = 32i32;
 1474|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1475|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1476|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_3);
 1477|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1478|      1|    let mut u32_1: u32 = 10000000u32;
 1479|      1|    let mut u8_3: u8 = 29u8;
 1480|      1|    let mut u8_4: u8 = 1u8;
 1481|      1|    let mut u8_5: u8 = 1u8;
 1482|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1483|      1|    let mut time_2_ref_0: &crate::time::Time = &mut time_2;
 1484|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(duration_0_ref_0);
 1485|      1|    panic!("From RustyUnit with love");
 1486|       |}
 1487|       |
 1488|       |//#[no_coverage]
 1489|      1|#[test]
 1490|       |#[should_panic]
 1491|      1|#[timeout(3000)]
 1492|      1|fn rusty_test_217() {
 1493|      1|    rusty_monitor::set_test_id(217);
 1494|      1|    let mut i16_0: i16 = 5i16;
 1495|      1|    let mut i64_0: i64 = 86400i64;
 1496|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1497|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, i16_0);
 1498|      1|    let mut i32_0: i32 = 229i32;
 1499|      1|    let mut i64_1: i64 = 74i64;
 1500|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1501|      1|    let mut duration_3: crate::duration::Duration = std::default::Default::default();
 1502|      1|    let mut i64_2: i64 = 44i64;
 1503|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1504|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
 1505|      1|    let mut i64_3: i64 = 604800i64;
 1506|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_3);
 1507|      1|    let mut i64_4: i64 = 0i64;
 1508|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 1509|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_7, duration_6);
 1510|      1|    let mut i32_1: i32 = 184i32;
 1511|      1|    let mut i64_5: i64 = 604800i64;
 1512|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::weeks(i64_5);
 1513|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_9, i32_1);
 1514|      1|    let mut f32_0: f32 = 13.177004f32;
 1515|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1516|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
 1517|      1|    let mut i64_6: i64 = 0i64;
 1518|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds(i64_6);
 1519|      1|    let mut duration_13: crate::duration::Duration = std::ops::Div::div(duration_12, f64_0);
 1520|      1|    let mut i16_1: i16 = crate::duration::Duration::subsec_milliseconds(duration_13);
 1521|      1|    let mut i16_2: i16 = crate::duration::Duration::subsec_milliseconds(duration_11);
 1522|      1|    let mut i16_3: i16 = crate::duration::Duration::subsec_milliseconds(duration_10);
 1523|      1|    let mut i16_4: i16 = crate::duration::Duration::subsec_milliseconds(duration_8);
 1524|      1|    let mut i16_5: i16 = crate::duration::Duration::subsec_milliseconds(duration_5);
 1525|      1|    let mut i16_6: i16 = crate::duration::Duration::subsec_milliseconds(duration_2);
 1526|      1|    let mut i16_7: i16 = crate::duration::Duration::subsec_milliseconds(duration_1);
 1527|      1|    panic!("From RustyUnit with love");
 1528|       |}
 1529|       |
 1530|       |//#[no_coverage]
 1531|      1|#[test]
 1532|       |#[should_panic]
 1533|      1|#[timeout(3000)]
 1534|      1|fn rusty_test_665() {
 1535|      1|    rusty_monitor::set_test_id(665);
 1536|      1|    let mut month_0: month::Month = crate::month::Month::December;
 1537|      1|    let mut u16_0: u16 = 367u16;
 1538|      1|    let mut i32_0: i32 = 218i32;
 1539|      1|    let mut i64_0: i64 = 1i64;
 1540|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1541|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1542|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, f32_0);
 1543|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1544|      1|    let mut duration_2_ref_0: &std::time::Duration = &mut duration_2;
 1545|      1|    let mut f64_0: f64 = 4768169126130614272.000000f64;
 1546|      1|    let mut i64_1: i64 = 1i64;
 1547|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1548|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, f64_0);
 1549|      1|    let mut duration_4_ref_0: &crate::duration::Duration = &mut duration_4;
 1550|      1|    let mut i16_0: i16 = 32767i16;
 1551|      1|    let mut i64_2: i64 = 24i64;
 1552|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 1553|      1|    let mut duration_6: crate::duration::Duration = std::ops::Mul::mul(duration_5, i16_0);
 1554|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1555|      1|    let mut duration_7_ref_0: &std::time::Duration = &mut duration_7;
 1556|      1|    let mut i32_1: i32 = 65i32;
 1557|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1558|      1|    let mut duration_8: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1559|      1|    let mut duration_9: crate::duration::Duration = std::ops::Mul::mul(duration_8, i32_1);
 1560|      1|    let mut duration_9_ref_0: &crate::duration::Duration = &mut duration_9;
 1561|      1|    let mut i64_3: i64 = 12i64;
 1562|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 1563|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
 1564|      1|    let mut duration_11_ref_0: &std::time::Duration = &mut duration_11;
 1565|      1|    let mut i8_0: i8 = 3i8;
 1566|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 1567|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1568|      1|    let mut duration_13: crate::duration::Duration = std::ops::Mul::mul(duration_12, i8_0);
 1569|      1|    let mut duration_13_ref_0: &crate::duration::Duration = &mut duration_13;
 1570|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(duration_13_ref_0, duration_11_ref_0);
 1571|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(duration_9_ref_0, duration_7_ref_0);
 1572|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(duration_4_ref_0, duration_2_ref_0);
 1573|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_ordinal_date(i32_0, u16_0);
 1574|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1575|      1|    panic!("From RustyUnit with love");
 1576|       |}
 1577|       |
 1578|       |//#[no_coverage]
 1579|      1|#[test]
 1580|       |#[should_panic]
 1581|      1|#[timeout(3000)]
 1582|      1|fn rusty_test_548() {
 1583|      1|    rusty_monitor::set_test_id(548);
 1584|      1|    let mut u16_0: u16 = 59u16;
 1585|      1|    let mut i32_0: i32 = 381i32;
 1586|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1587|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1588|      1|    let mut primitivedatetime_0_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
 1589|      1|    let mut i64_0: i64 = 24i64;
 1590|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1591|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1592|      1|    let mut u32_0: u32 = 10u32;
 1593|      1|    let mut u8_0: u8 = 0u8;
 1594|      1|    let mut u8_1: u8 = 24u8;
 1595|      1|    let mut u8_2: u8 = 8u8;
 1596|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1597|      1|    let mut u32_1: u32 = 0u32;
 1598|      1|    let mut i32_1: i32 = -111i32;
 1599|      1|    let mut i64_1: i64 = 1000000i64;
 1600|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1601|      1|    let mut duration_3: crate::duration::Duration = std::ops::Mul::mul(duration_2, u32_1);
 1602|      1|    let mut i8_0: i8 = 3i8;
 1603|      1|    let mut i8_1: i8 = 24i8;
 1604|      1|    let mut i8_2: i8 = 60i8;
 1605|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1606|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1607|      1|    panic!("From RustyUnit with love");
 1608|       |}
 1609|       |
 1610|       |//#[no_coverage]
 1611|      1|#[test]
 1612|       |#[should_panic]
 1613|      1|#[timeout(3000)]
 1614|      1|fn rusty_test_476() {
 1615|      1|    rusty_monitor::set_test_id(476);
 1616|      1|    let mut f64_0: f64 = 4696837146684686336.000000f64;
 1617|      1|    let mut i32_0: i32 = 5i32;
 1618|      1|    let mut i32_1: i32 = 274i32;
 1619|      1|    let mut i64_0: i64 = 60i64;
 1620|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1621|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i32_0);
 1622|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 1623|      1|    panic!("From RustyUnit with love");
 1624|       |}
 1625|       |
 1626|       |//#[no_coverage]
 1627|      1|#[test]
 1628|       |#[should_panic]
 1629|      1|#[timeout(3000)]
 1630|      1|fn rusty_test_216() {
 1631|      1|    rusty_monitor::set_test_id(216);
 1632|      1|    let mut i64_0: i64 = 604800i64;
 1633|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1634|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1635|      1|    let mut i32_0: i32 = 7i32;
 1636|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1637|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1638|      1|    let mut duration_3: crate::duration::Duration = std::ops::Div::div(duration_2, i32_0);
 1639|      1|    let mut i16_0: i16 = 8i16;
 1640|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1641|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1642|      1|    let mut duration_5: crate::duration::Duration = std::ops::Mul::mul(duration_4, i16_0);
 1643|      1|    let mut u32_0: u32 = 999999999u32;
 1644|      1|    let mut i64_1: i64 = -246i64;
 1645|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1646|      1|    let mut duration_7: crate::duration::Duration = std::ops::Mul::mul(duration_6, u32_0);
 1647|      1|    let mut f32_1: f32 = 1065353216.000000f32;
 1648|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1649|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1650|      1|    let mut duration_9: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 1651|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1652|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1653|      1|    let mut i32_1: i32 = 116i32;
 1654|      1|    let mut i64_2: i64 = 27i64;
 1655|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 1656|      1|    let mut i128_0: i128 = crate::duration::Duration::whole_milliseconds(duration_10);
 1657|      1|    let mut i128_1: i128 = crate::duration::Duration::whole_milliseconds(duration_9);
 1658|      1|    let mut i128_2: i128 = crate::duration::Duration::whole_milliseconds(duration_8);
 1659|      1|    let mut i128_3: i128 = crate::duration::Duration::whole_milliseconds(duration_7);
 1660|      1|    let mut i128_4: i128 = crate::duration::Duration::whole_milliseconds(duration_5);
 1661|      1|    let mut i128_5: i128 = crate::duration::Duration::whole_milliseconds(duration_3);
 1662|      1|    let mut i128_6: i128 = crate::duration::Duration::whole_milliseconds(duration_1);
 1663|      1|    panic!("From RustyUnit with love");
 1664|       |}
 1665|       |
 1666|       |//#[no_coverage]
 1667|      1|#[test]
 1668|       |#[should_panic]
 1669|      1|#[timeout(3000)]
 1670|      1|fn rusty_test_231() {
 1671|      1|    rusty_monitor::set_test_id(231);
 1672|      1|    let mut i64_0: i64 = 2147483647i64;
 1673|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1674|      1|    let mut i128_0: i128 = 1000i128;
 1675|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1676|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 1677|      1|    let mut i64_1: i64 = 1000000i64;
 1678|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1679|      1|    let mut u32_0: u32 = 100000u32;
 1680|      1|    let mut f32_0: f32 = 160.031927f32;
 1681|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1682|      1|    let mut duration_5: crate::duration::Duration = std::ops::Mul::mul(duration_4, u32_0);
 1683|      1|    let mut i8_0: i8 = 4i8;
 1684|      1|    let mut i8_1: i8 = 23i8;
 1685|      1|    let mut i8_2: i8 = 10i8;
 1686|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1687|      1|    let mut u32_1: u32 = 0u32;
 1688|      1|    let mut u8_0: u8 = 53u8;
 1689|      1|    let mut u8_1: u8 = 1u8;
 1690|      1|    let mut u8_2: u8 = 29u8;
 1691|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_1);
 1692|      1|    let mut i32_0: i32 = 296i32;
 1693|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1694|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1695|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1696|      1|    let mut i32_1: i32 = 37i32;
 1697|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1698|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1699|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_1);
 1700|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1701|      1|    let mut i32_2: i32 = 392i32;
 1702|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1703|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
 1704|      1|    let mut duration_6: crate::duration::Duration = std::ops::Add::add(duration_3, duration_2);
 1705|      1|    panic!("From RustyUnit with love");
 1706|       |}
 1707|       |
 1708|       |//#[no_coverage]
 1709|      1|#[test]
 1710|       |#[should_panic]
 1711|      1|#[timeout(3000)]
 1712|      1|fn rusty_test_959() {
 1713|      1|    rusty_monitor::set_test_id(959);
 1714|      1|    let mut i64_0: i64 = -159i64;
 1715|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1716|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1717|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1718|      1|    let mut duration_1_ref_0: &std::time::Duration = &mut duration_1;
 1719|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 1720|      1|    let mut i32_0: i32 = 274i32;
 1721|      1|    let mut i64_1: i64 = 1000000i64;
 1722|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration {seconds: i64_1, nanoseconds: i32_0, padding: padding_0};
 1723|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 1724|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 1725|      1|    let mut i64_2: i64 = 604800i64;
 1726|      1|    let mut i64_3: i64 = 0i64;
 1727|      1|    let mut u16_0: u16 = 94u16;
 1728|      1|    let mut i32_1: i32 = 303i32;
 1729|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 1730|      1|    let mut i64_4: i64 = 1000i64;
 1731|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_4);
 1732|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, f32_1);
 1733|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1734|      1|    let mut i32_2: i32 = 336i32;
 1735|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1736|      1|    let mut i32_3: i32 = -50i32;
 1737|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_3};
 1738|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1739|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 1740|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1741|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1742|      1|    let mut offsetdatetime_1_ref_0: &mut crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 1743|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_ordinal_date(i32_1, u16_0);
 1744|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 1745|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 1746|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_1_ref_0);
 1747|      1|    let mut bool_0: bool = crate::duration::Duration::is_positive(duration_2);
 1748|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1749|      1|    let mut duration_7_ref_0: &crate::duration::Duration = &mut duration_7;
 1750|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(duration_7_ref_0, duration_1_ref_0);
 1751|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1752|      1|    panic!("From RustyUnit with love");
 1753|       |}
 1754|       |
 1755|       |//#[no_coverage]
 1756|      1|#[test]
 1757|       |#[should_panic]
 1758|      1|#[timeout(3000)]
 1759|      1|fn rusty_test_194() {
 1760|      1|    rusty_monitor::set_test_id(194);
 1761|      1|    let mut i32_0: i32 = 195i32;
 1762|      1|    let mut i64_0: i64 = 86400i64;
 1763|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1764|      1|    let mut f64_0: f64 = 0.000000f64;
 1765|      1|    let mut i64_1: i64 = 1000000000i64;
 1766|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1767|      1|    let mut duration_2: crate::duration::Duration = std::ops::Mul::mul(duration_1, f64_0);
 1768|      1|    let mut i128_0: i128 = 1000000000i128;
 1769|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1770|      1|    let mut u8_0: u8 = 3u8;
 1771|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 1772|      1|    let mut i32_1: i32 = 71i32;
 1773|      1|    let mut i64_2: i64 = 1i64;
 1774|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration {seconds: i64_2, nanoseconds: i32_1, padding: padding_0};
 1775|      1|    let mut duration_5: crate::duration::Duration = std::ops::Div::div(duration_4, u8_0);
 1776|      1|    let mut i16_0: i16 = 7i16;
 1777|      1|    let mut i64_3: i64 = 58i64;
 1778|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
 1779|      1|    let mut duration_7: crate::duration::Duration = std::ops::Mul::mul(duration_6, i16_0);
 1780|      1|    let mut i64_4: i64 = 2147483647i64;
 1781|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
 1782|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1783|      1|    let mut duration_9: crate::duration::Duration = std::default::Default::default();
 1784|      1|    let mut duration_10: crate::duration::Duration = std::ops::Mul::mul(duration_9, f32_0);
 1785|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::abs(duration_10);
 1786|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::abs(duration_8);
 1787|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::abs(duration_7);
 1788|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::abs(duration_5);
 1789|      1|    let mut duration_15: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1790|      1|    let mut duration_16: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 1791|      1|    let mut duration_17: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1792|      1|    panic!("From RustyUnit with love");
 1793|       |}
 1794|       |
 1795|       |//#[no_coverage]
 1796|      1|#[test]
 1797|       |#[should_panic]
 1798|      1|#[timeout(3000)]
 1799|      1|fn rusty_test_266() {
 1800|      1|    rusty_monitor::set_test_id(266);
 1801|      1|    let mut i128_0: i128 = 1i128;
 1802|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1803|      1|    let mut i64_0: i64 = 12i64;
 1804|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1805|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 1806|      1|    let mut i128_1: i128 = 9223372036854775807i128;
 1807|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
 1808|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1809|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1810|      1|    panic!("From RustyUnit with love");
 1811|       |}
 1812|       |
 1813|       |//#[no_coverage]
 1814|      1|#[test]
 1815|       |#[should_panic]
 1816|      1|#[timeout(3000)]
 1817|      1|fn rusty_test_969() {
 1818|      1|    rusty_monitor::set_test_id(969);
 1819|      1|    let mut i32_0: i32 = 263i32;
 1820|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1821|      1|    let mut i128_0: i128 = 0i128;
 1822|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1823|      1|    let mut u32_0: u32 = 62u32;
 1824|      1|    let mut u8_0: u8 = 23u8;
 1825|      1|    let mut u8_1: u8 = 44u8;
 1826|      1|    let mut u8_2: u8 = 6u8;
 1827|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1828|      1|    let mut i32_1: i32 = 296i32;
 1829|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1830|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 1831|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 1832|      1|    let mut i64_0: i64 = 60i64;
 1833|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1834|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
 1835|      1|    let mut u32_1: u32 = 13u32;
 1836|      1|    let mut u8_3: u8 = 0u8;
 1837|      1|    let mut u8_4: u8 = 12u8;
 1838|      1|    let mut u8_5: u8 = 38u8;
 1839|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1840|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1841|      1|    let mut i8_0: i8 = 5i8;
 1842|      1|    let mut i8_1: i8 = -20i8;
 1843|      1|    let mut i8_2: i8 = 0i8;
 1844|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1845|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1846|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_1);
 1847|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1848|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1849|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_0);
 1850|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1851|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1852|      1|    let mut u32_2: u32 = 12u32;
 1853|      1|    let mut i16_0: i16 = 5i16;
 1854|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 1855|      1|    let mut duration_3: crate::duration::Duration = std::ops::Div::div(duration_2, i16_0);
 1856|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, u32_2);
 1857|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1858|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1859|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1860|      1|    let mut i32_2: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
 1861|      1|    let mut tuple_1: (month::Month, u8) = crate::date::Date::month_day(date_0);
 1862|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 1863|      1|    panic!("From RustyUnit with love");
 1864|       |}
 1865|       |
 1866|       |//#[no_coverage]
 1867|      1|#[test]
 1868|       |#[should_panic]
 1869|      1|#[timeout(3000)]
 1870|      1|fn rusty_test_475() {
 1871|      1|    rusty_monitor::set_test_id(475);
 1872|      1|    let mut f32_0: f32 = 93.886652f32;
 1873|      1|    let mut i64_0: i64 = 0i64;
 1874|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1875|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 1876|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1877|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 1878|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1879|      1|    panic!("From RustyUnit with love");
 1880|       |}
 1881|       |
 1882|       |//#[no_coverage]
 1883|      1|#[test]
 1884|       |#[should_panic]
 1885|      1|#[timeout(3000)]
 1886|      1|fn rusty_test_1946() {
 1887|      1|    rusty_monitor::set_test_id(1946);
 1888|      1|    let mut i8_0: i8 = 51i8;
 1889|      1|    let mut i8_1: i8 = 5i8;
 1890|      1|    let mut i8_2: i8 = 23i8;
 1891|      1|    let mut i128_0: i128 = 0i128;
 1892|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1893|      1|    let mut u32_0: u32 = 62u32;
 1894|      1|    let mut u8_0: u8 = 23u8;
 1895|      1|    let mut u8_1: u8 = 44u8;
 1896|      1|    let mut u8_2: u8 = 6u8;
 1897|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1898|      1|    let mut i32_0: i32 = 296i32;
 1899|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1900|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1901|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 1902|      1|    let mut i64_0: i64 = 60i64;
 1903|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1904|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
 1905|      1|    let mut u32_1: u32 = 13u32;
 1906|      1|    let mut u8_3: u8 = 0u8;
 1907|      1|    let mut u8_4: u8 = 12u8;
 1908|      1|    let mut u8_5: u8 = 38u8;
 1909|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1910|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1911|      1|    let mut i8_3: i8 = 5i8;
 1912|      1|    let mut i8_4: i8 = -20i8;
 1913|      1|    let mut i8_5: i8 = 0i8;
 1914|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1915|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1916|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_1);
 1917|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1918|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1919|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_0);
 1920|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1921|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1922|      1|    let mut u32_2: u32 = 10000000u32;
 1923|      1|    let mut i16_0: i16 = 5i16;
 1924|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 1925|      1|    let mut duration_3: crate::duration::Duration = std::ops::Div::div(duration_2, i16_0);
 1926|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, u32_2);
 1927|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1928|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1929|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1930|      1|    let mut i32_1: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
 1931|      1|    let mut i32_2: i32 = crate::duration::Duration::subsec_nanoseconds(duration_4);
 1932|      1|    let mut result_1: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_hms(i8_2, i8_1, i8_0);
 1933|      1|    panic!("From RustyUnit with love");
 1934|       |}
 1935|       |
 1936|       |//#[no_coverage]
 1937|      1|#[test]
 1938|       |#[should_panic]
 1939|      1|#[timeout(3000)]
 1940|      1|fn rusty_test_724() {
 1941|      1|    rusty_monitor::set_test_id(724);
 1942|      1|    let mut i32_0: i32 = 392i32;
 1943|      1|    let mut i64_0: i64 = 60i64;
 1944|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1945|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i32_0);
 1946|      1|    let mut u16_0: u16 = 365u16;
 1947|      1|    let mut i32_1: i32 = 1000000000i32;
 1948|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1949|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 1950|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1951|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_0);
 1952|      1|    let mut i8_0: i8 = 60i8;
 1953|      1|    let mut i8_1: i8 = 116i8;
 1954|      1|    let mut i8_2: i8 = 1i8;
 1955|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1956|      1|    let mut i8_3: i8 = 6i8;
 1957|      1|    let mut i8_4: i8 = 59i8;
 1958|      1|    let mut i8_5: i8 = 59i8;
 1959|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1960|      1|    let mut i32_2: i32 = 274i32;
 1961|      1|    let mut i64_1: i64 = 43i64;
 1962|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_2);
 1963|      1|    let mut i32_3: i32 = 365i32;
 1964|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1965|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_2);
 1966|      1|    let mut i32_4: i32 = 5i32;
 1967|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_4};
 1968|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_4);
 1969|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_1, date_3);
 1970|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_1};
 1971|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 1972|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1973|      1|    let mut i64_2: i64 = 1000000i64;
 1974|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1975|      1|    let mut duration_4: crate::duration::Duration = std::ops::Mul::mul(duration_3, f32_0);
 1976|      1|    let mut tuple_0: (i32, u16) = crate::offset_date_time::OffsetDateTime::to_ordinal_date(offsetdatetime_1);
 1977|      1|    let mut u8_0: u8 = crate::time::Time::second(time_0);
 1978|      1|    panic!("From RustyUnit with love");
 1979|       |}
 1980|       |
 1981|       |//#[no_coverage]
 1982|      1|#[test]
 1983|       |#[should_panic]
 1984|      1|#[timeout(3000)]
 1985|      1|fn rusty_test_6654() {
 1986|      1|    rusty_monitor::set_test_id(6654);
 1987|      1|    let mut i32_0: i32 = 105i32;
 1988|      1|    let mut i8_0: i8 = 127i8;
 1989|      1|    let mut i8_1: i8 = 5i8;
 1990|      1|    let mut i8_2: i8 = 3i8;
 1991|      1|    let mut u32_0: u32 = 100u32;
 1992|      1|    let mut u8_0: u8 = 24u8;
 1993|      1|    let mut u8_1: u8 = 31u8;
 1994|      1|    let mut u8_2: u8 = 23u8;
 1995|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1996|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1997|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1998|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1999|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 2000|      1|    let mut i32_1: i32 = 172i32;
 2001|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 2002|      1|    let mut u32_1: u32 = 0u32;
 2003|      1|    let mut u8_3: u8 = 4u8;
 2004|      1|    let mut u8_4: u8 = 52u8;
 2005|      1|    let mut u8_5: u8 = 6u8;
 2006|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2007|      1|    let mut i64_0: i64 = 86400i64;
 2008|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2009|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 2010|      1|    let mut i32_2: i32 = 43i32;
 2011|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2012|      1|    let mut i8_3: i8 = 43i8;
 2013|      1|    let mut i8_4: i8 = 29i8;
 2014|      1|    let mut i8_5: i8 = 0i8;
 2015|      1|    let mut duration_2: crate::duration::Duration = std::ops::Div::div(duration_1, i32_0);
 2016|      1|    panic!("From RustyUnit with love");
 2017|       |}
 2018|       |
 2019|       |//#[no_coverage]
 2020|      1|#[test]
 2021|       |#[should_panic]
 2022|      1|#[timeout(3000)]
 2023|      1|fn rusty_test_471() {
 2024|      1|    rusty_monitor::set_test_id(471);
 2025|      1|    let mut i32_0: i32 = 387i32;
 2026|      1|    let mut i16_0: i16 = 10i16;
 2027|      1|    let mut i64_0: i64 = 117i64;
 2028|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 2029|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, i16_0);
 2030|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 2031|      1|    panic!("From RustyUnit with love");
 2032|       |}
 2033|       |
 2034|       |//#[no_coverage]
 2035|      1|#[test]
 2036|       |#[should_panic]
 2037|      1|#[timeout(3000)]
 2038|      1|fn rusty_test_455() {
 2039|      1|    rusty_monitor::set_test_id(455);
 2040|      1|    let mut i64_0: i64 = 1000i64;
 2041|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 2042|      1|    let mut i64_1: i64 = -77i64;
 2043|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 2044|      1|    let mut i128_0: i128 = 1000000i128;
 2045|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2046|      1|    let mut duration_3: crate::duration::Duration = std::ops::Sub::sub(duration_2, duration_1);
 2047|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 2048|      1|    panic!("From RustyUnit with love");
 2049|       |}
 2050|       |
 2051|       |//#[no_coverage]
 2052|      1|#[test]
 2053|       |#[should_panic]
 2054|      1|#[timeout(3000)]
 2055|      1|fn rusty_test_437() {
 2056|      1|    rusty_monitor::set_test_id(437);
 2057|      1|    let mut padding_0: duration::Padding = std::default::Default::default();
 2058|      1|    let mut padding_0_ref_0: &duration::Padding = &mut padding_0;
 2059|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 2060|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 2061|      1|    let mut padding_2: duration::Padding = std::default::Default::default();
 2062|      1|    let mut padding_2_ref_0: &duration::Padding = &mut padding_2;
 2063|      1|    let mut padding_3: duration::Padding = std::default::Default::default();
 2064|      1|    let mut padding_3_ref_0: &duration::Padding = &mut padding_3;
 2065|      1|    let mut padding_4: duration::Padding = std::default::Default::default();
 2066|      1|    let mut padding_4_ref_0: &duration::Padding = &mut padding_4;
 2067|      1|    let mut padding_5: duration::Padding = crate::duration::Padding::Optimize;
 2068|      1|    let mut padding_5_ref_0: &duration::Padding = &mut padding_5;
 2069|      1|    let mut padding_6: duration::Padding = std::default::Default::default();
 2070|      1|    let mut padding_6_ref_0: &duration::Padding = &mut padding_6;
 2071|      1|    let mut padding_7: duration::Padding = std::default::Default::default();
 2072|      1|    let mut padding_7_ref_0: &duration::Padding = &mut padding_7;
 2073|      1|    let mut padding_8: duration::Padding = std::default::Default::default();
 2074|      1|    let mut padding_8_ref_0: &duration::Padding = &mut padding_8;
 2075|      1|    let mut padding_9: duration::Padding = crate::duration::Padding::Optimize;
 2076|      1|    let mut padding_9_ref_0: &duration::Padding = &mut padding_9;
 2077|      1|    let mut padding_10: duration::Padding = crate::duration::Padding::Optimize;
 2078|      1|    let mut padding_10_ref_0: &duration::Padding = &mut padding_10;
 2079|      1|    let mut padding_11: duration::Padding = std::clone::Clone::clone(padding_10_ref_0);
 2080|      1|    let mut padding_12: duration::Padding = std::clone::Clone::clone(padding_9_ref_0);
 2081|      1|    let mut padding_13: duration::Padding = std::clone::Clone::clone(padding_8_ref_0);
 2082|      1|    let mut padding_14: duration::Padding = std::clone::Clone::clone(padding_7_ref_0);
 2083|      1|    let mut padding_15: duration::Padding = std::clone::Clone::clone(padding_6_ref_0);
 2084|      1|    let mut padding_16: duration::Padding = std::clone::Clone::clone(padding_5_ref_0);
 2085|      1|    let mut padding_17: duration::Padding = std::clone::Clone::clone(padding_4_ref_0);
 2086|      1|    let mut padding_18: duration::Padding = std::clone::Clone::clone(padding_3_ref_0);
 2087|      1|    let mut padding_19: duration::Padding = std::clone::Clone::clone(padding_2_ref_0);
 2088|      1|    let mut padding_20: duration::Padding = std::clone::Clone::clone(padding_1_ref_0);
 2089|      1|    let mut padding_21: duration::Padding = std::clone::Clone::clone(padding_0_ref_0);
 2090|      1|    panic!("From RustyUnit with love");
 2091|       |}
 2092|       |
 2093|       |//#[no_coverage]
 2094|      1|#[test]
 2095|       |#[should_panic]
 2096|      1|#[timeout(3000)]
 2097|      1|fn rusty_test_5501() {
 2098|      1|    rusty_monitor::set_test_id(5501);
 2099|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 2100|      1|    let mut padding_0_ref_0: &duration::Padding = &mut padding_0;
 2101|      1|    let mut i32_0: i32 = 37i32;
 2102|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2103|      1|    let mut u16_0: u16 = 999u16;
 2104|      1|    let mut i32_1: i32 = 296i32;
 2105|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2106|      1|    let mut u32_0: u32 = 10u32;
 2107|      1|    let mut u8_0: u8 = 7u8;
 2108|      1|    let mut u8_1: u8 = 6u8;
 2109|      1|    let mut u8_2: u8 = 9u8;
 2110|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2111|      1|    let mut i32_2: i32 = 32i32;
 2112|      1|    let mut i64_0: i64 = 2147483647i64;
 2113|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_2);
 2114|      1|    let mut i32_3: i32 = 263i32;
 2115|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
 2116|      1|    let mut i64_1: i64 = 2440588i64;
 2117|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 2118|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2119|      1|    let mut u16_1: u16 = 0u16;
 2120|      1|    let mut i32_4: i32 = 2i32;
 2121|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 2122|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2123|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2124|      1|    let mut i32_5: i32 = 147i32;
 2125|      1|    let mut date_4: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_5);
 2126|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 2127|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 2128|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 2129|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(padding_1_ref_0, padding_0_ref_0);
 2130|      1|    panic!("From RustyUnit with love");
 2131|       |}
 2132|       |
 2133|       |//#[no_coverage]
 2134|      1|#[test]
 2135|       |#[should_panic]
 2136|      1|#[timeout(3000)]
 2137|      1|fn rusty_test_470() {
 2138|      1|    rusty_monitor::set_test_id(470);
 2139|      1|    let mut i16_0: i16 = 9i16;
 2140|      1|    let mut u32_0: u32 = 100u32;
 2141|      1|    let mut i64_0: i64 = -46i64;
 2142|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 2143|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, u32_0);
 2144|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 2145|      1|    panic!("From RustyUnit with love");
 2146|       |}
 2147|       |
 2148|       |//#[no_coverage]
 2149|      1|#[test]
 2150|       |#[should_panic]
 2151|      1|#[timeout(3000)]
 2152|      1|fn rusty_test_268() {
 2153|      1|    rusty_monitor::set_test_id(268);
 2154|      1|    let mut i64_0: i64 = 1000000i64;
 2155|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 2156|      1|    let mut i64_1: i64 = 2147483647i64;
 2157|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2158|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 2159|      1|    let mut i64_2: i64 = -99i64;
 2160|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 2161|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2162|      1|    panic!("From RustyUnit with love");
 2163|       |}
 2164|       |
 2165|       |//#[no_coverage]
 2166|      1|#[test]
 2167|       |#[should_panic]
 2168|      1|#[timeout(3000)]
 2169|      1|fn rusty_test_853() {
 2170|      1|    rusty_monitor::set_test_id(853);
 2171|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2172|      1|    let mut i32_0: i32 = 240i32;
 2173|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 2174|      1|    let mut i32_1: i32 = 274i32;
 2175|      1|    let mut i64_0: i64 = 1000000i64;
 2176|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration {seconds: i64_0, nanoseconds: i32_1, padding: padding_0};
 2177|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 2178|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 2179|      1|    let mut i64_1: i64 = 0i64;
 2180|      1|    let mut u16_0: u16 = 94u16;
 2181|      1|    let mut i32_2: i32 = 303i32;
 2182|      1|    let mut i32_3: i32 = 336i32;
 2183|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 2184|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_0};
 2185|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2186|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 2187|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2188|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_1, primitivedatetime_1);
 2189|      1|    let mut offsetdatetime_2_ref_0: &mut crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_2;
 2190|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_ordinal_date(i32_2, u16_0);
 2191|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 2192|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_1_ref_0);
 2193|      1|    let mut bool_0: bool = crate::duration::Duration::is_positive(duration_0);
 2194|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2195|      1|    let mut tuple_1: (u8, u8, u8, u32) = crate::offset_date_time::OffsetDateTime::to_hms_nano(offsetdatetime_0);
 2196|      1|    panic!("From RustyUnit with love");
 2197|       |}
 2198|       |
 2199|       |//#[no_coverage]
 2200|      1|#[test]
 2201|       |#[should_panic]
 2202|      1|#[timeout(3000)]
 2203|      1|fn rusty_test_294() {
 2204|      1|    rusty_monitor::set_test_id(294);
 2205|      1|    let mut i8_0: i8 = 60i8;
 2206|      1|    let mut i8_1: i8 = 59i8;
 2207|      1|    let mut i8_2: i8 = 59i8;
 2208|      1|    let mut u32_0: u32 = 999999999u32;
 2209|      1|    let mut i64_0: i64 = 2147483647i64;
 2210|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 2211|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, u32_0);
 2212|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 2213|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2214|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 2215|      1|    let mut u32_1: u32 = 999999u32;
 2216|      1|    let mut u8_0: u8 = 8u8;
 2217|      1|    let mut u8_1: u8 = 23u8;
 2218|      1|    let mut u8_2: u8 = 12u8;
 2219|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_1);
 2220|      1|    let mut i32_0: i32 = 2147483647i32;
 2221|      1|    let mut i64_1: i64 = 1i64;
 2222|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 2223|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_0);
 2224|      1|    let mut i32_1: i32 = -137i32;
 2225|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 2226|      1|    let mut i64_2: i64 = 12i64;
 2227|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 2228|      1|    let mut i32_2: i32 = 3600i32;
 2229|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 2230|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_6);
 2231|      1|    let mut i8_3: i8 = 4i8;
 2232|      1|    let mut i8_4: i8 = 6i8;
 2233|      1|    let mut i8_5: i8 = 1i8;
 2234|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2235|      1|    let mut i32_3: i32 = 99i32;
 2236|      1|    let mut i64_3: i64 = 9223372036854775807i64;
 2237|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
 2238|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 2239|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2240|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_8, duration_7);
 2241|      1|    let mut u32_2: u32 = 999999u32;
 2242|      1|    let mut u8_3: u8 = 53u8;
 2243|      1|    let mut u8_4: u8 = 0u8;
 2244|      1|    let mut u8_5: u8 = 59u8;
 2245|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_2);
 2246|      1|    let mut i8_6: i8 = 127i8;
 2247|      1|    let mut i8_7: i8 = 1i8;
 2248|      1|    let mut i8_8: i8 = 23i8;
 2249|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 2250|      1|    let mut i64_4: i64 = -51i64;
 2251|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::days(i64_4);
 2252|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2253|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_2);
 2254|      1|    let mut u8_6: u8 = crate::offset_date_time::OffsetDateTime::monday_based_week(offsetdatetime_1);
 2255|      1|    panic!("From RustyUnit with love");
 2256|       |}
 2257|       |
 2258|       |//#[no_coverage]
 2259|      1|#[test]
 2260|       |#[should_panic]
 2261|      1|#[timeout(3000)]
 2262|      1|fn rusty_test_2593() {
 2263|      1|    rusty_monitor::set_test_id(2593);
 2264|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2265|      1|    let mut i64_0: i64 = 2440588i64;
 2266|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 2267|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, f32_0);
 2268|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2269|      1|    let mut i32_0: i32 = 126i32;
 2270|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2271|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2272|      1|    let mut u16_0: u16 = 90u16;
 2273|      1|    let mut u8_0: u8 = 6u8;
 2274|      1|    let mut u8_1: u8 = 15u8;
 2275|      1|    let mut u8_2: u8 = 4u8;
 2276|      1|    let mut i32_1: i32 = 122i32;
 2277|      1|    let mut i64_1: i64 = 86400i64;
 2278|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 2279|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 2280|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 2281|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2282|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2283|      1|    let mut duration_5: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2284|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_5, duration_4);
 2285|      1|    let mut i32_2: i32 = 1721425i32;
 2286|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2287|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_6);
 2288|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
 2289|      1|    let mut str_0_ref_0: &str = &mut str_0;
 2290|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_3);
 2291|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
 2292|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_milli(date_3, u8_2, u8_1, u8_0, u16_0);
 2293|      1|    panic!("From RustyUnit with love");
 2294|       |}
 2295|       |
 2296|       |//#[no_coverage]
 2297|      1|#[test]
 2298|       |#[should_panic]
 2299|      1|#[timeout(3000)]
 2300|      1|fn rusty_test_5022() {
 2301|      1|    rusty_monitor::set_test_id(5022);
 2302|      1|    let mut i128_0: i128 = 0i128;
 2303|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2304|      1|    let mut u32_0: u32 = 62u32;
 2305|      1|    let mut u8_0: u8 = 23u8;
 2306|      1|    let mut u8_1: u8 = 44u8;
 2307|      1|    let mut u8_2: u8 = 6u8;
 2308|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2309|      1|    let mut i32_0: i32 = 296i32;
 2310|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2311|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 2312|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 2313|      1|    let mut i64_0: i64 = 60i64;
 2314|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2315|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
 2316|      1|    let mut u32_1: u32 = 13u32;
 2317|      1|    let mut u8_3: u8 = 9u8;
 2318|      1|    let mut u8_4: u8 = 12u8;
 2319|      1|    let mut u8_5: u8 = 38u8;
 2320|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2321|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 2322|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2323|      1|    let mut month_0: month::Month = crate::month::Month::August;
 2324|      1|    let mut u32_2: u32 = 10000000u32;
 2325|      1|    let mut i16_0: i16 = 5i16;
 2326|      1|    let mut duration_2: crate::duration::Duration = std::default::Default::default();
 2327|      1|    let mut duration_3: crate::duration::Duration = std::ops::Div::div(duration_2, i16_0);
 2328|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, u32_2);
 2329|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 2330|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 2331|      1|    let mut i32_1: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
 2332|      1|    panic!("From RustyUnit with love");
 2333|       |}
 2334|       |
 2335|       |//#[no_coverage]
 2336|      1|#[test]
 2337|       |#[should_panic]
 2338|      1|#[timeout(3000)]
 2339|      1|fn rusty_test_126() {
 2340|      1|    rusty_monitor::set_test_id(126);
 2341|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 2342|      1|    let mut u32_0: u32 = 10000000u32;
 2343|      1|    let mut i64_0: i64 = 1000000i64;
 2344|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 2345|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, u32_0);
 2346|      1|    let mut i8_0: i8 = 127i8;
 2347|      1|    let mut i64_1: i64 = 86400i64;
 2348|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 2349|      1|    let mut duration_3: crate::duration::Duration = std::ops::Mul::mul(duration_2, i8_0);
 2350|      1|    let mut duration_3_ref_0: &crate::duration::Duration = &mut duration_3;
 2351|      1|    let mut i8_1: i8 = 3i8;
 2352|      1|    let mut i8_2: i8 = 23i8;
 2353|      1|    let mut i8_3: i8 = 4i8;
 2354|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_3, i8_2, i8_1);
 2355|      1|    let mut u32_1: u32 = 1000000000u32;
 2356|      1|    let mut u8_0: u8 = 10u8;
 2357|      1|    let mut u8_1: u8 = 8u8;
 2358|      1|    let mut u8_2: u8 = 2u8;
 2359|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_1);
 2360|      1|    let mut u32_2: u32 = 10000u32;
 2361|      1|    let mut u8_3: u8 = 12u8;
 2362|      1|    let mut u8_4: u8 = 6u8;
 2363|      1|    let mut u8_5: u8 = 81u8;
 2364|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_2);
 2365|      1|    let mut u16_0: u16 = 60u16;
 2366|      1|    let mut i32_0: i32 = 48i32;
 2367|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2368|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 2369|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2370|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 2371|      1|    let mut duration_4: crate::duration::Duration = std::clone::Clone::clone(duration_3_ref_0);
 2372|      1|    let mut duration_5: crate::duration::Duration = std::ops::Div::div(duration_1, f64_0);
 2373|      1|    panic!("From RustyUnit with love");
 2374|       |}
 2375|       |
 2376|       |//#[no_coverage]
 2377|      1|#[test]
 2378|       |#[should_panic]
 2379|      1|#[timeout(3000)]
 2380|      1|fn rusty_test_439() {
 2381|      1|    rusty_monitor::set_test_id(439);
 2382|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 2383|      1|    let mut padding_0_ref_0: &duration::Padding = &mut padding_0;
 2384|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 2385|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 2386|      1|    let mut padding_2: duration::Padding = std::default::Default::default();
 2387|      1|    let mut padding_2_ref_0: &duration::Padding = &mut padding_2;
 2388|      1|    let mut padding_3: duration::Padding = std::default::Default::default();
 2389|      1|    let mut padding_3_ref_0: &duration::Padding = &mut padding_3;
 2390|      1|    let mut padding_4: duration::Padding = std::default::Default::default();
 2391|      1|    let mut padding_4_ref_0: &duration::Padding = &mut padding_4;
 2392|      1|    let mut padding_5: duration::Padding = std::default::Default::default();
 2393|      1|    let mut padding_5_ref_0: &duration::Padding = &mut padding_5;
 2394|      1|    let mut padding_6: duration::Padding = crate::duration::Padding::Optimize;
 2395|      1|    let mut padding_6_ref_0: &duration::Padding = &mut padding_6;
 2396|      1|    let mut padding_7: duration::Padding = crate::duration::Padding::Optimize;
 2397|      1|    let mut padding_7_ref_0: &duration::Padding = &mut padding_7;
 2398|      1|    let mut padding_8: duration::Padding = std::default::Default::default();
 2399|      1|    let mut padding_8_ref_0: &duration::Padding = &mut padding_8;
 2400|      1|    let mut padding_9: duration::Padding = crate::duration::Padding::Optimize;
 2401|      1|    let mut padding_9_ref_0: &duration::Padding = &mut padding_9;
 2402|      1|    let mut padding_10: duration::Padding = crate::duration::Padding::Optimize;
 2403|      1|    let mut padding_10_ref_0: &duration::Padding = &mut padding_10;
 2404|      1|    let mut padding_11: duration::Padding = crate::duration::Padding::Optimize;
 2405|      1|    let mut padding_11_ref_0: &duration::Padding = &mut padding_11;
 2406|      1|    let mut padding_12: duration::Padding = crate::duration::Padding::Optimize;
 2407|      1|    let mut padding_12_ref_0: &duration::Padding = &mut padding_12;
 2408|      1|    let mut padding_13: duration::Padding = std::default::Default::default();
 2409|      1|    let mut padding_13_ref_0: &duration::Padding = &mut padding_13;
 2410|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(padding_13_ref_0, padding_12_ref_0);
 2411|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(padding_11_ref_0, padding_10_ref_0);
 2412|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(padding_9_ref_0, padding_8_ref_0);
 2413|      1|    let mut bool_3: bool = std::cmp::PartialEq::eq(padding_7_ref_0, padding_6_ref_0);
 2414|      1|    let mut bool_4: bool = std::cmp::PartialEq::eq(padding_5_ref_0, padding_4_ref_0);
 2415|      1|    let mut bool_5: bool = std::cmp::PartialEq::eq(padding_3_ref_0, padding_2_ref_0);
 2416|      1|    let mut bool_6: bool = std::cmp::PartialEq::eq(padding_1_ref_0, padding_0_ref_0);
 2417|      1|    panic!("From RustyUnit with love");
 2418|       |}
 2419|       |
 2420|       |//#[no_coverage]
 2421|      1|#[test]
 2422|       |#[should_panic]
 2423|      1|#[timeout(3000)]
 2424|      1|fn rusty_test_469() {
 2425|      1|    rusty_monitor::set_test_id(469);
 2426|      1|    let mut i8_0: i8 = 1i8;
 2427|      1|    let mut i8_1: i8 = 6i8;
 2428|      1|    let mut i32_0: i32 = 99i32;
 2429|      1|    let mut i64_0: i64 = 3600i64;
 2430|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 2431|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, i8_1);
 2432|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 2433|      1|    panic!("From RustyUnit with love");
 2434|       |}
 2435|       |
 2436|       |//#[no_coverage]
 2437|      1|#[test]
 2438|       |#[should_panic]
 2439|      1|#[timeout(3000)]
 2440|      1|fn rusty_test_442() {
 2441|      1|    rusty_monitor::set_test_id(442);
 2442|      1|    let mut padding_0: duration::Padding = std::default::Default::default();
 2443|      1|    let mut padding_0_ref_0: &duration::Padding = &mut padding_0;
 2444|      1|    let mut padding_1: duration::Padding = crate::duration::Padding::Optimize;
 2445|      1|    let mut padding_1_ref_0: &duration::Padding = &mut padding_1;
 2446|      1|    let mut padding_2: duration::Padding = std::default::Default::default();
 2447|      1|    let mut padding_2_ref_0: &duration::Padding = &mut padding_2;
 2448|      1|    let mut padding_3: duration::Padding = crate::duration::Padding::Optimize;
 2449|      1|    let mut padding_3_ref_0: &duration::Padding = &mut padding_3;
 2450|      1|    let mut padding_4: duration::Padding = std::default::Default::default();
 2451|      1|    let mut padding_4_ref_0: &duration::Padding = &mut padding_4;
 2452|      1|    let mut padding_5: duration::Padding = crate::duration::Padding::Optimize;
 2453|      1|    let mut padding_5_ref_0: &duration::Padding = &mut padding_5;
 2454|      1|    let mut padding_6: duration::Padding = std::default::Default::default();
 2455|      1|    let mut padding_6_ref_0: &duration::Padding = &mut padding_6;
 2456|      1|    let mut padding_7: duration::Padding = crate::duration::Padding::Optimize;
 2457|      1|    let mut padding_7_ref_0: &duration::Padding = &mut padding_7;
 2458|      1|    let mut padding_8: duration::Padding = std::default::Default::default();
 2459|      1|    let mut padding_8_ref_0: &duration::Padding = &mut padding_8;
 2460|      1|    let mut padding_9: duration::Padding = crate::duration::Padding::Optimize;
 2461|      1|    let mut padding_9_ref_0: &duration::Padding = &mut padding_9;
 2462|      1|    let mut padding_10: duration::Padding = std::default::Default::default();
 2463|      1|    let mut padding_10_ref_0: &duration::Padding = &mut padding_10;
 2464|      1|    let mut padding_11: duration::Padding = std::default::Default::default();
 2465|      1|    let mut padding_11_ref_0: &duration::Padding = &mut padding_11;
 2466|      1|    let mut padding_12: duration::Padding = crate::duration::Padding::Optimize;
 2467|      1|    let mut padding_12_ref_0: &duration::Padding = &mut padding_12;
 2468|      1|    let mut padding_13: duration::Padding = crate::duration::Padding::Optimize;
 2469|      1|    let mut padding_13_ref_0: &duration::Padding = &mut padding_13;
 2470|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_13_ref_0, padding_12_ref_0);
 2471|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_11_ref_0, padding_10_ref_0);
 2472|      1|    let mut option_2: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_9_ref_0, padding_8_ref_0);
 2473|      1|    let mut option_3: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_7_ref_0, padding_6_ref_0);
 2474|      1|    let mut option_4: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_5_ref_0, padding_4_ref_0);
 2475|      1|    let mut option_5: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_3_ref_0, padding_2_ref_0);
 2476|      1|    let mut option_6: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_1_ref_0, padding_0_ref_0);
 2477|      1|    panic!("From RustyUnit with love");
 2478|       |}
 2479|       |
 2480|       |//#[no_coverage]
 2481|      1|#[test]
 2482|       |#[should_panic]
 2483|      1|#[timeout(3000)]
 2484|      1|fn rusty_test_8169() {
 2485|      1|    rusty_monitor::set_test_id(8169);
 2486|      1|    let mut padding_0: duration::Padding = std::default::Default::default();
 2487|      1|    let mut padding_0_ref_0: &duration::Padding = &mut padding_0;
 2488|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2489|      1|    let mut i64_0: i64 = 12i64;
 2490|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 2491|      1|    let mut duration_0_ref_0: &crate::duration::Duration = &mut duration_0;
 2492|      1|    let mut i16_0: i16 = 4i16;
 2493|      1|    let mut i64_1: i64 = 9223372036854775807i64;
 2494|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 2495|      1|    let mut duration_2: crate::duration::Duration = std::ops::Div::div(duration_1, i16_0);
 2496|      1|    let mut duration_2_ref_0: &crate::duration::Duration = &mut duration_2;
 2497|      1|    let mut u8_0: u8 = 53u8;
 2498|      1|    let mut u8_1: u8 = 66u8;
 2499|      1|    let mut u8_2: u8 = 8u8;
 2500|      1|    let mut i32_0: i32 = 54i32;
 2501|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2502|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2503|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 2504|      1|    let mut i32_1: i32 = 224i32;
 2505|      1|    let mut i64_2: i64 = 12i64;
 2506|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_1);
 2507|      1|    let mut i128_0: i128 = 1000000000i128;
 2508|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2509|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2510|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_4);
 2511|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 2512|      1|    let mut i32_2: i32 = 336i32;
 2513|      1|    let mut i64_3: i64 = 3600i64;
 2514|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_2);
 2515|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 2516|      1|    let mut f64_0: f64 = 4741671816366391296.000000f64;
 2517|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2518|      1|    let mut i64_4: i64 = 2440588i64;
 2519|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
 2520|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
 2521|      1|    let mut i64_5: i64 = 142i64;
 2522|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::microseconds(i64_5);
 2523|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2524|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_3, duration_10);
 2525|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_4);
 2526|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 2527|      1|    let mut u32_0: u32 = 100000000u32;
 2528|      1|    let mut u8_3: u8 = 5u8;
 2529|      1|    let mut u8_4: u8 = 10u8;
 2530|      1|    let mut u8_5: u8 = 8u8;
 2531|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_0);
 2532|      1|    let mut i8_0: i8 = 24i8;
 2533|      1|    let mut i8_1: i8 = 60i8;
 2534|      1|    let mut i8_2: i8 = 0i8;
 2535|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2536|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2537|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_5, utcoffset_2);
 2538|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_6);
 2539|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
 2540|      1|    let mut u16_0: u16 = 365u16;
 2541|      1|    let mut i64_6: i64 = 2440588i64;
 2542|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::minutes(i64_6);
 2543|      1|    let mut duration_12: crate::duration::Duration = std::ops::Mul::mul(duration_11, u16_0);
 2544|      1|    let mut u8_6: u8 = 53u8;
 2545|      1|    let mut u8_7: u8 = 6u8;
 2546|      1|    let mut u8_8: u8 = 1u8;
 2547|      1|    let mut i32_3: i32 = 25i32;
 2548|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_3};
 2549|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_1, u8_8, u8_7, u8_6);
 2550|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_0, u8_2, u8_1, u8_0);
 2551|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(duration_2_ref_0, duration_0_ref_0);
 2552|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2553|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_0_ref_0);
 2554|      1|    panic!("From RustyUnit with love");
 2555|       |}
 2556|       |
 2557|       |//#[no_coverage]
 2558|      1|#[test]
 2559|       |#[should_panic]
 2560|      1|#[timeout(3000)]
 2561|      1|fn rusty_test_242() {
 2562|      1|    rusty_monitor::set_test_id(242);
 2563|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2564|      1|    let mut i64_0: i64 = 1000000i64;
 2565|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2566|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, f32_0);
 2567|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2568|      1|    let mut duration_2_ref_0: &std::time::Duration = &mut duration_2;
 2569|      1|    let mut f64_0: f64 = 4768169126130614272.000000f64;
 2570|      1|    let mut i64_1: i64 = 1i64;
 2571|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 2572|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, f64_0);
 2573|      1|    let mut duration_4_ref_0: &crate::duration::Duration = &mut duration_4;
 2574|      1|    let mut i16_0: i16 = 32767i16;
 2575|      1|    let mut i64_2: i64 = 24i64;
 2576|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 2577|      1|    let mut duration_6: crate::duration::Duration = std::ops::Mul::mul(duration_5, i16_0);
 2578|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 2579|      1|    let mut duration_7_ref_0: &std::time::Duration = &mut duration_7;
 2580|      1|    let mut i32_0: i32 = 65i32;
 2581|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2582|      1|    let mut duration_8: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2583|      1|    let mut duration_9: crate::duration::Duration = std::ops::Mul::mul(duration_8, i32_0);
 2584|      1|    let mut duration_9_ref_0: &crate::duration::Duration = &mut duration_9;
 2585|      1|    let mut i64_3: i64 = 12i64;
 2586|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2587|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
 2588|      1|    let mut duration_11_ref_0: &std::time::Duration = &mut duration_11;
 2589|      1|    let mut i8_0: i8 = 3i8;
 2590|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 2591|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 2592|      1|    let mut duration_13: crate::duration::Duration = std::ops::Mul::mul(duration_12, i8_0);
 2593|      1|    let mut duration_13_ref_0: &crate::duration::Duration = &mut duration_13;
 2594|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(duration_13_ref_0, duration_11_ref_0);
 2595|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(duration_9_ref_0, duration_7_ref_0);
 2596|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(duration_4_ref_0, duration_2_ref_0);
 2597|      1|    panic!("From RustyUnit with love");
 2598|       |}
 2599|       |
 2600|       |//#[no_coverage]
 2601|      1|#[test]
 2602|       |#[should_panic]
 2603|      1|#[timeout(3000)]
 2604|      1|fn rusty_test_218() {
 2605|      1|    rusty_monitor::set_test_id(218);
 2606|      1|    let mut i64_0: i64 = 12i64;
 2607|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 2608|      1|    let mut i32_0: i32 = 22i32;
 2609|      1|    let mut i64_1: i64 = 1000000i64;
 2610|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 2611|      1|    let mut i32_1: i32 = 99i32;
 2612|      1|    let mut i64_2: i64 = 2147483647i64;
 2613|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 2614|      1|    let mut duration_3: crate::duration::Duration = std::ops::Sub::sub(duration_2, duration_1);
 2615|      1|    let mut u8_0: u8 = 52u8;
 2616|      1|    let mut i64_3: i64 = 2440588i64;
 2617|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2618|      1|    let mut duration_5: crate::duration::Duration = std::ops::Mul::mul(duration_4, u8_0);
 2619|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 2620|      1|    let mut i32_2: i32 = 71i32;
 2621|      1|    let mut i64_4: i64 = 3600i64;
 2622|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration {seconds: i64_4, nanoseconds: i32_2, padding: padding_0};
 2623|      1|    let mut i32_3: i32 = 5i32;
 2624|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2625|      1|    let mut duration_7: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2626|      1|    let mut duration_8: crate::duration::Duration = std::ops::Mul::mul(duration_7, i32_3);
 2627|      1|    let mut i8_0: i8 = 2i8;
 2628|      1|    let mut i64_5: i64 = 20i64;
 2629|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::hours(i64_5);
 2630|      1|    let mut duration_10: crate::duration::Duration = std::ops::Div::div(duration_9, i8_0);
 2631|      1|    let mut i128_0: i128 = crate::duration::Duration::whole_microseconds(duration_10);
 2632|      1|    let mut i128_1: i128 = crate::duration::Duration::whole_microseconds(duration_8);
 2633|      1|    let mut i128_2: i128 = crate::duration::Duration::whole_microseconds(duration_6);
 2634|      1|    let mut i128_3: i128 = crate::duration::Duration::whole_microseconds(duration_5);
 2635|      1|    let mut i128_4: i128 = crate::duration::Duration::whole_microseconds(duration_3);
 2636|      1|    let mut i128_5: i128 = crate::duration::Duration::whole_microseconds(duration_0);
 2637|      1|    panic!("From RustyUnit with love");
 2638|       |}
 2639|       |
 2640|       |//#[no_coverage]
 2641|      1|#[test]
 2642|       |#[should_panic]
 2643|      1|#[timeout(3000)]
 2644|      1|fn rusty_test_8709() {
 2645|      1|    rusty_monitor::set_test_id(8709);
 2646|      1|    let mut u8_0: u8 = 53u8;
 2647|      1|    let mut u8_1: u8 = 66u8;
 2648|      1|    let mut u8_2: u8 = 8u8;
 2649|      1|    let mut i32_0: i32 = 54i32;
 2650|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2651|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2652|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 2653|      1|    let mut i32_1: i32 = 224i32;
 2654|      1|    let mut i64_0: i64 = 12i64;
 2655|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 2656|      1|    let mut i128_0: i128 = 1000000000i128;
 2657|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2658|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2659|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_1);
 2660|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 2661|      1|    let mut f64_0: f64 = 4741671816366391296.000000f64;
 2662|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2663|      1|    let mut i64_1: i64 = 2440588i64;
 2664|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 2665|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 2666|      1|    let mut i64_2: i64 = 142i64;
 2667|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 2668|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2669|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_3, duration_5);
 2670|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_4);
 2671|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2672|      1|    let mut u8_3: u8 = 59u8;
 2673|      1|    let mut u32_0: u32 = 100000000u32;
 2674|      1|    let mut u8_4: u8 = 5u8;
 2675|      1|    let mut u8_5: u8 = 10u8;
 2676|      1|    let mut u8_6: u8 = 8u8;
 2677|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_6, u8_5, u8_4, u32_0);
 2678|      1|    let mut i8_0: i8 = 24i8;
 2679|      1|    let mut i8_1: i8 = 60i8;
 2680|      1|    let mut i8_2: i8 = 0i8;
 2681|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2682|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 2683|      1|    let mut u16_0: u16 = 365u16;
 2684|      1|    let mut i64_3: i64 = 2440588i64;
 2685|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2686|      1|    let mut duration_7: crate::duration::Duration = std::ops::Mul::mul(duration_6, u16_0);
 2687|      1|    let mut u8_7: u8 = 53u8;
 2688|      1|    let mut u8_8: u8 = 1u8;
 2689|      1|    let mut i32_2: i32 = 25i32;
 2690|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 2691|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_1, u8_8, u8_3, u8_7);
 2692|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_0, u8_2, u8_1, u8_0);
 2693|      1|    panic!("From RustyUnit with love");
 2694|       |}
 2695|       |
 2696|       |//#[no_coverage]
 2697|      1|#[test]
 2698|       |#[should_panic]
 2699|      1|#[timeout(3000)]
 2700|      1|fn rusty_test_92() {
 2701|      1|    rusty_monitor::set_test_id(92);
 2702|      1|    let mut i8_0: i8 = 24i8;
 2703|      1|    let mut i8_1: i8 = 1i8;
 2704|      1|    let mut i8_2: i8 = 3i8;
 2705|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2706|      1|    let mut i32_0: i32 = 286i32;
 2707|      1|    let mut bool_0: bool = true;
 2708|      1|    let mut i64_0: i64 = 24i64;
 2709|      1|    let mut i64_1: i64 = 3600i64;
 2710|      1|    let mut i64_2: i64 = 604800i64;
 2711|      1|    let mut str_0: &str = "overflow subtracting duration from date";
 2712|      1|    let mut str_0_ref_0: &str = &mut str_0;
 2713|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
 2714|      1|    let mut i32_1: i32 = 342i32;
 2715|      1|    let mut i64_3: i64 = 2440588i64;
 2716|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_3);
 2717|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_1);
 2718|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2719|      1|    let mut u32_0: u32 = 100000000u32;
 2720|      1|    let mut u8_0: u8 = 16u8;
 2721|      1|    let mut u8_1: u8 = 2u8;
 2722|      1|    let mut u8_2: u8 = 52u8;
 2723|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2724|      1|    let mut i16_0: i16 = 7i16;
 2725|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2726|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2727|      1|    let mut i32_2: i32 = 325i32;
 2728|      1|    let mut i64_4: i64 = 604800i64;
 2729|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new(i64_4, i32_2);
 2730|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2731|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::time::Time::as_hms_nano(time_0);
 2732|      1|    let mut duration_5: crate::duration::Duration = std::ops::Add::add(duration_3, duration_2);
 2733|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
 2734|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2735|      1|    let mut i32_3: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_0);
 2736|      1|    panic!("From RustyUnit with love");
 2737|       |}
 2738|       |
 2739|       |//#[no_coverage]
 2740|      1|#[test]
 2741|       |#[should_panic]
 2742|      1|#[timeout(3000)]
 2743|      1|fn rusty_test_171() {
 2744|      1|    rusty_monitor::set_test_id(171);
 2745|      1|    let mut u16_0: u16 = 367u16;
 2746|      1|    let mut i32_0: i32 = 235i32;
 2747|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2748|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 2749|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2750|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
 2751|      1|    let mut i32_1: i32 = 60i32;
 2752|      1|    let mut i64_0: i64 = 86400i64;
 2753|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration {seconds: i64_0, nanoseconds: i32_1, padding: padding_0};
 2754|      1|    let mut duration_2: crate::duration::Duration = std::ops::Add::add(duration_1, duration_0);
 2755|      1|    let mut i32_2: i32 = 3652425i32;
 2756|      1|    let mut i32_3: i32 = 36525i32;
 2757|      1|    let mut i64_1: i64 = 9223372036854775807i64;
 2758|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_3);
 2759|      1|    let mut duration_4: crate::duration::Duration = std::ops::Div::div(duration_3, i32_2);
 2760|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2761|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 2762|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 2763|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2764|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 2765|      1|    let mut i8_0: i8 = 3i8;
 2766|      1|    let mut i8_1: i8 = 6i8;
 2767|      1|    let mut i8_2: i8 = 127i8;
 2768|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2769|      1|    let mut f64_0: f64 = 0.000000f64;
 2770|      1|    let mut padding_1: duration::Padding = std::default::Default::default();
 2771|      1|    let mut i32_4: i32 = 511i32;
 2772|      1|    let mut i64_2: i64 = 48i64;
 2773|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration {seconds: i64_2, nanoseconds: i32_4, padding: padding_1};
 2774|      1|    let mut duration_6: crate::duration::Duration = std::ops::Div::div(duration_5, f64_0);
 2775|      1|    let mut u16_1: u16 = 7u16;
 2776|      1|    let mut duration_7: crate::duration::Duration = std::default::Default::default();
 2777|      1|    let mut duration_8: crate::duration::Duration = std::ops::Mul::mul(duration_7, u16_1);
 2778|      1|    let mut u16_2: u16 = 366u16;
 2779|      1|    let mut i32_5: i32 = 37i32;
 2780|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_2);
 2781|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_8);
 2782|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::previous_day(date_2);
 2783|      1|    let mut option_1: std::option::Option<crate::date::Date> = crate::date::Date::previous_day(date_0);
 2784|      1|    panic!("From RustyUnit with love");
 2785|       |}
 2786|       |
 2787|       |//#[no_coverage]
 2788|      1|#[test]
 2789|       |#[should_panic]
 2790|      1|#[timeout(3000)]
 2791|      1|fn rusty_test_432() {
 2792|      1|    rusty_monitor::set_test_id(432);
 2793|      1|    let mut u16_0: u16 = 367u16;
 2794|      1|    let mut duration_0: crate::duration::Duration = std::default::Default::default();
 2795|      1|    let mut duration_1: crate::duration::Duration = std::ops::Mul::mul(duration_0, u16_0);
 2796|      1|    let mut i32_0: i32 = 268i32;
 2797|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2798|      1|    let mut date_0_ref_0: &mut crate::date::Date = &mut date_0;
 2799|      1|    panic!("From RustyUnit with love");
 2800|       |}
 2801|       |
 2802|       |//#[no_coverage]
 2803|      1|#[test]
 2804|       |#[should_panic]
 2805|      1|#[timeout(3000)]
 2806|      1|fn rusty_test_191() {
 2807|      1|    rusty_monitor::set_test_id(191);
 2808|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 2809|      1|    let mut i32_0: i32 = 235i32;
 2810|      1|    let mut i64_0: i64 = -268i64;
 2811|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 2812|      1|    let mut duration_1: crate::duration::Duration = std::ops::Div::div(duration_0, f64_0);
 2813|      1|    let mut i8_0: i8 = 5i8;
 2814|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2815|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2816|      1|    let mut duration_3: crate::duration::Duration = std::ops::Mul::mul(duration_2, i8_0);
 2817|      1|    let mut i32_1: i32 = -55i32;
 2818|      1|    let mut i64_1: i64 = 2147483647i64;
 2819|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 2820|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_1);
 2821|      1|    let mut u16_0: u16 = 366u16;
 2822|      1|    let mut i64_2: i64 = 86400i64;
 2823|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 2824|      1|    let mut duration_7: crate::duration::Duration = std::ops::Div::div(duration_6, u16_0);
 2825|      1|    let mut i32_2: i32 = 116i32;
 2826|      1|    let mut i64_3: i64 = 2440588i64;
 2827|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new(i64_3, i32_2);
 2828|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::abs(duration_8);
 2829|      1|    let mut i64_4: i64 = 1000000000i64;
 2830|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_4);
 2831|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 2832|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2833|      1|    let mut duration_12: crate::duration::Duration = std::ops::Sub::sub(duration_11, duration_10);
 2834|      1|    let mut bool_0: bool = crate::duration::Duration::is_zero(duration_12);
 2835|      1|    let mut bool_1: bool = crate::duration::Duration::is_zero(duration_9);
 2836|      1|    let mut bool_2: bool = crate::duration::Duration::is_zero(duration_7);
 2837|      1|    let mut bool_3: bool = crate::duration::Duration::is_zero(duration_5);
 2838|      1|    let mut bool_4: bool = crate::duration::Duration::is_zero(duration_3);
 2839|      1|    let mut bool_5: bool = crate::duration::Duration::is_zero(duration_1);
 2840|      1|    panic!("From RustyUnit with love");
 2841|       |}
 2842|       |
 2843|       |//#[no_coverage]
 2844|      1|#[test]
 2845|       |#[should_panic]
 2846|      1|#[timeout(3000)]
 2847|      1|fn rusty_test_240() {
 2848|      1|    rusty_monitor::set_test_id(240);
 2849|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
 2850|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2851|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2852|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2853|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 2854|      1|    let mut i32_0: i32 = 212i32;
 2855|      1|    let mut padding_0: duration::Padding = std::default::Default::default();
 2856|      1|    let mut i32_1: i32 = 1000000i32;
 2857|      1|    let mut i64_0: i64 = 128i64;
 2858|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration {seconds: i64_0, nanoseconds: i32_1, padding: padding_0};
 2859|      1|    let mut duration_4: crate::duration::Duration = std::ops::Mul::mul(duration_3, i32_0);
 2860|      1|    let mut i128_0: i128 = 1i128;
 2861|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2862|      1|    let mut i16_0: i16 = 5i16;
 2863|      1|    let mut i64_1: i64 = 1000000000i64;
 2864|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 2865|      1|    let mut duration_7: crate::duration::Duration = std::ops::Div::div(duration_6, i16_0);
 2866|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2867|      1|    let mut i64_2: i64 = 1000i64;
 2868|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 2869|      1|    let mut duration_9: crate::duration::Duration = std::ops::Mul::mul(duration_8, f32_0);
 2870|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 2871|      1|    let mut duration_10: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 2872|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::abs(duration_10);
 2873|      1|    let mut i8_0: i8 = 23i8;
 2874|      1|    let mut i64_3: i64 = 9223372036854775807i64;
 2875|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_3);
 2876|      1|    let mut duration_13: crate::duration::Duration = std::ops::Div::div(duration_12, i8_0);
 2877|      1|    let mut u8_0: u8 = 62u8;
 2878|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 2879|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 2880|      1|    let mut duration_15: crate::duration::Duration = std::ops::Div::div(duration_14, u8_0);
 2881|      1|    let mut f64_1: f64 = std::ops::Div::div(duration_15, duration_13);
 2882|      1|    let mut f64_2: f64 = std::ops::Div::div(duration_11, duration_9);
 2883|      1|    let mut f64_3: f64 = std::ops::Div::div(duration_7, duration_5);
 2884|      1|    let mut f64_4: f64 = std::ops::Div::div(duration_4, duration_2);
 2885|      1|    panic!("From RustyUnit with love");
 2886|       |}
 2887|       |
 2888|       |//#[no_coverage]
 2889|      1|#[test]
 2890|       |#[should_panic]
 2891|      1|#[timeout(3000)]
 2892|      1|fn rusty_test_458() {
 2893|      1|    rusty_monitor::set_test_id(458);
 2894|      1|    let mut i8_0: i8 = 36i8;
 2895|      1|    let mut i64_0: i64 = 253402300799i64;
 2896|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2897|      1|    let mut i8_1: i8 = 127i8;
 2898|      1|    let mut i128_0: i128 = -64i128;
 2899|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2900|      1|    let mut i64_1: i64 = 253402300799i64;
 2901|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 2902|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_1);
 2903|      1|    let mut i8_2: i8 = 23i8;
 2904|      1|    let mut f32_0: f32 = 32.238035f32;
 2905|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2906|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_4);
 2907|      1|    let mut i8_3: i8 = 0i8;
 2908|      1|    let mut i32_0: i32 = -148i32;
 2909|      1|    let mut duration_6: crate::duration::Duration = std::default::Default::default();
 2910|      1|    let mut duration_7: crate::duration::Duration = std::ops::Div::div(duration_6, i32_0);
 2911|      1|    let mut i64_2: i64 = 24i64;
 2912|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 2913|      1|    let mut i8_4: i8 = 1i8;
 2914|      1|    let mut i128_1: i128 = 9223372036854775807i128;
 2915|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
 2916|      1|    let mut i8_5: i8 = 6i8;
 2917|      1|    let mut u8_0: u8 = 28u8;
 2918|      1|    let mut i64_3: i64 = 12i64;
 2919|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2920|      1|    let mut duration_11: crate::duration::Duration = std::ops::Div::div(duration_10, u8_0);
 2921|      1|    let mut duration_12: crate::duration::Duration = std::ops::Div::div(duration_11, i8_5);
 2922|      1|    let mut duration_13: crate::duration::Duration = std::ops::Div::div(duration_9, i8_4);
 2923|      1|    let mut duration_14: crate::duration::Duration = std::ops::Div::div(duration_7, i8_3);
 2924|      1|    let mut duration_15: crate::duration::Duration = std::ops::Div::div(duration_5, i8_2);
 2925|      1|    let mut duration_16: crate::duration::Duration = std::ops::Div::div(duration_3, i8_1);
 2926|      1|    let mut duration_17: crate::duration::Duration = std::ops::Div::div(duration_0, i8_0);
 2927|      1|    panic!("From RustyUnit with love");
 2928|       |}
 2929|       |
 2930|       |//#[no_coverage]
 2931|      1|#[test]
 2932|       |#[should_panic]
 2933|      1|#[timeout(3000)]
 2934|      1|fn rusty_test_700() {
 2935|      1|    rusty_monitor::set_test_id(700);
 2936|      1|    let mut i128_0: i128 = 1i128;
 2937|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2938|      1|    let mut duration_1: crate::duration::Duration = std::default::Default::default();
 2939|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(duration_1, duration_0);
 2940|      1|    let mut duration_2_ref_0: &crate::duration::Duration = &mut duration_2;
 2941|      1|    let mut i32_0: i32 = -18i32;
 2942|      1|    let mut i128_1: i128 = 1000000000i128;
 2943|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
 2944|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_3, i32_0);
 2945|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 2946|      1|    let mut u32_0: u32 = 10000000u32;
 2947|      1|    let mut u8_0: u8 = 30u8;
 2948|      1|    let mut u8_1: u8 = 29u8;
 2949|      1|    let mut u8_2: u8 = 24u8;
 2950|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2951|      1|    let mut u16_0: u16 = 10u16;
 2952|      1|    let mut i64_0: i64 = 60i64;
 2953|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 2954|      1|    let mut duration_7: crate::duration::Duration = std::ops::Div::div(duration_6, u16_0);
 2955|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2956|      1|    let mut duration_8: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2957|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
 2958|      1|    let mut u32_1: u32 = 1000000000u32;
 2959|      1|    let mut u8_3: u8 = 23u8;
 2960|      1|    let mut u8_4: u8 = 8u8;
 2961|      1|    let mut u8_5: u8 = 98u8;
 2962|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2963|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 2964|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2965|      1|    let mut i64_1: i64 = 12i64;
 2966|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 2967|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_11, duration_10);
 2968|      1|    let mut i32_1: i32 = 331i32;
 2969|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 2970|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_12);
 2971|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_1);
 2972|      1|    let mut duration_7_ref_0: &crate::duration::Duration = &mut duration_7;
 2973|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(duration_7_ref_0, duration_2_ref_0);
 2974|      1|    panic!("From RustyUnit with love");
 2975|       |}
 2976|       |
 2977|       |//#[no_coverage]
 2978|      1|#[test]
 2979|       |#[should_panic]
 2980|      1|#[timeout(3000)]
 2981|      1|fn rusty_test_1454() {
 2982|      1|    rusty_monitor::set_test_id(1454);
 2983|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2984|      1|    let mut i64_0: i64 = 12i64;
 2985|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 2986|      1|    let mut duration_0_ref_0: &crate::duration::Duration = &mut duration_0;
 2987|      1|    let mut u32_0: u32 = 1000u32;
 2988|      1|    let mut u8_0: u8 = 3u8;
 2989|      1|    let mut u8_1: u8 = 1u8;
 2990|      1|    let mut u8_2: u8 = 12u8;
 2991|      1|    let mut i32_0: i32 = 65i32;
 2992|      1|    let mut i64_1: i64 = 86400i64;
 2993|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 2994|      1|    let mut i32_1: i32 = 364i32;
 2995|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 2996|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 2997|      1|    let mut i64_2: i64 = 0i64;
 2998|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 2999|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 3000|      1|    let mut u16_0: u16 = 999u16;
 3001|      1|    let mut i32_2: i32 = 215i32;
 3002|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 3003|      1|    let mut i32_3: i32 = -60i32;
 3004|      1|    let mut i64_3: i64 = 604800i64;
 3005|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
 3006|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 3007|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 3008|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 3009|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 3010|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 3011|      1|    let mut u16_1: u16 = 1u16;
 3012|      1|    let mut i32_4: i32 = 128i32;
 3013|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 3014|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 3015|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
 3016|      1|    let mut duration_2_ref_0: &crate::duration::Duration = &mut duration_2;
 3017|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(duration_2_ref_0, duration_0_ref_0);
 3018|      1|    let mut duration_5: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 3019|      1|    panic!("From RustyUnit with love");
 3020|       |}
 3021|       |
 3022|       |//#[no_coverage]
 3023|      1|#[test]
 3024|       |#[should_panic]
 3025|      1|#[timeout(3000)]
 3026|      1|fn rusty_test_647() {
 3027|      1|    rusty_monitor::set_test_id(647);
 3028|      1|    let mut u32_0: u32 = 100000u32;
 3029|      1|    let mut i64_0: i64 = 86400i64;
 3030|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 3031|      1|    let mut duration_1: crate::duration::Duration = std::ops::Neg::neg(duration_0);
 3032|      1|    let mut i8_0: i8 = 59i8;
 3033|      1|    let mut i8_1: i8 = 40i8;
 3034|      1|    let mut i8_2: i8 = 60i8;
 3035|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 3036|      1|    let mut u32_1: u32 = 10000000u32;
 3037|      1|    let mut u8_0: u8 = 59u8;
 3038|      1|    let mut u8_1: u8 = 1u8;
 3039|      1|    let mut u8_2: u8 = 28u8;
 3040|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_1);
 3041|      1|    let mut u8_3: u8 = 52u8;
 3042|      1|    let mut i64_1: i64 = 86400i64;
 3043|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 3044|      1|    let mut duration_3: crate::duration::Duration = std::ops::Mul::mul(duration_2, u8_3);
 3045|      1|    let mut u16_0: u16 = 366u16;
 3046|      1|    let mut i32_0: i32 = 224i32;
 3047|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 3048|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_3);
 3049|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 3050|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_0, offset: utcoffset_0};
 3051|      1|    let mut i64_2: i64 = 1000000i64;
 3052|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 3053|      1|    let mut duration_5: crate::duration::Duration = std::ops::Neg::neg(duration_4);
 3054|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
 3055|      1|    let mut u16_1: u16 = crate::offset_date_time::OffsetDateTime::ordinal(offsetdatetime_0);
 3056|      1|    let mut duration_6: crate::duration::Duration = std::ops::Mul::mul(duration_1, u32_0);
 3057|      1|    panic!("From RustyUnit with love");
 3058|       |}
 3059|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/error/component_range.rs:
    1|       |//! Component range error
    2|       |
    3|       |use core::convert::TryFrom;
    4|       |use core::fmt;
    5|       |
    6|       |use crate::error;
    7|       |
    8|       |/// An error type indicating that a component provided to a method was out of range, causing a
    9|       |/// failure.
   10|       |// i64 is the narrowest type fitting all use cases. This eliminates the need for a type parameter.
   11|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
   12|       |pub struct ComponentRange {
   13|       |    /// Name of the component.
   14|       |    pub(crate) name: &'static str,
   15|       |    /// Minimum allowed value, inclusive.
   16|       |    pub(crate) minimum: i64,
   17|       |    /// Maximum allowed value, inclusive.
   18|       |    pub(crate) maximum: i64,
   19|       |    /// Value that was provided.
   20|       |    pub(crate) value: i64,
   21|       |    /// The minimum and/or maximum value is conditional on the value of other
   22|       |    /// parameters.
   23|       |    pub(crate) conditional_range: bool,
   24|       |}
   25|       |
   26|       |impl ComponentRange {
   27|       |    /// Obtain the name of the component whose value was out of range.
   28|      0|    pub const fn name(self) -> &'static str {
   29|      0|        self.name
   30|      0|    }
   31|       |}
   32|       |
   33|       |impl fmt::Display for ComponentRange {
   34|       |    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   35|      0|        write!(
   36|      0|            f,
   37|      0|            "{} must be in the range {}..={}",
   38|      0|            self.name, self.minimum, self.maximum
   39|      0|        )?;
   40|       |
   41|      0|        if self.conditional_range {
   42|      0|            f.write_str(", given values of other parameters")?;
   43|      0|        }
   44|       |
   45|      0|        Ok(())
   46|      0|    }
   47|       |}
   48|       |
   49|       |impl From<ComponentRange> for crate::Error {
   50|      0|    fn from(original: ComponentRange) -> Self {
   51|      0|        Self::ComponentRange(original)
   52|      0|    }
   53|       |}
   54|       |
   55|       |impl TryFrom<crate::Error> for ComponentRange {
   56|       |    type Error = error::DifferentVariant;
   57|       |
   58|      0|    fn try_from(err: crate::Error) -> Result<Self, Self::Error> {
   59|      0|        match err {
   60|      0|            crate::Error::ComponentRange(err) => Ok(err),
   61|      0|            _ => Err(error::DifferentVariant),
   62|       |        }
   63|      0|    }
   64|       |}
   65|       |
   66|       |/// **This trait implementation is deprecated and will be removed in a future breaking release.**
   67|       |#[cfg(feature = "serde")]
   68|       |impl serde::de::Expected for ComponentRange {
   69|       |    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   70|       |        write!(
   71|       |            f,
   72|       |            "a value in the range {}..={}",
   73|       |            self.minimum, self.maximum
   74|       |        )
   75|       |    }
   76|       |}
   77|       |
   78|       |#[cfg(feature = "serde")]
   79|       |impl ComponentRange {
   80|       |    /// Convert the error to a deserialization error.
   81|       |    pub(crate) fn into_de_error<E: serde::de::Error>(self) -> E {
   82|       |        E::invalid_value(serde::de::Unexpected::Signed(self.value), &self)
   83|       |    }
   84|       |}
   85|       |
   86|       |#[cfg(feature = "std")]
   87|       |impl std::error::Error for ComponentRange {}
   88|       |
   89|       |#[cfg(test)]
   90|       |mod rusty_tests {
   91|       |	use crate::*;
   92|       |	use std::cmp::PartialEq;
   93|       |	use std::clone::Clone;
   94|       |	use std::convert::TryFrom;
   95|       |	use std::convert::From;
   96|       |	use std::cmp::Eq;
   97|       |//#[no_coverage]
   98|      1|#[test]
   99|       |#[should_panic]
  100|      1|#[timeout(3000)]
  101|      1|fn rusty_test_249() {
  102|      1|    rusty_monitor::set_test_id(249);
  103|      1|    let mut bool_0: bool = false;
  104|      1|    let mut i64_0: i64 = 24i64;
  105|      1|    let mut i64_1: i64 = 1000000i64;
  106|      1|    let mut i64_2: i64 = 9223372036854775807i64;
  107|      1|    let mut str_0: &str = "April";
  108|      1|    let mut str_0_ref_0: &str = &mut str_0;
  109|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  110|      1|    let mut error_0: error::Error = std::convert::From::from(componentrange_0);
  111|      1|    let mut bool_1: bool = true;
  112|      1|    let mut i64_3: i64 = 0i64;
  113|      1|    let mut i64_4: i64 = -113i64;
  114|      1|    let mut i64_5: i64 = 604800i64;
  115|      1|    let mut str_1: &str = "PrimitiveDateTime";
  116|      1|    let mut str_1_ref_0: &str = &mut str_1;
  117|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  118|      1|    let mut error_1: error::Error = crate::error::Error::ComponentRange(componentrange_1);
  119|      1|    let mut bool_2: bool = false;
  120|      1|    let mut i64_6: i64 = 24i64;
  121|      1|    let mut i64_7: i64 = 253402300799i64;
  122|      1|    let mut i64_8: i64 = 0i64;
  123|      1|    let mut str_2: &str = "6X96jfrl0n";
  124|      1|    let mut str_2_ref_0: &str = &mut str_2;
  125|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  126|      1|    let mut error_2: error::Error = crate::error::Error::ComponentRange(componentrange_2);
  127|      1|    let mut bool_3: bool = true;
  128|      1|    let mut i64_9: i64 = 1i64;
  129|      1|    let mut i64_10: i64 = 12i64;
  130|      1|    let mut i64_11: i64 = 1i64;
  131|      1|    let mut str_3: &str = "L3c";
  132|      1|    let mut str_3_ref_0: &str = &mut str_3;
  133|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  134|      1|    let mut error_3: error::Error = crate::error::Error::ComponentRange(componentrange_3);
  135|      1|    let mut result_0: std::result::Result<crate::error::component_range::ComponentRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_3);
  136|      1|    let mut result_1: std::result::Result<crate::error::component_range::ComponentRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_2);
  137|      1|    let mut result_2: std::result::Result<crate::error::component_range::ComponentRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_1);
  138|      1|    let mut result_3: std::result::Result<crate::error::component_range::ComponentRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
  139|      1|    panic!("From RustyUnit with love");
  140|       |}
  141|       |
  142|       |//#[no_coverage]
  143|      1|#[test]
  144|       |#[should_panic]
  145|      1|#[timeout(3000)]
  146|      1|fn rusty_test_6320() {
  147|      1|    rusty_monitor::set_test_id(6320);
  148|      1|    let mut u32_0: u32 = 1000u32;
  149|      1|    let mut u8_0: u8 = 3u8;
  150|      1|    let mut u8_1: u8 = 1u8;
  151|      1|    let mut u8_2: u8 = 12u8;
  152|      1|    let mut i32_0: i32 = 65i32;
  153|      1|    let mut i64_0: i64 = 86400i64;
  154|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
  155|      1|    let mut i32_1: i32 = 364i32;
  156|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  157|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
  158|      1|    let mut i64_1: i64 = 0i64;
  159|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
  160|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  161|      1|    let mut u16_0: u16 = 999u16;
  162|      1|    let mut i32_2: i32 = 215i32;
  163|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  164|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  165|      1|    let mut u16_1: u16 = 1u16;
  166|      1|    let mut i32_3: i32 = 128i32;
  167|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  168|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
  169|      1|    panic!("From RustyUnit with love");
  170|       |}
  171|       |
  172|       |//#[no_coverage]
  173|      1|#[test]
  174|       |#[should_panic]
  175|      1|#[timeout(3000)]
  176|      1|fn rusty_test_489() {
  177|      1|    rusty_monitor::set_test_id(489);
  178|      1|    let mut bool_0: bool = false;
  179|      1|    let mut i64_0: i64 = 1000i64;
  180|      1|    let mut i64_1: i64 = 60i64;
  181|      1|    let mut i64_2: i64 = 0i64;
  182|      1|    let mut str_0: &str = "9BeOqwWyi3iL5H";
  183|      1|    let mut str_0_ref_0: &str = &mut str_0;
  184|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  185|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
  186|      1|    let mut bool_1: bool = false;
  187|      1|    let mut i64_3: i64 = 37i64;
  188|      1|    let mut i64_4: i64 = 3600i64;
  189|      1|    let mut i64_5: i64 = 60i64;
  190|      1|    let mut str_1: &str = "ConversionRange";
  191|      1|    let mut str_1_ref_0: &str = &mut str_1;
  192|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  193|      1|    let mut componentrange_1_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_1;
  194|      1|    let mut bool_2: bool = false;
  195|      1|    let mut i64_6: i64 = 2147483647i64;
  196|      1|    let mut i64_7: i64 = 125i64;
  197|      1|    let mut i64_8: i64 = 86400i64;
  198|      1|    let mut str_2: &str = "Optimize";
  199|      1|    let mut str_2_ref_0: &str = &mut str_2;
  200|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  201|      1|    let mut componentrange_2_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_2;
  202|      1|    let mut bool_3: bool = false;
  203|      1|    let mut i64_9: i64 = 12i64;
  204|      1|    let mut i64_10: i64 = 0i64;
  205|      1|    let mut i64_11: i64 = 1000i64;
  206|      1|    let mut str_3: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
  207|      1|    let mut str_3_ref_0: &str = &mut str_3;
  208|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  209|      1|    let mut componentrange_3_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_3;
  210|      1|    let mut bool_4: bool = std::cmp::PartialEq::ne(componentrange_3_ref_0, componentrange_2_ref_0);
  211|      1|    let mut bool_5: bool = std::cmp::PartialEq::ne(componentrange_1_ref_0, componentrange_0_ref_0);
  212|      1|    panic!("From RustyUnit with love");
  213|       |}
  214|       |
  215|       |//#[no_coverage]
  216|      1|#[test]
  217|       |#[should_panic]
  218|      1|#[timeout(3000)]
  219|      1|fn rusty_test_487() {
  220|      1|    rusty_monitor::set_test_id(487);
  221|      1|    let mut bool_0: bool = false;
  222|      1|    let mut i64_0: i64 = 3600i64;
  223|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  224|      1|    let mut i64_2: i64 = 9223372036854775807i64;
  225|      1|    let mut str_0: &str = "PEFmj";
  226|      1|    let mut str_0_ref_0: &str = &mut str_0;
  227|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  228|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
  229|      1|    let mut bool_1: bool = false;
  230|      1|    let mut i64_3: i64 = 60i64;
  231|      1|    let mut i64_4: i64 = -52i64;
  232|      1|    let mut i64_5: i64 = -30i64;
  233|      1|    let mut str_1: &str = "";
  234|      1|    let mut str_1_ref_0: &str = &mut str_1;
  235|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  236|      1|    let mut componentrange_1_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_1;
  237|      1|    let mut bool_2: bool = false;
  238|      1|    let mut i64_6: i64 = 253402300799i64;
  239|      1|    let mut i64_7: i64 = 253402300799i64;
  240|      1|    let mut i64_8: i64 = 24i64;
  241|      1|    let mut str_2: &str = "overflow subtracting duration from date";
  242|      1|    let mut str_2_ref_0: &str = &mut str_2;
  243|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  244|      1|    let mut componentrange_2_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_2;
  245|      1|    let mut bool_3: bool = true;
  246|      1|    let mut i64_9: i64 = 9223372036854775807i64;
  247|      1|    let mut i64_10: i64 = 604800i64;
  248|      1|    let mut i64_11: i64 = 9223372036854775807i64;
  249|      1|    let mut str_3: &str = "April";
  250|      1|    let mut str_3_ref_0: &str = &mut str_3;
  251|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  252|      1|    let mut componentrange_3_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_3;
  253|      1|    let mut componentrange_4: crate::error::component_range::ComponentRange = std::clone::Clone::clone(componentrange_3_ref_0);
  254|      1|    let mut componentrange_5: crate::error::component_range::ComponentRange = std::clone::Clone::clone(componentrange_2_ref_0);
  255|      1|    let mut componentrange_6: crate::error::component_range::ComponentRange = std::clone::Clone::clone(componentrange_1_ref_0);
  256|      1|    let mut componentrange_7: crate::error::component_range::ComponentRange = std::clone::Clone::clone(componentrange_0_ref_0);
  257|      1|    panic!("From RustyUnit with love");
  258|       |}
  259|       |
  260|       |//#[no_coverage]
  261|      1|#[test]
  262|       |#[should_panic]
  263|      1|#[timeout(3000)]
  264|      1|fn rusty_test_256() {
  265|      1|    rusty_monitor::set_test_id(256);
  266|      1|    let mut bool_0: bool = true;
  267|      1|    let mut i64_0: i64 = 24i64;
  268|      1|    let mut i64_1: i64 = 1i64;
  269|      1|    let mut i64_2: i64 = 86400i64;
  270|      1|    let mut str_0: &str = "minute";
  271|      1|    let mut str_0_ref_0: &str = &mut str_0;
  272|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  273|      1|    let mut error_0: error::Error = std::convert::From::from(componentrange_0);
  274|      1|    let mut error_0_ref_0: &error::Error = &mut error_0;
  275|      1|    panic!("From RustyUnit with love");
  276|       |}
  277|       |
  278|       |//#[no_coverage]
  279|      1|#[test]
  280|       |#[should_panic]
  281|      1|#[timeout(3000)]
  282|      1|fn rusty_test_490() {
  283|      1|    rusty_monitor::set_test_id(490);
  284|      1|    let mut bool_0: bool = false;
  285|      1|    let mut i64_0: i64 = 97i64;
  286|      1|    let mut i64_1: i64 = 1000i64;
  287|      1|    let mut i64_2: i64 = 86400i64;
  288|      1|    let mut str_0: &str = "time";
  289|      1|    let mut str_0_ref_0: &str = &mut str_0;
  290|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  291|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
  292|      1|    let mut bool_1: bool = true;
  293|      1|    let mut i64_3: i64 = 3600i64;
  294|      1|    let mut i64_4: i64 = 2440588i64;
  295|      1|    let mut i64_5: i64 = 0i64;
  296|      1|    let mut str_1: &str = "overflow when multiplying duration";
  297|      1|    let mut str_1_ref_0: &str = &mut str_1;
  298|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  299|      1|    let mut componentrange_1_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_1;
  300|      1|    let mut bool_2: bool = true;
  301|      1|    let mut i64_6: i64 = -27i64;
  302|      1|    let mut i64_7: i64 = 2147483647i64;
  303|      1|    let mut i64_8: i64 = 57i64;
  304|      1|    let mut str_2: &str = "April";
  305|      1|    let mut str_2_ref_0: &str = &mut str_2;
  306|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  307|      1|    let mut componentrange_2_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_2;
  308|      1|    let mut bool_3: bool = true;
  309|      1|    let mut i64_9: i64 = 12i64;
  310|      1|    let mut i64_10: i64 = -28i64;
  311|      1|    let mut i64_11: i64 = 60i64;
  312|      1|    let mut str_3: &str = "X";
  313|      1|    let mut str_3_ref_0: &str = &mut str_3;
  314|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  315|      1|    let mut componentrange_3_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_3;
  316|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(componentrange_3_ref_0);
  317|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(componentrange_2_ref_0);
  318|      1|    let mut tuple_2: () = std::cmp::Eq::assert_receiver_is_total_eq(componentrange_1_ref_0);
  319|      1|    let mut tuple_3: () = std::cmp::Eq::assert_receiver_is_total_eq(componentrange_0_ref_0);
  320|      1|    panic!("From RustyUnit with love");
  321|       |}
  322|       |
  323|       |//#[no_coverage]
  324|      1|#[test]
  325|       |#[should_panic]
  326|      1|#[timeout(3000)]
  327|      1|fn rusty_test_712() {
  328|      1|    rusty_monitor::set_test_id(712);
  329|      1|    let mut u32_0: u32 = 100000u32;
  330|      1|    let mut u8_0: u8 = 10u8;
  331|      1|    let mut u8_1: u8 = 9u8;
  332|      1|    let mut u8_2: u8 = 31u8;
  333|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  334|      1|    let mut i32_0: i32 = 400i32;
  335|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  336|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  337|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  338|      1|    let mut u8_3: u8 = 52u8;
  339|      1|    let mut i32_1: i32 = 49i32;
  340|      1|    let mut bool_0: bool = false;
  341|      1|    let mut i64_0: i64 = 86400i64;
  342|      1|    let mut i64_1: i64 = 0i64;
  343|      1|    let mut i64_2: i64 = 24i64;
  344|      1|    let mut str_0: &str = "overflow when subtracting durations";
  345|      1|    let mut str_0_ref_0: &str = &mut str_0;
  346|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  347|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
  348|      1|    let mut bool_1: bool = true;
  349|      1|    let mut i64_3: i64 = 9223372036854775807i64;
  350|      1|    let mut i64_4: i64 = 66i64;
  351|      1|    let mut i64_5: i64 = 2147483647i64;
  352|      1|    let mut str_1: &str = "AINC";
  353|      1|    let mut str_1_ref_0: &str = &mut str_1;
  354|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  355|      1|    let mut componentrange_1_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_1;
  356|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(componentrange_1_ref_0, componentrange_0_ref_0);
  357|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_1, u8_3, weekday_0);
  358|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::primitive_date_time::PrimitiveDateTime::to_iso_week_date(primitivedatetime_0);
  359|      1|    panic!("From RustyUnit with love");
  360|       |}
  361|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/error/conversion_range.rs:
    1|       |//! Conversion range error
    2|       |
    3|       |use core::convert::TryFrom;
    4|       |use core::fmt;
    5|       |
    6|       |use crate::error;
    7|       |
    8|       |/// An error type indicating that a conversion failed because the target type could not store the
    9|       |/// initial value.
   10|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
   11|       |pub struct ConversionRange;
   12|       |
   13|       |impl fmt::Display for ConversionRange {
   14|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   15|      0|        f.write_str("Source value is out of range for the target type")
   16|      0|    }
   17|       |}
   18|       |
   19|       |#[cfg(feature = "std")]
   20|       |impl std::error::Error for ConversionRange {}
   21|       |
   22|       |impl From<ConversionRange> for crate::Error {
   23|      0|    fn from(err: ConversionRange) -> Self {
   24|      0|        Self::ConversionRange(err)
   25|      0|    }
   26|       |}
   27|       |
   28|       |impl TryFrom<crate::Error> for ConversionRange {
   29|       |    type Error = error::DifferentVariant;
   30|       |
   31|      0|    fn try_from(err: crate::Error) -> Result<Self, Self::Error> {
   32|      0|        match err {
   33|      0|            crate::Error::ConversionRange(err) => Ok(err),
   34|      0|            _ => Err(error::DifferentVariant),
   35|       |        }
   36|      0|    }
   37|       |}
   38|       |
   39|       |#[cfg(test)]
   40|       |mod rusty_tests {
   41|       |	use crate::*;
   42|       |	use std::convert::TryFrom;
   43|       |//#[no_coverage]
   44|      1|#[test]
   45|       |#[should_panic]
   46|      1|#[timeout(3000)]
   47|      1|fn rusty_test_2392() {
   48|      1|    rusty_monitor::set_test_id(2392);
   49|      1|    let mut i8_0: i8 = 24i8;
   50|      1|    let mut i8_1: i8 = 60i8;
   51|      1|    let mut i8_2: i8 = 0i8;
   52|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
   53|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
   54|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
   55|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
   56|      1|    let mut i32_0: i32 = 131i32;
   57|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_0};
   58|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
   59|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
   60|      1|    let mut u16_0: u16 = 90u16;
   61|      1|    let mut u8_0: u8 = 6u8;
   62|      1|    let mut u8_1: u8 = 15u8;
   63|      1|    let mut u8_2: u8 = 4u8;
   64|      1|    let mut i32_1: i32 = 122i32;
   65|      1|    let mut i64_0: i64 = 86400i64;
   66|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
   67|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
   68|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
   69|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
   70|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
   71|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
   72|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
   73|      1|    let mut i32_2: i32 = 1721425i32;
   74|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
   75|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_4);
   76|      1|    let mut bool_0: bool = true;
   77|      1|    let mut i64_1: i64 = 1000000000i64;
   78|      1|    let mut i64_2: i64 = 1000000000i64;
   79|      1|    let mut i64_3: i64 = 86400i64;
   80|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
   81|      1|    let mut str_0_ref_0: &str = &mut str_0;
   82|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_3, maximum: i64_2, value: i64_1, conditional_range: bool_0};
   83|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
   84|      1|    let mut result_0: std::result::Result<crate::error::conversion_range::ConversionRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
   85|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_add(date_3, duration_1);
   86|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
   87|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_milli(date_4, u8_2, u8_1, u8_0, u16_0);
   88|      1|    let mut i32_3: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_1);
   89|      1|    let mut conversionrange_0: crate::error::conversion_range::ConversionRange = std::result::Result::unwrap(result_0);
   90|      1|    panic!("From RustyUnit with love");
   91|       |}
   92|       |
   93|       |//#[no_coverage]
   94|      1|#[test]
   95|       |#[should_panic]
   96|      1|#[timeout(3000)]
   97|      1|fn rusty_test_6593() {
   98|      1|    rusty_monitor::set_test_id(6593);
   99|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  100|      1|    let mut i32_0: i32 = 131i32;
  101|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  102|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
  103|      1|    let mut i32_1: i32 = 122i32;
  104|      1|    let mut i64_0: i64 = 86400i64;
  105|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
  106|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  107|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
  108|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  109|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  110|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  111|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
  112|      1|    let mut i32_2: i32 = 1721425i32;
  113|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  114|      1|    let mut bool_0: bool = true;
  115|      1|    let mut i64_1: i64 = 1000000000i64;
  116|      1|    let mut i64_2: i64 = 1000000000i64;
  117|      1|    let mut i64_3: i64 = 86400i64;
  118|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
  119|      1|    let mut str_0_ref_0: &str = &mut str_0;
  120|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_3, maximum: i64_2, value: i64_1, conditional_range: bool_0};
  121|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
  122|      1|    let mut result_0: std::result::Result<crate::error::conversion_range::ConversionRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
  123|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
  124|      1|    panic!("From RustyUnit with love");
  125|       |}
  126|       |
  127|       |//#[no_coverage]
  128|      1|#[test]
  129|       |#[should_panic]
  130|      1|#[timeout(3000)]
  131|      1|fn rusty_test_1789() {
  132|      1|    rusty_monitor::set_test_id(1789);
  133|      1|    let mut i8_0: i8 = 24i8;
  134|      1|    let mut i8_1: i8 = 60i8;
  135|      1|    let mut i8_2: i8 = 0i8;
  136|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  137|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  138|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  139|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  140|      1|    let mut i32_0: i32 = 131i32;
  141|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_0};
  142|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  143|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  144|      1|    let mut i32_1: i32 = 122i32;
  145|      1|    let mut i64_0: i64 = 86400i64;
  146|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
  147|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  148|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
  149|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  150|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  151|      1|    let mut i32_2: i32 = 1721425i32;
  152|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  153|      1|    let mut bool_0: bool = true;
  154|      1|    let mut i64_1: i64 = 1000000000i64;
  155|      1|    let mut i64_2: i64 = 1000000000i64;
  156|      1|    let mut i64_3: i64 = 86400i64;
  157|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
  158|      1|    let mut str_0_ref_0: &str = &mut str_0;
  159|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_3, maximum: i64_2, value: i64_1, conditional_range: bool_0};
  160|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
  161|      1|    let mut result_0: std::result::Result<crate::error::conversion_range::ConversionRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
  162|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Wednesday;
  163|      1|    let mut i32_3: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_1);
  164|      1|    panic!("From RustyUnit with love");
  165|       |}
  166|       |
  167|       |//#[no_coverage]
  168|      1|#[test]
  169|       |#[should_panic]
  170|      1|#[timeout(3000)]
  171|      1|fn rusty_test_4308() {
  172|      1|    rusty_monitor::set_test_id(4308);
  173|      1|    let mut u8_0: u8 = 3u8;
  174|      1|    let mut month_0: month::Month = crate::month::Month::August;
  175|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
  176|      1|    let mut i32_0: i32 = 280i32;
  177|      1|    let mut i8_0: i8 = 24i8;
  178|      1|    let mut i8_1: i8 = 60i8;
  179|      1|    let mut i8_2: i8 = 0i8;
  180|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  181|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  182|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  183|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  184|      1|    let mut i32_1: i32 = 131i32;
  185|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
  186|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  187|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  188|      1|    let mut u16_0: u16 = 90u16;
  189|      1|    let mut u8_1: u8 = 6u8;
  190|      1|    let mut u8_2: u8 = 15u8;
  191|      1|    let mut u8_3: u8 = 4u8;
  192|      1|    let mut i32_2: i32 = 122i32;
  193|      1|    let mut i64_0: i64 = 86400i64;
  194|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_2);
  195|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  196|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
  197|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  198|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  199|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  200|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
  201|      1|    let mut i32_3: i32 = 1721425i32;
  202|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
  203|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_4);
  204|      1|    let mut bool_0: bool = true;
  205|      1|    let mut i64_1: i64 = 1000000000i64;
  206|      1|    let mut i64_2: i64 = 1000000000i64;
  207|      1|    let mut i64_3: i64 = 86400i64;
  208|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
  209|      1|    let mut str_0_ref_0: &str = &mut str_0;
  210|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_3, maximum: i64_2, value: i64_1, conditional_range: bool_0};
  211|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
  212|      1|    let mut result_0: std::result::Result<crate::error::conversion_range::ConversionRange, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
  213|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_add(date_3, duration_1);
  214|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
  215|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_milli(date_4, u8_3, u8_2, u8_1, u16_0);
  216|      1|    let mut i32_4: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_1);
  217|      1|    let mut result_2: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_0, month_1, u8_0);
  218|      1|    panic!("From RustyUnit with love");
  219|       |}
  220|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/error/different_variant.rs:
    1|       |//! Different variant error
    2|       |
    3|       |use core::convert::TryFrom;
    4|       |use core::fmt;
    5|       |
    6|       |/// An error type indicating that a [`TryFrom`](core::convert::TryFrom) call failed because the
    7|       |/// original value was of a different variant.
    8|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
    9|       |pub struct DifferentVariant;
   10|       |
   11|       |impl fmt::Display for DifferentVariant {
   12|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   13|      0|        write!(f, "value was of a different variant than required")
   14|      0|    }
   15|       |}
   16|       |
   17|       |#[cfg(feature = "std")]
   18|       |impl std::error::Error for DifferentVariant {}
   19|       |
   20|       |impl From<DifferentVariant> for crate::Error {
   21|      0|    fn from(err: DifferentVariant) -> Self {
   22|      0|        Self::DifferentVariant(err)
   23|      0|    }
   24|       |}
   25|       |
   26|       |impl TryFrom<crate::Error> for DifferentVariant {
   27|       |    type Error = Self;
   28|       |
   29|      0|    fn try_from(err: crate::Error) -> Result<Self, Self::Error> {
   30|      0|        match err {
   31|      0|            crate::Error::DifferentVariant(err) => Ok(err),
   32|      0|            _ => Err(Self),
   33|       |        }
   34|      0|    }
   35|       |}
   36|       |
   37|       |#[cfg(test)]
   38|       |mod rusty_tests {
   39|       |	use crate::*;
   40|       |	use std::convert::TryFrom;
   41|       |//#[no_coverage]
   42|      1|#[test]
   43|       |#[should_panic]
   44|      1|#[timeout(3000)]
   45|      1|fn rusty_test_255() {
   46|      1|    rusty_monitor::set_test_id(255);
   47|      1|    let mut bool_0: bool = true;
   48|      1|    let mut i64_0: i64 = 60i64;
   49|      1|    let mut i64_1: i64 = 12i64;
   50|      1|    let mut i64_2: i64 = 9223372036854775807i64;
   51|      1|    let mut str_0: &str = "UtcOffset";
   52|      1|    let mut str_0_ref_0: &str = &mut str_0;
   53|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
   54|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
   55|      1|    let mut bool_1: bool = true;
   56|      1|    let mut i64_3: i64 = 604800i64;
   57|      1|    let mut i64_4: i64 = 126i64;
   58|      1|    let mut i64_5: i64 = 12i64;
   59|      1|    let mut str_1: &str = "June";
   60|      1|    let mut str_1_ref_0: &str = &mut str_1;
   61|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
   62|      1|    let mut error_1: error::Error = crate::error::Error::ComponentRange(componentrange_1);
   63|      1|    let mut bool_2: bool = false;
   64|      1|    let mut i64_6: i64 = 60i64;
   65|      1|    let mut i64_7: i64 = 1000000000i64;
   66|      1|    let mut i64_8: i64 = 2440588i64;
   67|      1|    let mut str_2: &str = "utc_datetime";
   68|      1|    let mut str_2_ref_0: &str = &mut str_2;
   69|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
   70|      1|    let mut error_2: error::Error = crate::error::Error::ComponentRange(componentrange_2);
   71|      1|    let mut bool_3: bool = false;
   72|      1|    let mut i64_9: i64 = 0i64;
   73|      1|    let mut i64_10: i64 = 59i64;
   74|      1|    let mut i64_11: i64 = -14i64;
   75|      1|    let mut str_3: &str = "";
   76|      1|    let mut str_3_ref_0: &str = &mut str_3;
   77|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
   78|      1|    let mut error_3: error::Error = crate::error::Error::ComponentRange(componentrange_3);
   79|      1|    let mut result_0: std::result::Result<crate::error::different_variant::DifferentVariant, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_3);
   80|      1|    let mut result_1: std::result::Result<crate::error::different_variant::DifferentVariant, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_2);
   81|      1|    let mut result_2: std::result::Result<crate::error::different_variant::DifferentVariant, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_1);
   82|      1|    let mut result_3: std::result::Result<crate::error::different_variant::DifferentVariant, crate::error::different_variant::DifferentVariant> = std::convert::TryFrom::try_from(error_0);
   83|      1|    panic!("From RustyUnit with love");
   84|       |}
   85|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/error/mod.rs:
    1|       |//! Various error types returned by methods in the time crate.
    2|       |
    3|       |pub mod component_range;
    4|       |pub mod conversion_range;
    5|       |pub mod different_variant;
    6|       |#[cfg(feature = "formatting")]
    7|       |pub mod format;
    8|       |#[cfg(feature = "local-offset")]
    9|       |pub mod indeterminate_offset;
   10|       |#[cfg(all(any(feature = "formatting", feature = "parsing"), feature = "alloc"))]
   11|       |pub mod invalid_format_description;
   12|       |#[cfg(feature = "parsing")]
   13|       |pub mod parse;
   14|       |#[cfg(feature = "parsing")]
   15|       |pub mod parse_from_description;
   16|       |#[cfg(feature = "parsing")]
   17|       |pub mod try_from_parsed;
   18|       |
   19|       |use core::fmt;
   20|       |
   21|       |pub use component_range::ComponentRange;
   22|       |pub use conversion_range::ConversionRange;
   23|       |pub use different_variant::DifferentVariant;
   24|       |#[cfg(feature = "formatting")]
   25|       |pub use format::Format;
   26|       |#[cfg(feature = "local-offset")]
   27|       |pub use indeterminate_offset::IndeterminateOffset;
   28|       |#[cfg(all(any(feature = "formatting", feature = "parsing"), feature = "alloc"))]
   29|       |pub use invalid_format_description::InvalidFormatDescription;
   30|       |#[cfg(feature = "parsing")]
   31|       |pub use parse::Parse;
   32|       |#[cfg(feature = "parsing")]
   33|       |pub use parse_from_description::ParseFromDescription;
   34|       |#[cfg(feature = "parsing")]
   35|       |pub use try_from_parsed::TryFromParsed;
   36|       |
   37|       |/// A unified error type for anything returned by a method in the time crate.
   38|       |///
   39|       |/// This can be used when you either don't know or don't care about the exact error returned.
   40|       |/// `Result<_, time::Error>` (or its alias `time::Result<_>`) will work in these situations.
   41|       |#[allow(missing_copy_implementations, variant_size_differences)]
   42|       |#[allow(clippy::missing_docs_in_private_items)] // variants only
   43|       |#[non_exhaustive]
   44|      0|#[derive(Debug)]
   45|       |pub enum Error {
   46|       |    ConversionRange(ConversionRange),
   47|       |    ComponentRange(ComponentRange),
   48|       |    #[cfg(feature = "local-offset")]
   49|       |    IndeterminateOffset(IndeterminateOffset),
   50|       |    #[cfg(feature = "formatting")]
   51|       |    Format(Format),
   52|       |    #[cfg(feature = "parsing")]
   53|       |    ParseFromDescription(ParseFromDescription),
   54|       |    #[cfg(feature = "parsing")]
   55|       |    #[non_exhaustive]
   56|       |    UnexpectedTrailingCharacters,
   57|       |    #[cfg(feature = "parsing")]
   58|       |    TryFromParsed(TryFromParsed),
   59|       |    #[cfg(all(any(feature = "formatting", feature = "parsing"), feature = "alloc"))]
   60|       |    InvalidFormatDescription(InvalidFormatDescription),
   61|       |    DifferentVariant(DifferentVariant),
   62|       |}
   63|       |
   64|       |impl fmt::Display for Error {
   65|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   66|      0|        match self {
   67|      0|            Self::ConversionRange(e) => e.fmt(f),
   68|      0|            Self::ComponentRange(e) => e.fmt(f),
   69|       |            #[cfg(feature = "local-offset")]
   70|       |            Self::IndeterminateOffset(e) => e.fmt(f),
   71|       |            #[cfg(feature = "formatting")]
   72|       |            Self::Format(e) => e.fmt(f),
   73|       |            #[cfg(feature = "parsing")]
   74|       |            Self::ParseFromDescription(e) => e.fmt(f),
   75|       |            #[cfg(feature = "parsing")]
   76|       |            Self::UnexpectedTrailingCharacters => f.write_str("unexpected trailing characters"),
   77|       |            #[cfg(feature = "parsing")]
   78|       |            Self::TryFromParsed(e) => e.fmt(f),
   79|       |            #[cfg(all(any(feature = "formatting", feature = "parsing"), feature = "alloc"))]
   80|       |            Self::InvalidFormatDescription(e) => e.fmt(f),
   81|      0|            Self::DifferentVariant(e) => e.fmt(f),
   82|       |        }
   83|      0|    }
   84|       |}
   85|       |
   86|       |#[cfg(feature = "std")]
   87|       |impl std::error::Error for Error {
   88|      0|    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
   89|      0|        match self {
   90|      0|            Self::ConversionRange(err) => Some(err),
   91|      0|            Self::ComponentRange(err) => Some(err),
   92|       |            #[cfg(feature = "local-offset")]
   93|       |            Self::IndeterminateOffset(err) => Some(err),
   94|       |            #[cfg(feature = "formatting")]
   95|       |            Self::Format(err) => Some(err),
   96|       |            #[cfg(feature = "parsing")]
   97|       |            Self::ParseFromDescription(err) => Some(err),
   98|       |            #[cfg(feature = "parsing")]
   99|       |            Self::UnexpectedTrailingCharacters => None,
  100|       |            #[cfg(feature = "parsing")]
  101|       |            Self::TryFromParsed(err) => Some(err),
  102|       |            #[cfg(all(any(feature = "formatting", feature = "parsing"), feature = "alloc"))]
  103|       |            Self::InvalidFormatDescription(err) => Some(err),
  104|      0|            Self::DifferentVariant(err) => Some(err),
  105|       |        }
  106|      0|    }
  107|       |}
  108|       |
  109|       |#[cfg(test)]
  110|       |mod rusty_tests {
  111|       |	use crate::*;
  112|       |	use std::error::Error;
  113|       |//#[no_coverage]
  114|      1|#[test]
  115|       |#[should_panic]
  116|      1|#[timeout(3000)]
  117|      1|fn rusty_test_257() {
  118|      1|    rusty_monitor::set_test_id(257);
  119|      1|    let mut bool_0: bool = true;
  120|      1|    let mut i64_0: i64 = 5i64;
  121|      1|    let mut i64_1: i64 = 2147483647i64;
  122|      1|    let mut i64_2: i64 = 3600i64;
  123|      1|    let mut str_0: &str = ", given values of other parameters";
  124|      1|    let mut str_0_ref_0: &str = &mut str_0;
  125|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
  126|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
  127|      1|    let mut error_0_ref_0: &error::Error = &mut error_0;
  128|      1|    let mut bool_1: bool = true;
  129|      1|    let mut i64_3: i64 = 24i64;
  130|      1|    let mut i64_4: i64 = 253402300799i64;
  131|      1|    let mut i64_5: i64 = -47i64;
  132|      1|    let mut str_1: &str = "nanosecond";
  133|      1|    let mut str_1_ref_0: &str = &mut str_1;
  134|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  135|      1|    let mut error_1: error::Error = crate::error::Error::ComponentRange(componentrange_1);
  136|      1|    let mut error_1_ref_0: &error::Error = &mut error_1;
  137|      1|    let mut bool_2: bool = false;
  138|      1|    let mut i64_6: i64 = 86400i64;
  139|      1|    let mut i64_7: i64 = 86400i64;
  140|      1|    let mut i64_8: i64 = 86400i64;
  141|      1|    let mut str_2: &str = "February";
  142|      1|    let mut str_2_ref_0: &str = &mut str_2;
  143|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  144|      1|    let mut error_2: error::Error = crate::error::Error::ComponentRange(componentrange_2);
  145|      1|    let mut error_2_ref_0: &error::Error = &mut error_2;
  146|      1|    let mut bool_3: bool = false;
  147|      1|    let mut i64_9: i64 = 2147483647i64;
  148|      1|    let mut i64_10: i64 = 0i64;
  149|      1|    let mut i64_11: i64 = -113i64;
  150|      1|    let mut str_3: &str = "Tuesday";
  151|      1|    let mut str_3_ref_0: &str = &mut str_3;
  152|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  153|      1|    let mut error_3: error::Error = crate::error::Error::ComponentRange(componentrange_3);
  154|      1|    let mut error_3_ref_0: &error::Error = &mut error_3;
  155|      1|    let mut option_0: std::option::Option<&dyn std::error::Error> = std::error::Error::source(error_3_ref_0);
  156|      1|    let mut option_1: std::option::Option<&dyn std::error::Error> = std::error::Error::source(error_2_ref_0);
  157|      1|    let mut option_2: std::option::Option<&dyn std::error::Error> = std::error::Error::source(error_1_ref_0);
  158|      1|    let mut option_3: std::option::Option<&dyn std::error::Error> = std::error::Error::source(error_0_ref_0);
  159|      1|    panic!("From RustyUnit with love");
  160|       |}
  161|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/ext.rs:
    1|       |//! Extension traits.
    2|       |
    3|       |use core::time::Duration as StdDuration;
    4|       |
    5|       |use crate::Duration;
    6|       |
    7|       |/// Sealed trait to prevent downstream implementations.
    8|       |mod sealed {
    9|       |    /// A trait that cannot be implemented by downstream users.
   10|       |    pub trait Sealed {}
   11|       |    impl Sealed for i64 {}
   12|       |    impl Sealed for u64 {}
   13|       |    impl Sealed for f64 {}
   14|       |}
   15|       |
   16|       |// region: NumericalDuration
   17|       |/// Create [`Duration`]s from numeric literals.
   18|       |///
   19|       |/// # Examples
   20|       |///
   21|       |/// Basic construction of [`Duration`]s.
   22|       |///
   23|       |/// ```rust
   24|       |/// # use time::{Duration, ext::NumericalDuration};
   25|       |/// assert_eq!(5.nanoseconds(), Duration::nanoseconds(5));
   26|       |/// assert_eq!(5.microseconds(), Duration::microseconds(5));
   27|       |/// assert_eq!(5.milliseconds(), Duration::milliseconds(5));
   28|       |/// assert_eq!(5.seconds(), Duration::seconds(5));
   29|       |/// assert_eq!(5.minutes(), Duration::minutes(5));
   30|       |/// assert_eq!(5.hours(), Duration::hours(5));
   31|       |/// assert_eq!(5.days(), Duration::days(5));
   32|       |/// assert_eq!(5.weeks(), Duration::weeks(5));
   33|       |/// ```
   34|       |///
   35|       |/// Signed integers work as well!
   36|       |///
   37|       |/// ```rust
   38|       |/// # use time::{Duration, ext::NumericalDuration};
   39|       |/// assert_eq!((-5).nanoseconds(), Duration::nanoseconds(-5));
   40|       |/// assert_eq!((-5).microseconds(), Duration::microseconds(-5));
   41|       |/// assert_eq!((-5).milliseconds(), Duration::milliseconds(-5));
   42|       |/// assert_eq!((-5).seconds(), Duration::seconds(-5));
   43|       |/// assert_eq!((-5).minutes(), Duration::minutes(-5));
   44|       |/// assert_eq!((-5).hours(), Duration::hours(-5));
   45|       |/// assert_eq!((-5).days(), Duration::days(-5));
   46|       |/// assert_eq!((-5).weeks(), Duration::weeks(-5));
   47|       |/// ```
   48|       |///
   49|       |/// Just like any other [`Duration`], they can be added, subtracted, etc.
   50|       |///
   51|       |/// ```rust
   52|       |/// # use time::ext::NumericalDuration;
   53|       |/// assert_eq!(2.seconds() + 500.milliseconds(), 2_500.milliseconds());
   54|       |/// assert_eq!(2.seconds() - 500.milliseconds(), 1_500.milliseconds());
   55|       |/// ```
   56|       |///
   57|       |/// When called on floating point values, any remainder of the floating point value will be
   58|       |/// truncated. Keep in mind that floating point numbers are inherently imprecise and have limited
   59|       |/// capacity.
   60|       |pub trait NumericalDuration: sealed::Sealed {
   61|       |    /// Create a [`Duration`] from the number of nanoseconds.
   62|       |    fn nanoseconds(self) -> Duration;
   63|       |    /// Create a [`Duration`] from the number of microseconds.
   64|       |    fn microseconds(self) -> Duration;
   65|       |    /// Create a [`Duration`] from the number of milliseconds.
   66|       |    fn milliseconds(self) -> Duration;
   67|       |    /// Create a [`Duration`] from the number of seconds.
   68|       |    fn seconds(self) -> Duration;
   69|       |    /// Create a [`Duration`] from the number of minutes.
   70|       |    fn minutes(self) -> Duration;
   71|       |    /// Create a [`Duration`] from the number of hours.
   72|       |    fn hours(self) -> Duration;
   73|       |    /// Create a [`Duration`] from the number of days.
   74|       |    fn days(self) -> Duration;
   75|       |    /// Create a [`Duration`] from the number of weeks.
   76|       |    fn weeks(self) -> Duration;
   77|       |}
   78|       |
   79|       |impl NumericalDuration for i64 {
   80|      0|    fn nanoseconds(self) -> Duration {
   81|      0|        Duration::nanoseconds(self)
   82|      0|    }
   83|       |
   84|      0|    fn microseconds(self) -> Duration {
   85|      0|        Duration::microseconds(self)
   86|      0|    }
   87|       |
   88|      0|    fn milliseconds(self) -> Duration {
   89|      0|        Duration::milliseconds(self)
   90|      0|    }
   91|       |
   92|      0|    fn seconds(self) -> Duration {
   93|      0|        Duration::seconds(self)
   94|      0|    }
   95|       |
   96|      0|    fn minutes(self) -> Duration {
   97|      0|        Duration::minutes(self)
   98|      0|    }
   99|       |
  100|      0|    fn hours(self) -> Duration {
  101|      0|        Duration::hours(self)
  102|      0|    }
  103|       |
  104|      0|    fn days(self) -> Duration {
  105|      0|        Duration::days(self)
  106|      0|    }
  107|       |
  108|      0|    fn weeks(self) -> Duration {
  109|      0|        Duration::weeks(self)
  110|      0|    }
  111|       |}
  112|       |
  113|       |impl NumericalDuration for f64 {
  114|      0|    fn nanoseconds(self) -> Duration {
  115|      0|        Duration::nanoseconds(self as _)
  116|      0|    }
  117|       |
  118|      0|    fn microseconds(self) -> Duration {
  119|      0|        Duration::nanoseconds((self * 1_000.) as _)
  120|      0|    }
  121|       |
  122|      0|    fn milliseconds(self) -> Duration {
  123|      0|        Duration::nanoseconds((self * 1_000_000.) as _)
  124|      0|    }
  125|       |
  126|      0|    fn seconds(self) -> Duration {
  127|      0|        Duration::nanoseconds((self * 1_000_000_000.) as _)
  128|      0|    }
  129|       |
  130|      0|    fn minutes(self) -> Duration {
  131|      0|        Duration::nanoseconds((self * 60_000_000_000.) as _)
  132|      0|    }
  133|       |
  134|      0|    fn hours(self) -> Duration {
  135|      0|        Duration::nanoseconds((self * 3_600_000_000_000.) as _)
  136|      0|    }
  137|       |
  138|      0|    fn days(self) -> Duration {
  139|      0|        Duration::nanoseconds((self * 86_400_000_000_000.) as _)
  140|      0|    }
  141|       |
  142|      0|    fn weeks(self) -> Duration {
  143|      0|        Duration::nanoseconds((self * 604_800_000_000_000.) as _)
  144|      0|    }
  145|       |}
  146|       |// endregion NumericalDuration
  147|       |
  148|       |// region: NumericalStdDuration
  149|       |/// Create [`std::time::Duration`]s from numeric literals.
  150|       |///
  151|       |/// # Examples
  152|       |///
  153|       |/// Basic construction of [`std::time::Duration`]s.
  154|       |///
  155|       |/// ```rust
  156|       |/// # use time::ext::NumericalStdDuration;
  157|       |/// # use core::time::Duration;
  158|       |/// assert_eq!(5.std_nanoseconds(), Duration::from_nanos(5));
  159|       |/// assert_eq!(5.std_microseconds(), Duration::from_micros(5));
  160|       |/// assert_eq!(5.std_milliseconds(), Duration::from_millis(5));
  161|       |/// assert_eq!(5.std_seconds(), Duration::from_secs(5));
  162|       |/// assert_eq!(5.std_minutes(), Duration::from_secs(5 * 60));
  163|       |/// assert_eq!(5.std_hours(), Duration::from_secs(5 * 3_600));
  164|       |/// assert_eq!(5.std_days(), Duration::from_secs(5 * 86_400));
  165|       |/// assert_eq!(5.std_weeks(), Duration::from_secs(5 * 604_800));
  166|       |/// ```
  167|       |///
  168|       |/// Just like any other [`std::time::Duration`], they can be added, subtracted, etc.
  169|       |///
  170|       |/// ```rust
  171|       |/// # use time::ext::NumericalStdDuration;
  172|       |/// assert_eq!(
  173|       |///     2.std_seconds() + 500.std_milliseconds(),
  174|       |///     2_500.std_milliseconds()
  175|       |/// );
  176|       |/// assert_eq!(
  177|       |///     2.std_seconds() - 500.std_milliseconds(),
  178|       |///     1_500.std_milliseconds()
  179|       |/// );
  180|       |/// ```
  181|       |///
  182|       |/// When called on floating point values, any remainder of the floating point value will be
  183|       |/// truncated. Keep in mind that floating point numbers are inherently imprecise and have limited
  184|       |/// capacity.
  185|       |pub trait NumericalStdDuration: sealed::Sealed {
  186|       |    /// Create a [`std::time::Duration`] from the number of nanoseconds.
  187|       |    fn std_nanoseconds(self) -> StdDuration;
  188|       |    /// Create a [`std::time::Duration`] from the number of microseconds.
  189|       |    fn std_microseconds(self) -> StdDuration;
  190|       |    /// Create a [`std::time::Duration`] from the number of milliseconds.
  191|       |    fn std_milliseconds(self) -> StdDuration;
  192|       |    /// Create a [`std::time::Duration`] from the number of seconds.
  193|       |    fn std_seconds(self) -> StdDuration;
  194|       |    /// Create a [`std::time::Duration`] from the number of minutes.
  195|       |    fn std_minutes(self) -> StdDuration;
  196|       |    /// Create a [`std::time::Duration`] from the number of hours.
  197|       |    fn std_hours(self) -> StdDuration;
  198|       |    /// Create a [`std::time::Duration`] from the number of days.
  199|       |    fn std_days(self) -> StdDuration;
  200|       |    /// Create a [`std::time::Duration`] from the number of weeks.
  201|       |    fn std_weeks(self) -> StdDuration;
  202|       |}
  203|       |
  204|       |impl NumericalStdDuration for u64 {
  205|      0|    fn std_nanoseconds(self) -> StdDuration {
  206|      0|        StdDuration::from_nanos(self)
  207|      0|    }
  208|       |
  209|      0|    fn std_microseconds(self) -> StdDuration {
  210|      0|        StdDuration::from_micros(self)
  211|      0|    }
  212|       |
  213|      0|    fn std_milliseconds(self) -> StdDuration {
  214|      0|        StdDuration::from_millis(self)
  215|      0|    }
  216|       |
  217|      0|    fn std_seconds(self) -> StdDuration {
  218|      0|        StdDuration::from_secs(self)
  219|      0|    }
  220|       |
  221|      0|    fn std_minutes(self) -> StdDuration {
  222|      0|        StdDuration::from_secs(self * 60)
  223|      0|    }
  224|       |
  225|      0|    fn std_hours(self) -> StdDuration {
  226|      0|        StdDuration::from_secs(self * 3_600)
  227|      0|    }
  228|       |
  229|      0|    fn std_days(self) -> StdDuration {
  230|      0|        StdDuration::from_secs(self * 86_400)
  231|      0|    }
  232|       |
  233|      0|    fn std_weeks(self) -> StdDuration {
  234|      0|        StdDuration::from_secs(self * 604_800)
  235|      0|    }
  236|       |}
  237|       |
  238|       |impl NumericalStdDuration for f64 {
  239|      0|    fn std_nanoseconds(self) -> StdDuration {
  240|      0|        assert!(self >= 0.);
  241|      0|        StdDuration::from_nanos(self as _)
  242|      0|    }
  243|       |
  244|      0|    fn std_microseconds(self) -> StdDuration {
  245|      0|        assert!(self >= 0.);
  246|      0|        StdDuration::from_nanos((self * 1_000.) as _)
  247|      0|    }
  248|       |
  249|      0|    fn std_milliseconds(self) -> StdDuration {
  250|      0|        assert!(self >= 0.);
  251|      0|        StdDuration::from_nanos((self * 1_000_000.) as _)
  252|      0|    }
  253|       |
  254|      0|    fn std_seconds(self) -> StdDuration {
  255|      0|        assert!(self >= 0.);
  256|      0|        StdDuration::from_nanos((self * 1_000_000_000.) as _)
  257|      0|    }
  258|       |
  259|      0|    fn std_minutes(self) -> StdDuration {
  260|      0|        assert!(self >= 0.);
  261|      0|        StdDuration::from_nanos((self * 60_000_000_000.) as _)
  262|      0|    }
  263|       |
  264|      0|    fn std_hours(self) -> StdDuration {
  265|      0|        assert!(self >= 0.);
  266|      0|        StdDuration::from_nanos((self * 3_600_000_000_000.) as _)
  267|      0|    }
  268|       |
  269|      0|    fn std_days(self) -> StdDuration {
  270|      0|        assert!(self >= 0.);
  271|      0|        StdDuration::from_nanos((self * 86_400_000_000_000.) as _)
  272|      0|    }
  273|       |
  274|      0|    fn std_weeks(self) -> StdDuration {
  275|      0|        assert!(self >= 0.);
  276|      0|        StdDuration::from_nanos((self * 604_800_000_000_000.) as _)
  277|      0|    }
  278|       |}
  279|       |// endregion NumericalStdDuration
  280|       |
  281|       |#[cfg(test)]
  282|       |mod rusty_tests {
  283|       |	use crate::*;
  284|       |
  285|       |//#[no_coverage]
  286|      1|#[test]
  287|       |#[should_panic]
  288|      1|#[timeout(3000)]
  289|      1|fn rusty_test_8722() {
  290|      1|    rusty_monitor::set_test_id(8722);
  291|      1|    let mut i8_0: i8 = 30i8;
  292|      1|    let mut i8_1: i8 = 6i8;
  293|      1|    let mut i8_2: i8 = 60i8;
  294|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  295|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  296|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
  297|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  298|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  299|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
  300|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  301|      1|    let mut u32_0: u32 = 100000000u32;
  302|      1|    let mut u8_0: u8 = 30u8;
  303|      1|    let mut u8_1: u8 = 10u8;
  304|      1|    let mut u8_2: u8 = 12u8;
  305|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  306|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  307|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_3, time_1);
  308|      1|    let mut u32_1: u32 = 100u32;
  309|      1|    let mut u8_3: u8 = 31u8;
  310|      1|    let mut u8_4: u8 = 11u8;
  311|      1|    let mut u8_5: u8 = 52u8;
  312|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  313|      1|    let mut i32_0: i32 = 122i32;
  314|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  315|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_2};
  316|      1|    let mut i8_3: i8 = 0i8;
  317|      1|    let mut i8_4: i8 = 5i8;
  318|      1|    let mut i8_5: i8 = 2i8;
  319|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  320|      1|    let mut i32_1: i32 = 257i32;
  321|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  322|      1|    let mut u32_2: u32 = 1000000u32;
  323|      1|    let mut u8_6: u8 = 3u8;
  324|      1|    let mut u8_7: u8 = 14u8;
  325|      1|    let mut u8_8: u8 = 6u8;
  326|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
  327|      1|    let mut u16_0: u16 = 367u16;
  328|      1|    let mut i32_2: i32 = 263i32;
  329|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  330|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_3);
  331|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_2, date_2);
  332|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_3, offset: utcoffset_1};
  333|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_5, primitivedatetime_1);
  334|      1|    let mut i32_3: i32 = -5i32;
  335|      1|    let mut i64_0: i64 = 604800i64;
  336|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_3);
  337|      1|    let mut u8_9: u8 = crate::primitive_date_time::PrimitiveDateTime::second(primitivedatetime_0);
  338|      1|    panic!("From RustyUnit with love");
  339|       |}
  340|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/instant.rs:
    1|       |//! The [`Instant`] struct and its associated `impl`s.
    2|       |
    3|       |use core::cmp::{Ord, Ordering, PartialEq, PartialOrd};
    4|       |use core::convert::{TryFrom, TryInto};
    5|       |use core::ops::{Add, Sub};
    6|       |use core::time::Duration as StdDuration;
    7|       |use std::borrow::Borrow;
    8|       |use std::time::Instant as StdInstant;
    9|       |
   10|       |use crate::Duration;
   11|       |
   12|       |/// A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`].
   13|       |///
   14|       |/// Instants are always guaranteed to be no less than any previously measured instant when created,
   15|       |/// and are often useful for tasks such as measuring benchmarks or timing how long an operation
   16|       |/// takes.
   17|       |///
   18|       |/// Note, however, that instants are not guaranteed to be **steady**. In other words, each tick of
   19|       |/// the underlying clock may not be the same length (e.g. some seconds may be longer than others).
   20|       |/// An instant may jump forwards or experience time dilation (slow down or speed up), but it will
   21|       |/// never go backwards.
   22|       |///
   23|       |/// Instants are opaque types that can only be compared to one another. There is no method to get
   24|       |/// "the number of seconds" from an instant. Instead, it only allows measuring the duration between
   25|       |/// two instants (or comparing two instants).
   26|       |///
   27|       |/// This implementation allows for operations with signed [`Duration`]s, but is otherwise identical
   28|       |/// to [`std::time::Instant`].
   29|       |#[cfg_attr(__time_03_docs, doc(cfg(feature = "std")))]
   30|       |#[repr(transparent)]
   31|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
   32|       |pub struct Instant(pub StdInstant);
   33|       |
   34|       |impl Instant {
   35|       |    // region: delegation
   36|       |    /// Returns an `Instant` corresponding to "now".
   37|       |    ///
   38|       |    /// ```rust
   39|       |    /// # use time::Instant;
   40|       |    /// println!("{:?}", Instant::now());
   41|       |    /// ```
   42|      0|    pub fn now() -> Self {
   43|      0|        Self(StdInstant::now())
   44|      0|    }
   45|       |
   46|       |    /// Returns the amount of time elapsed since this instant was created. The duration will always
   47|       |    /// be nonnegative if the instant is not synthetically created.
   48|       |    ///
   49|       |    /// ```rust
   50|       |    /// # use time::{Instant, ext::{NumericalStdDuration, NumericalDuration}};
   51|       |    /// # use std::thread;
   52|       |    /// let instant = Instant::now();
   53|       |    /// thread::sleep(1.std_milliseconds());
   54|       |    /// assert!(instant.elapsed() >= 1.milliseconds());
   55|       |    /// ```
   56|      0|    pub fn elapsed(self) -> Duration {
   57|      0|        Self::now() - self
   58|      0|    }
   59|       |    // endregion delegation
   60|       |
   61|       |    // region: checked arithmetic
   62|       |    /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as
   63|       |    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`
   64|       |    /// otherwise.
   65|       |    ///
   66|       |    /// ```rust
   67|       |    /// # use time::{Instant, ext::NumericalDuration};
   68|       |    /// let now = Instant::now();
   69|       |    /// assert_eq!(now.checked_add(5.seconds()), Some(now + 5.seconds()));
   70|       |    /// assert_eq!(now.checked_add((-5).seconds()), Some(now + (-5).seconds()));
   71|       |    /// ```
   72|      0|    pub fn checked_add(self, duration: Duration) -> Option<Self> {
   73|      0|        if duration.is_zero() {
   74|      0|            Some(self)
   75|      0|        } else if duration.is_positive() {
   76|      0|            self.0.checked_add(duration.abs_std()).map(Self)
   77|       |        } else {
   78|      0|            debug_assert!(duration.is_negative());
   79|      0|            self.0.checked_sub(duration.abs_std()).map(Self)
   80|       |        }
   81|      0|    }
   82|       |
   83|       |    /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as
   84|       |    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`
   85|       |    /// otherwise.
   86|       |    ///
   87|       |    /// ```rust
   88|       |    /// # use time::{Instant, ext::NumericalDuration};
   89|       |    /// let now = Instant::now();
   90|       |    /// assert_eq!(now.checked_sub(5.seconds()), Some(now - 5.seconds()));
   91|       |    /// assert_eq!(now.checked_sub((-5).seconds()), Some(now - (-5).seconds()));
   92|       |    /// ```
   93|      0|    pub fn checked_sub(self, duration: Duration) -> Option<Self> {
   94|      0|        if duration.is_zero() {
   95|      0|            Some(self)
   96|      0|        } else if duration.is_positive() {
   97|      0|            self.0.checked_sub(duration.abs_std()).map(Self)
   98|       |        } else {
   99|      0|            debug_assert!(duration.is_negative());
  100|      0|            self.0.checked_add(duration.abs_std()).map(Self)
  101|       |        }
  102|      0|    }
  103|       |    // endregion checked arithmetic
  104|       |
  105|       |    /// Obtain the inner [`std::time::Instant`].
  106|       |    ///
  107|       |    /// ```rust
  108|       |    /// # use time::Instant;
  109|       |    /// let now = Instant::now();
  110|       |    /// assert_eq!(now.into_inner(), now.0);
  111|       |    /// ```
  112|      0|    pub const fn into_inner(self) -> StdInstant {
  113|      0|        self.0
  114|      0|    }
  115|       |}
  116|       |
  117|       |// region: trait impls
  118|       |impl From<StdInstant> for Instant {
  119|      0|    fn from(instant: StdInstant) -> Self {
  120|      0|        Self(instant)
  121|      0|    }
  122|       |}
  123|       |
  124|       |impl From<Instant> for StdInstant {
  125|      0|    fn from(instant: Instant) -> Self {
  126|      0|        instant.0
  127|      0|    }
  128|       |}
  129|       |
  130|       |impl Sub for Instant {
  131|       |    type Output = Duration;
  132|       |
  133|      0|    fn sub(self, other: Self) -> Self::Output {
  134|      0|        match self.0.cmp(&other.0) {
  135|      0|            Ordering::Equal => Duration::ZERO,
  136|      0|            Ordering::Greater => (self.0 - other.0)
  137|      0|                .try_into()
  138|      0|                .expect("overflow converting `std::time::Duration` to `time::Duration`"),
  139|      0|            Ordering::Less => -Duration::try_from(other.0 - self.0)
  140|      0|                .expect("overflow converting `std::time::Duration` to `time::Duration`"),
  141|       |        }
  142|      0|    }
  143|       |}
  144|       |
  145|       |impl Sub<StdInstant> for Instant {
  146|       |    type Output = Duration;
  147|       |
  148|      0|    fn sub(self, other: StdInstant) -> Self::Output {
  149|      0|        self - Self(other)
  150|      0|    }
  151|       |}
  152|       |
  153|       |impl Sub<Instant> for StdInstant {
  154|       |    type Output = Duration;
  155|       |
  156|      0|    fn sub(self, other: Instant) -> Self::Output {
  157|      0|        Instant(self) - other
  158|      0|    }
  159|       |}
  160|       |
  161|       |impl Add<Duration> for Instant {
  162|       |    type Output = Self;
  163|       |
  164|      0|    fn add(self, duration: Duration) -> Self::Output {
  165|      0|        if duration.is_positive() {
  166|      0|            Self(self.0 + duration.abs_std())
  167|      0|        } else if duration.is_negative() {
  168|      0|            Self(self.0 - duration.abs_std())
  169|       |        } else {
  170|      0|            self
  171|       |        }
  172|      0|    }
  173|       |}
  174|       |
  175|       |impl Add<Duration> for StdInstant {
  176|       |    type Output = Self;
  177|       |
  178|      0|    fn add(self, duration: Duration) -> Self::Output {
  179|      0|        (Instant(self) + duration).0
  180|      0|    }
  181|       |}
  182|       |
  183|       |impl Add<StdDuration> for Instant {
  184|       |    type Output = Self;
  185|       |
  186|      0|    fn add(self, duration: StdDuration) -> Self::Output {
  187|      0|        Self(self.0 + duration)
  188|      0|    }
  189|       |}
  190|       |
  191|       |impl_add_assign!(Instant: Duration, StdDuration);
  192|       |impl_add_assign!(StdInstant: Duration);
  193|       |
  194|       |impl Sub<Duration> for Instant {
  195|       |    type Output = Self;
  196|       |
  197|      0|    fn sub(self, duration: Duration) -> Self::Output {
  198|      0|        if duration.is_positive() {
  199|      0|            Self(self.0 - duration.abs_std())
  200|      0|        } else if duration.is_negative() {
  201|      0|            Self(self.0 + duration.abs_std())
  202|       |        } else {
  203|      0|            self
  204|       |        }
  205|      0|    }
  206|       |}
  207|       |
  208|       |impl Sub<Duration> for StdInstant {
  209|       |    type Output = Self;
  210|       |
  211|      0|    fn sub(self, duration: Duration) -> Self::Output {
  212|      0|        (Instant(self) - duration).0
  213|      0|    }
  214|       |}
  215|       |
  216|       |impl Sub<StdDuration> for Instant {
  217|       |    type Output = Self;
  218|       |
  219|      0|    fn sub(self, duration: StdDuration) -> Self::Output {
  220|      0|        Self(self.0 - duration)
  221|      0|    }
  222|       |}
  223|       |
  224|       |impl_sub_assign!(Instant: Duration, StdDuration);
  225|       |impl_sub_assign!(StdInstant: Duration);
  226|       |
  227|       |impl PartialEq<StdInstant> for Instant {
  228|      0|    fn eq(&self, rhs: &StdInstant) -> bool {
  229|      0|        self.0.eq(rhs)
  230|      0|    }
  231|       |}
  232|       |
  233|       |impl PartialEq<Instant> for StdInstant {
  234|      0|    fn eq(&self, rhs: &Instant) -> bool {
  235|      0|        self.eq(&rhs.0)
  236|      0|    }
  237|       |}
  238|       |
  239|       |impl PartialOrd<StdInstant> for Instant {
  240|      0|    fn partial_cmp(&self, rhs: &StdInstant) -> Option<Ordering> {
  241|      0|        self.0.partial_cmp(rhs)
  242|      0|    }
  243|       |}
  244|       |
  245|       |impl PartialOrd<Instant> for StdInstant {
  246|      0|    fn partial_cmp(&self, rhs: &Instant) -> Option<Ordering> {
  247|      0|        self.partial_cmp(&rhs.0)
  248|      0|    }
  249|       |}
  250|       |
  251|       |impl AsRef<StdInstant> for Instant {
  252|      0|    fn as_ref(&self) -> &StdInstant {
  253|      0|        &self.0
  254|      0|    }
  255|       |}
  256|       |
  257|       |impl Borrow<StdInstant> for Instant {
  258|      0|    fn borrow(&self) -> &StdInstant {
  259|      0|        &self.0
  260|      0|    }
  261|       |}
  262|       |// endregion trait impls
  263|       |
  264|       |#[cfg(test)]
  265|       |mod rusty_tests {
  266|       |	use crate::*;
  267|       |	use std::cmp::Ord;
  268|       |	use std::clone::Clone;
  269|       |	use std::cmp::PartialEq;
  270|       |	use std::ops::Add;
  271|       |	use std::cmp::PartialOrd;
  272|       |	use std::convert::AsRef;
  273|       |	use std::ops::Sub;
  274|       |	use std::convert::From;
  275|       |	use std::cmp::Eq;
  276|       |	use std::borrow::Borrow;
  277|       |//#[no_coverage]
  278|      1|#[test]
  279|       |#[should_panic]
  280|      1|#[timeout(3000)]
  281|      1|fn rusty_test_1918() {
  282|      1|    rusty_monitor::set_test_id(1918);
  283|      1|    let mut i32_0: i32 = 36525i32;
  284|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  285|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  286|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
  287|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  288|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  289|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  290|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(instant_1, instant_0);
  291|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  292|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  293|      1|    let mut i32_1: i32 = 48i32;
  294|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  295|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_0);
  296|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  297|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_2);
  298|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
  299|      1|    let mut i64_0: i64 = 3600i64;
  300|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  301|      1|    let mut i128_0: i128 = 0i128;
  302|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
  303|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  304|      1|    let mut i64_1: i64 = 24i64;
  305|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  306|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
  307|      1|    let mut i64_2: i64 = 1000i64;
  308|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
  309|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  310|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
  311|      1|    let mut result_0: std::result::Result<crate::offset_date_time::OffsetDateTime, crate::error::component_range::ComponentRange> = crate::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos(i128_0);
  312|      1|    panic!("From RustyUnit with love");
  313|       |}
  314|       |
  315|       |//#[no_coverage]
  316|      1|#[test]
  317|       |#[should_panic]
  318|      1|#[timeout(3000)]
  319|      1|fn rusty_test_5177() {
  320|      1|    rusty_monitor::set_test_id(5177);
  321|      1|    let mut i64_0: i64 = 24i64;
  322|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  323|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  324|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
  325|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Monday;
  326|      1|    let mut i64_1: i64 = 1000000000i64;
  327|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
  328|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  329|      1|    let mut i64_2: i64 = 604800i64;
  330|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::days(i64_2);
  331|      1|    let mut i64_3: i64 = 9223372036854775807i64;
  332|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
  333|      1|    let mut i32_0: i32 = 50i32;
  334|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  335|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_3);
  336|      1|    let mut i8_0: i8 = 6i8;
  337|      1|    let mut i8_1: i8 = 6i8;
  338|      1|    let mut i8_2: i8 = 2i8;
  339|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  340|      1|    let mut u32_0: u32 = 0u32;
  341|      1|    let mut u8_0: u8 = 59u8;
  342|      1|    let mut u8_1: u8 = 28u8;
  343|      1|    let mut u8_2: u8 = 30u8;
  344|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  345|      1|    let mut i32_1: i32 = 7i32;
  346|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
  347|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
  348|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
  349|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_1);
  350|      1|    let mut i32_2: i32 = -7i32;
  351|      1|    let mut u32_1: u32 = 10000u32;
  352|      1|    let mut u8_3: u8 = 3u8;
  353|      1|    let mut u8_4: u8 = 7u8;
  354|      1|    let mut u8_5: u8 = 14u8;
  355|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  356|      1|    let mut i64_4: i64 = 1000i64;
  357|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
  358|      1|    let mut i32_3: i32 = 43i32;
  359|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
  360|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_sub(date_3, duration_4);
  361|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_4, time_1);
  362|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  363|      1|    let mut instant_2: std::time::Instant = crate::instant::Instant::into_inner(instant_1);
  364|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  365|      1|    let mut duration_5: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_2);
  366|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
  367|      1|    let mut duration_6_ref_0: &std::time::Duration = &mut duration_6;
  368|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
  369|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  370|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_1);
  371|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_whole_seconds(i32_2);
  372|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_3, duration_2);
  373|      1|    let mut instant_4: crate::instant::Instant = std::ops::Add::add(instant_0, duration_1);
  374|      1|    let mut u8_6: u8 = crate::weekday::Weekday::number_from_sunday(weekday_0);
  375|      1|    let mut tuple_1: (u8, u8, u8) = crate::offset_date_time::OffsetDateTime::to_hms(offsetdatetime_1);
  376|      1|    panic!("From RustyUnit with love");
  377|       |}
  378|       |
  379|       |//#[no_coverage]
  380|      1|#[test]
  381|       |#[should_panic]
  382|      1|#[timeout(3000)]
  383|      1|fn rusty_test_8165() {
  384|      1|    rusty_monitor::set_test_id(8165);
  385|      1|    let mut i32_0: i32 = 0i32;
  386|      1|    let mut i64_0: i64 = 117i64;
  387|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
  388|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  389|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_0);
  390|      1|    let mut instant_1_ref_0: &crate::instant::Instant = &mut instant_1;
  391|      1|    let mut i64_1: i64 = 1000i64;
  392|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
  393|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  394|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  395|      1|    let mut instant_3: crate::instant::Instant = std::ops::Add::add(instant_2, duration_2);
  396|      1|    let mut instant_3_ref_0: &crate::instant::Instant = &mut instant_3;
  397|      1|    let mut i64_2: i64 = 12i64;
  398|      1|    let mut i8_0: i8 = 2i8;
  399|      1|    let mut i8_1: i8 = 59i8;
  400|      1|    let mut i8_2: i8 = -17i8;
  401|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  402|      1|    let mut i8_3: i8 = 2i8;
  403|      1|    let mut i8_4: i8 = 60i8;
  404|      1|    let mut i8_5: i8 = 24i8;
  405|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  406|      1|    let mut u32_0: u32 = 10u32;
  407|      1|    let mut u8_0: u8 = 29u8;
  408|      1|    let mut u8_1: u8 = 28u8;
  409|      1|    let mut u8_2: u8 = 6u8;
  410|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  411|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
  412|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  413|      1|    let mut i32_1: i32 = -27i32;
  414|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  415|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_3);
  416|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
  417|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_1);
  418|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
  419|      1|    let mut i64_3: i64 = 604800i64;
  420|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_3);
  421|      1|    let mut i64_4: i64 = 9223372036854775807i64;
  422|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
  423|      1|    let mut i32_2: i32 = 50i32;
  424|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  425|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_5);
  426|      1|    let mut i8_6: i8 = 6i8;
  427|      1|    let mut i8_7: i8 = 6i8;
  428|      1|    let mut i8_8: i8 = 2i8;
  429|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  430|      1|    let mut u32_1: u32 = 0u32;
  431|      1|    let mut u8_3: u8 = 59u8;
  432|      1|    let mut u8_4: u8 = 28u8;
  433|      1|    let mut u8_5: u8 = 30u8;
  434|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  435|      1|    let mut i32_3: i32 = 7i32;
  436|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_3};
  437|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_1};
  438|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_2, utcoffset_2);
  439|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_1, date_3);
  440|      1|    let mut i32_4: i32 = -7i32;
  441|      1|    let mut u32_2: u32 = 10000u32;
  442|      1|    let mut u8_6: u8 = 3u8;
  443|      1|    let mut u8_7: u8 = 7u8;
  444|      1|    let mut u8_8: u8 = 14u8;
  445|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
  446|      1|    let mut i64_5: i64 = 1000i64;
  447|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds(i64_5);
  448|      1|    let mut i32_5: i32 = 43i32;
  449|      1|    let mut date_5: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_5);
  450|      1|    let mut date_6: crate::date::Date = crate::date::Date::saturating_sub(date_5, duration_6);
  451|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_6, time_2);
  452|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  453|      1|    let mut instant_5: std::time::Instant = crate::instant::Instant::into_inner(instant_4);
  454|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
  455|      1|    let mut duration_7: crate::duration::Duration = std::ops::Sub::sub(instant_6, instant_5);
  456|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
  457|      1|    let mut duration_8_ref_0: &std::time::Duration = &mut duration_8;
  458|      1|    let mut f64_1: f64 = 4607182418800017408.000000f64;
  459|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_1);
  460|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_3);
  461|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_whole_seconds(i32_4);
  462|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
  463|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
  464|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(instant_3_ref_0, instant_1_ref_0);
  465|      1|    panic!("From RustyUnit with love");
  466|       |}
  467|       |
  468|       |//#[no_coverage]
  469|      1|#[test]
  470|       |#[should_panic]
  471|      1|#[timeout(3000)]
  472|      1|fn rusty_test_6581() {
  473|      1|    rusty_monitor::set_test_id(6581);
  474|      1|    let mut i32_0: i32 = 144i32;
  475|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  476|      1|    let mut i64_0: i64 = -52i64;
  477|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  478|      1|    let mut i32_1: i32 = -52i32;
  479|      1|    let mut i64_1: i64 = 1000i64;
  480|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
  481|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  482|      1|    let mut u16_0: u16 = 59u16;
  483|      1|    let mut i32_2: i32 = 1721119i32;
  484|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  485|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_2);
  486|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
  487|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  488|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  489|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  490|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
  491|      1|    let mut i8_0: i8 = 6i8;
  492|      1|    let mut i8_1: i8 = 2i8;
  493|      1|    let mut i8_2: i8 = 2i8;
  494|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  495|      1|    let mut u32_0: u32 = 38u32;
  496|      1|    let mut u8_0: u8 = 10u8;
  497|      1|    let mut u8_1: u8 = 10u8;
  498|      1|    let mut u8_2: u8 = 86u8;
  499|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  500|      1|    let mut i32_3: i32 = 252i32;
  501|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_3};
  502|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_0);
  503|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_0};
  504|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
  505|      1|    let mut i8_3: i8 = 89i8;
  506|      1|    let mut i8_4: i8 = 5i8;
  507|      1|    let mut i8_5: i8 = 0i8;
  508|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  509|      1|    let mut i64_2: i64 = 15i64;
  510|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
  511|      1|    let mut i64_3: i64 = -29i64;
  512|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
  513|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_6, duration_5);
  514|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  515|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  516|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  517|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  518|      1|    let mut duration_8: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_0);
  519|      1|    let mut i64_4: i64 = crate::duration::Duration::whole_weeks(duration_8);
  520|      1|    let mut bool_0: bool = crate::duration::Duration::is_negative(duration_7);
  521|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_1);
  522|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_1, primitivedatetime_1);
  523|      1|    let mut tuple_0: (month::Month, u8) = crate::date::Date::month_day(date_0);
  524|      1|    panic!("From RustyUnit with love");
  525|       |}
  526|       |
  527|       |//#[no_coverage]
  528|      1|#[test]
  529|       |#[should_panic]
  530|      1|#[timeout(3000)]
  531|      1|fn rusty_test_4428() {
  532|      1|    rusty_monitor::set_test_id(4428);
  533|      1|    let mut i64_0: i64 = -52i64;
  534|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  535|      1|    let mut u16_0: u16 = 59u16;
  536|      1|    let mut i32_0: i32 = 1721119i32;
  537|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  538|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  539|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  540|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  541|      1|    let mut i8_0: i8 = 6i8;
  542|      1|    let mut i8_1: i8 = 2i8;
  543|      1|    let mut i8_2: i8 = 2i8;
  544|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  545|      1|    let mut u32_0: u32 = 38u32;
  546|      1|    let mut u8_0: u8 = 10u8;
  547|      1|    let mut u8_1: u8 = 10u8;
  548|      1|    let mut u8_2: u8 = 86u8;
  549|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  550|      1|    let mut i32_1: i32 = 252i32;
  551|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
  552|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
  553|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_0, offset: utcoffset_0};
  554|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  555|      1|    let mut i8_3: i8 = 89i8;
  556|      1|    let mut i8_4: i8 = 5i8;
  557|      1|    let mut i8_5: i8 = 0i8;
  558|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  559|      1|    let mut i64_1: i64 = 15i64;
  560|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  561|      1|    let mut i64_2: i64 = -29i64;
  562|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
  563|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
  564|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  565|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  566|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  567|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  568|      1|    let mut duration_6: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_0);
  569|      1|    let mut i64_3: i64 = crate::duration::Duration::whole_weeks(duration_6);
  570|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_1);
  571|      1|    panic!("From RustyUnit with love");
  572|       |}
  573|       |
  574|       |//#[no_coverage]
  575|      1|#[test]
  576|       |#[should_panic]
  577|      1|#[timeout(3000)]
  578|      1|fn rusty_test_391() {
  579|      1|    rusty_monitor::set_test_id(391);
  580|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  581|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
  582|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  583|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  584|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  585|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(instant_4, instant_1);
  586|      1|    let mut i64_0: i64 = 12i64;
  587|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  588|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  589|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  590|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_2, duration_1);
  591|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  592|      1|    let mut u32_0: u32 = 100u32;
  593|      1|    let mut u8_0: u8 = 5u8;
  594|      1|    let mut u8_1: u8 = 29u8;
  595|      1|    let mut u8_2: u8 = 23u8;
  596|      1|    panic!("From RustyUnit with love");
  597|       |}
  598|       |
  599|       |//#[no_coverage]
  600|      1|#[test]
  601|       |#[should_panic]
  602|      1|#[timeout(3000)]
  603|      1|fn rusty_test_7660() {
  604|      1|    rusty_monitor::set_test_id(7660);
  605|      1|    let mut i64_0: i64 = -106i64;
  606|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  607|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  608|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  609|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  610|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  611|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  612|      1|    let mut i32_0: i32 = 86399i32;
  613|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  614|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  615|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
  616|      1|    let mut u16_0: u16 = 59u16;
  617|      1|    let mut i32_1: i32 = -89i32;
  618|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  619|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_2);
  620|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  621|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  622|      1|    let mut u16_1: u16 = 7u16;
  623|      1|    let mut i32_2: i32 = 342i32;
  624|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
  625|      1|    let mut i64_1: i64 = 253402300799i64;
  626|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  627|      1|    let mut i64_2: i64 = 12i64;
  628|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
  629|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
  630|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  631|      1|    let mut instant_5: crate::instant::Instant = std::ops::Add::add(instant_4, duration_5);
  632|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  633|      1|    let mut u32_0: u32 = crate::offset_date_time::OffsetDateTime::nanosecond(offsetdatetime_2);
  634|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_sub(instant_5, duration_3);
  635|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::Next;
  636|      1|    let mut i8_0: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_0);
  637|      1|    panic!("From RustyUnit with love");
  638|       |}
  639|       |
  640|       |//#[no_coverage]
  641|      1|#[test]
  642|       |#[should_panic]
  643|      1|#[timeout(3000)]
  644|      1|fn rusty_test_263() {
  645|      1|    rusty_monitor::set_test_id(263);
  646|      1|    let mut i32_0: i32 = 218i32;
  647|      1|    let mut i64_0: i64 = 12i64;
  648|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
  649|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  650|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  651|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_1);
  652|      1|    let mut instant_2: std::time::Instant = crate::instant::Instant::into_inner(instant_1);
  653|      1|    let mut i64_1: i64 = 0i64;
  654|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
  655|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
  656|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  657|      1|    let mut instant_4: crate::instant::Instant = std::ops::Add::add(instant_3, duration_3);
  658|      1|    let mut instant_5: std::time::Instant = crate::instant::Instant::into_inner(instant_4);
  659|      1|    let mut i64_2: i64 = 3600i64;
  660|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
  661|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
  662|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
  663|      1|    let mut instant_7: crate::instant::Instant = std::ops::Add::add(instant_6, duration_5);
  664|      1|    let mut instant_8: std::time::Instant = crate::instant::Instant::into_inner(instant_7);
  665|      1|    let mut f32_0: f32 = 1315859240.000000f32;
  666|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  667|      1|    let mut f32_1: f32 = 1065353216.000000f32;
  668|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
  669|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_7, duration_6);
  670|      1|    let mut instant_9: crate::instant::Instant = crate::instant::Instant::now();
  671|      1|    let mut instant_10: crate::instant::Instant = std::ops::Sub::sub(instant_9, duration_8);
  672|      1|    let mut instant_11: std::time::Instant = crate::instant::Instant::into_inner(instant_10);
  673|      1|    let mut instant_12: crate::instant::Instant = std::convert::From::from(instant_11);
  674|      1|    let mut instant_13: crate::instant::Instant = std::convert::From::from(instant_8);
  675|      1|    let mut instant_14: crate::instant::Instant = std::convert::From::from(instant_5);
  676|      1|    let mut instant_15: crate::instant::Instant = std::convert::From::from(instant_2);
  677|      1|    panic!("From RustyUnit with love");
  678|       |}
  679|       |
  680|       |//#[no_coverage]
  681|      1|#[test]
  682|       |#[should_panic]
  683|      1|#[timeout(3000)]
  684|      1|fn rusty_test_8467() {
  685|      1|    rusty_monitor::set_test_id(8467);
  686|      1|    let mut i64_0: i64 = -106i64;
  687|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  688|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  689|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  690|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  691|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(instant_2, instant_0);
  692|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  693|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  694|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  695|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
  696|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  697|      1|    let mut i32_0: i32 = 86399i32;
  698|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  699|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  700|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_0);
  701|      1|    let mut u16_0: u16 = 59u16;
  702|      1|    let mut i32_1: i32 = -89i32;
  703|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  704|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_3);
  705|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
  706|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  707|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  708|      1|    let mut u8_0: u8 = 1u8;
  709|      1|    let mut u32_0: u32 = 89u32;
  710|      1|    let mut u8_1: u8 = 2u8;
  711|      1|    let mut u8_2: u8 = 85u8;
  712|      1|    let mut u8_3: u8 = 8u8;
  713|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_2, u8_1, u32_0);
  714|      1|    let mut u16_1: u16 = 7u16;
  715|      1|    let mut i32_2: i32 = 342i32;
  716|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
  717|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_1);
  718|      1|    let mut month_0: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_1);
  719|      1|    let mut i32_3: i32 = 43i32;
  720|      1|    let mut i64_1: i64 = 253402300799i64;
  721|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  722|      1|    let mut i64_2: i64 = 12i64;
  723|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
  724|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
  725|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
  726|      1|    let mut instant_6: crate::instant::Instant = std::ops::Add::add(instant_5, duration_6);
  727|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  728|      1|    let mut u32_1: u32 = crate::offset_date_time::OffsetDateTime::nanosecond(offsetdatetime_3);
  729|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_sub(instant_6, duration_4);
  730|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_0, u8_0);
  731|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::Next;
  732|      1|    let mut i8_0: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_0);
  733|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
  734|      1|    let mut instant_3_ref_0: &crate::instant::Instant = &mut instant_3;
  735|      1|    let mut instant_7: &std::time::Instant = std::convert::AsRef::as_ref(instant_3_ref_0);
  736|      1|    panic!("From RustyUnit with love");
  737|       |}
  738|       |
  739|       |//#[no_coverage]
  740|      1|#[test]
  741|       |#[should_panic]
  742|      1|#[timeout(3000)]
  743|      1|fn rusty_test_273() {
  744|      1|    rusty_monitor::set_test_id(273);
  745|      1|    let mut i128_0: i128 = 1i128;
  746|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  747|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  748|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  749|      1|    let mut instant_1: crate::instant::Instant = std::ops::Add::add(instant_0, duration_1);
  750|      1|    let mut instant_1_ref_0: &crate::instant::Instant = &mut instant_1;
  751|      1|    let mut i64_0: i64 = 86400i64;
  752|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  753|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  754|      1|    let mut instant_3: crate::instant::Instant = std::ops::Add::add(instant_2, duration_2);
  755|      1|    let mut instant_3_ref_0: &crate::instant::Instant = &mut instant_3;
  756|      1|    let mut i128_1: i128 = 1i128;
  757|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  758|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  759|      1|    let mut instant_5: crate::instant::Instant = std::ops::Add::add(instant_4, duration_3);
  760|      1|    let mut instant_5_ref_0: &crate::instant::Instant = &mut instant_5;
  761|      1|    let mut i32_0: i32 = 60i32;
  762|      1|    let mut i64_1: i64 = 12i64;
  763|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
  764|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
  765|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
  766|      1|    let mut instant_7: crate::instant::Instant = std::ops::Add::add(instant_6, duration_5);
  767|      1|    let mut instant_7_ref_0: &crate::instant::Instant = &mut instant_7;
  768|      1|    let mut i64_2: i64 = 1i64;
  769|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
  770|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
  771|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
  772|      1|    let mut instant_9: crate::instant::Instant = std::ops::Add::add(instant_8, duration_7);
  773|      1|    let mut instant_9_ref_0: &crate::instant::Instant = &mut instant_9;
  774|      1|    let mut instant_10: &std::time::Instant = std::borrow::Borrow::borrow(instant_9_ref_0);
  775|      1|    let mut instant_11: &std::time::Instant = std::borrow::Borrow::borrow(instant_7_ref_0);
  776|      1|    let mut instant_12: &std::time::Instant = std::borrow::Borrow::borrow(instant_5_ref_0);
  777|      1|    let mut instant_13: &std::time::Instant = std::borrow::Borrow::borrow(instant_3_ref_0);
  778|      1|    let mut instant_14: &std::time::Instant = std::borrow::Borrow::borrow(instant_1_ref_0);
  779|      1|    panic!("From RustyUnit with love");
  780|       |}
  781|       |
  782|       |//#[no_coverage]
  783|      1|#[test]
  784|       |#[should_panic]
  785|      1|#[timeout(3000)]
  786|      1|fn rusty_test_340() {
  787|      1|    rusty_monitor::set_test_id(340);
  788|      1|    let mut u16_0: u16 = 10u16;
  789|      1|    let mut i32_0: i32 = 150i32;
  790|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  791|      1|    let mut u32_0: u32 = 999999u32;
  792|      1|    let mut u8_0: u8 = 23u8;
  793|      1|    let mut u8_1: u8 = 9u8;
  794|      1|    let mut u8_2: u8 = 7u8;
  795|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  796|      1|    let mut u16_1: u16 = 60u16;
  797|      1|    let mut i32_1: i32 = 342i32;
  798|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
  799|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
  800|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  801|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  802|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  803|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(instant_1, instant_0);
  804|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  805|      1|    let mut u32_1: u32 = 0u32;
  806|      1|    let mut u8_3: u8 = 28u8;
  807|      1|    let mut u8_4: u8 = 11u8;
  808|      1|    let mut u8_5: u8 = 60u8;
  809|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  810|      1|    let mut f64_0: f64 = 4815374002031689728.000000f64;
  811|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  812|      1|    let mut i32_2: i32 = 511i32;
  813|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  814|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_1);
  815|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_1};
  816|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_2, duration_0);
  817|      1|    let mut tuple_0: (i32, u16) = crate::primitive_date_time::PrimitiveDateTime::to_ordinal_date(primitivedatetime_3);
  818|      1|    let mut tuple_1: (i32, u16) = crate::primitive_date_time::PrimitiveDateTime::to_ordinal_date(primitivedatetime_1);
  819|      1|    panic!("From RustyUnit with love");
  820|       |}
  821|       |
  822|       |//#[no_coverage]
  823|      1|#[test]
  824|       |#[should_panic]
  825|      1|#[timeout(3000)]
  826|      1|fn rusty_test_235() {
  827|      1|    rusty_monitor::set_test_id(235);
  828|      1|    let mut i16_0: i16 = 4i16;
  829|      1|    let mut i64_0: i64 = 24i64;
  830|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
  831|      1|    let mut i32_0: i32 = 119i32;
  832|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  833|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
  834|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  835|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  836|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_1);
  837|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
  838|      1|    panic!("From RustyUnit with love");
  839|       |}
  840|       |
  841|       |//#[no_coverage]
  842|      1|#[test]
  843|       |#[should_panic]
  844|      1|#[timeout(3000)]
  845|      1|fn rusty_test_5906() {
  846|      1|    rusty_monitor::set_test_id(5906);
  847|      1|    let mut i64_0: i64 = -54i64;
  848|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
  849|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  850|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  851|      1|    let mut i32_0: i32 = 48i32;
  852|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  853|      1|    let mut u32_0: u32 = 10000000u32;
  854|      1|    let mut u8_0: u8 = 9u8;
  855|      1|    let mut u8_1: u8 = 0u8;
  856|      1|    let mut u8_2: u8 = 9u8;
  857|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  858|      1|    let mut u16_0: u16 = 59u16;
  859|      1|    let mut i32_1: i32 = 136i32;
  860|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  861|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
  862|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  863|      1|    let mut i128_0: i128 = 1000000000i128;
  864|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  865|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
  866|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  867|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  868|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_4);
  869|      1|    let mut u16_1: u16 = 21u16;
  870|      1|    let mut u8_3: u8 = 23u8;
  871|      1|    let mut u8_4: u8 = 4u8;
  872|      1|    let mut u8_5: u8 = 53u8;
  873|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_milli(u8_5, u8_4, u8_3, u16_1);
  874|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  875|      1|    let mut instant_2: crate::instant::Instant = std::ops::Add::add(instant_1, duration_3);
  876|      1|    panic!("From RustyUnit with love");
  877|       |}
  878|       |
  879|       |//#[no_coverage]
  880|      1|#[test]
  881|       |#[should_panic]
  882|      1|#[timeout(3000)]
  883|      1|fn rusty_test_836() {
  884|      1|    rusty_monitor::set_test_id(836);
  885|      1|    let mut i128_0: i128 = 0i128;
  886|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  887|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  888|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  889|      1|    let mut instant_1: crate::instant::Instant = std::ops::Add::add(instant_0, duration_1);
  890|      1|    let mut instant_1_ref_0: &crate::instant::Instant = &mut instant_1;
  891|      1|    let mut i128_1: i128 = 1000000i128;
  892|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  893|      1|    let mut i64_0: i64 = 60i64;
  894|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  895|      1|    let mut i32_0: i32 = -69i32;
  896|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  897|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  898|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  899|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
  900|      1|    let mut duration_4: crate::duration::Duration = std::ops::Sub::sub(instant_5, instant_2);
  901|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_0);
  902|      1|    let mut i32_1: i32 = 296i32;
  903|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  904|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
  905|      1|    let mut i32_2: i32 = 201i32;
  906|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  907|      1|    let mut i64_2: i64 = 2440588i64;
  908|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
  909|      1|    let mut u32_0: u32 = 0u32;
  910|      1|    let mut u8_0: u8 = 29u8;
  911|      1|    let mut u8_1: u8 = 24u8;
  912|      1|    let mut u8_2: u8 = 1u8;
  913|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  914|      1|    let mut i8_0: i8 = 59i8;
  915|      1|    let mut i8_1: i8 = 3i8;
  916|      1|    let mut i8_2: i8 = 1i8;
  917|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  918|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  919|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
  920|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  921|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
  922|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_7);
  923|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
  924|      1|    let mut instant_7: std::time::Instant = crate::instant::Instant::into_inner(instant_6);
  925|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
  926|      1|    let mut instant_9: crate::instant::Instant = crate::instant::Instant::now();
  927|      1|    let mut duration_8: crate::duration::Duration = std::ops::Sub::sub(instant_9, instant_7);
  928|      1|    let mut instant_10: crate::instant::Instant = crate::instant::Instant::now();
  929|      1|    let mut u16_0: u16 = 40u16;
  930|      1|    let mut i32_3: i32 = 240i32;
  931|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
  932|      1|    let mut option_0: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_add(duration_3, duration_2);
  933|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(instant_1_ref_0);
  934|      1|    panic!("From RustyUnit with love");
  935|       |}
  936|       |
  937|       |//#[no_coverage]
  938|      1|#[test]
  939|       |#[should_panic]
  940|      1|#[timeout(3000)]
  941|      1|fn rusty_test_8716() {
  942|      1|    rusty_monitor::set_test_id(8716);
  943|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  944|      1|    let mut instant_0_ref_0: &crate::instant::Instant = &mut instant_0;
  945|      1|    let mut u32_0: u32 = 1000u32;
  946|      1|    let mut u8_0: u8 = 3u8;
  947|      1|    let mut u8_1: u8 = 1u8;
  948|      1|    let mut u8_2: u8 = 0u8;
  949|      1|    let mut i32_0: i32 = 65i32;
  950|      1|    let mut i64_0: i64 = 86400i64;
  951|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
  952|      1|    let mut i32_1: i32 = 364i32;
  953|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  954|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
  955|      1|    let mut i64_1: i64 = 0i64;
  956|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
  957|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  958|      1|    let mut u16_0: u16 = 0u16;
  959|      1|    let mut i32_2: i32 = 215i32;
  960|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  961|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  962|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
  963|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  964|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  965|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  966|      1|    let mut u16_1: u16 = 1u16;
  967|      1|    let mut i32_3: i32 = 128i32;
  968|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  969|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
  970|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
  971|      1|    let mut instant_2: crate::instant::Instant = std::clone::Clone::clone(instant_0_ref_0);
  972|      1|    panic!("From RustyUnit with love");
  973|       |}
  974|       |
  975|       |//#[no_coverage]
  976|      1|#[test]
  977|       |#[should_panic]
  978|      1|#[timeout(3000)]
  979|      1|fn rusty_test_848() {
  980|      1|    rusty_monitor::set_test_id(848);
  981|      1|    let mut i64_0: i64 = 3600i64;
  982|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  983|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  984|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  985|      1|    let mut u32_0: u32 = 0u32;
  986|      1|    let mut u8_0: u8 = 59u8;
  987|      1|    let mut u8_1: u8 = 28u8;
  988|      1|    let mut u8_2: u8 = 30u8;
  989|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  990|      1|    let mut i32_0: i32 = 7i32;
  991|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  992|      1|    let mut i32_1: i32 = -3i32;
  993|      1|    let mut u32_1: u32 = 10000u32;
  994|      1|    let mut u8_3: u8 = 3u8;
  995|      1|    let mut u8_4: u8 = 7u8;
  996|      1|    let mut u8_5: u8 = 14u8;
  997|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  998|      1|    let mut i64_2: i64 = 1000i64;
  999|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1000|      1|    let mut i32_2: i32 = 43i32;
 1001|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1002|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_2);
 1003|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_2, time_1);
 1004|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1005|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
 1006|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1007|      1|    let mut duration_3: crate::duration::Duration = std::ops::Sub::sub(instant_2, instant_1);
 1008|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1009|      1|    let mut duration_4_ref_0: &std::time::Duration = &mut duration_4;
 1010|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1011|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1012|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_0);
 1013|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_whole_seconds(i32_1);
 1014|      1|    panic!("From RustyUnit with love");
 1015|       |}
 1016|       |
 1017|       |//#[no_coverage]
 1018|      1|#[test]
 1019|       |#[should_panic]
 1020|      1|#[timeout(3000)]
 1021|      1|fn rusty_test_260() {
 1022|      1|    rusty_monitor::set_test_id(260);
 1023|      1|    let mut i64_0: i64 = 1i64;
 1024|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1025|      1|    let mut i32_0: i32 = -137i32;
 1026|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 1027|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1028|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
 1029|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1030|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_2);
 1031|      1|    let mut i64_1: i64 = 86400i64;
 1032|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1033|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1034|      1|    let mut i64_2: i64 = 2440588i64;
 1035|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1036|      1|    let mut i64_3: i64 = 3600i64;
 1037|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::days(i64_3);
 1038|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1039|      1|    let mut instant_4: crate::instant::Instant = std::ops::Add::add(instant_3, duration_5);
 1040|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1041|      1|    let mut duration_6: crate::duration::Duration = crate::instant::Instant::elapsed(instant_5);
 1042|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1043|      1|    let mut instant_7: crate::instant::Instant = crate::instant::Instant::now();
 1044|      1|    let mut i128_0: i128 = 0i128;
 1045|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1046|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
 1047|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
 1048|      1|    let mut instant_9: crate::instant::Instant = std::ops::Sub::sub(instant_8, duration_8);
 1049|      1|    let mut u16_0: u16 = 19u16;
 1050|      1|    let mut i64_4: i64 = 12i64;
 1051|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 1052|      1|    let mut i64_5: i64 = 1i64;
 1053|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::minutes(i64_5);
 1054|      1|    let mut instant_10: crate::instant::Instant = crate::instant::Instant::now();
 1055|      1|    let mut instant_11: crate::instant::Instant = std::ops::Add::add(instant_10, duration_10);
 1056|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_add(instant_9, duration_6);
 1057|      1|    let mut option_1: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_add(instant_4, duration_4);
 1058|      1|    let mut option_2: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_add(instant_2, duration_3);
 1059|      1|    let mut option_3: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_add(instant_1, duration_0);
 1060|      1|    panic!("From RustyUnit with love");
 1061|       |}
 1062|       |
 1063|       |//#[no_coverage]
 1064|      1|#[test]
 1065|       |#[should_panic]
 1066|      1|#[timeout(3000)]
 1067|      1|fn rusty_test_3731() {
 1068|      1|    rusty_monitor::set_test_id(3731);
 1069|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Saturday;
 1070|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
 1071|      1|    let mut u8_0: u8 = 6u8;
 1072|      1|    let mut i32_0: i32 = 400i32;
 1073|      1|    let mut i64_0: i64 = -54i64;
 1074|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 1075|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1076|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1077|      1|    let mut i8_0: i8 = 9i8;
 1078|      1|    let mut i8_1: i8 = 127i8;
 1079|      1|    let mut i8_2: i8 = 23i8;
 1080|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1081|      1|    let mut i32_1: i32 = 48i32;
 1082|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1083|      1|    let mut u32_0: u32 = 10000000u32;
 1084|      1|    let mut u8_1: u8 = 9u8;
 1085|      1|    let mut u8_2: u8 = 0u8;
 1086|      1|    let mut u8_3: u8 = 9u8;
 1087|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_2, u8_1, u32_0);
 1088|      1|    let mut u16_0: u16 = 59u16;
 1089|      1|    let mut i32_2: i32 = 136i32;
 1090|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1091|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1092|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 1093|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1094|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
 1095|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1096|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1097|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_2);
 1098|      1|    let mut u16_1: u16 = 21u16;
 1099|      1|    let mut u8_4: u8 = 23u8;
 1100|      1|    let mut u8_5: u8 = 4u8;
 1101|      1|    let mut u8_6: u8 = 53u8;
 1102|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_milli(u8_6, u8_5, u8_4, u16_1);
 1103|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1104|      1|    let mut u8_7: u8 = crate::offset_date_time::OffsetDateTime::hour(offsetdatetime_1);
 1105|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_0, u8_0, weekday_1);
 1106|      1|    panic!("From RustyUnit with love");
 1107|       |}
 1108|       |
 1109|       |//#[no_coverage]
 1110|      1|#[test]
 1111|       |#[should_panic]
 1112|      1|#[timeout(3000)]
 1113|      1|fn rusty_test_1903() {
 1114|      1|    rusty_monitor::set_test_id(1903);
 1115|      1|    let mut i64_0: i64 = 60i64;
 1116|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1117|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1118|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1119|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_1);
 1120|      1|    let mut instant_2: std::time::Instant = crate::instant::Instant::into_inner(instant_1);
 1121|      1|    let mut instant_2_ref_0: &std::time::Instant = &mut instant_2;
 1122|      1|    let mut i64_1: i64 = 1i64;
 1123|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1124|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1125|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1126|      1|    let mut instant_4: crate::instant::Instant = std::ops::Add::add(instant_3, duration_3);
 1127|      1|    let mut instant_4_ref_0: &crate::instant::Instant = &mut instant_4;
 1128|      1|    let mut i64_2: i64 = -52i64;
 1129|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1130|      1|    let mut i32_0: i32 = -52i32;
 1131|      1|    let mut i64_3: i64 = 1000i64;
 1132|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_0);
 1133|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::abs(duration_5);
 1134|      1|    let mut u16_0: u16 = 59u16;
 1135|      1|    let mut i32_1: i32 = 1721119i32;
 1136|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1137|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_6);
 1138|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1139|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_4);
 1140|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1141|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1142|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::abs(duration_7);
 1143|      1|    let mut i8_0: i8 = 6i8;
 1144|      1|    let mut i8_1: i8 = 2i8;
 1145|      1|    let mut i8_2: i8 = 2i8;
 1146|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1147|      1|    let mut u32_0: u32 = 38u32;
 1148|      1|    let mut u8_0: u8 = 10u8;
 1149|      1|    let mut u8_1: u8 = 10u8;
 1150|      1|    let mut u8_2: u8 = 86u8;
 1151|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1152|      1|    let mut i32_2: i32 = 252i32;
 1153|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1154|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_0);
 1155|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_0};
 1156|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_8);
 1157|      1|    let mut i64_4: i64 = 15i64;
 1158|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
 1159|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1160|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1161|      1|    let mut instant_7: crate::instant::Instant = crate::instant::Instant::now();
 1162|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
 1163|      1|    let mut duration_10: crate::duration::Duration = std::ops::Sub::sub(instant_8, instant_5);
 1164|      1|    let mut i64_5: i64 = crate::duration::Duration::whole_weeks(duration_10);
 1165|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_1, primitivedatetime_1);
 1166|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(instant_4_ref_0, instant_2_ref_0);
 1167|      1|    panic!("From RustyUnit with love");
 1168|       |}
 1169|       |
 1170|       |//#[no_coverage]
 1171|      1|#[test]
 1172|       |#[should_panic]
 1173|      1|#[timeout(3000)]
 1174|      1|fn rusty_test_937() {
 1175|      1|    rusty_monitor::set_test_id(937);
 1176|      1|    let mut i64_0: i64 = -52i64;
 1177|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1178|      1|    let mut i32_0: i32 = -52i32;
 1179|      1|    let mut i64_1: i64 = 1000i64;
 1180|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1181|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1182|      1|    let mut u16_0: u16 = 59u16;
 1183|      1|    let mut i32_1: i32 = 1721119i32;
 1184|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1185|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1186|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1187|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1188|      1|    let mut i8_0: i8 = 6i8;
 1189|      1|    let mut i8_1: i8 = 2i8;
 1190|      1|    let mut i8_2: i8 = 2i8;
 1191|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1192|      1|    let mut i32_2: i32 = 252i32;
 1193|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 1194|      1|    let mut i64_2: i64 = 15i64;
 1195|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1196|      1|    let mut i64_3: i64 = -29i64;
 1197|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 1198|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_6, duration_5);
 1199|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1200|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1201|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1202|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1203|      1|    let mut duration_8: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_0);
 1204|      1|    let mut i64_4: i64 = crate::duration::Duration::whole_weeks(duration_8);
 1205|      1|    let mut bool_0: bool = crate::duration::Duration::is_negative(duration_7);
 1206|      1|    panic!("From RustyUnit with love");
 1207|       |}
 1208|       |
 1209|       |//#[no_coverage]
 1210|      1|#[test]
 1211|       |#[should_panic]
 1212|      1|#[timeout(3000)]
 1213|      1|fn rusty_test_269() {
 1214|      1|    rusty_monitor::set_test_id(269);
 1215|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1216|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1217|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1218|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1219|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1220|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1221|      1|    let mut instant_2: crate::instant::Instant = std::ops::Add::add(instant_1, duration_2);
 1222|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1223|      1|    let mut instant_4: std::time::Instant = crate::instant::Instant::into_inner(instant_3);
 1224|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1225|      1|    let mut duration_3: crate::duration::Duration = std::ops::Sub::sub(instant_5, instant_4);
 1226|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1227|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1228|      1|    let mut i32_0: i32 = 60i32;
 1229|      1|    let mut i32_1: i32 = 99i32;
 1230|      1|    let mut i64_0: i64 = 0i64;
 1231|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_1);
 1232|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_6, i32_0);
 1233|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1234|      1|    let mut instant_7: crate::instant::Instant = std::ops::Add::add(instant_6, duration_7);
 1235|      1|    let mut i64_1: i64 = 1000000i64;
 1236|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1237|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
 1238|      1|    let mut i128_0: i128 = 1000000000i128;
 1239|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1240|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
 1241|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
 1242|      1|    let mut instant_9: crate::instant::Instant = std::ops::Sub::sub(instant_8, duration_11);
 1243|      1|    let mut instant_10: crate::instant::Instant = std::ops::Sub::sub(instant_9, duration_9);
 1244|      1|    let mut instant_11: crate::instant::Instant = std::ops::Sub::sub(instant_7, duration_5);
 1245|      1|    let mut instant_12: crate::instant::Instant = std::ops::Sub::sub(instant_2, duration_1);
 1246|      1|    panic!("From RustyUnit with love");
 1247|       |}
 1248|       |
 1249|       |//#[no_coverage]
 1250|      1|#[test]
 1251|       |#[should_panic]
 1252|      1|#[timeout(3000)]
 1253|      1|fn rusty_test_267() {
 1254|      1|    rusty_monitor::set_test_id(267);
 1255|      1|    let mut i32_0: i32 = 400i32;
 1256|      1|    let mut i64_0: i64 = 1000000000i64;
 1257|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1258|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1259|      1|    let mut i32_1: i32 = 3i32;
 1260|      1|    let mut i64_1: i64 = 0i64;
 1261|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_1);
 1262|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1263|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1264|      1|    let mut instant_1: crate::instant::Instant = std::ops::Add::add(instant_0, duration_3);
 1265|      1|    let mut i32_2: i32 = 3600i32;
 1266|      1|    let mut i64_2: i64 = 60i64;
 1267|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
 1268|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1269|      1|    let mut i32_3: i32 = 76i32;
 1270|      1|    let mut i32_4: i32 = 86399i32;
 1271|      1|    let mut i64_3: i64 = 45i64;
 1272|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::new(i64_3, i32_4);
 1273|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_6, i32_3);
 1274|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
 1275|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1276|      1|    let mut instant_3: crate::instant::Instant = std::ops::Add::add(instant_2, duration_8);
 1277|      1|    let mut i64_4: i64 = 12i64;
 1278|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::days(i64_4);
 1279|      1|    let mut duration_10: std::time::Duration = crate::duration::Duration::abs_std(duration_9);
 1280|      1|    let mut i64_5: i64 = -36i64;
 1281|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_5);
 1282|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1283|      1|    let mut instant_5: crate::instant::Instant = std::ops::Add::add(instant_4, duration_11);
 1284|      1|    let mut instant_6: crate::instant::Instant = std::ops::Add::add(instant_5, duration_10);
 1285|      1|    let mut instant_7: crate::instant::Instant = std::ops::Add::add(instant_3, duration_5);
 1286|      1|    let mut instant_8: crate::instant::Instant = std::ops::Add::add(instant_1, duration_1);
 1287|      1|    panic!("From RustyUnit with love");
 1288|       |}
 1289|       |
 1290|       |//#[no_coverage]
 1291|      1|#[test]
 1292|       |#[should_panic]
 1293|      1|#[timeout(3000)]
 1294|      1|fn rusty_test_77() {
 1295|      1|    rusty_monitor::set_test_id(77);
 1296|      1|    let mut u32_0: u32 = 10000000u32;
 1297|      1|    let mut u8_0: u8 = 60u8;
 1298|      1|    let mut u8_1: u8 = 4u8;
 1299|      1|    let mut u8_2: u8 = 8u8;
 1300|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1301|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1302|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1303|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1304|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1305|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1306|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1307|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1308|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_0);
 1309|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1310|      1|    let mut u32_1: u32 = 10u32;
 1311|      1|    let mut u8_3: u8 = 52u8;
 1312|      1|    let mut u8_4: u8 = 28u8;
 1313|      1|    let mut u8_5: u8 = 11u8;
 1314|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1315|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1316|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_4, time_2);
 1317|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_5);
 1318|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_1};
 1319|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1320|      1|    let mut i8_0: i8 = 24i8;
 1321|      1|    let mut i8_1: i8 = -46i8;
 1322|      1|    let mut i8_2: i8 = 24i8;
 1323|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1324|      1|    let mut i64_0: i64 = 1000i64;
 1325|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1326|      1|    let mut f32_0: f32 = 26.052203f32;
 1327|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1328|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_1);
 1329|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1330|      1|    let mut offsetdatetime_7: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_6, duration_3);
 1331|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_7);
 1332|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1333|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_1);
 1334|      1|    let mut time_3: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1335|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1336|      1|    let mut instant_3: std::time::Instant = crate::instant::Instant::into_inner(instant_2);
 1337|      1|    let mut instant_3_ref_0: &std::time::Instant = &mut instant_3;
 1338|      1|    let mut i32_0: i32 = 263i32;
 1339|      1|    let mut i64_1: i64 = 12i64;
 1340|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
 1341|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1342|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1343|      1|    let mut instant_5: crate::instant::Instant = std::ops::Add::add(instant_4, duration_5);
 1344|      1|    let mut instant_5_ref_0: &crate::instant::Instant = &mut instant_5;
 1345|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(instant_5_ref_0, instant_3_ref_0);
 1346|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::time::Time::as_hms_micro(time_3);
 1347|      1|    let mut tuple_1: (u8, u8, u8) = crate::primitive_date_time::PrimitiveDateTime::as_hms(primitivedatetime_1);
 1348|      1|    panic!("From RustyUnit with love");
 1349|       |}
 1350|       |
 1351|       |//#[no_coverage]
 1352|      1|#[test]
 1353|       |#[should_panic]
 1354|      1|#[timeout(3000)]
 1355|      1|fn rusty_test_1696() {
 1356|      1|    rusty_monitor::set_test_id(1696);
 1357|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1358|      1|    let mut instant_0_ref_0: &crate::instant::Instant = &mut instant_0;
 1359|      1|    let mut i32_0: i32 = 36525i32;
 1360|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1361|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1362|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
 1363|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1364|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1365|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1366|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(instant_2, instant_1);
 1367|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1368|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1369|      1|    let mut i32_1: i32 = 48i32;
 1370|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1371|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_0);
 1372|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1373|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_2);
 1374|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1375|      1|    let mut i64_0: i64 = 3600i64;
 1376|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1377|      1|    let mut u16_0: u16 = 60u16;
 1378|      1|    let mut i32_2: i32 = 387i32;
 1379|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1380|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_add(date_3, duration_1);
 1381|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_0};
 1382|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_0);
 1383|      1|    let mut i128_0: i128 = 0i128;
 1384|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 1385|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1386|      1|    let mut i64_1: i64 = 24i64;
 1387|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1388|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
 1389|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1390|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1391|      1|    let mut i64_2: i64 = 1000i64;
 1392|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1393|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_6, duration_5);
 1394|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1395|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1396|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 1397|      1|    let mut result_0: std::result::Result<crate::offset_date_time::OffsetDateTime, crate::error::component_range::ComponentRange> = crate::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos(i128_0);
 1398|      1|    let mut i32_3: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_1);
 1399|      1|    let mut instant_6_ref_0: &crate::instant::Instant = &mut instant_6;
 1400|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(instant_6_ref_0, instant_0_ref_0);
 1401|      1|    panic!("From RustyUnit with love");
 1402|       |}
 1403|       |
 1404|       |//#[no_coverage]
 1405|      1|#[test]
 1406|       |#[should_panic]
 1407|      1|#[timeout(3000)]
 1408|      1|fn rusty_test_513() {
 1409|      1|    rusty_monitor::set_test_id(513);
 1410|      1|    let mut u32_0: u32 = 100u32;
 1411|      1|    let mut i64_0: i64 = 253402300799i64;
 1412|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1413|      1|    let mut i32_0: i32 = 336i32;
 1414|      1|    let mut i64_1: i64 = 2147483647i64;
 1415|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1416|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1417|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1418|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_2);
 1419|      1|    let mut instant_1_ref_0: &mut crate::instant::Instant = &mut instant_1;
 1420|      1|    panic!("From RustyUnit with love");
 1421|       |}
 1422|       |
 1423|       |//#[no_coverage]
 1424|      1|#[test]
 1425|       |#[should_panic]
 1426|      1|#[timeout(3000)]
 1427|      1|fn rusty_test_8520() {
 1428|      1|    rusty_monitor::set_test_id(8520);
 1429|      1|    let mut i8_0: i8 = 24i8;
 1430|      1|    let mut i8_1: i8 = 60i8;
 1431|      1|    let mut i8_2: i8 = -9i8;
 1432|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1433|      1|    let mut i8_3: i8 = 4i8;
 1434|      1|    let mut i8_4: i8 = 6i8;
 1435|      1|    let mut i8_5: i8 = -50i8;
 1436|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1437|      1|    let mut i32_0: i32 = 314i32;
 1438|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1439|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1440|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_1);
 1441|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_0);
 1442|      1|    let mut u8_0: u8 = 7u8;
 1443|      1|    let mut i32_1: i32 = 0i32;
 1444|      1|    let mut i64_0: i64 = -52i64;
 1445|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1446|      1|    let mut i32_2: i32 = -52i32;
 1447|      1|    let mut i64_1: i64 = 1000i64;
 1448|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_2);
 1449|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1450|      1|    let mut u16_0: u16 = 59u16;
 1451|      1|    let mut i32_3: i32 = 1721119i32;
 1452|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1453|      1|    let mut i8_6: i8 = 6i8;
 1454|      1|    let mut i8_7: i8 = 2i8;
 1455|      1|    let mut i8_8: i8 = 2i8;
 1456|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1457|      1|    let mut i32_4: i32 = 252i32;
 1458|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_4};
 1459|      1|    let mut i8_9: i8 = 89i8;
 1460|      1|    let mut i8_10: i8 = 5i8;
 1461|      1|    let mut i8_11: i8 = 0i8;
 1462|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
 1463|      1|    let mut i64_2: i64 = -29i64;
 1464|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 1465|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1466|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1467|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1468|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1469|      1|    let mut duration_4: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_0);
 1470|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_3);
 1471|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_iso_week_date(i32_1, u8_0, weekday_0);
 1472|      1|    let mut i16_0: i16 = crate::utc_offset::UtcOffset::whole_minutes(utcoffset_0);
 1473|      1|    panic!("From RustyUnit with love");
 1474|       |}
 1475|       |
 1476|       |//#[no_coverage]
 1477|      1|#[test]
 1478|       |#[should_panic]
 1479|      1|#[timeout(3000)]
 1480|      1|fn rusty_test_8432() {
 1481|      1|    rusty_monitor::set_test_id(8432);
 1482|      1|    let mut i64_0: i64 = -54i64;
 1483|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 1484|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1485|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1486|      1|    let mut i8_0: i8 = 9i8;
 1487|      1|    let mut i8_1: i8 = 127i8;
 1488|      1|    let mut i8_2: i8 = 23i8;
 1489|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1490|      1|    let mut i32_0: i32 = 48i32;
 1491|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1492|      1|    let mut u32_0: u32 = 10000000u32;
 1493|      1|    let mut u8_0: u8 = 9u8;
 1494|      1|    let mut u8_1: u8 = 0u8;
 1495|      1|    let mut u8_2: u8 = 9u8;
 1496|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1497|      1|    let mut u16_0: u16 = 59u16;
 1498|      1|    let mut i32_1: i32 = 136i32;
 1499|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1500|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1501|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 1502|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1503|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
 1504|      1|    let mut i128_0: i128 = 1000000000i128;
 1505|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1506|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1507|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1508|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1509|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_4);
 1510|      1|    let mut u16_1: u16 = 21u16;
 1511|      1|    let mut u8_3: u8 = 23u8;
 1512|      1|    let mut u8_4: u8 = 4u8;
 1513|      1|    let mut u8_5: u8 = 53u8;
 1514|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_milli(u8_5, u8_4, u8_3, u16_1);
 1515|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1516|      1|    let mut instant_2: crate::instant::Instant = std::ops::Add::add(instant_1, duration_3);
 1517|      1|    let mut u8_6: u8 = crate::offset_date_time::OffsetDateTime::hour(offsetdatetime_1);
 1518|      1|    panic!("From RustyUnit with love");
 1519|       |}
 1520|       |
 1521|       |//#[no_coverage]
 1522|      1|#[test]
 1523|       |#[should_panic]
 1524|      1|#[timeout(3000)]
 1525|      1|fn rusty_test_3352() {
 1526|      1|    rusty_monitor::set_test_id(3352);
 1527|      1|    let mut i32_0: i32 = 1000i32;
 1528|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1529|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1530|      1|    let mut instant_0_ref_0: &crate::instant::Instant = &mut instant_0;
 1531|      1|    let mut i64_0: i64 = -106i64;
 1532|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1533|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1534|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1535|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1536|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(instant_3, instant_1);
 1537|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1538|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1539|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1540|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
 1541|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1542|      1|    let mut i32_1: i32 = 86399i32;
 1543|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1544|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1545|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_1);
 1546|      1|    let mut u16_0: u16 = 59u16;
 1547|      1|    let mut i32_2: i32 = -89i32;
 1548|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1549|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_3);
 1550|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_2, time_0);
 1551|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1552|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 1553|      1|    let mut u8_0: u8 = 1u8;
 1554|      1|    let mut u32_0: u32 = 89u32;
 1555|      1|    let mut u8_1: u8 = 2u8;
 1556|      1|    let mut u8_2: u8 = 85u8;
 1557|      1|    let mut u8_3: u8 = 8u8;
 1558|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_2, u8_1, u32_0);
 1559|      1|    let mut u16_1: u16 = 7u16;
 1560|      1|    let mut i32_3: i32 = 342i32;
 1561|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 1562|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_1);
 1563|      1|    let mut month_0: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_1);
 1564|      1|    let mut i32_4: i32 = 43i32;
 1565|      1|    let mut i64_1: i64 = 253402300799i64;
 1566|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1567|      1|    let mut i64_2: i64 = 12i64;
 1568|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1569|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1570|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1571|      1|    let mut instant_7: crate::instant::Instant = std::ops::Add::add(instant_6, duration_6);
 1572|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1573|      1|    let mut u32_1: u32 = crate::offset_date_time::OffsetDateTime::nanosecond(offsetdatetime_3);
 1574|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_sub(instant_7, duration_4);
 1575|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_4, month_0, u8_0);
 1576|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::Next;
 1577|      1|    let mut i8_0: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_0);
 1578|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
 1579|      1|    let mut instant_5_ref_0: &crate::instant::Instant = &mut instant_5;
 1580|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(instant_5_ref_0, instant_0_ref_0);
 1581|      1|    let mut i32_5: i32 = crate::date::Date::year(date_0);
 1582|      1|    panic!("From RustyUnit with love");
 1583|       |}
 1584|       |
 1585|       |//#[no_coverage]
 1586|      1|#[test]
 1587|       |#[should_panic]
 1588|      1|#[timeout(3000)]
 1589|      1|fn rusty_test_901() {
 1590|      1|    rusty_monitor::set_test_id(901);
 1591|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 1592|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1593|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1594|      1|    let mut i8_0: i8 = 9i8;
 1595|      1|    let mut i8_1: i8 = 127i8;
 1596|      1|    let mut i8_2: i8 = 23i8;
 1597|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1598|      1|    let mut i32_0: i32 = 48i32;
 1599|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1600|      1|    let mut u32_0: u32 = 10000000u32;
 1601|      1|    let mut u8_0: u8 = 9u8;
 1602|      1|    let mut u8_1: u8 = 0u8;
 1603|      1|    let mut u8_2: u8 = 9u8;
 1604|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1605|      1|    let mut u16_0: u16 = 59u16;
 1606|      1|    let mut i32_1: i32 = 136i32;
 1607|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1608|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1609|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 1610|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1611|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_1);
 1612|      1|    let mut i128_0: i128 = 1000000000i128;
 1613|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1614|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1615|      1|    let mut i64_0: i64 = 9223372036854775807i64;
 1616|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1617|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1618|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_4);
 1619|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1620|      1|    let mut instant_2: crate::instant::Instant = std::ops::Add::add(instant_1, duration_3);
 1621|      1|    let mut u8_3: u8 = crate::offset_date_time::OffsetDateTime::hour(offsetdatetime_1);
 1622|      1|    panic!("From RustyUnit with love");
 1623|       |}
 1624|       |
 1625|       |//#[no_coverage]
 1626|      1|#[test]
 1627|       |#[should_panic]
 1628|      1|#[timeout(3000)]
 1629|      1|fn rusty_test_2079() {
 1630|      1|    rusty_monitor::set_test_id(2079);
 1631|      1|    let mut i32_0: i32 = 172i32;
 1632|      1|    let mut i64_0: i64 = 3600i64;
 1633|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1634|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1635|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1636|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_1);
 1637|      1|    let mut instant_1_ref_0: &crate::instant::Instant = &mut instant_1;
 1638|      1|    let mut i64_1: i64 = 3600i64;
 1639|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1640|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1641|      1|    let mut instant_3: crate::instant::Instant = std::ops::Sub::sub(instant_2, duration_2);
 1642|      1|    let mut instant_3_ref_0: &crate::instant::Instant = &mut instant_3;
 1643|      1|    let mut u32_0: u32 = 1000u32;
 1644|      1|    let mut u8_0: u8 = 3u8;
 1645|      1|    let mut u8_1: u8 = 1u8;
 1646|      1|    let mut u8_2: u8 = 12u8;
 1647|      1|    let mut i32_1: i32 = 65i32;
 1648|      1|    let mut i64_2: i64 = 86400i64;
 1649|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_1);
 1650|      1|    let mut i32_2: i32 = 364i32;
 1651|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1652|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_3);
 1653|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1654|      1|    let mut u16_0: u16 = 999u16;
 1655|      1|    let mut i32_3: i32 = 215i32;
 1656|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1657|      1|    let mut i32_4: i32 = -60i32;
 1658|      1|    let mut i64_3: i64 = 604800i64;
 1659|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_4);
 1660|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1661|      1|    let mut u16_1: u16 = 1u16;
 1662|      1|    let mut i32_5: i32 = 128i32;
 1663|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_1);
 1664|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
 1665|      1|    let mut offsetdatetime_0_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_0;
 1666|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(instant_3_ref_0, instant_1_ref_0);
 1667|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1668|      1|    panic!("From RustyUnit with love");
 1669|       |}
 1670|       |
 1671|       |//#[no_coverage]
 1672|      1|#[test]
 1673|       |#[should_panic]
 1674|      1|#[timeout(3000)]
 1675|      1|fn rusty_test_7816() {
 1676|      1|    rusty_monitor::set_test_id(7816);
 1677|      1|    let mut i64_0: i64 = 12i64;
 1678|      1|    let mut i8_0: i8 = 24i8;
 1679|      1|    let mut i8_1: i8 = 60i8;
 1680|      1|    let mut i8_2: i8 = -9i8;
 1681|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1682|      1|    let mut i8_3: i8 = 4i8;
 1683|      1|    let mut i8_4: i8 = 6i8;
 1684|      1|    let mut i8_5: i8 = -50i8;
 1685|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1686|      1|    let mut i32_0: i32 = 314i32;
 1687|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1688|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1689|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_1);
 1690|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_0);
 1691|      1|    let mut i32_1: i32 = 0i32;
 1692|      1|    let mut i64_1: i64 = -52i64;
 1693|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1694|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1695|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1696|      1|    let mut u16_0: u16 = 59u16;
 1697|      1|    let mut i32_2: i32 = 1721119i32;
 1698|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1699|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_2);
 1700|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1701|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_1, duration_0);
 1702|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1703|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1704|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1705|      1|    let mut i8_6: i8 = 6i8;
 1706|      1|    let mut i8_7: i8 = 2i8;
 1707|      1|    let mut i8_8: i8 = 2i8;
 1708|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1709|      1|    let mut i32_3: i32 = 252i32;
 1710|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_3};
 1711|      1|    let mut i8_9: i8 = 89i8;
 1712|      1|    let mut i8_10: i8 = 5i8;
 1713|      1|    let mut i8_11: i8 = 0i8;
 1714|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
 1715|      1|    let mut i64_2: i64 = 15i64;
 1716|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1717|      1|    let mut i64_3: i64 = -29i64;
 1718|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 1719|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_6, duration_5);
 1720|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1721|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1722|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1723|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1724|      1|    let mut duration_8: crate::duration::Duration = std::ops::Sub::sub(instant_0, instant_1);
 1725|      1|    panic!("From RustyUnit with love");
 1726|       |}
 1727|       |
 1728|       |//#[no_coverage]
 1729|      1|#[test]
 1730|       |#[should_panic]
 1731|      1|#[timeout(3000)]
 1732|      1|fn rusty_test_265() {
 1733|      1|    rusty_monitor::set_test_id(265);
 1734|      1|    let mut i64_0: i64 = 1000i64;
 1735|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1736|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1737|      1|    let mut instant_1: crate::instant::Instant = std::ops::Sub::sub(instant_0, duration_0);
 1738|      1|    let mut instant_2: std::time::Instant = crate::instant::Instant::into_inner(instant_1);
 1739|      1|    let mut i32_0: i32 = 54i32;
 1740|      1|    let mut i64_1: i64 = 24i64;
 1741|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1742|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
 1743|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1744|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1745|      1|    let mut instant_4: crate::instant::Instant = std::ops::Sub::sub(instant_3, duration_3);
 1746|      1|    let mut i64_2: i64 = 0i64;
 1747|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1748|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1749|      1|    let mut instant_6: crate::instant::Instant = std::ops::Sub::sub(instant_5, duration_4);
 1750|      1|    let mut instant_7: std::time::Instant = crate::instant::Instant::into_inner(instant_6);
 1751|      1|    let mut i64_3: i64 = 604800i64;
 1752|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 1753|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1754|      1|    let mut instant_8: crate::instant::Instant = crate::instant::Instant::now();
 1755|      1|    let mut instant_9: crate::instant::Instant = std::ops::Sub::sub(instant_8, duration_6);
 1756|      1|    let mut i64_4: i64 = 129i64;
 1757|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
 1758|      1|    let mut instant_10: crate::instant::Instant = crate::instant::Instant::now();
 1759|      1|    let mut instant_11: crate::instant::Instant = std::ops::Add::add(instant_10, duration_7);
 1760|      1|    let mut instant_12: std::time::Instant = crate::instant::Instant::into_inner(instant_11);
 1761|      1|    let mut instant_13: crate::instant::Instant = crate::instant::Instant::now();
 1762|      1|    let mut duration_8: crate::duration::Duration = std::ops::Sub::sub(instant_13, instant_12);
 1763|      1|    let mut duration_9: crate::duration::Duration = std::ops::Sub::sub(instant_9, instant_7);
 1764|      1|    let mut duration_10: crate::duration::Duration = std::ops::Sub::sub(instant_4, instant_2);
 1765|      1|    panic!("From RustyUnit with love");
 1766|       |}
 1767|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/lib.rs:
    1|      1|//! # Feature flags//! # Feature flags
    2|       |//!
    3|       |//! This crate exposes a number of features. These can be enabled or disabled as shown
    4|       |//! [in Cargo's documentation](https://doc.rust-lang.org/cargo/reference/features.html). Features
    5|       |//! are _disabled_ by default unless otherwise noted.
    6|       |//!
    7|       |//! Reliance on a given feature is always indicated alongside the item definition.
    8|       |//!
    9|       |//! - `std` (_enabled by default, implicitly enables `alloc`_)
   10|       |//!
   11|       |//!   This enables a number of features that depend on the standard library.
   12|       |//!
   13|       |//! - `alloc` (_enabled by default via `std`_)
   14|       |//!
   15|       |//!   Enables a number of features that require the ability to dynamically allocate memory.
   16|       |//!
   17|       |//! - `macros`
   18|       |//!
   19|       |//!   Enables macros that provide compile-time verification of values and intuitive syntax.
   20|       |//!
   21|       |//! - `formatting` (_implicitly enables `std`_)
   22|       |//!
   23|       |//!   Enables formatting of most structs.
   24|       |//!
   25|       |//! - `parsing`
   26|       |//!
   27|       |//!   Enables parsing of most structs.
   28|       |//!
   29|       |//! - `local-offset` (_implicitly enables `std`_)
   30|       |//!
   31|       |//!   This feature enables a number of methods that allow obtaining the system's UTC offset.
   32|       |//!
   33|       |//! - `large-dates`
   34|       |//!
   35|       |//!   By default, only years within the ±9999 range (inclusive) are supported. If you need support
   36|       |//!   for years outside this range, consider enabling this feature; the supported range will be
   37|       |//!   increased to ±999,999.
   38|       |//!
   39|       |//!   Note that enabling this feature has some costs, as it means forgoing some optimizations.
   40|       |//!   Ambiguities may be introduced when parsing that would not otherwise exist.
   41|       |//!
   42|       |//!   If you are using this feature, **please leave a comment**
   43|       |//!   [on this discussion](https://github.com/time-rs/time/discussions/306) with your use case. If
   44|       |//!   there is not sufficient demand for this feature, it will be dropped in a future release.
   45|       |//!
   46|       |//! - `serde`
   47|       |//!
   48|       |//!   Enables [serde](https://docs.rs/serde) support for all types except [`Instant`].
   49|       |//!
   50|       |//! - `serde-human-readable` (_implicitly enables `serde`, `formatting`, and `parsing`_)
   51|       |//!
   52|       |//!   Allows serde representations to use a human-readable format. This is determined by the
   53|       |//!   serializer, not the user. If this feature is not enabled or if the serializer requests a
   54|       |//!   non-human-readable format, a format optimized for binary representation will be used.
   55|       |//!
   56|       |//!   Libraries should never enable this feature, as the decision of what format to use should be up
   57|       |//!   to the user.
   58|       |//!
   59|       |//! - `serde-well-known` (_implicitly enables `serde/alloc`, `formatting`, and `parsing`_)
   60|       |//!
   61|       |//!   Enables support for serializing and deserializing well-known formats using serde's
   62|       |//!   [`#[with]` attribute](https://serde.rs/field-attrs.html#with).
   63|       |//!
   64|       |//! - `rand`
   65|       |//!
   66|       |//!   Enables [rand](https://docs.rs/rand) support for all types.
   67|       |//!
   68|       |//! - `quickcheck` (_implicitly enables `alloc`_)
   69|       |//!
   70|       |//!   Enables [quickcheck](https://docs.rs/quickcheck) support for all types except [`Instant`].
   71|       |//!
   72|       |//! One pseudo-feature flag that is only available to end users is the `unsound_local_offset` cfg.
   73|       |//! As the name indicates, using the feature is unsound, and [may cause unexpected segmentation
   74|       |//! faults](https://github.com/time-rs/time/issues/293). Unlike other flags, this is deliberately
   75|       |//! only available to end users; this is to ensure that a user doesn't have unsound behavior without
   76|       |//! knowing it. To enable this behavior, you must use `RUSTFLAGS="--cfg unsound_local_offset" cargo
   77|       |//! build` or similar. Note: This flag is _not tested anywhere_, including in the regular test of
   78|       |//! the powerset of all feature flags. Use at your own risk. Without this flag, any method that
   79|       |//! requires the local offset will return the `Err` variant.
   80|       |#![feature(no_coverage)]
   81|       |
   82|       |#![doc(html_playground_url = "https://play.rust-lang.org")]
   83|       |#![cfg_attr(__time_03_docs, feature(doc_cfg, doc_auto_cfg, doc_notable_trait))]
   84|       |#![cfg_attr(
   85|       |    __time_03_docs,
   86|       |    deny(rustdoc::broken_intra_doc_links, rustdoc::private_intra_doc_links)
   87|       |)]
   88|       |#![cfg_attr(not(feature = "std"), no_std)]
   89|       |#![deny(
   90|       |    anonymous_parameters,
   91|       |    clippy::all,
   92|       |    const_err,
   93|       |    illegal_floating_point_literal_pattern,
   94|       |    late_bound_lifetime_arguments,
   95|       |    path_statements,
   96|       |    patterns_in_fns_without_body,
   97|       |    rust_2018_idioms,
   98|       |    trivial_casts,
   99|       |    trivial_numeric_casts,
  100|       |    unreachable_pub,
  101|       |    unsafe_code,
  102|       |    unsafe_op_in_unsafe_fn,
  103|       |    unused_extern_crates
  104|       |)]
  105|       |#![warn(
  106|       |    clippy::dbg_macro,
  107|       |    clippy::decimal_literal_representation,
  108|       |    clippy::get_unwrap,
  109|       |    clippy::missing_docs_in_private_items,
  110|       |    clippy::nursery,
  111|       |    clippy::print_stdout,
  112|       |    clippy::todo,
  113|       |    clippy::unimplemented,
  114|       |    clippy::unnested_or_patterns,
  115|       |    clippy::unwrap_in_result,
  116|       |    clippy::unwrap_used,
  117|       |    clippy::use_debug,
  118|       |    deprecated_in_future,
  119|       |    missing_copy_implementations,
  120|       |    missing_debug_implementations,
  121|       |    unused_qualifications,
  122|       |    variant_size_differences
  123|       |)]
  124|       |#![allow(clippy::redundant_pub_crate)]
  125|       |#![doc(html_favicon_url = "https://avatars0.githubusercontent.com/u/55999857")]
  126|       |#![doc(html_logo_url = "https://avatars0.githubusercontent.com/u/55999857")]
  127|       |#![doc(test(attr(deny(warnings))))]
  128|       |
  129|       |#[allow(unused_extern_crates)]
  130|       |#[cfg(feature = "alloc")]
  131|       |extern crate alloc;
  132|       |pub mod rusty_monitor;
  133|       |use ntest::timeout;
  134|       |// region: macros
  135|       |/// Helper macro for easily implementing `OpAssign`.
  136|       |macro_rules! __impl_assign {
  137|       |    ($sym:tt $op:ident $fn:ident $target:ty : $($(#[$attr:meta])* $t:ty),+) => {$(
  138|       |        #[allow(unused_qualifications)]
  139|       |        $(#[$attr])*
  140|       |        impl core::ops::$op<$t> for $target {
  141|      0|            fn $fn(&mut self, rhs: $t) {
  142|      0|                *self = *self $sym rhs;
  143|      0|            }
  ------------------
  | Unexecuted instantiation: _RNvXsq_NtCsfCqjlVYlG65_4time4timeNtB5_4TimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsr_NtCsfCqjlVYlG65_4time4timeNtB5_4TimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtBM_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsp_NtCsfCqjlVYlG65_4time4timeNtB5_4TimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtBM_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1a_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssigntE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXso_NtCsfCqjlVYlG65_4time4timeNtB5_4TimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXss_NtCsfCqjlVYlG65_4time16offset_date_timeNtNtCs8aUVBhK3tAW_3std4time10SystemTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsj_NtCsfCqjlVYlG65_4time19primitive_date_timeNtB5_17PrimitiveDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsp_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsj_NtCsfCqjlVYlG65_4time4dateNtB5_4DateINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtBM_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsr_NtCsfCqjlVYlG65_4time16offset_date_timeNtNtCs8aUVBhK3tAW_3std4time10SystemTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsv_NtCsfCqjlVYlG65_4time7instantNtNtCs8aUVBhK3tAW_3std4time7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXss_NtCsfCqjlVYlG65_4time7instantNtNtCs8aUVBhK3tAW_3std4time7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsK_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationNtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssign10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsi_NtCsfCqjlVYlG65_4time19primitive_date_timeNtB5_17PrimitiveDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB1g_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsL_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtBU_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1c_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignfE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXsr_NtCsfCqjlVYlG65_4time7instantNtB5_7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtBS_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1l_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssigndE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXso_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB1a_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsh_NtCsfCqjlVYlG65_4time19primitive_date_timeNtB5_17PrimitiveDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsk_NtCsfCqjlVYlG65_4time19primitive_date_timeNtB5_17PrimitiveDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB1g_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsq_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB1a_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsn_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXs17_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignsE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1j_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignmE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs19_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignhE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1f_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignsE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1h_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignhE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXsN_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtBU_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXs18_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignlE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1e_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignaE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1k_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignfE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1g_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssignlE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs16_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignaE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1i_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9DivAssigntE10div_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1b_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssignmE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXsM_NtCsfCqjlVYlG65_4time8durationNtB5_8DurationNtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssign10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXs1d_NtCsfCqjlVYlG65_4time8durationNtB6_8DurationINtNtNtCs3mU7IzMcIbP_4core3ops5arith9MulAssigndE10mul_assign
  ------------------
  | Unexecuted instantiation: _RNvXsq_NtCsfCqjlVYlG65_4time7instantNtB5_7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXst_NtCsfCqjlVYlG65_4time7instantNtB5_7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsu_NtCsfCqjlVYlG65_4time7instantNtB5_7InstantINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtBS_4time8DurationE10sub_assign
  ------------------
  | Unexecuted instantiation: _RNvXsh_NtCsfCqjlVYlG65_4time4dateNtB5_4DateINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtBM_4time8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsg_NtCsfCqjlVYlG65_4time4dateNtB5_4DateINtNtNtCs3mU7IzMcIbP_4core3ops5arith9AddAssignNtNtB7_8duration8DurationE10add_assign
  ------------------
  | Unexecuted instantiation: _RNvXsi_NtCsfCqjlVYlG65_4time4dateNtB5_4DateINtNtNtCs3mU7IzMcIbP_4core3ops5arith9SubAssignNtNtB7_8duration8DurationE10sub_assign
  ------------------
  144|       |        }
  145|       |    )+};
  146|       |}
  147|       |
  148|       |/// Implement `AddAssign` for the provided types.
  149|       |macro_rules! impl_add_assign {
  150|       |    ($target:ty : $($(#[$attr:meta])* $t:ty),+ $(,)?) => {
  151|       |        __impl_assign!(+ AddAssign add_assign $target : $($(#[$attr])* $t),+);
  152|       |    };
  153|       |}
  154|       |
  155|       |/// Implement `SubAssign` for the provided types.
  156|       |macro_rules! impl_sub_assign {
  157|       |    ($target:ty : $($(#[$attr:meta])* $t:ty),+ $(,)?) => {
  158|       |        __impl_assign!(- SubAssign sub_assign $target : $($(#[$attr])* $t),+);
  159|       |    };
  160|       |}
  161|       |
  162|       |/// Implement `MulAssign` for the provided types.
  163|       |macro_rules! impl_mul_assign {
  164|       |    ($target:ty : $($(#[$attr:meta])* $t:ty),+ $(,)?) => {
  165|       |        __impl_assign!(* MulAssign mul_assign $target : $($(#[$attr])* $t),+);
  166|       |    };
  167|       |}
  168|       |
  169|       |/// Implement `DivAssign` for the provided types.
  170|       |macro_rules! impl_div_assign {
  171|       |    ($target:ty : $($(#[$attr:meta])* $t:ty),+ $(,)?) => {
  172|       |        __impl_assign!(/ DivAssign div_assign $target : $($(#[$attr])* $t),+);
  173|       |    };
  174|       |}
  175|       |
  176|       |/// Division of integers, rounding the resulting value towards negative infinity.
  177|       |macro_rules! div_floor {
  178|       |    ($a:expr, $b:expr) => {{
  179|       |        let _a = $a;
  180|       |        let _b = $b;
  181|       |
  182|       |        let (_quotient, _remainder) = (_a / _b, _a % _b);
  183|       |
  184|       |        if (_remainder > 0 && _b < 0) || (_remainder < 0 && _b > 0) {
  185|       |            _quotient - 1
  186|       |        } else {
  187|       |            _quotient
  188|       |        }
  189|       |    }};
  190|       |}
  191|       |
  192|       |/// Cascade an out-of-bounds value.
  193|       |macro_rules! cascade {
  194|       |    (@ordinal ordinal) => {};
  195|       |    (@year year) => {};
  196|       |
  197|       |    // Cascade an out-of-bounds value from "from" to "to".
  198|       |    ($from:ident in $min:literal.. $max:literal => $to:tt) => {
  199|       |        #[allow(unused_comparisons, unused_assignments)]
  200|       |        if $from >= $max {
  201|       |            $from -= $max - $min;
  202|       |            $to += 1;
  203|       |        } else if $from < $min {
  204|       |            $from += $max - $min;
  205|       |            $to -= 1;
  206|       |        }
  207|       |    };
  208|       |
  209|       |    // Special case the ordinal-to-year cascade, as it has different behavior.
  210|       |    ($ordinal:ident => $year:ident) => {
  211|       |        // We need to actually capture the idents. Without this, macro hygiene causes errors.
  212|       |        cascade!(@ordinal $ordinal);
  213|       |        cascade!(@year $year);
  214|       |        #[allow(unused_assignments)]
  215|       |        if $ordinal > crate::util::days_in_year($year) {
  216|       |            $year += 1;
  217|       |            $ordinal = 1;
  218|       |        } else if $ordinal == 0 {
  219|       |            $year -= 1;
  220|       |            $ordinal = crate::util::days_in_year($year);
  221|       |        }
  222|       |    };
  223|       |}
  224|       |
  225|       |/// Returns `Err(error::ComponentRange)` if the value is not in range.
  226|       |macro_rules! ensure_value_in_range {
  227|       |    ($value:ident in $start:expr => $end:expr) => {{
  228|       |        let _start = $start;
  229|       |        let _end = $end;
  230|       |        #[allow(trivial_numeric_casts, unused_comparisons)]
  231|       |        if $value < _start || $value > _end {
  232|       |            return Err(crate::error::ComponentRange {
  233|       |                name: stringify!($value),
  234|       |                minimum: _start as _,
  235|       |                maximum: _end as _,
  236|       |                value: $value as _,
  237|       |                conditional_range: false,
  238|       |            });
  239|       |        }
  240|       |    }};
  241|       |
  242|       |    ($value:ident conditionally in $start:expr => $end:expr) => {{
  243|       |        let _start = $start;
  244|       |        let _end = $end;
  245|       |        #[allow(trivial_numeric_casts, unused_comparisons)]
  246|       |        if $value < _start || $value > _end {
  247|       |            return Err(crate::error::ComponentRange {
  248|       |                name: stringify!($value),
  249|       |                minimum: _start as _,
  250|       |                maximum: _end as _,
  251|       |                value: $value as _,
  252|       |                conditional_range: true,
  253|       |            });
  254|       |        }
  255|       |    }};
  256|       |}
  257|       |
  258|       |/// Try to unwrap an expression, returning if not possible.
  259|       |///
  260|       |/// This is similar to the `?` operator, but does not perform `.into()`. Because of this, it is
  261|       |/// usable in `const` contexts.
  262|       |macro_rules! const_try {
  263|       |    ($e:expr) => {
  264|       |        match $e {
  265|       |            Ok(value) => value,
  266|       |            Err(error) => return Err(error),
  267|       |        }
  268|       |    };
  269|       |}
  270|       |
  271|       |/// Try to unwrap an expression, returning if not possible.
  272|       |///
  273|       |/// This is similar to the `?` operator, but is usable in `const` contexts.
  274|       |macro_rules! const_try_opt {
  275|       |    ($e:expr) => {
  276|       |        match $e {
  277|       |            Some(value) => value,
  278|       |            None => return None,
  279|       |        }
  280|       |    };
  281|       |}
  282|       |// endregion macros
  283|       |
  284|       |pub mod date;
  285|       |pub mod duration;
  286|       |pub mod error;
  287|       |pub mod ext;
  288|       |#[cfg(any(feature = "formatting", feature = "parsing"))]
  289|       |pub mod format_description;
  290|       |#[cfg(feature = "formatting")]
  291|       |pub mod formatting;
  292|       |#[cfg(feature = "std")]
  293|       |pub mod instant;
  294|       |#[cfg(feature = "macros")]
  295|       |pub mod macros;
  296|       |pub mod month;
  297|       |pub mod offset_date_time;
  298|       |#[cfg(feature = "parsing")]
  299|       |pub mod parsing;
  300|       |pub mod primitive_date_time;
  301|       |#[cfg(feature = "quickcheck")]
  302|       |#[cfg_attr(__time_03_docs, doc(cfg(feature = "quickcheck")))]
  303|       |pub mod quickcheck;
  304|       |#[cfg(feature = "rand")]
  305|       |#[cfg_attr(__time_03_docs, doc(cfg(feature = "rand")))]
  306|       |pub mod rand;
  307|       |#[cfg(feature = "serde")]
  308|       |#[cfg_attr(__time_03_docs, doc(cfg(feature = "serde")))]
  309|       |#[allow(missing_copy_implementations, missing_debug_implementations)]
  310|       |pub mod serde;
  311|       |pub mod sys;
  312|       |//#[cfg(test)]
  313|       |//pub mod tests;
  314|       |pub mod time;
  315|       |pub mod utc_offset;
  316|       |pub mod util;
  317|       |pub mod weekday;
  318|       |
  319|       |pub use crate::date::Date;
  320|       |pub use crate::duration::Duration;
  321|       |pub use crate::error::Error;
  322|       |#[cfg(feature = "std")]
  323|       |pub use crate::instant::Instant;
  324|       |pub use crate::month::Month;
  325|       |pub use crate::offset_date_time::OffsetDateTime;
  326|       |pub use crate::primitive_date_time::PrimitiveDateTime;
  327|       |pub use crate::time::Time;
  328|       |pub use crate::utc_offset::UtcOffset;
  329|       |pub use crate::weekday::Weekday;
  330|       |
  331|       |/// An alias for [`std::result::Result`] with a generic error from the time crate.
  332|       |pub type Result<T> = core::result::Result<T, Error>;
  333|       |
  334|       |#[cfg(test)]
  335|       |mod rusty_tests {
  336|       |	use crate::*;
  337|       |	use std::ops::SubAssign;
  338|       |	use std::ops::MulAssign;
  339|       |	use std::ops::AddAssign;
  340|       |	use std::ops::DivAssign;
  341|       |//#[no_coverage]
  342|      1|#[test]
  343|       |#[should_panic]
  344|      1|#[timeout(3000)]
  345|      1|fn rusty_test_550() {
  346|      1|    rusty_monitor::set_test_id(550);
  347|      1|    let mut i128_0: i128 = 1000i128;
  348|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  349|      1|    let mut i64_0: i64 = 1000000000i64;
  350|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  351|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
  352|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  353|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
  354|      1|    let mut i32_0: i32 = 257i32;
  355|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  356|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  357|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_1, date_0);
  358|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
  359|      1|    let mut i8_0: i8 = 24i8;
  360|      1|    let mut i8_1: i8 = -52i8;
  361|      1|    let mut i8_2: i8 = 23i8;
  362|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  363|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  364|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_0);
  365|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_4);
  366|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_1);
  367|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
  368|      1|    let mut primitivedatetime_1_ref_0: &mut crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
  369|      1|    let mut i16_0: i16 = 60i16;
  370|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  371|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  372|      1|    let mut i32_1: i32 = 189i32;
  373|      1|    let mut i64_1: i64 = 126i64;
  374|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
  375|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  376|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_5);
  377|      1|    let mut u16_0: u16 = 365u16;
  378|      1|    let mut i32_2: i32 = 285i32;
  379|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  380|      1|    std::ops::AddAssign::add_assign(primitivedatetime_1_ref_0, duration_2);
  381|      1|    panic!("From RustyUnit with love");
  382|       |}
  383|       |
  384|       |//#[no_coverage]
  385|      1|#[test]
  386|       |#[should_panic]
  387|      1|#[timeout(3000)]
  388|      1|fn rusty_test_128() {
  389|      1|    rusty_monitor::set_test_id(128);
  390|      1|    let mut i64_0: i64 = 2440588i64;
  391|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  392|      1|    let mut i32_0: i32 = 400i32;
  393|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  394|      1|    let mut u16_0: u16 = 59u16;
  395|      1|    let mut i32_1: i32 = -30i32;
  396|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  397|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  398|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  399|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
  400|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_0);
  401|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  402|      1|    let mut i64_1: i64 = 604800i64;
  403|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  404|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  405|      1|    let mut i8_0: i8 = 24i8;
  406|      1|    let mut i8_1: i8 = 6i8;
  407|      1|    let mut i8_2: i8 = -35i8;
  408|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  409|      1|    let mut i32_2: i32 = 48i32;
  410|      1|    let mut i64_2: i64 = 60i64;
  411|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
  412|      1|    let mut u16_1: u16 = 10u16;
  413|      1|    let mut i32_3: i32 = 303i32;
  414|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  415|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_3);
  416|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
  417|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_0);
  418|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
  419|      1|    let mut time_1_ref_0: &mut crate::time::Time = &mut time_1;
  420|      1|    let mut i8_3: i8 = 59i8;
  421|      1|    let mut i8_4: i8 = 6i8;
  422|      1|    let mut i8_5: i8 = 0i8;
  423|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  424|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  425|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_1);
  426|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
  427|      1|    let mut u32_0: u32 = crate::time::Time::microsecond(time_2);
  428|      1|    std::ops::SubAssign::sub_assign(time_1_ref_0, duration_2);
  429|      1|    let mut u32_1: u32 = crate::time::Time::nanosecond(time_0);
  430|      1|    panic!("From RustyUnit with love");
  431|       |}
  432|       |
  433|       |//#[no_coverage]
  434|      1|#[test]
  435|       |#[should_panic]
  436|      1|#[timeout(3000)]
  437|      1|fn rusty_test_50() {
  438|      1|    rusty_monitor::set_test_id(50);
  439|      1|    let mut u32_0: u32 = 1000u32;
  440|      1|    let mut u8_0: u8 = 1u8;
  441|      1|    let mut u8_1: u8 = 52u8;
  442|      1|    let mut u8_2: u8 = 31u8;
  443|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  444|      1|    let mut i64_0: i64 = 0i64;
  445|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  446|      1|    let mut i64_1: i64 = 604800i64;
  447|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  448|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
  449|      1|    let mut i8_0: i8 = -73i8;
  450|      1|    let mut i8_1: i8 = 127i8;
  451|      1|    let mut i8_2: i8 = 6i8;
  452|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  453|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  454|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  455|      1|    let mut offsetdatetime_1_ref_0: &mut crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
  456|      1|    let mut u16_0: u16 = 1u16;
  457|      1|    let mut i32_0: i32 = 5i32;
  458|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  459|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
  460|      1|    let mut f32_0: f32 = 78.333911f32;
  461|      1|    let mut f32_1: f32 = 1065353216.000000f32;
  462|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
  463|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
  464|      1|    std::ops::DivAssign::div_assign(duration_3_ref_0, f32_0);
  465|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
  466|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_2);
  467|      1|    std::ops::AddAssign::add_assign(offsetdatetime_1_ref_0, duration_2);
  468|      1|    let mut u8_3: u8 = crate::time::Time::hour(time_0);
  469|      1|    panic!("From RustyUnit with love");
  470|       |}
  471|       |
  472|       |//#[no_coverage]
  473|      1|#[test]
  474|       |#[should_panic]
  475|      1|#[timeout(3000)]
  476|      1|fn rusty_test_6658() {
  477|      1|    rusty_monitor::set_test_id(6658);
  478|      1|    let mut u32_0: u32 = 81u32;
  479|      1|    let mut u8_0: u8 = 53u8;
  480|      1|    let mut u8_1: u8 = 23u8;
  481|      1|    let mut u8_2: u8 = 1u8;
  482|      1|    let mut u16_0: u16 = 94u16;
  483|      1|    let mut i32_0: i32 = 398i32;
  484|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  485|      1|    let mut i32_1: i32 = 139i32;
  486|      1|    let mut i64_0: i64 = -106i64;
  487|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  488|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  489|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  490|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  491|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  492|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  493|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  494|      1|    let mut i32_2: i32 = 86399i32;
  495|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  496|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  497|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_2);
  498|      1|    let mut u16_1: u16 = 4u16;
  499|      1|    let mut i32_3: i32 = -89i32;
  500|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  501|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_2);
  502|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  503|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  504|      1|    let mut u32_1: u32 = 89u32;
  505|      1|    let mut u8_3: u8 = 2u8;
  506|      1|    let mut u8_4: u8 = 85u8;
  507|      1|    let mut u8_5: u8 = 8u8;
  508|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  509|      1|    let mut u16_2: u16 = 7u16;
  510|      1|    let mut i32_4: i32 = 342i32;
  511|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
  512|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_0);
  513|      1|    let mut month_0: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_0);
  514|      1|    let mut i64_1: i64 = 253402300799i64;
  515|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  516|      1|    let mut duration_0_ref_0: &mut crate::duration::Duration = &mut duration_0;
  517|      1|    std::ops::MulAssign::mul_assign(duration_0_ref_0, i32_1);
  518|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_0, u8_2, u8_1, u8_0, u32_0);
  519|      1|    panic!("From RustyUnit with love");
  520|       |}
  521|       |
  522|       |//#[no_coverage]
  523|      1|#[test]
  524|       |#[should_panic]
  525|      1|#[timeout(3000)]
  526|      1|fn rusty_test_8033() {
  527|      1|    rusty_monitor::set_test_id(8033);
  528|      1|    let mut i64_0: i64 = -72i64;
  529|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  530|      1|    let mut i64_1: i64 = -106i64;
  531|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  532|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  533|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  534|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  535|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
  536|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
  537|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  538|      1|    let mut i32_0: i32 = 86399i32;
  539|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  540|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  541|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_0);
  542|      1|    let mut u16_0: u16 = 59u16;
  543|      1|    let mut i32_1: i32 = -89i32;
  544|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  545|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_3);
  546|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  547|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  548|      1|    let mut u8_0: u8 = 1u8;
  549|      1|    let mut u32_0: u32 = 89u32;
  550|      1|    let mut u8_1: u8 = 2u8;
  551|      1|    let mut u8_2: u8 = 85u8;
  552|      1|    let mut u8_3: u8 = 8u8;
  553|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_2, u8_1, u32_0);
  554|      1|    let mut u16_1: u16 = 7u16;
  555|      1|    let mut i32_2: i32 = 342i32;
  556|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
  557|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_0);
  558|      1|    let mut month_0: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_0);
  559|      1|    let mut i32_3: i32 = 43i32;
  560|      1|    let mut i64_2: i64 = 253402300799i64;
  561|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
  562|      1|    let mut i64_3: i64 = 12i64;
  563|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
  564|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
  565|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
  566|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  567|      1|    let mut u32_1: u32 = crate::offset_date_time::OffsetDateTime::nanosecond(offsetdatetime_2);
  568|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_0, u8_0);
  569|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::Next;
  570|      1|    let mut i8_0: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_0);
  571|      1|    let mut instant_4_ref_0: &mut crate::instant::Instant = &mut instant_4;
  572|      1|    std::ops::AddAssign::add_assign(instant_4_ref_0, duration_0);
  573|      1|    panic!("From RustyUnit with love");
  574|       |}
  575|       |
  576|       |//#[no_coverage]
  577|      1|#[test]
  578|       |#[should_panic]
  579|      1|#[timeout(3000)]
  580|      1|fn rusty_test_434() {
  581|      1|    rusty_monitor::set_test_id(434);
  582|      1|    let mut i32_0: i32 = 376i32;
  583|      1|    let mut i64_0: i64 = 54i64;
  584|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
  585|      1|    let mut i64_1: i64 = 24i64;
  586|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  587|      1|    let mut i32_1: i32 = 3600i32;
  588|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
  589|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
  590|      1|    let mut date_1_ref_0: &mut crate::date::Date = &mut date_1;
  591|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
  592|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  593|      1|    let mut i32_2: i32 = 37i32;
  594|      1|    let mut i64_2: i64 = 60i64;
  595|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_2);
  596|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_3, i32_2);
  597|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  598|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_4);
  599|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  600|      1|    let mut i32_3: i32 = 1000i32;
  601|      1|    let mut i64_3: i64 = 1000i64;
  602|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
  603|      1|    let mut i8_0: i8 = 89i8;
  604|      1|    let mut i8_1: i8 = 40i8;
  605|      1|    let mut i8_2: i8 = 6i8;
  606|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  607|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  608|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_1);
  609|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
  610|      1|    let mut i8_3: i8 = 23i8;
  611|      1|    let mut i8_4: i8 = 1i8;
  612|      1|    let mut i8_5: i8 = 60i8;
  613|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  614|      1|    let mut i64_4: i64 = 42i64;
  615|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_4);
  616|      1|    let mut i64_5: i64 = 181i64;
  617|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_5);
  618|      1|    let mut i64_6: i64 = 1000000i64;
  619|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_6);
  620|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_8, duration_7);
  621|      1|    let mut u32_0: u32 = 96u32;
  622|      1|    let mut u8_0: u8 = 10u8;
  623|      1|    let mut u8_1: u8 = 36u8;
  624|      1|    let mut u8_2: u8 = 27u8;
  625|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  626|      1|    let mut i8_6: i8 = 113i8;
  627|      1|    let mut i8_7: i8 = 5i8;
  628|      1|    let mut i8_8: i8 = 24i8;
  629|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  630|      1|    let mut i32_4: i32 = 398i32;
  631|      1|    let mut i64_7: i64 = 2440588i64;
  632|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_7, i32_4);
  633|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  634|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_4, duration_10);
  635|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_5);
  636|      1|    let mut i64_8: i64 = 2440588i64;
  637|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::microseconds(i64_8);
  638|      1|    let mut i64_9: i64 = 2440588i64;
  639|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds(i64_9);
  640|      1|    let mut i32_5: i32 = 43i32;
  641|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_5};
  642|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_12);
  643|      1|    let mut date_3_ref_0: &mut crate::date::Date = &mut date_3;
  644|      1|    std::ops::SubAssign::sub_assign(date_3_ref_0, duration_11);
  645|      1|    std::ops::SubAssign::sub_assign(date_1_ref_0, duration_0);
  646|      1|    panic!("From RustyUnit with love");
  647|       |}
  648|       |
  649|       |//#[no_coverage]
  650|      1|#[test]
  651|       |#[should_panic]
  652|      1|#[timeout(3000)]
  653|      1|fn rusty_test_1837() {
  654|      1|    rusty_monitor::set_test_id(1837);
  655|      1|    let mut u32_0: u32 = 0u32;
  656|      1|    let mut i8_0: i8 = 0i8;
  657|      1|    let mut i8_1: i8 = 4i8;
  658|      1|    let mut i8_2: i8 = 75i8;
  659|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  660|      1|    let mut u32_1: u32 = 100000u32;
  661|      1|    let mut u8_0: u8 = 30u8;
  662|      1|    let mut u8_1: u8 = 23u8;
  663|      1|    let mut u8_2: u8 = 4u8;
  664|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_1);
  665|      1|    let mut i64_0: i64 = 253402300799i64;
  666|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  667|      1|    let mut i32_0: i32 = -143i32;
  668|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  669|      1|    let mut u32_2: u32 = 91u32;
  670|      1|    let mut u8_3: u8 = 92u8;
  671|      1|    let mut u8_4: u8 = 97u8;
  672|      1|    let mut u8_5: u8 = 8u8;
  673|      1|    let mut i64_1: i64 = 1000000000i64;
  674|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  675|      1|    let mut i32_1: i32 = -9i32;
  676|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
  677|      1|    let mut i8_3: i8 = 5i8;
  678|      1|    let mut i8_4: i8 = 59i8;
  679|      1|    let mut i8_5: i8 = 0i8;
  680|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  681|      1|    let mut i8_6: i8 = 5i8;
  682|      1|    let mut i8_7: i8 = 89i8;
  683|      1|    let mut i8_8: i8 = 60i8;
  684|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  685|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  686|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_2);
  687|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  688|      1|    let mut i32_2: i32 = 76i32;
  689|      1|    let mut i32_3: i32 = 139i32;
  690|      1|    let mut i64_2: i64 = 1000i64;
  691|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_3);
  692|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_2);
  693|      1|    let mut u32_3: u32 = 1000000u32;
  694|      1|    let mut u8_6: u8 = 9u8;
  695|      1|    let mut u8_7: u8 = 30u8;
  696|      1|    let mut u8_8: u8 = 84u8;
  697|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_3);
  698|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  699|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_2);
  700|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  701|      1|    let mut i64_3: i64 = 2147483647i64;
  702|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
  703|      1|    let mut u32_4: u32 = 10000u32;
  704|      1|    let mut u8_9: u8 = 24u8;
  705|      1|    let mut u8_10: u8 = 29u8;
  706|      1|    let mut u8_11: u8 = 12u8;
  707|      1|    let mut i32_4: i32 = 5i32;
  708|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_4};
  709|      1|    let mut u32_5: u32 = 999999u32;
  710|      1|    let mut u8_12: u8 = 2u8;
  711|      1|    let mut u8_13: u8 = 12u8;
  712|      1|    let mut u8_14: u8 = 2u8;
  713|      1|    let mut i32_5: i32 = 16i32;
  714|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_5);
  715|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_3, u8_14, u8_13, u8_12, u32_5);
  716|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_2, u8_11, u8_10, u8_9, u32_4);
  717|      1|    let mut duration_4_ref_0: &crate::duration::Duration = &mut duration_4;
  718|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
  719|      1|    std::ops::DivAssign::div_assign(duration_3_ref_0, u32_0);
  720|      1|    panic!("From RustyUnit with love");
  721|       |}
  722|       |
  723|       |//#[no_coverage]
  724|      1|#[test]
  725|       |#[should_panic]
  726|      1|#[timeout(3000)]
  727|      1|fn rusty_test_472() {
  728|      1|    rusty_monitor::set_test_id(472);
  729|      1|    let mut u8_0: u8 = 12u8;
  730|      1|    let mut i64_0: i64 = 1i64;
  731|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
  732|      1|    let mut duration_0_ref_0: &mut crate::duration::Duration = &mut duration_0;
  733|      1|    let mut u8_1: u8 = 2u8;
  734|      1|    let mut i64_1: i64 = 3600i64;
  735|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  736|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
  737|      1|    let mut u8_2: u8 = 0u8;
  738|      1|    let mut i64_2: i64 = -167i64;
  739|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
  740|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
  741|      1|    let mut u8_3: u8 = 60u8;
  742|      1|    let mut i64_3: i64 = 1000000000i64;
  743|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_3);
  744|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
  745|      1|    let mut u8_4: u8 = 30u8;
  746|      1|    let mut i64_4: i64 = 1000i64;
  747|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
  748|      1|    let mut duration_4_ref_0: &mut crate::duration::Duration = &mut duration_4;
  749|      1|    let mut u8_5: u8 = 4u8;
  750|      1|    let mut f32_0: f32 = 1315859240.000000f32;
  751|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  752|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
  753|      1|    let mut u8_6: u8 = 1u8;
  754|      1|    let mut i128_0: i128 = 0i128;
  755|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  756|      1|    let mut duration_6_ref_0: &mut crate::duration::Duration = &mut duration_6;
  757|      1|    std::ops::MulAssign::mul_assign(duration_6_ref_0, u8_6);
  758|      1|    std::ops::MulAssign::mul_assign(duration_5_ref_0, u8_5);
  759|      1|    std::ops::MulAssign::mul_assign(duration_4_ref_0, u8_4);
  760|      1|    std::ops::MulAssign::mul_assign(duration_3_ref_0, u8_3);
  761|      1|    std::ops::MulAssign::mul_assign(duration_2_ref_0, u8_2);
  762|      1|    std::ops::MulAssign::mul_assign(duration_1_ref_0, u8_1);
  763|      1|    std::ops::MulAssign::mul_assign(duration_0_ref_0, u8_0);
  764|      1|    panic!("From RustyUnit with love");
  765|       |}
  766|       |
  767|       |//#[no_coverage]
  768|      1|#[test]
  769|       |#[should_panic]
  770|      1|#[timeout(3000)]
  771|      1|fn rusty_test_480() {
  772|      1|    rusty_monitor::set_test_id(480);
  773|      1|    let mut u8_0: u8 = 52u8;
  774|      1|    let mut i64_0: i64 = 2147483647i64;
  775|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
  776|      1|    let mut i64_1: i64 = 1i64;
  777|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  778|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
  779|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
  780|      1|    let mut u8_1: u8 = 60u8;
  781|      1|    let mut i128_0: i128 = 1000i128;
  782|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  783|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
  784|      1|    let mut u8_2: u8 = 66u8;
  785|      1|    let mut i128_1: i128 = 59i128;
  786|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  787|      1|    let mut duration_4_ref_0: &mut crate::duration::Duration = &mut duration_4;
  788|      1|    let mut u8_3: u8 = 10u8;
  789|      1|    let mut i64_2: i64 = 604800i64;
  790|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
  791|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::abs(duration_5);
  792|      1|    let mut duration_6_ref_0: &mut crate::duration::Duration = &mut duration_6;
  793|      1|    let mut u8_4: u8 = 28u8;
  794|      1|    let mut i64_3: i64 = 9223372036854775807i64;
  795|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
  796|      1|    let mut duration_7_ref_0: &mut crate::duration::Duration = &mut duration_7;
  797|      1|    let mut u8_5: u8 = 60u8;
  798|      1|    let mut i32_0: i32 = 246i32;
  799|      1|    let mut i64_4: i64 = 3600i64;
  800|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new(i64_4, i32_0);
  801|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  802|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  803|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  804|      1|    std::ops::DivAssign::div_assign(duration_7_ref_0, u8_4);
  805|      1|    std::ops::DivAssign::div_assign(duration_6_ref_0, u8_3);
  806|      1|    std::ops::DivAssign::div_assign(duration_4_ref_0, u8_2);
  807|      1|    std::ops::DivAssign::div_assign(duration_3_ref_0, u8_1);
  808|      1|    std::ops::DivAssign::div_assign(duration_2_ref_0, u8_0);
  809|      1|    panic!("From RustyUnit with love");
  810|       |}
  811|       |
  812|       |//#[no_coverage]
  813|      1|#[test]
  814|       |#[should_panic]
  815|      1|#[timeout(3000)]
  816|      1|fn rusty_test_7971() {
  817|      1|    rusty_monitor::set_test_id(7971);
  818|      1|    let mut i64_0: i64 = 12i64;
  819|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
  820|      1|    let mut i32_0: i32 = 128i32;
  821|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  822|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
  823|      1|    let mut i32_1: i32 = 370i32;
  824|      1|    let mut i64_1: i64 = 1000000000i64;
  825|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  826|      1|    let mut i32_2: i32 = -9i32;
  827|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
  828|      1|    let mut i8_0: i8 = 5i8;
  829|      1|    let mut i8_1: i8 = 59i8;
  830|      1|    let mut i8_2: i8 = 0i8;
  831|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  832|      1|    let mut i8_3: i8 = 5i8;
  833|      1|    let mut i8_4: i8 = 89i8;
  834|      1|    let mut i8_5: i8 = 60i8;
  835|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  836|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  837|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_1);
  838|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  839|      1|    let mut i32_3: i32 = 76i32;
  840|      1|    let mut i32_4: i32 = 139i32;
  841|      1|    let mut i64_2: i64 = 1000i64;
  842|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_4);
  843|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_3);
  844|      1|    let mut u32_0: u32 = 1000000u32;
  845|      1|    let mut u8_0: u8 = 9u8;
  846|      1|    let mut u8_1: u8 = 30u8;
  847|      1|    let mut u8_2: u8 = 84u8;
  848|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  849|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  850|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_1);
  851|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  852|      1|    let mut i64_3: i64 = 2147483647i64;
  853|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
  854|      1|    let mut u32_1: u32 = 10000u32;
  855|      1|    let mut u8_3: u8 = 24u8;
  856|      1|    let mut u8_4: u8 = 29u8;
  857|      1|    let mut u8_5: u8 = 12u8;
  858|      1|    let mut i32_5: i32 = 5i32;
  859|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_5};
  860|      1|    let mut u32_2: u32 = 999999u32;
  861|      1|    let mut u8_6: u8 = 2u8;
  862|      1|    let mut u8_7: u8 = 12u8;
  863|      1|    let mut u8_8: u8 = 2u8;
  864|      1|    let mut i32_6: i32 = 16i32;
  865|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_6);
  866|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_3, u8_8, u8_7, u8_6, u32_2);
  867|      1|    let mut result_1: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_2, u8_5, u8_4, u8_3, u32_1);
  868|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
  869|      1|    std::ops::MulAssign::mul_assign(duration_1_ref_0, i32_1);
  870|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
  871|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_0);
  872|      1|    panic!("From RustyUnit with love");
  873|       |}
  874|       |
  875|       |//#[no_coverage]
  876|      1|#[test]
  877|       |#[should_panic]
  878|      1|#[timeout(3000)]
  879|      1|fn rusty_test_570() {
  880|      1|    rusty_monitor::set_test_id(570);
  881|      1|    let mut i64_0: i64 = 1i64;
  882|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  883|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  884|      1|    let mut i64_1: i64 = 3600i64;
  885|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  886|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  887|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  888|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  889|      1|    let mut i64_2: i64 = 1000000i64;
  890|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
  891|      1|    let mut i64_3: i64 = 12i64;
  892|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
  893|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_4, duration_3);
  894|      1|    let mut i8_0: i8 = 4i8;
  895|      1|    let mut i8_1: i8 = 2i8;
  896|      1|    let mut i8_2: i8 = 24i8;
  897|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  898|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  899|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_1);
  900|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  901|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_5);
  902|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  903|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
  904|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
  905|      1|    let mut time_0_ref_0: &mut crate::time::Time = &mut time_0;
  906|      1|    let mut f64_0: f64 = 4768169126130614272.000000f64;
  907|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  908|      1|    let mut i32_0: i32 = 184i32;
  909|      1|    let mut i64_4: i64 = 2440588i64;
  910|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_4, i32_0);
  911|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_7, duration_6);
  912|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
  913|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  914|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_4);
  915|      1|    let mut time_1_ref_0: &mut crate::time::Time = &mut time_1;
  916|      1|    let mut i64_5: i64 = 1i64;
  917|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::weeks(i64_5);
  918|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
  919|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  920|      1|    let mut duration_12: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  921|      1|    let mut i8_3: i8 = 1i8;
  922|      1|    let mut i8_4: i8 = 4i8;
  923|      1|    let mut i8_5: i8 = 59i8;
  924|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  925|      1|    let mut f64_1: f64 = -77.080983f64;
  926|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_1);
  927|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  928|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_5, duration_13);
  929|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_6);
  930|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
  931|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_2);
  932|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
  933|      1|    std::ops::AddAssign::add_assign(time_1_ref_0, duration_9);
  934|      1|    std::ops::AddAssign::add_assign(time_0_ref_0, duration_1);
  935|      1|    panic!("From RustyUnit with love");
  936|       |}
  937|       |
  938|       |//#[no_coverage]
  939|      1|#[test]
  940|       |#[should_panic]
  941|      1|#[timeout(3000)]
  942|      1|fn rusty_test_456() {
  943|      1|    rusty_monitor::set_test_id(456);
  944|      1|    let mut i64_0: i64 = 86400i64;
  945|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  946|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  947|      1|    let mut i64_1: i64 = 2440588i64;
  948|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  949|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
  950|      1|    let mut i64_2: i64 = 0i64;
  951|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
  952|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
  953|      1|    let mut i64_3: i64 = 1i64;
  954|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
  955|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
  956|      1|    let mut i64_4: i64 = 12i64;
  957|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
  958|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
  959|      1|    let mut i32_0: i32 = 178i32;
  960|      1|    let mut i64_5: i64 = 86400i64;
  961|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new(i64_5, i32_0);
  962|      1|    let mut duration_8_ref_0: &mut crate::duration::Duration = &mut duration_8;
  963|      1|    let mut i64_6: i64 = 86400i64;
  964|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::seconds(i64_6);
  965|      1|    let mut duration_10: std::time::Duration = crate::duration::Duration::abs_std(duration_9);
  966|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
  967|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  968|      1|    let mut duration_11_ref_0: &mut crate::duration::Duration = &mut duration_11;
  969|      1|    let mut i64_7: i64 = 253402300799i64;
  970|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::days(i64_7);
  971|      1|    let mut i128_0: i128 = 1000000i128;
  972|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  973|      1|    let mut i64_8: i64 = 1i64;
  974|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_8);
  975|      1|    let mut duration_14_ref_0: &mut crate::duration::Duration = &mut duration_14;
  976|      1|    std::ops::SubAssign::sub_assign(duration_11_ref_0, duration_10);
  977|      1|    std::ops::SubAssign::sub_assign(duration_8_ref_0, duration_7);
  978|      1|    std::ops::SubAssign::sub_assign(duration_5_ref_0, duration_4);
  979|      1|    std::ops::SubAssign::sub_assign(duration_2_ref_0, duration_1);
  980|      1|    panic!("From RustyUnit with love");
  981|       |}
  982|       |
  983|       |//#[no_coverage]
  984|      1|#[test]
  985|       |#[should_panic]
  986|      1|#[timeout(3000)]
  987|      1|fn rusty_test_6450() {
  988|      1|    rusty_monitor::set_test_id(6450);
  989|      1|    let mut i16_0: i16 = 0i16;
  990|      1|    let mut i64_0: i64 = 604800i64;
  991|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  992|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  993|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  994|      1|    let mut i32_0: i32 = 50i32;
  995|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  996|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  997|      1|    let mut i8_0: i8 = 6i8;
  998|      1|    let mut i8_1: i8 = 6i8;
  999|      1|    let mut i8_2: i8 = 2i8;
 1000|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1001|      1|    let mut u32_0: u32 = 0u32;
 1002|      1|    let mut u8_0: u8 = 59u8;
 1003|      1|    let mut u8_1: u8 = 28u8;
 1004|      1|    let mut u8_2: u8 = 30u8;
 1005|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1006|      1|    let mut i32_1: i32 = 7i32;
 1007|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1008|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
 1009|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
 1010|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_1);
 1011|      1|    let mut i32_2: i32 = -7i32;
 1012|      1|    let mut u32_1: u32 = 10000u32;
 1013|      1|    let mut u8_3: u8 = 3u8;
 1014|      1|    let mut u8_4: u8 = 7u8;
 1015|      1|    let mut u8_5: u8 = 14u8;
 1016|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1017|      1|    let mut i64_2: i64 = 1000i64;
 1018|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1019|      1|    let mut i32_3: i32 = 43i32;
 1020|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1021|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_sub(date_3, duration_2);
 1022|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_4, time_1);
 1023|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1024|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
 1025|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1026|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1027|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1028|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_1);
 1029|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_whole_seconds(i32_2);
 1030|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_0);
 1031|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::Next;
 1032|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1033|      1|    std::ops::MulAssign::mul_assign(duration_3_ref_0, i16_0);
 1034|      1|    panic!("From RustyUnit with love");
 1035|       |}
 1036|       |
 1037|       |//#[no_coverage]
 1038|      1|#[test]
 1039|       |#[should_panic]
 1040|      1|#[timeout(3000)]
 1041|      1|fn rusty_test_514() {
 1042|      1|    rusty_monitor::set_test_id(514);
 1043|      1|    let mut i64_0: i64 = 86400i64;
 1044|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1045|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1046|      1|    let mut instant_0_ref_0: &mut crate::instant::Instant = &mut instant_0;
 1047|      1|    let mut i64_1: i64 = -19i64;
 1048|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1049|      1|    let mut i64_2: i64 = 2147483647i64;
 1050|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1051|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_2, duration_1);
 1052|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1053|      1|    let mut instant_1_ref_0: &mut crate::instant::Instant = &mut instant_1;
 1054|      1|    let mut i32_0: i32 = 60i32;
 1055|      1|    let mut i64_3: i64 = 12i64;
 1056|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_0);
 1057|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1058|      1|    let mut instant_2_ref_0: &mut crate::instant::Instant = &mut instant_2;
 1059|      1|    let mut i64_4: i64 = 604800i64;
 1060|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 1061|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1062|      1|    let mut instant_3_ref_0: &mut crate::instant::Instant = &mut instant_3;
 1063|      1|    let mut i64_5: i64 = 2147483647i64;
 1064|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds(i64_5);
 1065|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1066|      1|    let mut instant_4_ref_0: &mut crate::instant::Instant = &mut instant_4;
 1067|      1|    let mut i64_6: i64 = 1000000000i64;
 1068|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::hours(i64_6);
 1069|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1070|      1|    let mut instant_5_ref_0: &mut crate::instant::Instant = &mut instant_5;
 1071|      1|    std::ops::SubAssign::sub_assign(instant_5_ref_0, duration_7);
 1072|      1|    std::ops::SubAssign::sub_assign(instant_4_ref_0, duration_6);
 1073|      1|    std::ops::SubAssign::sub_assign(instant_3_ref_0, duration_5);
 1074|      1|    std::ops::SubAssign::sub_assign(instant_2_ref_0, duration_4);
 1075|      1|    std::ops::SubAssign::sub_assign(instant_1_ref_0, duration_3);
 1076|      1|    std::ops::SubAssign::sub_assign(instant_0_ref_0, duration_0);
 1077|      1|    panic!("From RustyUnit with love");
 1078|       |}
 1079|       |
 1080|       |//#[no_coverage]
 1081|      1|#[test]
 1082|       |#[should_panic]
 1083|      1|#[timeout(3000)]
 1084|      1|fn rusty_test_553() {
 1085|      1|    rusty_monitor::set_test_id(553);
 1086|      1|    let mut i128_0: i128 = -119i128;
 1087|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1088|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1089|      1|    let mut i64_0: i64 = 1000000000i64;
 1090|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 1091|      1|    let mut i32_0: i32 = 348i32;
 1092|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1093|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_2);
 1094|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1095|      1|    let mut primitivedatetime_0_ref_0: &mut crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
 1096|      1|    let mut i64_1: i64 = 1i64;
 1097|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1098|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1099|      1|    let mut i8_0: i8 = 59i8;
 1100|      1|    let mut i8_1: i8 = 3i8;
 1101|      1|    let mut i8_2: i8 = 59i8;
 1102|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1103|      1|    let mut i8_3: i8 = 0i8;
 1104|      1|    let mut i8_4: i8 = 2i8;
 1105|      1|    let mut i8_5: i8 = 3i8;
 1106|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1107|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1108|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_1);
 1109|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 1110|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1111|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_1, utcoffset_0);
 1112|      1|    let mut primitivedatetime_2_ref_0: &mut crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_2;
 1113|      1|    let mut i32_1: i32 = 235i32;
 1114|      1|    let mut i64_2: i64 = 2440588i64;
 1115|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 1116|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::abs(duration_5);
 1117|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1118|      1|    let mut i32_2: i32 = 16i32;
 1119|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_2};
 1120|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
 1121|      1|    let mut primitivedatetime_3_ref_0: &mut crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_3;
 1122|      1|    std::ops::SubAssign::sub_assign(primitivedatetime_3_ref_0, duration_7);
 1123|      1|    std::ops::SubAssign::sub_assign(primitivedatetime_2_ref_0, duration_4);
 1124|      1|    std::ops::SubAssign::sub_assign(primitivedatetime_0_ref_0, duration_1);
 1125|      1|    panic!("From RustyUnit with love");
 1126|       |}
 1127|       |
 1128|       |//#[no_coverage]
 1129|      1|#[test]
 1130|       |#[should_panic]
 1131|      1|#[timeout(3000)]
 1132|      1|fn rusty_test_5590() {
 1133|      1|    rusty_monitor::set_test_id(5590);
 1134|      1|    let mut i64_0: i64 = 3600i64;
 1135|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1136|      1|    let mut i32_0: i32 = 54i32;
 1137|      1|    let mut i64_1: i64 = 60i64;
 1138|      1|    let mut i128_0: i128 = 0i128;
 1139|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1140|      1|    let mut u32_0: u32 = 62u32;
 1141|      1|    let mut u8_0: u8 = 23u8;
 1142|      1|    let mut u8_1: u8 = 44u8;
 1143|      1|    let mut u8_2: u8 = 6u8;
 1144|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1145|      1|    let mut i32_1: i32 = 296i32;
 1146|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1147|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1148|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_1);
 1149|      1|    let mut i64_2: i64 = 60i64;
 1150|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1151|      1|    let mut duration_2_ref_0: &crate::duration::Duration = &mut duration_2;
 1152|      1|    let mut u32_1: u32 = 13u32;
 1153|      1|    let mut u8_3: u8 = 0u8;
 1154|      1|    let mut u8_4: u8 = 12u8;
 1155|      1|    let mut u8_5: u8 = 38u8;
 1156|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1157|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1158|      1|    let mut i8_0: i8 = 5i8;
 1159|      1|    let mut i8_1: i8 = -20i8;
 1160|      1|    let mut i8_2: i8 = 0i8;
 1161|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1162|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1163|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_1);
 1164|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1165|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1166|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_0);
 1167|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1168|      1|    let mut month_0: month::Month = crate::month::Month::August;
 1169|      1|    let mut u32_2: u32 = 10000000u32;
 1170|      1|    let mut i16_0: i16 = 5i16;
 1171|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 1172|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
 1173|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
 1174|      1|    let mut i32_2: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
 1175|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
 1176|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1177|      1|    std::ops::SubAssign::sub_assign(duration_3_ref_0, duration_0);
 1178|      1|    panic!("From RustyUnit with love");
 1179|       |}
 1180|       |
 1181|       |//#[no_coverage]
 1182|      1|#[test]
 1183|       |#[should_panic]
 1184|      1|#[timeout(3000)]
 1185|      1|fn rusty_test_515() {
 1186|      1|    rusty_monitor::set_test_id(515);
 1187|      1|    let mut i64_0: i64 = 2147483647i64;
 1188|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1189|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1190|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1191|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1192|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1193|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1194|      1|    let mut instant_0_ref_0: &mut crate::instant::Instant = &mut instant_0;
 1195|      1|    let mut i64_1: i64 = 253402300799i64;
 1196|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1197|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1198|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1199|      1|    let mut instant_1_ref_0: &mut crate::instant::Instant = &mut instant_1;
 1200|      1|    let mut i64_2: i64 = 7i64;
 1201|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 1202|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1203|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1204|      1|    let mut instant_2_ref_0: &mut crate::instant::Instant = &mut instant_2;
 1205|      1|    let mut i64_3: i64 = 1000000i64;
 1206|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
 1207|      1|    let mut i64_4: i64 = 604800i64;
 1208|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
 1209|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_9, duration_8);
 1210|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
 1211|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1212|      1|    let mut instant_3_ref_0: &mut crate::instant::Instant = &mut instant_3;
 1213|      1|    let mut f32_1: f32 = -59.792376f32;
 1214|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1215|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1216|      1|    let mut instant_4_ref_0: &mut crate::instant::Instant = &mut instant_4;
 1217|      1|    std::ops::SubAssign::sub_assign(instant_3_ref_0, duration_11);
 1218|      1|    std::ops::SubAssign::sub_assign(instant_2_ref_0, duration_7);
 1219|      1|    std::ops::SubAssign::sub_assign(instant_1_ref_0, duration_5);
 1220|      1|    std::ops::SubAssign::sub_assign(instant_0_ref_0, duration_3);
 1221|      1|    panic!("From RustyUnit with love");
 1222|       |}
 1223|       |
 1224|       |//#[no_coverage]
 1225|      1|#[test]
 1226|       |#[should_panic]
 1227|      1|#[timeout(3000)]
 1228|      1|fn rusty_test_2204() {
 1229|      1|    rusty_monitor::set_test_id(2204);
 1230|      1|    let mut i32_0: i32 = 25i32;
 1231|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1232|      1|    let mut i8_0: i8 = 5i8;
 1233|      1|    let mut i8_1: i8 = 60i8;
 1234|      1|    let mut i8_2: i8 = 5i8;
 1235|      1|    let mut i8_3: i8 = 59i8;
 1236|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_3, i8_2, i8_1);
 1237|      1|    let mut i8_4: i8 = 23i8;
 1238|      1|    let mut i8_5: i8 = 23i8;
 1239|      1|    let mut i8_6: i8 = 6i8;
 1240|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_6, i8_5, i8_4);
 1241|      1|    let mut u32_0: u32 = 1000u32;
 1242|      1|    let mut u8_0: u8 = 4u8;
 1243|      1|    let mut u8_1: u8 = 7u8;
 1244|      1|    let mut u8_2: u8 = 1u8;
 1245|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1246|      1|    let mut i32_1: i32 = 36525i32;
 1247|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1248|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1249|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_1);
 1250|      1|    let mut i64_0: i64 = -153i64;
 1251|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1252|      1|    let mut i32_2: i32 = 1721119i32;
 1253|      1|    let mut i64_1: i64 = -196i64;
 1254|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_2);
 1255|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1256|      1|    let mut i64_2: i64 = 0i64;
 1257|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1258|      1|    let mut i8_7: i8 = -11i8;
 1259|      1|    let mut i8_8: i8 = 0i8;
 1260|      1|    let mut i8_9: i8 = 1i8;
 1261|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_9, i8_8, i8_7);
 1262|      1|    let mut i64_3: i64 = 86400i64;
 1263|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_3);
 1264|      1|    let mut i8_10: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_2);
 1265|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1266|      1|    let mut duration_4_ref_0: &mut crate::duration::Duration = &mut duration_4;
 1267|      1|    std::ops::MulAssign::mul_assign(duration_4_ref_0, i8_0);
 1268|      1|    let mut month_0: month::Month = crate::date::Date::month(date_0);
 1269|      1|    panic!("From RustyUnit with love");
 1270|       |}
 1271|       |
 1272|       |//#[no_coverage]
 1273|      1|#[test]
 1274|       |#[should_panic]
 1275|      1|#[timeout(3000)]
 1276|      1|fn rusty_test_474() {
 1277|      1|    rusty_monitor::set_test_id(474);
 1278|      1|    let mut u32_0: u32 = 78u32;
 1279|      1|    let mut i64_0: i64 = 7i64;
 1280|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1281|      1|    let mut duration_0_ref_0: &mut crate::duration::Duration = &mut duration_0;
 1282|      1|    let mut u32_1: u32 = 999999999u32;
 1283|      1|    let mut i64_1: i64 = 2147483647i64;
 1284|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1285|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 1286|      1|    let mut u32_2: u32 = 22u32;
 1287|      1|    let mut i64_2: i64 = 253402300799i64;
 1288|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1289|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1290|      1|    let mut u32_3: u32 = 100u32;
 1291|      1|    let mut i64_3: i64 = 1000000000i64;
 1292|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
 1293|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1294|      1|    let mut u32_4: u32 = 1000000000u32;
 1295|      1|    let mut i64_4: i64 = -97i64;
 1296|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
 1297|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_4);
 1298|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
 1299|      1|    let mut u32_5: u32 = 0u32;
 1300|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1301|      1|    let mut duration_6: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1302|      1|    let mut duration_6_ref_0: &mut crate::duration::Duration = &mut duration_6;
 1303|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1304|      1|    std::ops::MulAssign::mul_assign(duration_6_ref_0, u32_5);
 1305|      1|    std::ops::MulAssign::mul_assign(duration_5_ref_0, u32_4);
 1306|      1|    std::ops::MulAssign::mul_assign(duration_3_ref_0, u32_3);
 1307|      1|    std::ops::MulAssign::mul_assign(duration_2_ref_0, u32_2);
 1308|      1|    std::ops::MulAssign::mul_assign(duration_1_ref_0, u32_1);
 1309|      1|    std::ops::MulAssign::mul_assign(duration_0_ref_0, u32_0);
 1310|      1|    panic!("From RustyUnit with love");
 1311|       |}
 1312|       |
 1313|       |//#[no_coverage]
 1314|      1|#[test]
 1315|       |#[should_panic]
 1316|      1|#[timeout(3000)]
 1317|      1|fn rusty_test_1540() {
 1318|      1|    rusty_monitor::set_test_id(1540);
 1319|      1|    let mut u8_0: u8 = 28u8;
 1320|      1|    let mut u8_1: u8 = 23u8;
 1321|      1|    let mut u8_2: u8 = 37u8;
 1322|      1|    let mut i32_0: i32 = 54i32;
 1323|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1324|      1|    let mut i64_0: i64 = -20i64;
 1325|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1326|      1|    let mut i32_1: i32 = 348i32;
 1327|      1|    let mut i64_1: i64 = 1000000000i64;
 1328|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1329|      1|    let mut i8_0: i8 = 1i8;
 1330|      1|    let mut i8_1: i8 = 23i8;
 1331|      1|    let mut i8_2: i8 = 4i8;
 1332|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1333|      1|    let mut i32_2: i32 = 5119853i32;
 1334|      1|    let mut i64_2: i64 = 0i64;
 1335|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
 1336|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1337|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_2);
 1338|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1339|      1|    let mut i8_3: i8 = 60i8;
 1340|      1|    let mut i8_4: i8 = 0i8;
 1341|      1|    let mut i8_5: i8 = 41i8;
 1342|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1343|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1344|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1345|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 1346|      1|    let mut i64_3: i64 = 604800i64;
 1347|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
 1348|      1|    let mut u16_0: u16 = 60u16;
 1349|      1|    let mut i32_3: i32 = 99i32;
 1350|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1351|      1|    let mut i64_4: i64 = 1000i64;
 1352|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
 1353|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1354|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1355|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1356|      1|    let mut u16_1: u16 = 72u16;
 1357|      1|    let mut i32_4: i32 = 93i32;
 1358|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 1359|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Wednesday;
 1360|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1361|      1|    std::ops::MulAssign::mul_assign(duration_3_ref_0, f64_0);
 1362|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_0, u8_2, u8_1, u8_0);
 1363|      1|    panic!("From RustyUnit with love");
 1364|       |}
 1365|       |
 1366|       |//#[no_coverage]
 1367|      1|#[test]
 1368|       |#[should_panic]
 1369|      1|#[timeout(3000)]
 1370|      1|fn rusty_test_478() {
 1371|      1|    rusty_monitor::set_test_id(478);
 1372|      1|    let mut i16_0: i16 = 4i16;
 1373|      1|    let mut i64_0: i64 = 1i64;
 1374|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1375|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1376|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1377|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1378|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1379|      1|    let mut i16_1: i16 = 7i16;
 1380|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1381|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
 1382|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1383|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1384|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1385|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1386|      1|    let mut i8_0: i8 = 0i8;
 1387|      1|    let mut i8_1: i8 = 60i8;
 1388|      1|    let mut i8_2: i8 = 3i8;
 1389|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1390|      1|    let mut i8_3: i8 = 29i8;
 1391|      1|    let mut i8_4: i8 = 60i8;
 1392|      1|    let mut i8_5: i8 = 23i8;
 1393|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1394|      1|    let mut u32_0: u32 = 10000000u32;
 1395|      1|    let mut u8_0: u8 = 52u8;
 1396|      1|    let mut u8_1: u8 = 11u8;
 1397|      1|    let mut u8_2: u8 = 4u8;
 1398|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1399|      1|    let mut u16_0: u16 = 60u16;
 1400|      1|    let mut i32_0: i32 = 65i32;
 1401|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1402|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
 1403|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_1);
 1404|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1405|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
 1406|      1|    std::ops::DivAssign::div_assign(duration_2_ref_0, i16_0);
 1407|      1|    panic!("From RustyUnit with love");
 1408|       |}
 1409|       |
 1410|       |//#[no_coverage]
 1411|      1|#[test]
 1412|       |#[should_panic]
 1413|      1|#[timeout(3000)]
 1414|      1|fn rusty_test_477() {
 1415|      1|    rusty_monitor::set_test_id(477);
 1416|      1|    let mut i8_0: i8 = 24i8;
 1417|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 1418|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1419|      1|    let mut i64_0: i64 = 15i64;
 1420|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1421|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1422|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1423|      1|    let mut i8_1: i8 = 67i8;
 1424|      1|    let mut i64_1: i64 = 604800i64;
 1425|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1426|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1427|      1|    let mut i8_2: i8 = -28i8;
 1428|      1|    let mut i64_2: i64 = 24i64;
 1429|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1430|      1|    let mut duration_4_ref_0: &mut crate::duration::Duration = &mut duration_4;
 1431|      1|    let mut i8_3: i8 = 59i8;
 1432|      1|    let mut i64_3: i64 = 86400i64;
 1433|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1434|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
 1435|      1|    let mut i8_4: i8 = 60i8;
 1436|      1|    let mut i64_4: i64 = 253402300799i64;
 1437|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
 1438|      1|    let mut duration_6_ref_0: &mut crate::duration::Duration = &mut duration_6;
 1439|      1|    let mut i8_5: i8 = 2i8;
 1440|      1|    let mut i64_5: i64 = 60i64;
 1441|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds(i64_5);
 1442|      1|    let mut duration_7_ref_0: &mut crate::duration::Duration = &mut duration_7;
 1443|      1|    let mut i8_6: i8 = 2i8;
 1444|      1|    let mut i64_6: i64 = 24i64;
 1445|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_6);
 1446|      1|    let mut duration_8_ref_0: &mut crate::duration::Duration = &mut duration_8;
 1447|      1|    std::ops::DivAssign::div_assign(duration_8_ref_0, i8_6);
 1448|      1|    std::ops::DivAssign::div_assign(duration_7_ref_0, i8_5);
 1449|      1|    std::ops::DivAssign::div_assign(duration_6_ref_0, i8_4);
 1450|      1|    std::ops::DivAssign::div_assign(duration_5_ref_0, i8_3);
 1451|      1|    std::ops::DivAssign::div_assign(duration_4_ref_0, i8_2);
 1452|      1|    std::ops::DivAssign::div_assign(duration_3_ref_0, i8_1);
 1453|      1|    std::ops::DivAssign::div_assign(duration_2_ref_0, i8_0);
 1454|      1|    panic!("From RustyUnit with love");
 1455|       |}
 1456|       |
 1457|       |//#[no_coverage]
 1458|      1|#[test]
 1459|       |#[should_panic]
 1460|      1|#[timeout(3000)]
 1461|      1|fn rusty_test_3566() {
 1462|      1|    rusty_monitor::set_test_id(3566);
 1463|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1464|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1465|      1|    let mut i64_0: i64 = 123i64;
 1466|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1467|      1|    let mut i32_0: i32 = -116i32;
 1468|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1469|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 1470|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1471|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
 1472|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1473|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1474|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1475|      1|    let mut i64_1: i64 = 3600i64;
 1476|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1477|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1478|      1|    let mut i32_1: i32 = 25i32;
 1479|      1|    let mut i64_2: i64 = 92i64;
 1480|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 1481|      1|    let mut i64_3: i64 = 1i64;
 1482|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1483|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_5, duration_4);
 1484|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1485|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1486|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1487|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1488|      1|    let mut i64_4: i64 = 1000000000i64;
 1489|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
 1490|      1|    let mut i32_2: i32 = 9999i32;
 1491|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1492|      1|    let mut i32_3: i32 = 86399i32;
 1493|      1|    let mut i64_5: i64 = 65i64;
 1494|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_5, i32_3);
 1495|      1|    let mut i64_6: i64 = 3600i64;
 1496|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::weeks(i64_6);
 1497|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_9, duration_8);
 1498|      1|    let mut instant_4: crate::instant::Instant = crate::instant::Instant::now();
 1499|      1|    let mut i32_4: i32 = 76i32;
 1500|      1|    let mut i64_7: i64 = 142i64;
 1501|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_7, i32_4);
 1502|      1|    let mut i32_5: i32 = 3i32;
 1503|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_5};
 1504|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_sub(date_3, duration_11);
 1505|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_4);
 1506|      1|    let mut i8_0: i8 = 4i8;
 1507|      1|    let mut i8_1: i8 = 0i8;
 1508|      1|    let mut i8_2: i8 = 24i8;
 1509|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1510|      1|    let mut i64_8: i64 = 1000000000i64;
 1511|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::hours(i64_8);
 1512|      1|    let mut i64_9: i64 = 60i64;
 1513|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::seconds(i64_9);
 1514|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_13, duration_12);
 1515|      1|    let mut u16_0: u16 = 10u16;
 1516|      1|    let mut i32_6: i32 = 252i32;
 1517|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_6, u16_0);
 1518|      1|    let mut date_6: crate::date::Date = crate::date::Date::saturating_sub(date_5, duration_14);
 1519|      1|    let mut u32_0: u32 = 10u32;
 1520|      1|    let mut u8_0: u8 = 9u8;
 1521|      1|    let mut u8_1: u8 = 82u8;
 1522|      1|    let mut u8_2: u8 = 2u8;
 1523|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1524|      1|    let mut u16_1: u16 = 58u16;
 1525|      1|    let mut i32_7: i32 = 303i32;
 1526|      1|    let mut date_7: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_7, u16_1);
 1527|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_7, time: time_1};
 1528|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_3, date_6);
 1529|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_4, offset: utcoffset_0};
 1530|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_2, primitivedatetime_2);
 1531|      1|    let mut i32_8: i32 = 2i32;
 1532|      1|    let mut date_8: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_8);
 1533|      1|    let mut i64_10: i64 = 14i64;
 1534|      1|    let mut duration_15: crate::duration::Duration = crate::duration::Duration::minutes(i64_10);
 1535|      1|    let mut instant_5: crate::instant::Instant = crate::instant::Instant::now();
 1536|      1|    let mut i128_0: i128 = 24i128;
 1537|      1|    let mut duration_16: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1538|      1|    let mut duration_17: std::time::Duration = crate::duration::Duration::abs_std(duration_16);
 1539|      1|    let mut instant_6: crate::instant::Instant = crate::instant::Instant::now();
 1540|      1|    let mut i64_11: i64 = crate::offset_date_time::OffsetDateTime::unix_timestamp(offsetdatetime_3);
 1541|      1|    let mut bool_0: bool = crate::duration::Duration::is_zero(duration_6);
 1542|      1|    let mut instant_1_ref_0: &mut crate::instant::Instant = &mut instant_1;
 1543|      1|    std::ops::SubAssign::sub_assign(instant_1_ref_0, duration_3);
 1544|      1|    let mut u8_3: u8 = crate::time::Time::hour(time_0);
 1545|      1|    panic!("From RustyUnit with love");
 1546|       |}
 1547|       |
 1548|       |//#[no_coverage]
 1549|      1|#[test]
 1550|       |#[should_panic]
 1551|      1|#[timeout(3000)]
 1552|      1|fn rusty_test_433() {
 1553|      1|    rusty_monitor::set_test_id(433);
 1554|      1|    let mut i32_0: i32 = -16i32;
 1555|      1|    let mut i64_0: i64 = 1000000000i64;
 1556|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1557|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1558|      1|    let mut i32_1: i32 = 1721425i32;
 1559|      1|    let mut i64_1: i64 = 1000000i64;
 1560|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 1561|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_1);
 1562|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1563|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_3);
 1564|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 1565|      1|    let mut date_0_ref_0: &mut crate::date::Date = &mut date_0;
 1566|      1|    let mut i64_2: i64 = 2440588i64;
 1567|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1568|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1569|      1|    let mut i64_3: i64 = 235i64;
 1570|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 1571|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1572|      1|    let mut duration_7: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1573|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_7, duration_6);
 1574|      1|    let mut u16_0: u16 = 27u16;
 1575|      1|    let mut i32_2: i32 = 336i32;
 1576|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1577|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_8);
 1578|      1|    let mut date_2_ref_0: &mut crate::date::Date = &mut date_2;
 1579|      1|    let mut i64_4: i64 = 1000000i64;
 1580|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::days(i64_4);
 1581|      1|    let mut duration_10: std::time::Duration = crate::duration::Duration::abs_std(duration_9);
 1582|      1|    let mut i128_0: i128 = 1000000000i128;
 1583|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1584|      1|    let mut duration_12: std::time::Duration = crate::duration::Duration::abs_std(duration_11);
 1585|      1|    let mut i32_3: i32 = 54i32;
 1586|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1587|      1|    std::ops::AddAssign::add_assign(date_2_ref_0, duration_5);
 1588|      1|    std::ops::AddAssign::add_assign(date_0_ref_0, duration_1);
 1589|      1|    panic!("From RustyUnit with love");
 1590|       |}
 1591|       |
 1592|       |//#[no_coverage]
 1593|      1|#[test]
 1594|       |#[should_panic]
 1595|      1|#[timeout(3000)]
 1596|      1|fn rusty_test_481() {
 1597|      1|    rusty_monitor::set_test_id(481);
 1598|      1|    let mut u16_0: u16 = 10u16;
 1599|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1600|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1601|      1|    let mut duration_0_ref_0: &mut crate::duration::Duration = &mut duration_0;
 1602|      1|    let mut u16_1: u16 = 365u16;
 1603|      1|    let mut f32_1: f32 = 190.854692f32;
 1604|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1605|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1606|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1607|      1|    let mut u16_2: u16 = 999u16;
 1608|      1|    let mut i128_0: i128 = 1i128;
 1609|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1610|      1|    let mut i64_0: i64 = 3600i64;
 1611|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1612|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
 1613|      1|    let mut duration_5_ref_0: &mut crate::duration::Duration = &mut duration_5;
 1614|      1|    let mut u16_3: u16 = 0u16;
 1615|      1|    let mut i64_1: i64 = 253402300799i64;
 1616|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1617|      1|    let mut i64_2: i64 = 2147483647i64;
 1618|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 1619|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_7, duration_6);
 1620|      1|    let mut duration_8_ref_0: &mut crate::duration::Duration = &mut duration_8;
 1621|      1|    let mut u16_4: u16 = 59u16;
 1622|      1|    let mut i64_3: i64 = 46i64;
 1623|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1624|      1|    let mut duration_9_ref_0: &mut crate::duration::Duration = &mut duration_9;
 1625|      1|    std::ops::DivAssign::div_assign(duration_9_ref_0, u16_4);
 1626|      1|    std::ops::DivAssign::div_assign(duration_8_ref_0, u16_3);
 1627|      1|    std::ops::DivAssign::div_assign(duration_5_ref_0, u16_2);
 1628|      1|    std::ops::DivAssign::div_assign(duration_2_ref_0, u16_1);
 1629|      1|    std::ops::DivAssign::div_assign(duration_0_ref_0, u16_0);
 1630|      1|    panic!("From RustyUnit with love");
 1631|       |}
 1632|       |
 1633|       |//#[no_coverage]
 1634|      1|#[test]
 1635|       |#[should_panic]
 1636|      1|#[timeout(3000)]
 1637|      1|fn rusty_test_540() {
 1638|      1|    rusty_monitor::set_test_id(540);
 1639|      1|    let mut i128_0: i128 = 0i128;
 1640|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1641|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1642|      1|    let mut i32_0: i32 = 246i32;
 1643|      1|    let mut i64_0: i64 = 253402300799i64;
 1644|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1645|      1|    let mut u32_0: u32 = 55u32;
 1646|      1|    let mut u8_0: u8 = 23u8;
 1647|      1|    let mut u8_1: u8 = 31u8;
 1648|      1|    let mut u8_2: u8 = 1u8;
 1649|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1650|      1|    let mut i32_1: i32 = 235i32;
 1651|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1652|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1653|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_2);
 1654|      1|    let mut i8_0: i8 = -8i8;
 1655|      1|    let mut i8_1: i8 = 2i8;
 1656|      1|    let mut i8_2: i8 = 0i8;
 1657|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1658|      1|    let mut i64_1: i64 = 0i64;
 1659|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1660|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1661|      1|    let mut u32_1: u32 = 100000000u32;
 1662|      1|    let mut u8_3: u8 = 60u8;
 1663|      1|    let mut u8_4: u8 = 12u8;
 1664|      1|    let mut u8_5: u8 = 6u8;
 1665|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1666|      1|    let mut f64_0: f64 = 4696837146684686336.000000f64;
 1667|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1668|      1|    let mut u16_0: u16 = 0u16;
 1669|      1|    let mut i32_2: i32 = 111i32;
 1670|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1671|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_5);
 1672|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_1);
 1673|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_2, duration_4);
 1674|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_3, utcoffset_0);
 1675|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1676|      1|    let mut offsetdatetime_1_ref_0: &mut crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 1677|      1|    std::ops::SubAssign::sub_assign(offsetdatetime_1_ref_0, duration_1);
 1678|      1|    panic!("From RustyUnit with love");
 1679|       |}
 1680|       |
 1681|       |//#[no_coverage]
 1682|      1|#[test]
 1683|       |#[should_panic]
 1684|      1|#[timeout(3000)]
 1685|      1|fn rusty_test_479() {
 1686|      1|    rusty_monitor::set_test_id(479);
 1687|      1|    let mut i32_0: i32 = 139i32;
 1688|      1|    let mut i64_0: i64 = 12i64;
 1689|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1690|      1|    let mut duration_0_ref_0: &mut crate::duration::Duration = &mut duration_0;
 1691|      1|    let mut i32_1: i32 = 128i32;
 1692|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 1693|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1694|      1|    let mut duration_1_ref_0: &mut crate::duration::Duration = &mut duration_1;
 1695|      1|    let mut i32_2: i32 = -43i32;
 1696|      1|    let mut i64_1: i64 = -94i64;
 1697|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1698|      1|    let mut duration_2_ref_0: &mut crate::duration::Duration = &mut duration_2;
 1699|      1|    let mut i32_3: i32 = 291i32;
 1700|      1|    let mut i64_2: i64 = 0i64;
 1701|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 1702|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 1703|      1|    let mut i32_4: i32 = 128i32;
 1704|      1|    let mut i64_3: i64 = 253402300799i64;
 1705|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
 1706|      1|    let mut duration_4_ref_0: &mut crate::duration::Duration = &mut duration_4;
 1707|      1|    let mut i32_5: i32 = 5119853i32;
 1708|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1709|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
 1710|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1711|      1|    let mut instant_3: crate::instant::Instant = crate::instant::Instant::now();
 1712|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1713|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1714|      1|    std::ops::DivAssign::div_assign(duration_4_ref_0, i32_4);
 1715|      1|    std::ops::DivAssign::div_assign(duration_3_ref_0, i32_3);
 1716|      1|    std::ops::DivAssign::div_assign(duration_2_ref_0, i32_2);
 1717|      1|    std::ops::DivAssign::div_assign(duration_1_ref_0, i32_1);
 1718|      1|    std::ops::DivAssign::div_assign(duration_0_ref_0, i32_0);
 1719|      1|    panic!("From RustyUnit with love");
 1720|       |}
 1721|       |
 1722|       |//#[no_coverage]
 1723|      1|#[test]
 1724|       |#[should_panic]
 1725|      1|#[timeout(3000)]
 1726|      1|fn rusty_test_1807() {
 1727|      1|    rusty_monitor::set_test_id(1807);
 1728|      1|    let mut i128_0: i128 = -42i128;
 1729|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1730|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1731|      1|    let mut u32_0: u32 = 10000u32;
 1732|      1|    let mut u8_0: u8 = 3u8;
 1733|      1|    let mut u8_1: u8 = 53u8;
 1734|      1|    let mut u8_2: u8 = 1u8;
 1735|      1|    let mut i64_0: i64 = 0i64;
 1736|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1737|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1738|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1739|      1|    let mut i64_1: i64 = -176i64;
 1740|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1741|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1742|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1743|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1744|      1|    let mut i32_0: i32 = 167i32;
 1745|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1746|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1747|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_5, i32_0);
 1748|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1749|      1|    let mut i32_1: i32 = -34i32;
 1750|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1751|      1|    let mut i32_2: i32 = 291i32;
 1752|      1|    let mut i64_2: i64 = 1000000000i64;
 1753|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
 1754|      1|    let mut i32_3: i32 = 9i32;
 1755|      1|    let mut i64_3: i64 = 604800i64;
 1756|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
 1757|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_9, duration_8);
 1758|      1|    let mut u32_1: u32 = 10000000u32;
 1759|      1|    let mut u8_3: u8 = 61u8;
 1760|      1|    let mut u8_4: u8 = 29u8;
 1761|      1|    let mut u8_5: u8 = 9u8;
 1762|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1763|      1|    let mut i8_0: i8 = 5i8;
 1764|      1|    let mut i8_1: i8 = -57i8;
 1765|      1|    let mut i8_2: i8 = 5i8;
 1766|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1767|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1768|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
 1769|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 1770|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_1);
 1771|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_10);
 1772|      1|    let mut weekday_0: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
 1773|      1|    let mut date_0_ref_0: &mut crate::date::Date = &mut date_0;
 1774|      1|    std::ops::AddAssign::add_assign(date_0_ref_0, duration_0);
 1775|      1|    panic!("From RustyUnit with love");
 1776|       |}
 1777|       |
 1778|       |//#[no_coverage]
 1779|      1|#[test]
 1780|       |#[should_panic]
 1781|      1|#[timeout(3000)]
 1782|      1|fn rusty_test_572() {
 1783|      1|    rusty_monitor::set_test_id(572);
 1784|      1|    let mut i64_0: i64 = 12i64;
 1785|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1786|      1|    let mut i64_1: i64 = 1i64;
 1787|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1788|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1789|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1790|      1|    let mut i64_2: i64 = -150i64;
 1791|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 1792|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1793|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_4);
 1794|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1795|      1|    let mut i64_3: i64 = 63i64;
 1796|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
 1797|      1|    let mut u16_0: u16 = 63u16;
 1798|      1|    let mut i32_0: i32 = 511i32;
 1799|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1800|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_5);
 1801|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1802|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_0);
 1803|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1804|      1|    let mut time_0_ref_0: &mut crate::time::Time = &mut time_0;
 1805|      1|    let mut i32_1: i32 = 105i32;
 1806|      1|    let mut i64_4: i64 = 1i64;
 1807|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_4, i32_1);
 1808|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1809|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1810|      1|    let mut u32_0: u32 = 17u32;
 1811|      1|    let mut u8_0: u8 = 62u8;
 1812|      1|    let mut u8_1: u8 = 3u8;
 1813|      1|    let mut u8_2: u8 = 24u8;
 1814|      1|    std::ops::SubAssign::sub_assign(time_0_ref_0, duration_3);
 1815|      1|    panic!("From RustyUnit with love");
 1816|       |}
 1817|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/month.rs:
    1|       |//! The `Month` enum and its associated `impl`s.
    2|       |
    3|       |use core::convert::TryFrom;
    4|       |use core::fmt;
    5|       |use core::num::NonZeroU8;
    6|       |
    7|       |use self::Month::*;
    8|       |use crate::error;
    9|       |
   10|       |/// Months of the year.
   11|       |#[allow(clippy::missing_docs_in_private_items)] // variants
   12|       |#[repr(u8)]
   13|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
   14|       |pub enum Month {
   15|       |    January = 1,
   16|       |    February = 2,
   17|       |    March = 3,
   18|       |    April = 4,
   19|       |    May = 5,
   20|       |    June = 6,
   21|       |    July = 7,
   22|       |    August = 8,
   23|       |    September = 9,
   24|       |    October = 10,
   25|       |    November = 11,
   26|       |    December = 12,
   27|       |}
   28|       |
   29|       |impl Month {
   30|       |    /// Create a `Month` from its numerical value.
   31|      0|    pub(crate) const fn from_number(n: NonZeroU8) -> Result<Self, error::ComponentRange> {
   32|      0|        match n.get() {
   33|      0|            1 => Ok(January),
   34|      0|            2 => Ok(February),
   35|      0|            3 => Ok(March),
   36|      0|            4 => Ok(April),
   37|      0|            5 => Ok(May),
   38|      0|            6 => Ok(June),
   39|      0|            7 => Ok(July),
   40|      0|            8 => Ok(August),
   41|      0|            9 => Ok(September),
   42|      0|            10 => Ok(October),
   43|      0|            11 => Ok(November),
   44|      0|            12 => Ok(December),
   45|      0|            n => Err(error::ComponentRange {
   46|      0|                name: "month",
   47|      0|                minimum: 1,
   48|      0|                maximum: 12,
   49|      0|                value: n as _,
   50|      0|                conditional_range: false,
   51|      0|            }),
   52|       |        }
   53|      0|    }
   54|       |
   55|       |    /// Get the previous month.
   56|       |    ///
   57|       |    /// ```rust
   58|       |    /// # use time::Month;
   59|       |    /// assert_eq!(Month::January.previous(), Month::December);
   60|       |    /// ```
   61|      0|    pub const fn previous(self) -> Self {
   62|      0|        match self {
   63|      0|            January => December,
   64|      0|            February => January,
   65|      0|            March => February,
   66|      0|            April => March,
   67|      0|            May => April,
   68|      0|            June => May,
   69|      0|            July => June,
   70|      0|            August => July,
   71|      0|            September => August,
   72|      0|            October => September,
   73|      0|            November => October,
   74|      0|            December => November,
   75|       |        }
   76|      0|    }
   77|       |
   78|       |    /// Get the next month.
   79|       |    ///
   80|       |    /// ```rust
   81|       |    /// # use time::Month;
   82|       |    /// assert_eq!(Month::January.next(), Month::February);
   83|       |    /// ```
   84|      0|    pub const fn next(self) -> Self {
   85|      0|        match self {
   86|      0|            January => February,
   87|      0|            February => March,
   88|      0|            March => April,
   89|      0|            April => May,
   90|      0|            May => June,
   91|      0|            June => July,
   92|      0|            July => August,
   93|      0|            August => September,
   94|      0|            September => October,
   95|      0|            October => November,
   96|      0|            November => December,
   97|      0|            December => January,
   98|       |        }
   99|      0|    }
  100|       |}
  101|       |
  102|       |impl fmt::Display for Month {
  103|       |    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  104|      0|        f.write_str(match self {
  105|      0|            January => "January",
  106|      0|            February => "February",
  107|      0|            March => "March",
  108|      0|            April => "April",
  109|      0|            May => "May",
  110|      0|            June => "June",
  111|      0|            July => "July",
  112|      0|            August => "August",
  113|      0|            September => "September",
  114|      0|            October => "October",
  115|      0|            November => "November",
  116|      0|            December => "December",
  117|       |        })
  118|      0|    }
  119|       |}
  120|       |
  121|       |impl From<Month> for u8 {
  122|      0|    fn from(month: Month) -> Self {
  123|      0|        month as _
  124|      0|    }
  125|       |}
  126|       |
  127|       |impl TryFrom<u8> for Month {
  128|       |    type Error = error::ComponentRange;
  129|       |
  130|      0|    fn try_from(value: u8) -> Result<Self, Self::Error> {
  131|      0|        match NonZeroU8::new(value) {
  132|      0|            Some(value) => Self::from_number(value),
  133|      0|            None => Err(error::ComponentRange {
  134|      0|                name: "month",
  135|      0|                minimum: 1,
  136|      0|                maximum: 12,
  137|      0|                value: 0,
  138|      0|                conditional_range: false,
  139|      0|            }),
  140|       |        }
  141|      0|    }
  142|       |}
  143|       |
  144|       |#[cfg(test)]
  145|       |mod rusty_tests {
  146|       |	use crate::*;
  147|       |	use std::clone::Clone;
  148|       |	use std::cmp::PartialEq;
  149|       |	use std::convert::TryFrom;
  150|       |	use std::cmp::Eq;
  151|       |//#[no_coverage]
  152|      1|#[test]
  153|       |#[should_panic]
  154|      1|#[timeout(3000)]
  155|      1|fn rusty_test_129() {
  156|      1|    rusty_monitor::set_test_id(129);
  157|      1|    let mut i8_0: i8 = -116i8;
  158|      1|    let mut i8_1: i8 = 24i8;
  159|      1|    let mut i8_2: i8 = -21i8;
  160|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  161|      1|    let mut u32_0: u32 = 1000u32;
  162|      1|    let mut u8_0: u8 = 8u8;
  163|      1|    let mut u8_1: u8 = 94u8;
  164|      1|    let mut u8_2: u8 = 71u8;
  165|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  166|      1|    let mut i32_0: i32 = 320i32;
  167|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  168|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  169|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
  170|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
  171|      1|    let mut i32_1: i32 = 3600i32;
  172|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
  173|      1|    let mut i64_0: i64 = 604800i64;
  174|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  175|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  176|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_1, duration_0);
  177|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
  178|      1|    let mut i32_2: i32 = 274i32;
  179|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  180|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
  181|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_2, date_1);
  182|      1|    let mut month_0: month::Month = crate::month::Month::February;
  183|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  184|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(month_0_ref_0);
  185|      1|    let mut date_3: crate::date::Date = crate::primitive_date_time::PrimitiveDateTime::date(primitivedatetime_3);
  186|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
  187|      1|    panic!("From RustyUnit with love");
  188|       |}
  189|       |
  190|       |//#[no_coverage]
  191|      1|#[test]
  192|       |#[should_panic]
  193|      1|#[timeout(3000)]
  194|      1|fn rusty_test_636() {
  195|      1|    rusty_monitor::set_test_id(636);
  196|      1|    let mut month_0: month::Month = crate::month::Month::July;
  197|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  198|      1|    let mut month_1: month::Month = crate::month::Month::September;
  199|      1|    let mut month_1_ref_0: &month::Month = &mut month_1;
  200|      1|    let mut month_2: month::Month = crate::month::Month::November;
  201|      1|    let mut month_2_ref_0: &month::Month = &mut month_2;
  202|      1|    let mut f32_0: f32 = 3.917696f32;
  203|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  204|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  205|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
  206|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  207|      1|    let mut u16_0: u16 = 9u16;
  208|      1|    let mut i32_0: i32 = 274i32;
  209|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  210|      1|    let mut month_3: month::Month = crate::month::Month::November;
  211|      1|    let mut month_3_ref_0: &month::Month = &mut month_3;
  212|      1|    let mut month_4: month::Month = crate::month::Month::October;
  213|      1|    let mut month_5: month::Month = crate::month::Month::next(month_4);
  214|      1|    let mut month_5_ref_0: &month::Month = &mut month_5;
  215|      1|    let mut month_6: month::Month = std::clone::Clone::clone(month_5_ref_0);
  216|      1|    let mut month_7: month::Month = std::clone::Clone::clone(month_3_ref_0);
  217|      1|    let mut month_8: month::Month = std::clone::Clone::clone(month_2_ref_0);
  218|      1|    let mut month_9: month::Month = std::clone::Clone::clone(month_1_ref_0);
  219|      1|    let mut month_10: month::Month = std::clone::Clone::clone(month_0_ref_0);
  220|      1|    panic!("From RustyUnit with love");
  221|       |}
  222|       |
  223|       |//#[no_coverage]
  224|      1|#[test]
  225|       |#[should_panic]
  226|      1|#[timeout(3000)]
  227|      1|fn rusty_test_530() {
  228|      1|    rusty_monitor::set_test_id(530);
  229|      1|    let mut month_0: month::Month = crate::month::Month::January;
  230|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  231|      1|    let mut month_1: month::Month = crate::month::Month::October;
  232|      1|    let mut month_1_ref_0: &month::Month = &mut month_1;
  233|      1|    let mut month_2: month::Month = crate::month::Month::March;
  234|      1|    let mut month_2_ref_0: &month::Month = &mut month_2;
  235|      1|    let mut month_3: month::Month = crate::month::Month::August;
  236|      1|    let mut month_3_ref_0: &month::Month = &mut month_3;
  237|      1|    let mut month_4: month::Month = crate::month::Month::December;
  238|      1|    let mut month_4_ref_0: &month::Month = &mut month_4;
  239|      1|    let mut u32_0: u32 = 1000u32;
  240|      1|    let mut u8_0: u8 = 0u8;
  241|      1|    let mut u8_1: u8 = 85u8;
  242|      1|    let mut u8_2: u8 = 5u8;
  243|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  244|      1|    let mut i128_0: i128 = 1000000000i128;
  245|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  246|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  247|      1|    let mut u16_0: u16 = 0u16;
  248|      1|    let mut i32_0: i32 = 156i32;
  249|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  250|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  251|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
  252|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
  253|      1|    let mut month_5: month::Month = crate::offset_date_time::OffsetDateTime::month(offsetdatetime_0);
  254|      1|    let mut month_5_ref_0: &month::Month = &mut month_5;
  255|      1|    let mut month_6: month::Month = crate::month::Month::October;
  256|      1|    let mut month_6_ref_0: &month::Month = &mut month_6;
  257|      1|    let mut month_7: month::Month = crate::month::Month::August;
  258|      1|    let mut month_7_ref_0: &month::Month = &mut month_7;
  259|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(month_7_ref_0, month_6_ref_0);
  260|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(month_5_ref_0, month_4_ref_0);
  261|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(month_3_ref_0, month_2_ref_0);
  262|      1|    let mut bool_3: bool = std::cmp::PartialEq::eq(month_1_ref_0, month_0_ref_0);
  263|      1|    panic!("From RustyUnit with love");
  264|       |}
  265|       |
  266|       |//#[no_coverage]
  267|      1|#[test]
  268|       |#[should_panic]
  269|      1|#[timeout(3000)]
  270|      1|fn rusty_test_531() {
  271|      1|    rusty_monitor::set_test_id(531);
  272|      1|    let mut month_0: month::Month = crate::month::Month::August;
  273|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  274|      1|    let mut month_1: month::Month = crate::month::Month::June;
  275|      1|    let mut month_2: month::Month = crate::month::Month::next(month_1);
  276|      1|    let mut month_2_ref_0: &month::Month = &mut month_2;
  277|      1|    let mut month_3: month::Month = crate::month::Month::September;
  278|      1|    let mut month_3_ref_0: &month::Month = &mut month_3;
  279|      1|    let mut month_4: month::Month = crate::month::Month::November;
  280|      1|    let mut month_4_ref_0: &month::Month = &mut month_4;
  281|      1|    let mut i32_0: i32 = 128i32;
  282|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  283|      1|    let mut month_5: month::Month = crate::date::Date::month(date_0);
  284|      1|    let mut month_6: month::Month = crate::month::Month::previous(month_5);
  285|      1|    let mut month_6_ref_0: &month::Month = &mut month_6;
  286|      1|    let mut month_7: month::Month = crate::month::Month::February;
  287|      1|    let mut month_7_ref_0: &month::Month = &mut month_7;
  288|      1|    let mut month_8: month::Month = crate::month::Month::January;
  289|      1|    let mut month_8_ref_0: &month::Month = &mut month_8;
  290|      1|    let mut month_9: month::Month = crate::month::Month::December;
  291|      1|    let mut month_9_ref_0: &month::Month = &mut month_9;
  292|      1|    let mut month_10: month::Month = crate::month::Month::February;
  293|      1|    let mut month_10_ref_0: &month::Month = &mut month_10;
  294|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(month_10_ref_0);
  295|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(month_9_ref_0);
  296|      1|    let mut tuple_2: () = std::cmp::Eq::assert_receiver_is_total_eq(month_8_ref_0);
  297|      1|    let mut tuple_3: () = std::cmp::Eq::assert_receiver_is_total_eq(month_7_ref_0);
  298|      1|    let mut tuple_4: () = std::cmp::Eq::assert_receiver_is_total_eq(month_6_ref_0);
  299|      1|    let mut tuple_5: () = std::cmp::Eq::assert_receiver_is_total_eq(month_4_ref_0);
  300|      1|    let mut tuple_6: () = std::cmp::Eq::assert_receiver_is_total_eq(month_3_ref_0);
  301|      1|    let mut tuple_7: () = std::cmp::Eq::assert_receiver_is_total_eq(month_2_ref_0);
  302|      1|    let mut tuple_8: () = std::cmp::Eq::assert_receiver_is_total_eq(month_0_ref_0);
  303|      1|    panic!("From RustyUnit with love");
  304|       |}
  305|       |
  306|       |//#[no_coverage]
  307|      1|#[test]
  308|       |#[should_panic]
  309|      1|#[timeout(3000)]
  310|      1|fn rusty_test_635() {
  311|      1|    rusty_monitor::set_test_id(635);
  312|      1|    let mut month_0: month::Month = crate::month::Month::December;
  313|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  314|      1|    let mut month_1: month::Month = crate::month::Month::May;
  315|      1|    let mut month_2: month::Month = crate::month::Month::next(month_1);
  316|      1|    let mut month_3: month::Month = crate::month::Month::July;
  317|      1|    let mut month_3_ref_0: &month::Month = &mut month_3;
  318|      1|    let mut month_4: month::Month = crate::month::Month::September;
  319|      1|    let mut month_4_ref_0: &month::Month = &mut month_4;
  320|      1|    let mut month_5: month::Month = crate::month::Month::November;
  321|      1|    let mut month_5_ref_0: &month::Month = &mut month_5;
  322|      1|    let mut f32_0: f32 = 3.917696f32;
  323|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  324|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  325|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
  326|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  327|      1|    let mut i64_0: i64 = 3600i64;
  328|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  329|      1|    let mut u16_0: u16 = 9u16;
  330|      1|    let mut i32_0: i32 = 274i32;
  331|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  332|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  333|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
  334|      1|    let mut month_6: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_0);
  335|      1|    let mut month_6_ref_0: &month::Month = &mut month_6;
  336|      1|    let mut month_7: month::Month = crate::month::Month::November;
  337|      1|    let mut month_7_ref_0: &month::Month = &mut month_7;
  338|      1|    let mut month_8: month::Month = crate::month::Month::October;
  339|      1|    let mut month_9: month::Month = crate::month::Month::next(month_2);
  340|      1|    let mut month_8_ref_0: &month::Month = &mut month_8;
  341|      1|    let mut month_10: month::Month = std::clone::Clone::clone(month_8_ref_0);
  342|      1|    let mut month_11: month::Month = std::clone::Clone::clone(month_7_ref_0);
  343|      1|    let mut month_12: month::Month = std::clone::Clone::clone(month_0_ref_0);
  344|      1|    let mut month_13: month::Month = std::clone::Clone::clone(month_5_ref_0);
  345|      1|    let mut month_14: month::Month = std::clone::Clone::clone(month_4_ref_0);
  346|      1|    let mut month_15: month::Month = std::clone::Clone::clone(month_6_ref_0);
  347|      1|    panic!("From RustyUnit with love");
  348|       |}
  349|       |
  350|       |//#[no_coverage]
  351|      1|#[test]
  352|       |#[should_panic]
  353|      1|#[timeout(3000)]
  354|      1|fn rusty_test_529() {
  355|      1|    rusty_monitor::set_test_id(529);
  356|      1|    let mut month_0: month::Month = crate::month::Month::July;
  357|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  358|      1|    let mut month_1: month::Month = crate::month::Month::September;
  359|      1|    let mut month_1_ref_0: &month::Month = &mut month_1;
  360|      1|    let mut month_2: month::Month = crate::month::Month::November;
  361|      1|    let mut month_2_ref_0: &month::Month = &mut month_2;
  362|      1|    let mut f32_0: f32 = 3.917696f32;
  363|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  364|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  365|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
  366|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  367|      1|    let mut i64_0: i64 = 3600i64;
  368|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  369|      1|    let mut u16_0: u16 = 9u16;
  370|      1|    let mut i32_0: i32 = 274i32;
  371|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  372|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  373|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
  374|      1|    let mut month_3: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_0);
  375|      1|    let mut month_3_ref_0: &month::Month = &mut month_3;
  376|      1|    let mut month_4: month::Month = crate::month::Month::November;
  377|      1|    let mut month_4_ref_0: &month::Month = &mut month_4;
  378|      1|    let mut month_5: month::Month = crate::month::Month::October;
  379|      1|    let mut month_6: month::Month = crate::month::Month::next(month_5);
  380|      1|    let mut month_6_ref_0: &month::Month = &mut month_6;
  381|      1|    let mut month_7: month::Month = std::clone::Clone::clone(month_6_ref_0);
  382|      1|    let mut month_8: month::Month = std::clone::Clone::clone(month_4_ref_0);
  383|      1|    let mut month_9: month::Month = std::clone::Clone::clone(month_3_ref_0);
  384|      1|    let mut month_10: month::Month = std::clone::Clone::clone(month_2_ref_0);
  385|      1|    let mut month_11: month::Month = std::clone::Clone::clone(month_1_ref_0);
  386|      1|    let mut month_12: month::Month = std::clone::Clone::clone(month_0_ref_0);
  387|      1|    panic!("From RustyUnit with love");
  388|       |}
  389|       |
  390|       |//#[no_coverage]
  391|      1|#[test]
  392|       |#[should_panic]
  393|      1|#[timeout(3000)]
  394|      1|fn rusty_test_278() {
  395|      1|    rusty_monitor::set_test_id(278);
  396|      1|    let mut u8_0: u8 = 63u8;
  397|      1|    let mut u8_1: u8 = 59u8;
  398|      1|    let mut u8_2: u8 = 60u8;
  399|      1|    let mut u8_3: u8 = 62u8;
  400|      1|    let mut u8_4: u8 = 53u8;
  401|      1|    let mut u8_5: u8 = 12u8;
  402|      1|    let mut u8_6: u8 = 4u8;
  403|      1|    let mut u8_7: u8 = 5u8;
  404|      1|    let mut u8_8: u8 = 24u8;
  405|      1|    let mut u8_9: u8 = 59u8;
  406|      1|    let mut u8_10: u8 = 7u8;
  407|      1|    let mut u8_11: u8 = 8u8;
  408|      1|    let mut u8_12: u8 = 23u8;
  409|      1|    let mut u8_13: u8 = 11u8;
  410|      1|    let mut u8_14: u8 = 11u8;
  411|      1|    let mut u8_15: u8 = 53u8;
  412|      1|    let mut result_0: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_15);
  413|      1|    let mut result_1: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_14);
  414|      1|    let mut result_2: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_13);
  415|      1|    let mut result_3: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_12);
  416|      1|    let mut result_4: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_11);
  417|      1|    let mut result_5: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_10);
  418|      1|    let mut result_6: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_9);
  419|      1|    let mut result_7: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_8);
  420|      1|    let mut result_8: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_7);
  421|      1|    let mut result_9: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_6);
  422|      1|    let mut result_10: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_5);
  423|      1|    let mut result_11: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_4);
  424|      1|    let mut result_12: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_3);
  425|      1|    let mut result_13: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_2);
  426|      1|    let mut result_14: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_1);
  427|      1|    let mut result_15: std::result::Result<month::Month, crate::error::component_range::ComponentRange> = std::convert::TryFrom::try_from(u8_0);
  428|      1|    panic!("From RustyUnit with love");
  429|       |}
  430|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/offset_date_time.rs:
    1|       |//! The [`OffsetDateTime`] struct and its associated `impl`s.
    2|       |
    3|       |use core::cmp::Ordering;
    4|       |#[cfg(feature = "std")]
    5|       |use core::convert::From;
    6|       |use core::fmt;
    7|       |use core::hash::{Hash, Hasher};
    8|       |use core::ops::{Add, Sub};
    9|       |use core::time::Duration as StdDuration;
   10|       |#[cfg(feature = "formatting")]
   11|       |use std::io;
   12|       |#[cfg(feature = "std")]
   13|       |use std::time::SystemTime;
   14|       |
   15|       |#[cfg(feature = "formatting")]
   16|       |use crate::formatting::Formattable;
   17|       |#[cfg(feature = "parsing")]
   18|       |use crate::parsing::Parsable;
   19|       |use crate::{error, Date, Duration, Month, PrimitiveDateTime, Time, UtcOffset, Weekday};
   20|       |
   21|       |/// The Julian day of the Unix epoch.
   22|       |const UNIX_EPOCH_JULIAN_DAY: i32 = Date::__from_ordinal_date_unchecked(1970, 1).to_julian_day();
   23|       |
   24|       |/// A [`PrimitiveDateTime`] with a [`UtcOffset`].
   25|       |///
   26|       |/// All comparisons are performed using the UTC time.
   27|       |// Internally, an `OffsetDateTime` is a thin wrapper around a [`PrimitiveDateTime`] coupled with a
   28|       |// [`UtcOffset`]. This offset is added to the date, time, or datetime as necessary for presentation
   29|       |// or returning from a function.
   30|      0|#[derive(Debug, Clone, Copy, Eq)]
   31|       |pub struct OffsetDateTime {
   32|       |    /// The [`PrimitiveDateTime`], which is _always_ UTC.
   33|       |    pub(crate) utc_datetime: PrimitiveDateTime,
   34|       |    /// The [`UtcOffset`], which will be added to the [`PrimitiveDateTime`] as necessary.
   35|       |    pub(crate) offset: UtcOffset,
   36|       |}
   37|       |
   38|       |impl OffsetDateTime {
   39|       |    /// Midnight, 1 January, 1970 (UTC).
   40|       |    ///
   41|       |    /// ```rust
   42|       |    /// # use time::{OffsetDateTime, macros::datetime};
   43|       |    /// assert_eq!(OffsetDateTime::UNIX_EPOCH, datetime!(1970-01-01 0:00 UTC),);
   44|       |    /// ```
   45|       |    pub const UNIX_EPOCH: Self = Date::__from_ordinal_date_unchecked(1970, 1)
   46|       |        .midnight()
   47|       |        .assume_utc();
   48|       |
   49|       |    // region: now
   50|       |    /// Create a new `OffsetDateTime` with the current date and time in UTC.
   51|       |    ///
   52|       |    /// ```rust
   53|       |    /// # use time::{OffsetDateTime, macros::offset};
   54|       |    /// assert!(OffsetDateTime::now_utc().year() >= 2019);
   55|       |    /// assert_eq!(OffsetDateTime::now_utc().offset(), offset!(UTC));
   56|       |    /// ```
   57|       |    #[cfg(feature = "std")]
   58|       |    #[cfg_attr(__time_03_docs, doc(cfg(feature = "std")))]
   59|      0|    pub fn now_utc() -> Self {
   60|      0|        SystemTime::now().into()
   61|      0|    }
   62|       |
   63|       |    /// Attempt to create a new `OffsetDateTime` with the current date and time in the local offset.
   64|       |    /// If the offset cannot be determined, an error is returned.
   65|       |    ///
   66|       |    /// ```rust
   67|       |    /// # use time::OffsetDateTime;
   68|       |    /// # if false {
   69|       |    /// assert!(OffsetDateTime::now_local().is_ok());
   70|       |    /// # }
   71|       |    /// ```
   72|       |    #[cfg(feature = "local-offset")]
   73|       |    #[cfg_attr(__time_03_docs, doc(cfg(feature = "local-offset")))]
   74|       |    pub fn now_local() -> Result<Self, error::IndeterminateOffset> {
   75|       |        let t = Self::now_utc();
   76|       |        Ok(t.to_offset(UtcOffset::local_offset_at(t)?))
   77|       |    }
   78|       |    // endregion now
   79|       |
   80|       |    /// Convert the `OffsetDateTime` from the current [`UtcOffset`] to the provided [`UtcOffset`].
   81|       |    ///
   82|       |    /// ```rust
   83|       |    /// # use time::macros::{datetime, offset};
   84|       |    /// assert_eq!(
   85|       |    ///     datetime!(2000-01-01 0:00 UTC)
   86|       |    ///         .to_offset(offset!(-1))
   87|       |    ///         .year(),
   88|       |    ///     1999,
   89|       |    /// );
   90|       |    ///
   91|       |    /// // Let's see what time Sydney's new year's celebration is in New York // and Los Angeles.
   92|       |    ///
   93|       |    /// // Construct midnight on new year's in Sydney.
   94|       |    /// let sydney = datetime!(2000-01-01 0:00 +11);
   95|       |    /// let new_york = sydney.to_offset(offset!(-5));
   96|       |    /// let los_angeles = sydney.to_offset(offset!(-8));
   97|       |    /// assert_eq!(sydney.hour(), 0);
   98|       |    /// assert_eq!(new_york.hour(), 8);
   99|       |    /// assert_eq!(los_angeles.hour(), 5);
  100|       |    /// ```
  101|      0|    pub const fn to_offset(self, offset: UtcOffset) -> Self {
  102|      0|        Self {
  103|      0|            utc_datetime: self.utc_datetime,
  104|      0|            offset,
  105|      0|        }
  106|      0|    }
  107|       |
  108|       |    // region: constructors
  109|       |    /// Create an `OffsetDateTime` from the provided Unix timestamp. Calling `.offset()` on the
  110|       |    /// resulting value is guaranteed to return UTC.
  111|       |    ///
  112|       |    /// ```rust
  113|       |    /// # use time::{OffsetDateTime, macros::datetime};
  114|       |    /// assert_eq!(
  115|       |    ///     OffsetDateTime::from_unix_timestamp(0),
  116|       |    ///     Ok(OffsetDateTime::UNIX_EPOCH),
  117|       |    /// );
  118|       |    /// assert_eq!(
  119|       |    ///     OffsetDateTime::from_unix_timestamp(1_546_300_800),
  120|       |    ///     Ok(datetime!(2019-01-01 0:00 UTC)),
  121|       |    /// );
  122|       |    /// ```
  123|       |    ///
  124|       |    /// If you have a timestamp-nanosecond pair, you can use something along the lines of the
  125|       |    /// following:
  126|       |    ///
  127|       |    /// ```rust
  128|       |    /// # use time::{Duration, OffsetDateTime, ext::NumericalDuration};
  129|       |    /// let (timestamp, nanos) = (1, 500_000_000);
  130|       |    /// assert_eq!(
  131|       |    ///     OffsetDateTime::from_unix_timestamp(timestamp)? + Duration::nanoseconds(nanos),
  132|       |    ///     OffsetDateTime::UNIX_EPOCH + 1.5.seconds()
  133|       |    /// );
  134|       |    /// # Ok::<_, time::Error>(())
  135|       |    /// ```
  136|      0|    pub const fn from_unix_timestamp(timestamp: i64) -> Result<Self, error::ComponentRange> {
  137|      0|        #[allow(clippy::missing_docs_in_private_items)]
  138|      0|        const MIN_TIMESTAMP: i64 = Date::MIN.midnight().assume_utc().unix_timestamp();
  139|      0|        #[allow(clippy::missing_docs_in_private_items)]
  140|      0|        const MAX_TIMESTAMP: i64 = Date::MAX
  141|      0|            .with_time(Time::__from_hms_nanos_unchecked(23, 59, 59, 999_999_999))
  142|      0|            .assume_utc()
  143|      0|            .unix_timestamp();
  144|      0|
  145|      0|        ensure_value_in_range!(timestamp in MIN_TIMESTAMP => MAX_TIMESTAMP);
  146|       |
  147|       |        // Use the unchecked method here, as the input validity has already been verified.
  148|      0|        let date = Date::from_julian_day_unchecked(
  149|      0|            UNIX_EPOCH_JULIAN_DAY + div_floor!(timestamp, 86_400) as i32,
  150|       |        );
  151|       |
  152|      0|        let seconds_within_day = timestamp.rem_euclid(86_400);
  153|      0|        let time = Time::__from_hms_nanos_unchecked(
  154|      0|            (seconds_within_day / 3_600) as _,
  155|      0|            ((seconds_within_day % 3_600) / 60) as _,
  156|      0|            (seconds_within_day % 60) as _,
  157|      0|            0,
  158|      0|        );
  159|      0|
  160|      0|        Ok(PrimitiveDateTime::new(date, time).assume_utc())
  161|      0|    }
  162|       |
  163|       |    /// Construct an `OffsetDateTime` from the provided Unix timestamp (in nanoseconds). Calling
  164|       |    /// `.offset()` on the resulting value is guaranteed to return UTC.
  165|       |    ///
  166|       |    /// ```rust
  167|       |    /// # use time::{OffsetDateTime, macros::datetime};
  168|       |    /// assert_eq!(
  169|       |    ///     OffsetDateTime::from_unix_timestamp_nanos(0),
  170|       |    ///     Ok(OffsetDateTime::UNIX_EPOCH),
  171|       |    /// );
  172|       |    /// assert_eq!(
  173|       |    ///     OffsetDateTime::from_unix_timestamp_nanos(1_546_300_800_000_000_000),
  174|       |    ///     Ok(datetime!(2019-01-01 0:00 UTC)),
  175|       |    /// );
  176|       |    /// ```
  177|      0|    pub const fn from_unix_timestamp_nanos(timestamp: i128) -> Result<Self, error::ComponentRange> {
  178|      0|        let datetime = const_try!(Self::from_unix_timestamp(
  179|      0|            div_floor!(timestamp, 1_000_000_000) as i64
  180|       |        ));
  181|       |
  182|      0|        Ok(datetime
  183|      0|            .utc_datetime
  184|      0|            .replace_time(Time::__from_hms_nanos_unchecked(
  185|      0|                datetime.utc_datetime.hour(),
  186|      0|                datetime.utc_datetime.minute(),
  187|      0|                datetime.utc_datetime.second(),
  188|      0|                timestamp.rem_euclid(1_000_000_000) as u32,
  189|      0|            ))
  190|      0|            .assume_utc())
  191|      0|    }
  192|       |    // endregion constructors
  193|       |
  194|       |    // region: getters
  195|       |    /// Get the [`UtcOffset`].
  196|       |    ///
  197|       |    /// ```rust
  198|       |    /// # use time::macros::{datetime, offset};
  199|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).offset(), offset!(UTC));
  200|       |    /// assert_eq!(datetime!(2019-01-01 0:00 +1).offset(), offset!(+1));
  201|       |    /// ```
  202|      0|    pub const fn offset(self) -> UtcOffset {
  203|      0|        self.offset
  204|      0|    }
  205|       |
  206|       |    /// Get the [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
  207|       |    ///
  208|       |    /// ```rust
  209|       |    /// # use time::macros::datetime;
  210|       |    /// assert_eq!(datetime!(1970-01-01 0:00 UTC).unix_timestamp(), 0);
  211|       |    /// assert_eq!(datetime!(1970-01-01 0:00 -1).unix_timestamp(), 3_600);
  212|       |    /// ```
  213|      0|    pub const fn unix_timestamp(self) -> i64 {
  214|      0|        let days =
  215|      0|            (self.utc_datetime.to_julian_day() as i64 - UNIX_EPOCH_JULIAN_DAY as i64) * 86_400;
  216|      0|        let hours = self.utc_datetime.hour() as i64 * 3_600;
  217|      0|        let minutes = self.utc_datetime.minute() as i64 * 60;
  218|      0|        let seconds = self.utc_datetime.second() as i64;
  219|      0|        days + hours + minutes + seconds
  220|      0|    }
  221|       |
  222|       |    /// Get the Unix timestamp in nanoseconds.
  223|       |    ///
  224|       |    /// ```rust
  225|       |    /// use time::macros::datetime;
  226|       |    /// assert_eq!(datetime!(1970-01-01 0:00 UTC).unix_timestamp_nanos(), 0);
  227|       |    /// assert_eq!(
  228|       |    ///     datetime!(1970-01-01 0:00 -1).unix_timestamp_nanos(),
  229|       |    ///     3_600_000_000_000,
  230|       |    /// );
  231|       |    /// ```
  232|      0|    pub const fn unix_timestamp_nanos(self) -> i128 {
  233|      0|        self.unix_timestamp() as i128 * 1_000_000_000 + self.utc_datetime.nanosecond() as i128
  234|      0|    }
  235|       |
  236|       |    /// Get the [`Date`] in the stored offset.
  237|       |    ///
  238|       |    /// ```rust
  239|       |    /// # use time::macros::{date, datetime, offset};
  240|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).date(), date!(2019-01-01));
  241|       |    /// assert_eq!(
  242|       |    ///     datetime!(2019-01-01 0:00 UTC)
  243|       |    ///         .to_offset(offset!(-1))
  244|       |    ///         .date(),
  245|       |    ///     date!(2018-12-31),
  246|       |    /// );
  247|       |    /// ```
  248|      0|    pub const fn date(self) -> Date {
  249|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  250|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  251|      0|        let mut hour = self.utc_datetime.hour() as i8 + self.offset.whole_hours();
  252|      0|        let (mut year, mut ordinal) = self.utc_datetime.date.to_ordinal_date();
  253|      0|
  254|      0|        cascade!(second in 0..60 => minute);
  255|      0|        cascade!(minute in 0..60 => hour);
  256|      0|        cascade!(hour in 0..24 => ordinal);
  257|      0|        cascade!(ordinal => year);
  258|       |
  259|      0|        Date::__from_ordinal_date_unchecked(year, ordinal)
  260|      0|    }
  261|       |
  262|       |    /// Get the [`Time`] in the stored offset.
  263|       |    ///
  264|       |    /// ```rust
  265|       |    /// # use time::macros::{datetime, offset, time};
  266|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).time(), time!(0:00));
  267|       |    /// assert_eq!(
  268|       |    ///     datetime!(2019-01-01 0:00 UTC)
  269|       |    ///         .to_offset(offset!(-1))
  270|       |    ///         .time(),
  271|       |    ///     time!(23:00)
  272|       |    /// );
  273|       |    /// ```
  274|      0|    pub const fn time(self) -> Time {
  275|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  276|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  277|      0|        let mut hour = self.utc_datetime.hour() as i8 + self.offset.whole_hours();
  278|      0|
  279|      0|        cascade!(second in 0..60 => minute);
  280|      0|        cascade!(minute in 0..60 => hour);
  281|       |
  282|      0|        Time::__from_hms_nanos_unchecked(
  283|      0|            hour.rem_euclid(24) as _,
  284|      0|            minute as _,
  285|      0|            second as _,
  286|      0|            self.utc_datetime.nanosecond(),
  287|      0|        )
  288|      0|    }
  289|       |
  290|       |    // region: date getters
  291|       |    /// Get the year of the date in the stored offset.
  292|       |    ///
  293|       |    /// ```rust
  294|       |    /// # use time::macros::{datetime, offset};
  295|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).year(), 2019);
  296|       |    /// assert_eq!(
  297|       |    ///     datetime!(2019-12-31 23:00 UTC)
  298|       |    ///         .to_offset(offset!(+1))
  299|       |    ///         .year(),
  300|       |    ///     2020,
  301|       |    /// );
  302|       |    /// assert_eq!(datetime!(2020-01-01 0:00 UTC).year(), 2020);
  303|       |    /// ```
  304|      0|    pub const fn year(self) -> i32 {
  305|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  306|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  307|      0|        let mut hour = self.utc_datetime.hour() as i8 + self.offset.whole_hours();
  308|      0|        let (mut year, mut ordinal) = self.utc_datetime.date.to_ordinal_date();
  309|      0|
  310|      0|        cascade!(second in 0..60 => minute);
  311|      0|        cascade!(minute in 0..60 => hour);
  312|      0|        cascade!(hour in 0..24 => ordinal);
  313|      0|        cascade!(ordinal => year);
  314|       |
  315|      0|        year
  316|      0|    }
  317|       |
  318|       |    /// Get the month of the date in the stored offset.
  319|       |    ///
  320|       |    /// ```rust
  321|       |    /// # use time::Month;
  322|       |    /// # use time::macros::{datetime, offset};
  323|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).month(), Month::January);
  324|       |    /// assert_eq!(
  325|       |    ///     datetime!(2019-12-31 23:00 UTC)
  326|       |    ///         .to_offset(offset!(+1))
  327|       |    ///         .month(),
  328|       |    ///     Month::January,
  329|       |    /// );
  330|       |    /// ```
  331|      0|    pub const fn month(self) -> Month {
  332|      0|        self.date().month()
  333|      0|    }
  334|       |
  335|       |    /// Get the day of the date in the stored offset.
  336|       |    ///
  337|       |    /// The returned value will always be in the range `1..=31`.
  338|       |    ///
  339|       |    /// ```rust
  340|       |    /// # use time::macros::{datetime, offset};
  341|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).day(), 1);
  342|       |    /// assert_eq!(
  343|       |    ///     datetime!(2019-12-31 23:00 UTC)
  344|       |    ///         .to_offset(offset!(+1))
  345|       |    ///         .day(),
  346|       |    ///     1,
  347|       |    /// );
  348|       |    /// ```
  349|      0|    pub const fn day(self) -> u8 {
  350|      0|        self.date().day()
  351|      0|    }
  352|       |
  353|       |    /// Get the day of the year of the date in the stored offset.
  354|       |    ///
  355|       |    /// The returned value will always be in the range `1..=366`.
  356|       |    ///
  357|       |    /// ```rust
  358|       |    /// # use time::macros::{datetime, offset};
  359|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).ordinal(), 1);
  360|       |    /// assert_eq!(
  361|       |    ///     datetime!(2019-12-31 23:00 UTC)
  362|       |    ///         .to_offset(offset!(+1))
  363|       |    ///         .ordinal(),
  364|       |    ///     1,
  365|       |    /// );
  366|       |    /// ```
  367|      0|    pub const fn ordinal(self) -> u16 {
  368|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  369|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  370|      0|        let mut hour = self.utc_datetime.hour() as i8 + self.offset.whole_hours();
  371|      0|        let (mut year, mut ordinal) = self.utc_datetime.date.to_ordinal_date();
  372|      0|
  373|      0|        cascade!(second in 0..60 => minute);
  374|      0|        cascade!(minute in 0..60 => hour);
  375|      0|        cascade!(hour in 0..24 => ordinal);
  376|      0|        cascade!(ordinal => year);
  377|       |
  378|      0|        ordinal
  379|      0|    }
  380|       |
  381|       |    /// Get the ISO week number of the date in the stored offset.
  382|       |    ///
  383|       |    /// The returned value will always be in the range `1..=53`.
  384|       |    ///
  385|       |    /// ```rust
  386|       |    /// # use time::macros::datetime;
  387|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).iso_week(), 1);
  388|       |    /// assert_eq!(datetime!(2020-01-01 0:00 UTC).iso_week(), 1);
  389|       |    /// assert_eq!(datetime!(2020-12-31 0:00 UTC).iso_week(), 53);
  390|       |    /// assert_eq!(datetime!(2021-01-01 0:00 UTC).iso_week(), 53);
  391|       |    /// ```
  392|      0|    pub const fn iso_week(self) -> u8 {
  393|      0|        self.date().iso_week()
  394|      0|    }
  395|       |
  396|       |    /// Get the week number where week 1 begins on the first Sunday.
  397|       |    ///
  398|       |    /// The returned value will always be in the range `0..=53`.
  399|       |    ///
  400|       |    /// ```rust
  401|       |    /// # use time::macros::datetime;
  402|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).sunday_based_week(), 0);
  403|       |    /// assert_eq!(datetime!(2020-01-01 0:00 UTC).sunday_based_week(), 0);
  404|       |    /// assert_eq!(datetime!(2020-12-31 0:00 UTC).sunday_based_week(), 52);
  405|       |    /// assert_eq!(datetime!(2021-01-01 0:00 UTC).sunday_based_week(), 0);
  406|       |    /// ```
  407|      0|    pub const fn sunday_based_week(self) -> u8 {
  408|      0|        self.date().sunday_based_week()
  409|      0|    }
  410|       |
  411|       |    /// Get the week number where week 1 begins on the first Monday.
  412|       |    ///
  413|       |    /// The returned value will always be in the range `0..=53`.
  414|       |    ///
  415|       |    /// ```rust
  416|       |    /// # use time::macros::datetime;
  417|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).monday_based_week(), 0);
  418|       |    /// assert_eq!(datetime!(2020-01-01 0:00 UTC).monday_based_week(), 0);
  419|       |    /// assert_eq!(datetime!(2020-12-31 0:00 UTC).monday_based_week(), 52);
  420|       |    /// assert_eq!(datetime!(2021-01-01 0:00 UTC).monday_based_week(), 0);
  421|       |    /// ```
  422|      0|    pub const fn monday_based_week(self) -> u8 {
  423|      0|        self.date().monday_based_week()
  424|      0|    }
  425|       |
  426|       |    /// Get the year, month, and day.
  427|       |    ///
  428|       |    /// ```rust
  429|       |    /// # use time::{macros::datetime, Month};
  430|       |    /// assert_eq!(
  431|       |    ///     datetime!(2019-01-01 0:00 UTC).to_calendar_date(),
  432|       |    ///     (2019, Month::January, 1)
  433|       |    /// );
  434|       |    /// ```
  435|      0|    pub const fn to_calendar_date(self) -> (i32, Month, u8) {
  436|      0|        self.date().to_calendar_date()
  437|      0|    }
  438|       |
  439|       |    /// Get the year and ordinal day number.
  440|       |    ///
  441|       |    /// ```rust
  442|       |    /// # use time::macros::datetime;
  443|       |    /// assert_eq!(
  444|       |    ///     datetime!(2019-01-01 0:00 UTC).to_ordinal_date(),
  445|       |    ///     (2019, 1)
  446|       |    /// );
  447|       |    /// ```
  448|      0|    pub const fn to_ordinal_date(self) -> (i32, u16) {
  449|      0|        self.date().to_ordinal_date()
  450|      0|    }
  451|       |
  452|       |    /// Get the ISO 8601 year, week number, and weekday.
  453|       |    ///
  454|       |    /// ```rust
  455|       |    /// # use time::{Weekday::*, macros::datetime};
  456|       |    /// assert_eq!(
  457|       |    ///     datetime!(2019-01-01 0:00 UTC).to_iso_week_date(),
  458|       |    ///     (2019, 1, Tuesday)
  459|       |    /// );
  460|       |    /// assert_eq!(
  461|       |    ///     datetime!(2019-10-04 0:00 UTC).to_iso_week_date(),
  462|       |    ///     (2019, 40, Friday)
  463|       |    /// );
  464|       |    /// assert_eq!(
  465|       |    ///     datetime!(2020-01-01 0:00 UTC).to_iso_week_date(),
  466|       |    ///     (2020, 1, Wednesday)
  467|       |    /// );
  468|       |    /// assert_eq!(
  469|       |    ///     datetime!(2020-12-31 0:00 UTC).to_iso_week_date(),
  470|       |    ///     (2020, 53, Thursday)
  471|       |    /// );
  472|       |    /// assert_eq!(
  473|       |    ///     datetime!(2021-01-01 0:00 UTC).to_iso_week_date(),
  474|       |    ///     (2020, 53, Friday)
  475|       |    /// );
  476|       |    /// ```
  477|      0|    pub const fn to_iso_week_date(self) -> (i32, u8, Weekday) {
  478|      0|        self.date().to_iso_week_date()
  479|      0|    }
  480|       |
  481|       |    /// Get the weekday of the date in the stored offset.
  482|       |    ///
  483|       |    /// ```rust
  484|       |    /// # use time::{Weekday::*, macros::datetime};
  485|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).weekday(), Tuesday);
  486|       |    /// assert_eq!(datetime!(2019-02-01 0:00 UTC).weekday(), Friday);
  487|       |    /// assert_eq!(datetime!(2019-03-01 0:00 UTC).weekday(), Friday);
  488|       |    /// ```
  489|      0|    pub const fn weekday(self) -> Weekday {
  490|      0|        self.date().weekday()
  491|      0|    }
  492|       |
  493|       |    /// Get the Julian day for the date. The time is not taken into account for this calculation.
  494|       |    ///
  495|       |    /// The algorithm to perform this conversion is derived from one provided by Peter Baum; it is
  496|       |    /// freely available [here](https://www.researchgate.net/publication/316558298_Date_Algorithms).
  497|       |    ///
  498|       |    /// ```rust
  499|       |    /// # use time::macros::datetime;
  500|       |    /// assert_eq!(datetime!(-4713-11-24 0:00 UTC).to_julian_day(), 0);
  501|       |    /// assert_eq!(datetime!(2000-01-01 0:00 UTC).to_julian_day(), 2_451_545);
  502|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).to_julian_day(), 2_458_485);
  503|       |    /// assert_eq!(datetime!(2019-12-31 0:00 UTC).to_julian_day(), 2_458_849);
  504|       |    /// ```
  505|      0|    pub const fn to_julian_day(self) -> i32 {
  506|      0|        self.date().to_julian_day()
  507|      0|    }
  508|       |    // endregion date getters
  509|       |
  510|       |    // region: time getters
  511|       |    /// Get the clock hour, minute, and second.
  512|       |    ///
  513|       |    /// ```rust
  514|       |    /// # use time::macros::datetime;
  515|       |    /// assert_eq!(datetime!(2020-01-01 0:00:00 UTC).to_hms(), (0, 0, 0));
  516|       |    /// assert_eq!(datetime!(2020-01-01 23:59:59 UTC).to_hms(), (23, 59, 59));
  517|       |    /// ```
  518|      0|    pub const fn to_hms(self) -> (u8, u8, u8) {
  519|      0|        self.time().as_hms()
  520|      0|    }
  521|       |
  522|       |    /// Get the clock hour, minute, second, and millisecond.
  523|       |    ///
  524|       |    /// ```rust
  525|       |    /// # use time::macros::datetime;
  526|       |    /// assert_eq!(
  527|       |    ///     datetime!(2020-01-01 0:00:00 UTC).to_hms_milli(),
  528|       |    ///     (0, 0, 0, 0)
  529|       |    /// );
  530|       |    /// assert_eq!(
  531|       |    ///     datetime!(2020-01-01 23:59:59.999 UTC).to_hms_milli(),
  532|       |    ///     (23, 59, 59, 999)
  533|       |    /// );
  534|       |    /// ```
  535|      0|    pub const fn to_hms_milli(self) -> (u8, u8, u8, u16) {
  536|      0|        self.time().as_hms_milli()
  537|      0|    }
  538|       |
  539|       |    /// Get the clock hour, minute, second, and microsecond.
  540|       |    ///
  541|       |    /// ```rust
  542|       |    /// # use time::macros::datetime;
  543|       |    /// assert_eq!(
  544|       |    ///     datetime!(2020-01-01 0:00:00 UTC).to_hms_micro(),
  545|       |    ///     (0, 0, 0, 0)
  546|       |    /// );
  547|       |    /// assert_eq!(
  548|       |    ///     datetime!(2020-01-01 23:59:59.999_999 UTC).to_hms_micro(),
  549|       |    ///     (23, 59, 59, 999_999)
  550|       |    /// );
  551|       |    /// ```
  552|      0|    pub const fn to_hms_micro(self) -> (u8, u8, u8, u32) {
  553|      0|        self.time().as_hms_micro()
  554|      0|    }
  555|       |
  556|       |    /// Get the clock hour, minute, second, and nanosecond.
  557|       |    ///
  558|       |    /// ```rust
  559|       |    /// # use time::macros::datetime;
  560|       |    /// assert_eq!(
  561|       |    ///     datetime!(2020-01-01 0:00:00 UTC).to_hms_nano(),
  562|       |    ///     (0, 0, 0, 0)
  563|       |    /// );
  564|       |    /// assert_eq!(
  565|       |    ///     datetime!(2020-01-01 23:59:59.999_999_999 UTC).to_hms_nano(),
  566|       |    ///     (23, 59, 59, 999_999_999)
  567|       |    /// );
  568|       |    /// ```
  569|      0|    pub const fn to_hms_nano(self) -> (u8, u8, u8, u32) {
  570|      0|        self.time().as_hms_nano()
  571|      0|    }
  572|       |
  573|       |    /// Get the clock hour in the stored offset.
  574|       |    ///
  575|       |    /// The returned value will always be in the range `0..24`.
  576|       |    ///
  577|       |    /// ```rust
  578|       |    /// # use time::macros::{datetime, offset};
  579|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).hour(), 0);
  580|       |    /// assert_eq!(
  581|       |    ///     datetime!(2019-01-01 23:59:59 UTC)
  582|       |    ///         .to_offset(offset!(-2))
  583|       |    ///         .hour(),
  584|       |    ///     21,
  585|       |    /// );
  586|       |    /// ```
  587|      0|    pub const fn hour(self) -> u8 {
  588|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  589|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  590|      0|        let mut hour = self.utc_datetime.hour() as i8 + self.offset.whole_hours();
  591|      0|
  592|      0|        cascade!(second in 0..60 => minute);
  593|      0|        cascade!(minute in 0..60 => hour);
  594|      0|        hour.rem_euclid(24) as _
  595|      0|    }
  596|       |
  597|       |    /// Get the minute within the hour in the stored offset.
  598|       |    ///
  599|       |    /// The returned value will always be in the range `0..60`.
  600|       |    ///
  601|       |    /// ```rust
  602|       |    /// # use time::macros::{datetime, offset};
  603|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).minute(), 0);
  604|       |    /// assert_eq!(
  605|       |    ///     datetime!(2019-01-01 23:59:59 UTC)
  606|       |    ///         .to_offset(offset!(+0:30))
  607|       |    ///         .minute(),
  608|       |    ///     29,
  609|       |    /// );
  610|       |    /// ```
  611|      0|    pub const fn minute(self) -> u8 {
  612|      0|        let mut second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  613|      0|        let mut minute = self.utc_datetime.minute() as i8 + self.offset.minutes_past_hour();
  614|      0|
  615|      0|        cascade!(second in 0..60 => minute);
  616|      0|        minute.rem_euclid(60) as _
  617|      0|    }
  618|       |
  619|       |    /// Get the second within the minute in the stored offset.
  620|       |    ///
  621|       |    /// The returned value will always be in the range `0..60`.
  622|       |    ///
  623|       |    /// ```rust
  624|       |    /// # use time::macros::{datetime, offset};
  625|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).second(), 0);
  626|       |    /// assert_eq!(
  627|       |    ///     datetime!(2019-01-01 23:59:59 UTC)
  628|       |    ///         .to_offset(offset!(+0:00:30))
  629|       |    ///         .second(),
  630|       |    ///     29,
  631|       |    /// );
  632|       |    /// ```
  633|      0|    pub const fn second(self) -> u8 {
  634|      0|        let second = self.utc_datetime.second() as i8 + self.offset.seconds_past_minute();
  635|      0|        second.rem_euclid(60) as _
  636|      0|    }
  637|       |
  638|       |    // Because a `UtcOffset` is limited in resolution to one second, any subsecond value will not
  639|       |    // change when adjusting for the offset.
  640|       |
  641|       |    /// Get the milliseconds within the second in the stored offset.
  642|       |    ///
  643|       |    /// The returned value will always be in the range `0..1_000`.
  644|       |    ///
  645|       |    /// ```rust
  646|       |    /// # use time::macros::datetime;
  647|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).millisecond(), 0);
  648|       |    /// assert_eq!(datetime!(2019-01-01 23:59:59.999 UTC).millisecond(), 999);
  649|       |    /// ```
  650|      0|    pub const fn millisecond(self) -> u16 {
  651|      0|        self.utc_datetime.millisecond()
  652|      0|    }
  653|       |
  654|       |    /// Get the microseconds within the second in the stored offset.
  655|       |    ///
  656|       |    /// The returned value will always be in the range `0..1_000_000`.
  657|       |    ///
  658|       |    /// ```rust
  659|       |    /// # use time::macros::datetime;
  660|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).microsecond(), 0);
  661|       |    /// assert_eq!(
  662|       |    ///     datetime!(2019-01-01 23:59:59.999_999 UTC).microsecond(),
  663|       |    ///     999_999,
  664|       |    /// );
  665|       |    /// ```
  666|      0|    pub const fn microsecond(self) -> u32 {
  667|      0|        self.utc_datetime.microsecond()
  668|      0|    }
  669|       |
  670|       |    /// Get the nanoseconds within the second in the stored offset.
  671|       |    ///
  672|       |    /// The returned value will always be in the range `0..1_000_000_000`.
  673|       |    ///
  674|       |    /// ```rust
  675|       |    /// # use time::macros::datetime;
  676|       |    /// assert_eq!(datetime!(2019-01-01 0:00 UTC).nanosecond(), 0);
  677|       |    /// assert_eq!(
  678|       |    ///     datetime!(2019-01-01 23:59:59.999_999_999 UTC).nanosecond(),
  679|       |    ///     999_999_999,
  680|       |    /// );
  681|       |    /// ```
  682|      0|    pub const fn nanosecond(self) -> u32 {
  683|      0|        self.utc_datetime.nanosecond()
  684|      0|    }
  685|       |    // endregion time getters
  686|       |    // endregion getters
  687|       |
  688|       |    // region: checked arithmetic
  689|       |    /// Computes `self + duration`, returning `None` if an overflow occurred.
  690|       |    ///
  691|       |    /// ```
  692|       |    /// # use time::{Date, ext::NumericalDuration};
  693|       |    /// # use time::macros::{datetime, offset};
  694|       |    /// let datetime = Date::MIN.midnight().assume_offset(offset!(+10));
  695|       |    /// assert_eq!(datetime.checked_add((-2).days()), None);
  696|       |    ///
  697|       |    /// let datetime = Date::MAX.midnight().assume_offset(offset!(+10));
  698|       |    /// assert_eq!(datetime.checked_add(2.days()), None);
  699|       |    ///
  700|       |    /// assert_eq!(
  701|       |    ///     datetime!(2019 - 11 - 25 15:30 +10).checked_add(27.hours()),
  702|       |    ///     Some(datetime!(2019 - 11 - 26 18:30 +10))
  703|       |    /// );
  704|       |    /// ```
  705|      0|    pub const fn checked_add(self, duration: Duration) -> Option<Self> {
  706|      0|        let offset_datetime = self.utc_datetime.utc_to_offset(self.offset);
  707|      0|        Some(const_try_opt!(offset_datetime.checked_add(duration)).assume_offset(self.offset))
  708|      0|    }
  709|       |
  710|       |    /// Computes `self - duration`, returning `None` if an overflow occurred.
  711|       |    ///
  712|       |    /// ```
  713|       |    /// # use time::{Date, ext::NumericalDuration};
  714|       |    /// # use time::macros::{datetime, offset};
  715|       |    /// let datetime = Date::MIN.midnight().assume_offset(offset!(+10));
  716|       |    /// assert_eq!(datetime.checked_sub(2.days()), None);
  717|       |    ///
  718|       |    /// let datetime = Date::MAX.midnight().assume_offset(offset!(+10));
  719|       |    /// assert_eq!(datetime.checked_sub((-2).days()), None);
  720|       |    ///
  721|       |    /// assert_eq!(
  722|       |    ///     datetime!(2019 - 11 - 25 15:30 +10).checked_sub(27.hours()),
  723|       |    ///     Some(datetime!(2019 - 11 - 24 12:30 +10))
  724|       |    /// );
  725|       |    /// ```
  726|      0|    pub const fn checked_sub(self, duration: Duration) -> Option<Self> {
  727|      0|        let offset_datetime = self.utc_datetime.utc_to_offset(self.offset);
  728|      0|        Some(const_try_opt!(offset_datetime.checked_sub(duration)).assume_offset(self.offset))
  729|      0|    }
  730|       |    // endregion: checked arithmetic
  731|       |
  732|       |    // region: saturating arithmetic
  733|       |    /// Computes `self + duration`, saturating value on overflow.
  734|       |    ///
  735|       |    /// ```
  736|       |    /// # use time::ext::NumericalDuration;
  737|       |    /// # use time::macros::datetime;
  738|       |    /// assert_eq!(
  739|       |    ///     datetime!(-999999 - 01 - 01 0:00 +10).saturating_add((-2).days()),
  740|       |    ///     datetime!(-999999 - 01 - 01 0:00 +10)
  741|       |    /// );
  742|       |    ///
  743|       |    /// assert_eq!(
  744|       |    ///     datetime!(+999999 - 12 - 31 23:59:59.999_999_999 +10).saturating_add(2.days()),
  745|       |    ///     datetime!(+999999 - 12 - 31 23:59:59.999_999_999 +10)
  746|       |    /// );
  747|       |    ///
  748|       |    /// assert_eq!(
  749|       |    ///     datetime!(2019 - 11 - 25 15:30 +10).saturating_add(27.hours()),
  750|       |    ///     datetime!(2019 - 11 - 26 18:30 +10)
  751|       |    /// );
  752|       |    /// ```
  753|       |    pub const fn saturating_add(self, duration: Duration) -> Self {
  754|      0|        if let Some(datetime) = self.checked_add(duration) {
  755|      0|            datetime
  756|      0|        } else if duration.is_negative() {
  757|       |            PrimitiveDateTime::MIN
  758|      0|                .assume_utc()
  759|      0|                .replace_offset(self.offset)
  760|       |        } else {
  761|       |            PrimitiveDateTime::MAX
  762|      0|                .assume_utc()
  763|      0|                .replace_offset(self.offset)
  764|       |        }
  765|      0|    }
  766|       |
  767|       |    /// Computes `self - duration`, saturating value on overflow.
  768|       |    ///
  769|       |    /// ```
  770|       |    /// # use time::ext::NumericalDuration;
  771|       |    /// # use time::macros::datetime;
  772|       |    /// assert_eq!(
  773|       |    ///     datetime!(-999999 - 01 - 01 0:00 +10).saturating_sub(2.days()),
  774|       |    ///     datetime!(-999999 - 01 - 01 0:00 +10)
  775|       |    /// );
  776|       |    ///
  777|       |    /// assert_eq!(
  778|       |    ///     datetime!(+999999 - 12 - 31 23:59:59.999_999_999 +10).saturating_sub((-2).days()),
  779|       |    ///     datetime!(+999999 - 12 - 31 23:59:59.999_999_999 +10)
  780|       |    /// );
  781|       |    ///
  782|       |    /// assert_eq!(
  783|       |    ///     datetime!(2019 - 11 - 25 15:30 +10).saturating_sub(27.hours()),
  784|       |    ///     datetime!(2019 - 11 - 24 12:30 +10)
  785|       |    /// );
  786|       |    /// ```
  787|       |    pub const fn saturating_sub(self, duration: Duration) -> Self {
  788|      0|        if let Some(datetime) = self.checked_sub(duration) {
  789|      0|            datetime
  790|      0|        } else if duration.is_negative() {
  791|       |            PrimitiveDateTime::MAX
  792|      0|                .assume_utc()
  793|      0|                .replace_offset(self.offset)
  794|       |        } else {
  795|       |            PrimitiveDateTime::MIN
  796|      0|                .assume_utc()
  797|      0|                .replace_offset(self.offset)
  798|       |        }
  799|      0|    }
  800|       |    // endregion: saturating arithmetic
  801|       |}
  802|       |
  803|       |// region: replacement
  804|       |/// Methods that replace part of the `OffsetDateTime`.
  805|       |impl OffsetDateTime {
  806|       |    /// Replace the time, which is assumed to be in the stored offset. The date and offset
  807|       |    /// components are unchanged.
  808|       |    ///
  809|       |    /// ```rust
  810|       |    /// # use time::macros::{datetime, time};
  811|       |    /// assert_eq!(
  812|       |    ///     datetime!(2020-01-01 5:00 UTC).replace_time(time!(12:00)),
  813|       |    ///     datetime!(2020-01-01 12:00 UTC)
  814|       |    /// );
  815|       |    /// assert_eq!(
  816|       |    ///     datetime!(2020-01-01 12:00 -5).replace_time(time!(7:00)),
  817|       |    ///     datetime!(2020-01-01 7:00 -5)
  818|       |    /// );
  819|       |    /// assert_eq!(
  820|       |    ///     datetime!(2020-01-01 0:00 +1).replace_time(time!(12:00)),
  821|       |    ///     datetime!(2020-01-01 12:00 +1)
  822|       |    /// );
  823|       |    /// ```
  824|       |    #[must_use = "This method does not mutate the original `OffsetDateTime`."]
  825|      0|    pub const fn replace_time(self, time: Time) -> Self {
  826|      0|        self.utc_datetime
  827|      0|            .utc_to_offset(self.offset)
  828|      0|            .replace_time(time)
  829|      0|            .assume_offset(self.offset)
  830|      0|    }
  831|       |
  832|       |    /// Replace the date, which is assumed to be in the stored offset. The time and offset
  833|       |    /// components are unchanged.
  834|       |    ///
  835|       |    /// ```rust
  836|       |    /// # use time::macros::{datetime, date};
  837|       |    /// assert_eq!(
  838|       |    ///     datetime!(2020-01-01 12:00 UTC).replace_date(date!(2020-01-30)),
  839|       |    ///     datetime!(2020-01-30 12:00 UTC)
  840|       |    /// );
  841|       |    /// assert_eq!(
  842|       |    ///     datetime!(2020-01-01 0:00 +1).replace_date(date!(2020-01-30)),
  843|       |    ///     datetime!(2020-01-30 0:00 +1)
  844|       |    /// );
  845|       |    /// ```
  846|       |    #[must_use = "This method does not mutate the original `OffsetDateTime`."]
  847|      0|    pub const fn replace_date(self, date: Date) -> Self {
  848|      0|        self.utc_datetime
  849|      0|            .utc_to_offset(self.offset)
  850|      0|            .replace_date(date)
  851|      0|            .assume_offset(self.offset)
  852|      0|    }
  853|       |
  854|       |    /// Replace the date and time, which are assumed to be in the stored offset. The offset
  855|       |    /// component remains unchanged.
  856|       |    ///
  857|       |    /// ```rust
  858|       |    /// # use time::macros::datetime;
  859|       |    /// assert_eq!(
  860|       |    ///     datetime!(2020-01-01 12:00 UTC).replace_date_time(datetime!(2020-01-30 16:00)),
  861|       |    ///     datetime!(2020-01-30 16:00 UTC)
  862|       |    /// );
  863|       |    /// assert_eq!(
  864|       |    ///     datetime!(2020-01-01 12:00 +1).replace_date_time(datetime!(2020-01-30 0:00)),
  865|       |    ///     datetime!(2020-01-30 0:00 +1)
  866|       |    /// );
  867|       |    /// ```
  868|       |    #[must_use = "This method does not mutate the original `OffsetDateTime`."]
  869|      0|    pub const fn replace_date_time(self, date_time: PrimitiveDateTime) -> Self {
  870|      0|        date_time.assume_offset(self.offset)
  871|      0|    }
  872|       |
  873|       |    /// Replace the offset. The date and time components remain unchanged.
  874|       |    ///
  875|       |    /// ```rust
  876|       |    /// # use time::macros::{datetime, offset};
  877|       |    /// assert_eq!(
  878|       |    ///     datetime!(2020-01-01 0:00 UTC).replace_offset(offset!(-5)),
  879|       |    ///     datetime!(2020-01-01 0:00 -5)
  880|       |    /// );
  881|       |    /// ```
  882|       |    #[must_use = "This method does not mutate the original `OffsetDateTime`."]
  883|      0|    pub const fn replace_offset(self, offset: UtcOffset) -> Self {
  884|      0|        self.utc_datetime.assume_offset(offset)
  885|      0|    }
  886|       |}
  887|       |// endregion replacement
  888|       |
  889|       |// region: formatting & parsing
  890|       |#[cfg(feature = "formatting")]
  891|       |impl OffsetDateTime {
  892|       |    /// Format the `OffsetDateTime` using the provided [format
  893|       |    /// description](crate::format_description).
  894|       |    pub fn format_into(
  895|       |        self,
  896|       |        output: &mut impl io::Write,
  897|       |        format: &(impl Formattable + ?Sized),
  898|       |    ) -> Result<usize, error::Format> {
  899|       |        let local = self.utc_datetime.utc_to_offset(self.offset);
  900|       |        format.format_into(
  901|       |            output,
  902|       |            Some(local.date),
  903|       |            Some(local.time),
  904|       |            Some(self.offset),
  905|       |        )
  906|       |    }
  907|       |
  908|       |    /// Format the `OffsetDateTime` using the provided [format
  909|       |    /// description](crate::format_description).
  910|       |    ///
  911|       |    /// ```rust
  912|       |    /// # use time::{format_description, macros::datetime};
  913|       |    /// let format = format_description::parse(
  914|       |    ///     "[year]-[month]-[day] [hour]:[minute]:[second] [offset_hour \
  915|       |    ///          sign:mandatory]:[offset_minute]:[offset_second]",
  916|       |    /// )?;
  917|       |    /// assert_eq!(
  918|       |    ///     datetime!(2020-01-02 03:04:05 +06:07:08).format(&format)?,
  919|       |    ///     "2020-01-02 03:04:05 +06:07:08"
  920|       |    /// );
  921|       |    /// # Ok::<_, time::Error>(())
  922|       |    /// ```
  923|       |    pub fn format(self, format: &(impl Formattable + ?Sized)) -> Result<String, error::Format> {
  924|       |        let local = self.utc_datetime.utc_to_offset(self.offset);
  925|       |        format.format(Some(local.date), Some(local.time), Some(self.offset))
  926|       |    }
  927|       |}
  928|       |
  929|       |#[cfg(feature = "parsing")]
  930|       |impl OffsetDateTime {
  931|       |    /// Parse an `OffsetDateTime` from the input using the provided [format
  932|       |    /// description](crate::format_description).
  933|       |    ///
  934|       |    /// ```rust
  935|       |    /// # use time::{format_description, macros::datetime, OffsetDateTime};
  936|       |    /// let format = format_description::parse(
  937|       |    ///     "[year]-[month]-[day] [hour]:[minute]:[second] [offset_hour \
  938|       |    ///          sign:mandatory]:[offset_minute]:[offset_second]",
  939|       |    /// )?;
  940|       |    /// assert_eq!(
  941|       |    ///     OffsetDateTime::parse("2020-01-02 03:04:05 +06:07:08", &format)?,
  942|       |    ///     datetime!(2020-01-02 03:04:05 +06:07:08)
  943|       |    /// );
  944|       |    /// # Ok::<_, time::Error>(())
  945|       |    /// ```
  946|       |    pub fn parse(
  947|       |        input: &str,
  948|       |        description: &(impl Parsable + ?Sized),
  949|       |    ) -> Result<Self, error::Parse> {
  950|       |        description.parse_offset_date_time(input.as_bytes())
  951|       |    }
  952|       |}
  953|       |
  954|       |impl fmt::Display for OffsetDateTime {
  955|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  956|      0|        write!(f, "{} {} {}", self.date(), self.time(), self.offset)
  957|      0|    }
  958|       |}
  959|       |// endregion formatting & parsing
  960|       |
  961|       |// region: trait impls
  962|       |impl PartialEq for OffsetDateTime {
  963|      0|    fn eq(&self, rhs: &Self) -> bool {
  964|      0|        self.utc_datetime.eq(&rhs.utc_datetime)
  965|      0|    }
  966|       |}
  967|       |
  968|       |impl PartialOrd for OffsetDateTime {
  969|      0|    fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  970|      0|        Some(self.cmp(rhs))
  971|      0|    }
  972|       |}
  973|       |
  974|       |impl Ord for OffsetDateTime {
  975|      0|    fn cmp(&self, rhs: &Self) -> Ordering {
  976|      0|        self.utc_datetime.cmp(&rhs.utc_datetime)
  977|      0|    }
  978|       |}
  979|       |
  980|       |impl Hash for OffsetDateTime {
  981|      0|    fn hash<H: Hasher>(&self, hasher: &mut H) {
  982|      0|        // We need to distinguish this from a `PrimitiveDateTime`, which would otherwise conflict.
  983|      0|        hasher.write(b"OffsetDateTime");
  984|      0|        self.utc_datetime.hash(hasher);
  985|      0|    }
  986|       |}
  987|       |
  988|       |impl<T> Add<T> for OffsetDateTime
  989|       |where
  990|       |    PrimitiveDateTime: Add<T, Output = PrimitiveDateTime>,
  991|       |{
  992|       |    type Output = Self;
  993|       |
  994|      0|    fn add(self, rhs: T) -> Self::Output {
  995|      0|        (self.utc_datetime + rhs)
  996|      0|            .assume_utc()
  997|      0|            .to_offset(self.offset)
  998|      0|    }
  ------------------
  | Unexecuted instantiation: _RNvXs5_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith3AddNtNtB1a_4time8DurationE3addB7_
  ------------------
  | Unexecuted instantiation: _RNvXs5_NtCsfCqjlVYlG65_4time16offset_date_timeNtB5_14OffsetDateTimeINtNtNtCs3mU7IzMcIbP_4core3ops5arith3AddNtNtB7_8duration8DurationE3addB7_
  ------------------
  999|       |}
 1000|       |
 1001|       |impl_add_assign!(OffsetDateTime: Duration, StdDuration);
 1002|       |
 1003|       |impl<T> Sub<T> for OffsetDateTime
 1004|       |where
 1005|       |    PrimitiveDateTime: Sub<T, Output = PrimitiveDateTime>,
 1006|       |{
 1007|       |    type Output = Self;
 1008|       |
 1009|      0|    fn sub(self, rhs: T) -> Self::Output {
 1010|      0|        (self.utc_datetime - rhs)
 1011|      0|            .assume_utc()
 1012|      0|            .to_offset(self.offset)
 1013|      0|    }
 1014|       |}
 1015|       |
 1016|       |impl_sub_assign!(OffsetDateTime: Duration, StdDuration);
 1017|       |
 1018|       |impl Sub for OffsetDateTime {
 1019|       |    type Output = Duration;
 1020|       |
 1021|      0|    fn sub(self, rhs: Self) -> Self::Output {
 1022|      0|        self.utc_datetime - rhs.utc_datetime
 1023|      0|    }
 1024|       |}
 1025|       |
 1026|       |#[cfg(feature = "std")]
 1027|       |impl Add<Duration> for SystemTime {
 1028|       |    type Output = Self;
 1029|       |
 1030|      0|    fn add(self, duration: Duration) -> Self::Output {
 1031|      0|        if duration.is_zero() {
 1032|      0|            self
 1033|      0|        } else if duration.is_positive() {
 1034|      0|            self + duration.abs_std()
 1035|       |        } else {
 1036|      0|            debug_assert!(duration.is_negative());
 1037|      0|            self - duration.abs_std()
 1038|       |        }
 1039|      0|    }
 1040|       |}
 1041|       |
 1042|       |impl_add_assign!(SystemTime: #[cfg(feature = "std")] Duration);
 1043|       |
 1044|       |#[cfg(feature = "std")]
 1045|       |impl Sub<Duration> for SystemTime {
 1046|       |    type Output = Self;
 1047|       |
 1048|      0|    fn sub(self, duration: Duration) -> Self::Output {
 1049|      0|        (OffsetDateTime::from(self) - duration).into()
 1050|      0|    }
 1051|       |}
 1052|       |
 1053|       |impl_sub_assign!(SystemTime: #[cfg(feature = "std")] Duration);
 1054|       |
 1055|       |#[cfg(feature = "std")]
 1056|       |impl Sub<SystemTime> for OffsetDateTime {
 1057|       |    type Output = Duration;
 1058|       |
 1059|      0|    fn sub(self, rhs: SystemTime) -> Self::Output {
 1060|      0|        self - Self::from(rhs)
 1061|      0|    }
 1062|       |}
 1063|       |
 1064|       |#[cfg(feature = "std")]
 1065|       |impl Sub<OffsetDateTime> for SystemTime {
 1066|       |    type Output = Duration;
 1067|       |
 1068|      0|    fn sub(self, rhs: OffsetDateTime) -> Self::Output {
 1069|      0|        OffsetDateTime::from(self) - rhs
 1070|      0|    }
 1071|       |}
 1072|       |
 1073|       |#[cfg(feature = "std")]
 1074|       |impl PartialEq<SystemTime> for OffsetDateTime {
 1075|      0|    fn eq(&self, rhs: &SystemTime) -> bool {
 1076|      0|        self == &Self::from(*rhs)
 1077|      0|    }
 1078|       |}
 1079|       |
 1080|       |#[cfg(feature = "std")]
 1081|       |impl PartialEq<OffsetDateTime> for SystemTime {
 1082|      0|    fn eq(&self, rhs: &OffsetDateTime) -> bool {
 1083|      0|        &OffsetDateTime::from(*self) == rhs
 1084|      0|    }
 1085|       |}
 1086|       |
 1087|       |#[cfg(feature = "std")]
 1088|       |impl PartialOrd<SystemTime> for OffsetDateTime {
 1089|      0|    fn partial_cmp(&self, other: &SystemTime) -> Option<Ordering> {
 1090|      0|        self.partial_cmp(&Self::from(*other))
 1091|      0|    }
 1092|       |}
 1093|       |
 1094|       |#[cfg(feature = "std")]
 1095|       |impl PartialOrd<OffsetDateTime> for SystemTime {
 1096|      0|    fn partial_cmp(&self, other: &OffsetDateTime) -> Option<Ordering> {
 1097|      0|        OffsetDateTime::from(*self).partial_cmp(other)
 1098|      0|    }
 1099|       |}
 1100|       |
 1101|       |#[cfg(feature = "std")]
 1102|       |impl From<SystemTime> for OffsetDateTime {
 1103|      0|    fn from(system_time: SystemTime) -> Self {
 1104|      0|        match system_time.duration_since(SystemTime::UNIX_EPOCH) {
 1105|      0|            Ok(duration) => Self::UNIX_EPOCH + duration,
 1106|      0|            Err(err) => Self::UNIX_EPOCH - err.duration(),
 1107|       |        }
 1108|      0|    }
 1109|       |}
 1110|       |
 1111|       |#[allow(clippy::fallible_impl_from)] // caused by `debug_assert!`
 1112|       |#[cfg(feature = "std")]
 1113|       |impl From<OffsetDateTime> for SystemTime {
 1114|      0|    fn from(datetime: OffsetDateTime) -> Self {
 1115|      0|        let duration = datetime - OffsetDateTime::UNIX_EPOCH;
 1116|      0|
 1117|      0|        if duration.is_zero() {
 1118|      0|            Self::UNIX_EPOCH
 1119|      0|        } else if duration.is_positive() {
 1120|      0|            Self::UNIX_EPOCH + duration.abs_std()
 1121|       |        } else {
 1122|      0|            debug_assert!(duration.is_negative());
 1123|      0|            Self::UNIX_EPOCH - duration.abs_std()
 1124|       |        }
 1125|      0|    }
 1126|       |}
 1127|       |// endregion trait impls
 1128|       |
 1129|       |#[cfg(test)]
 1130|       |mod rusty_tests {
 1131|       |	use crate::*;
 1132|       |	use std::cmp::Ord;
 1133|       |	use std::clone::Clone;
 1134|       |	use std::ops::Sub;
 1135|       |//#[no_coverage]
 1136|      1|#[test]
 1137|       |#[should_panic]
 1138|      1|#[timeout(3000)]
 1139|      1|fn rusty_test_116() {
 1140|      1|    rusty_monitor::set_test_id(116);
 1141|      1|    let mut i32_0: i32 = 167i32;
 1142|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1143|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1144|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
 1145|      1|    let mut i8_0: i8 = 24i8;
 1146|      1|    let mut i8_1: i8 = 6i8;
 1147|      1|    let mut i8_2: i8 = 3i8;
 1148|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1149|      1|    let mut i8_3: i8 = 5i8;
 1150|      1|    let mut i8_4: i8 = 2i8;
 1151|      1|    let mut i8_5: i8 = 5i8;
 1152|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1153|      1|    let mut u32_0: u32 = 100000u32;
 1154|      1|    let mut u8_0: u8 = 60u8;
 1155|      1|    let mut u8_1: u8 = 8u8;
 1156|      1|    let mut u8_2: u8 = 8u8;
 1157|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1158|      1|    let mut i32_1: i32 = 400i32;
 1159|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1160|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1161|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 1162|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_1};
 1163|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_0);
 1164|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(offsetdatetime_3, offsetdatetime_1);
 1165|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1166|      1|    let mut i32_2: i32 = 88i32;
 1167|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1168|      1|    let mut date_2_ref_0: &mut crate::date::Date = &mut date_2;
 1169|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Wednesday;
 1170|      1|    let mut u8_3: u8 = crate::weekday::Weekday::number_days_from_sunday(weekday_0);
 1171|      1|    panic!("From RustyUnit with love");
 1172|       |}
 1173|       |
 1174|       |//#[no_coverage]
 1175|      1|#[test]
 1176|       |#[should_panic]
 1177|      1|#[timeout(3000)]
 1178|      1|fn rusty_test_8480() {
 1179|      1|    rusty_monitor::set_test_id(8480);
 1180|      1|    let mut i8_0: i8 = 2i8;
 1181|      1|    let mut i8_1: i8 = 60i8;
 1182|      1|    let mut i8_2: i8 = 127i8;
 1183|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1184|      1|    let mut u32_0: u32 = 999999999u32;
 1185|      1|    let mut u8_0: u8 = 8u8;
 1186|      1|    let mut u8_1: u8 = 5u8;
 1187|      1|    let mut u8_2: u8 = 4u8;
 1188|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1189|      1|    let mut i64_0: i64 = 253402300799i64;
 1190|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1191|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1192|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1193|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1194|      1|    let mut u16_0: u16 = 94u16;
 1195|      1|    let mut i32_0: i32 = 303i32;
 1196|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1197|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_2);
 1198|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
 1199|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1200|      1|    let mut u32_1: u32 = 100000u32;
 1201|      1|    let mut u8_3: u8 = 12u8;
 1202|      1|    let mut u8_4: u8 = 23u8;
 1203|      1|    let mut u8_5: u8 = 3u8;
 1204|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1205|      1|    let mut i32_1: i32 = 2i32;
 1206|      1|    let mut i64_1: i64 = 86400i64;
 1207|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1208|      1|    let mut i32_2: i32 = 218i32;
 1209|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1210|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_3);
 1211|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_1};
 1212|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
 1213|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1214|      1|    let mut offsetdatetime_1_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 1215|      1|    let mut i64_2: i64 = 604800i64;
 1216|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 1217|      1|    let mut i64_3: i64 = 9223372036854775807i64;
 1218|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1219|      1|    let mut i32_3: i32 = 50i32;
 1220|      1|    let mut date_4: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1221|      1|    let mut date_5: crate::date::Date = crate::date::Date::saturating_add(date_4, duration_5);
 1222|      1|    let mut i8_3: i8 = 6i8;
 1223|      1|    let mut i8_4: i8 = 6i8;
 1224|      1|    let mut i8_5: i8 = 2i8;
 1225|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1226|      1|    let mut u32_2: u32 = 0u32;
 1227|      1|    let mut u8_6: u8 = 59u8;
 1228|      1|    let mut u8_7: u8 = 28u8;
 1229|      1|    let mut u8_8: u8 = 30u8;
 1230|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1231|      1|    let mut i32_4: i32 = 7i32;
 1232|      1|    let mut date_6: crate::date::Date = crate::date::Date {value: i32_4};
 1233|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_6, time: time_2};
 1234|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_3, utcoffset_1);
 1235|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_5);
 1236|      1|    let mut i32_5: i32 = -7i32;
 1237|      1|    let mut u32_3: u32 = 10000u32;
 1238|      1|    let mut u8_9: u8 = 3u8;
 1239|      1|    let mut u8_10: u8 = 7u8;
 1240|      1|    let mut u8_11: u8 = 14u8;
 1241|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 1242|      1|    let mut i64_4: i64 = 1000i64;
 1243|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds(i64_4);
 1244|      1|    let mut i32_6: i32 = 43i32;
 1245|      1|    let mut date_7: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_6);
 1246|      1|    let mut date_8: crate::date::Date = crate::date::Date::saturating_sub(date_7, duration_6);
 1247|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_8, time_3);
 1248|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1249|      1|    let mut instant_1: std::time::Instant = crate::instant::Instant::into_inner(instant_0);
 1250|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1251|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1252|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1253|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_4);
 1254|      1|    let mut result_0: std::result::Result<crate::utc_offset::UtcOffset, crate::error::component_range::ComponentRange> = crate::utc_offset::UtcOffset::from_whole_seconds(i32_5);
 1255|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_3, duration_4);
 1256|      1|    let mut offsetdatetime_4_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_4;
 1257|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(offsetdatetime_4_ref_0, offsetdatetime_1_ref_0);
 1258|      1|    panic!("From RustyUnit with love");
 1259|       |}
 1260|       |
 1261|       |//#[no_coverage]
 1262|      1|#[test]
 1263|       |#[should_panic]
 1264|      1|#[timeout(3000)]
 1265|      1|fn rusty_test_1425() {
 1266|      1|    rusty_monitor::set_test_id(1425);
 1267|      1|    let mut i64_0: i64 = 12i64;
 1268|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1269|      1|    let mut i8_0: i8 = 5i8;
 1270|      1|    let mut i8_1: i8 = 4i8;
 1271|      1|    let mut i8_2: i8 = 4i8;
 1272|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1273|      1|    let mut u32_0: u32 = 0u32;
 1274|      1|    let mut u8_0: u8 = 7u8;
 1275|      1|    let mut u8_1: u8 = 28u8;
 1276|      1|    let mut u8_2: u8 = 10u8;
 1277|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1278|      1|    let mut i32_0: i32 = 37i32;
 1279|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1280|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1281|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
 1282|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_0);
 1283|      1|    let mut offsetdatetime_1_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 1284|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1285|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1286|      1|    let mut u32_1: u32 = 10000000u32;
 1287|      1|    let mut u8_3: u8 = 12u8;
 1288|      1|    let mut u8_4: u8 = 23u8;
 1289|      1|    let mut u8_5: u8 = 56u8;
 1290|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1291|      1|    let mut u16_0: u16 = 59u16;
 1292|      1|    let mut i32_1: i32 = 1000i32;
 1293|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1294|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 1295|      1|    let mut u32_2: u32 = 1000000000u32;
 1296|      1|    let mut u8_6: u8 = 77u8;
 1297|      1|    let mut u8_7: u8 = 0u8;
 1298|      1|    let mut u8_8: u8 = 12u8;
 1299|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1300|      1|    let mut i32_2: i32 = 99i32;
 1301|      1|    let mut i64_1: i64 = 12i64;
 1302|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1303|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_2);
 1304|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1305|      1|    let mut u32_3: u32 = 10u32;
 1306|      1|    let mut u8_9: u8 = 19u8;
 1307|      1|    let mut u8_10: u8 = 30u8;
 1308|      1|    let mut u8_11: u8 = 9u8;
 1309|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 1310|      1|    let mut i32_3: i32 = 25i32;
 1311|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
 1312|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_3};
 1313|      1|    let mut f32_1: f32 = 1315859240.000000f32;
 1314|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 1315|      1|    let mut i8_3: i8 = 23i8;
 1316|      1|    let mut i8_4: i8 = 4i8;
 1317|      1|    let mut i8_5: i8 = 4i8;
 1318|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1319|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1320|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_1);
 1321|      1|    let mut offsetdatetime_3_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_3;
 1322|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = std::clone::Clone::clone(offsetdatetime_3_ref_0);
 1323|      1|    let mut option_0: std::option::Option<crate::primitive_date_time::PrimitiveDateTime> = crate::primitive_date_time::PrimitiveDateTime::checked_add(primitivedatetime_1, duration_1);
 1324|      1|    panic!("From RustyUnit with love");
 1325|       |}
 1326|       |
 1327|       |//#[no_coverage]
 1328|      1|#[test]
 1329|       |#[should_panic]
 1330|      1|#[timeout(3000)]
 1331|      1|fn rusty_test_8697() {
 1332|      1|    rusty_monitor::set_test_id(8697);
 1333|      1|    let mut u32_0: u32 = 100000000u32;
 1334|      1|    let mut u8_0: u8 = 30u8;
 1335|      1|    let mut u8_1: u8 = 10u8;
 1336|      1|    let mut u8_2: u8 = 12u8;
 1337|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1338|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1339|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1340|      1|    let mut u32_1: u32 = 100u32;
 1341|      1|    let mut u8_3: u8 = 31u8;
 1342|      1|    let mut u8_4: u8 = 11u8;
 1343|      1|    let mut u8_5: u8 = 52u8;
 1344|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1345|      1|    let mut i32_0: i32 = 122i32;
 1346|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1347|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_1};
 1348|      1|    let mut i8_0: i8 = 0i8;
 1349|      1|    let mut i8_1: i8 = 5i8;
 1350|      1|    let mut i8_2: i8 = 2i8;
 1351|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1352|      1|    let mut i32_1: i32 = 257i32;
 1353|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1354|      1|    let mut u32_2: u32 = 1000000u32;
 1355|      1|    let mut u8_6: u8 = 3u8;
 1356|      1|    let mut u8_7: u8 = 14u8;
 1357|      1|    let mut u8_8: u8 = 6u8;
 1358|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1359|      1|    let mut u16_0: u16 = 367u16;
 1360|      1|    let mut i32_2: i32 = 263i32;
 1361|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1362|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_2);
 1363|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_1, date_1);
 1364|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_0};
 1365|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_2, primitivedatetime_0);
 1366|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(offsetdatetime_3, offsetdatetime_1);
 1367|      1|    let mut i32_3: i32 = -5i32;
 1368|      1|    let mut i64_0: i64 = 604800i64;
 1369|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_3);
 1370|      1|    panic!("From RustyUnit with love");
 1371|       |}
 1372|       |
 1373|       |//#[no_coverage]
 1374|      1|#[test]
 1375|       |#[should_panic]
 1376|      1|#[timeout(3000)]
 1377|      1|fn rusty_test_8054() {
 1378|      1|    rusty_monitor::set_test_id(8054);
 1379|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1380|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1381|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1382|      1|    let mut u32_0: u32 = 1000000000u32;
 1383|      1|    let mut u8_0: u8 = 53u8;
 1384|      1|    let mut u8_1: u8 = 59u8;
 1385|      1|    let mut u8_2: u8 = 31u8;
 1386|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1387|      1|    let mut u32_1: u32 = 100000000u32;
 1388|      1|    let mut u8_3: u8 = 30u8;
 1389|      1|    let mut u8_4: u8 = 10u8;
 1390|      1|    let mut u8_5: u8 = 12u8;
 1391|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1392|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1393|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_1);
 1394|      1|    let mut u32_2: u32 = 100u32;
 1395|      1|    let mut u8_6: u8 = 31u8;
 1396|      1|    let mut u8_7: u8 = 11u8;
 1397|      1|    let mut u8_8: u8 = 52u8;
 1398|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1399|      1|    let mut i32_0: i32 = 122i32;
 1400|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1401|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_2};
 1402|      1|    let mut i8_0: i8 = 0i8;
 1403|      1|    let mut i8_1: i8 = 5i8;
 1404|      1|    let mut i8_2: i8 = 2i8;
 1405|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1406|      1|    let mut i32_1: i32 = 257i32;
 1407|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1408|      1|    let mut u32_3: u32 = 1000000u32;
 1409|      1|    let mut u8_9: u8 = 3u8;
 1410|      1|    let mut u8_10: u8 = 14u8;
 1411|      1|    let mut u8_11: u8 = 6u8;
 1412|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 1413|      1|    let mut u16_0: u16 = 367u16;
 1414|      1|    let mut i32_2: i32 = 263i32;
 1415|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1416|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_3);
 1417|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_1, date_1);
 1418|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_2, offset: utcoffset_0};
 1419|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_2, primitivedatetime_0);
 1420|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(offsetdatetime_3, offsetdatetime_1);
 1421|      1|    let mut i32_3: i32 = -5i32;
 1422|      1|    let mut i64_0: i64 = 604800i64;
 1423|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_3);
 1424|      1|    let mut tuple_0: (bool, crate::time::Time) = crate::time::Time::adjusting_sub_std(time_0, duration_1);
 1425|      1|    panic!("From RustyUnit with love");
 1426|       |}
 1427|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/primitive_date_time.rs:
    1|       |//! The [`PrimitiveDateTime`] struct and its associated `impl`s.
    2|       |
    3|       |use core::fmt;
    4|       |use core::ops::{Add, Sub};
    5|       |use core::time::Duration as StdDuration;
    6|       |#[cfg(feature = "formatting")]
    7|       |use std::io;
    8|       |
    9|       |#[cfg(any(feature = "formatting", feature = "parsing"))]
   10|       |use crate::error;
   11|       |#[cfg(feature = "formatting")]
   12|       |use crate::formatting::Formattable;
   13|       |#[cfg(feature = "parsing")]
   14|       |use crate::parsing::Parsable;
   15|       |use crate::{util, Date, Duration, Month, OffsetDateTime, Time, UtcOffset, Weekday};
   16|       |
   17|       |/// Combined date and time.
   18|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
   19|       |pub struct PrimitiveDateTime {
   20|       |    #[allow(clippy::missing_docs_in_private_items)]
   21|       |    pub(crate) date: Date,
   22|       |    #[allow(clippy::missing_docs_in_private_items)]
   23|       |    pub(crate) time: Time,
   24|       |}
   25|       |
   26|       |impl PrimitiveDateTime {
   27|       |    /// The smallest value that can be represented by `PrimitiveDateTime`.
   28|       |    ///
   29|       |    /// Depending on `large-dates` feature flag, value of this constant may vary.
   30|       |    ///
   31|       |    /// 1. With `large-dates` disabled it is equal to `-9999 - 01 - 01 00:00:00.0`
   32|       |    /// 2. With `large-dates` enabled it is equal to `-999999 - 01 - 01 00:00:00.0`
   33|       |    ///
   34|       |    /// ```rust
   35|       |    /// # use time::{PrimitiveDateTime, macros::datetime};
   36|       |    /// // Assuming `large-dates` feature is enabled.
   37|       |    /// assert_eq!(PrimitiveDateTime::MIN, datetime!(-999999 - 01 - 01 0:00));
   38|       |    /// ```
   39|       |    pub const MIN: Self = Self::new(Date::MIN, Time::MIN);
   40|       |
   41|       |    /// The largest value that can be represented by `PrimitiveDateTime`.
   42|       |    ///
   43|       |    /// Depending on `large-dates` feature flag, value of this constant may vary.
   44|       |    ///
   45|       |    /// 1. With `large-dates` disabled it is equal to `9999 - 12 - 31 23:59:59.999_999_999`
   46|       |    /// 2. With `large-dates` enabled it is equal to `999999 - 12 - 31 23:59:59.999_999_999`
   47|       |    ///
   48|       |    /// ```rust
   49|       |    /// # use time::{PrimitiveDateTime, macros::datetime};
   50|       |    /// // Assuming `large-dates` feature is enabled.
   51|       |    /// assert_eq!(PrimitiveDateTime::MAX, datetime!(+999999 - 12 - 31 23:59:59.999_999_999));
   52|       |    /// ```
   53|       |    pub const MAX: Self = Self::new(Date::MAX, Time::MAX);
   54|       |
   55|       |    /// Create a new `PrimitiveDateTime` from the provided [`Date`] and [`Time`].
   56|       |    ///
   57|       |    /// ```rust
   58|       |    /// # use time::{PrimitiveDateTime, macros::{date, datetime, time}};
   59|       |    /// assert_eq!(
   60|       |    ///     PrimitiveDateTime::new(date!(2019-01-01), time!(0:00)),
   61|       |    ///     datetime!(2019-01-01 0:00),
   62|       |    /// );
   63|       |    /// ```
   64|      0|    pub const fn new(date: Date, time: Time) -> Self {
   65|      0|        Self { date, time }
   66|      0|    }
   67|       |
   68|       |    // region: component getters
   69|       |    /// Get the [`Date`] component of the `PrimitiveDateTime`.
   70|       |    ///
   71|       |    /// ```rust
   72|       |    /// # use time::macros::{date, datetime};
   73|       |    /// assert_eq!(datetime!(2019-01-01 0:00).date(), date!(2019-01-01));
   74|       |    /// ```
   75|      0|    pub const fn date(self) -> Date {
   76|      0|        self.date
   77|      0|    }
   78|       |
   79|       |    /// Get the [`Time`] component of the `PrimitiveDateTime`.
   80|       |    ///
   81|       |    /// ```rust
   82|       |    /// # use time::macros::{datetime, time};
   83|       |    /// assert_eq!(datetime!(2019-01-01 0:00).time(), time!(0:00));
   84|      0|    pub const fn time(self) -> Time {
   85|      0|        self.time
   86|      0|    }
   87|       |    // endregion component getters
   88|       |
   89|       |    // region: date getters
   90|       |    /// Get the year of the date.
   91|       |    ///
   92|       |    /// ```rust
   93|       |    /// # use time::macros::datetime;
   94|       |    /// assert_eq!(datetime!(2019-01-01 0:00).year(), 2019);
   95|       |    /// assert_eq!(datetime!(2019-12-31 0:00).year(), 2019);
   96|       |    /// assert_eq!(datetime!(2020-01-01 0:00).year(), 2020);
   97|       |    /// ```
   98|      0|    pub const fn year(self) -> i32 {
   99|      0|        self.date.year()
  100|      0|    }
  101|       |
  102|       |    /// Get the month of the date.
  103|       |    ///
  104|       |    /// ```rust
  105|       |    /// # use time::{macros::datetime, Month};
  106|       |    /// assert_eq!(datetime!(2019-01-01 0:00).month(), Month::January);
  107|       |    /// assert_eq!(datetime!(2019-12-31 0:00).month(), Month::December);
  108|       |    /// ```
  109|      0|    pub const fn month(self) -> Month {
  110|      0|        self.date.month()
  111|      0|    }
  112|       |
  113|       |    /// Get the day of the date.
  114|       |    ///
  115|       |    /// The returned value will always be in the range `1..=31`.
  116|       |    ///
  117|       |    /// ```rust
  118|       |    /// # use time::macros::datetime;
  119|       |    /// assert_eq!(datetime!(2019-01-01 0:00).day(), 1);
  120|       |    /// assert_eq!(datetime!(2019-12-31 0:00).day(), 31);
  121|       |    /// ```
  122|      0|    pub const fn day(self) -> u8 {
  123|      0|        self.date.day()
  124|      0|    }
  125|       |
  126|       |    /// Get the day of the year.
  127|       |    ///
  128|       |    /// The returned value will always be in the range `1..=366` (`1..=365` for common years).
  129|       |    ///
  130|       |    /// ```rust
  131|       |    /// # use time::macros::datetime;
  132|       |    /// assert_eq!(datetime!(2019-01-01 0:00).ordinal(), 1);
  133|       |    /// assert_eq!(datetime!(2019-12-31 0:00).ordinal(), 365);
  134|       |    /// ```
  135|      0|    pub const fn ordinal(self) -> u16 {
  136|      0|        self.date.ordinal()
  137|      0|    }
  138|       |
  139|       |    /// Get the ISO week number.
  140|       |    ///
  141|       |    /// The returned value will always be in the range `1..=53`.
  142|       |    ///
  143|       |    /// ```rust
  144|       |    /// # use time::macros::datetime;
  145|       |    /// assert_eq!(datetime!(2019-01-01 0:00).iso_week(), 1);
  146|       |    /// assert_eq!(datetime!(2019-10-04 0:00).iso_week(), 40);
  147|       |    /// assert_eq!(datetime!(2020-01-01 0:00).iso_week(), 1);
  148|       |    /// assert_eq!(datetime!(2020-12-31 0:00).iso_week(), 53);
  149|       |    /// assert_eq!(datetime!(2021-01-01 0:00).iso_week(), 53);
  150|       |    /// ```
  151|      0|    pub const fn iso_week(self) -> u8 {
  152|      0|        self.date.iso_week()
  153|      0|    }
  154|       |
  155|       |    /// Get the week number where week 1 begins on the first Sunday.
  156|       |    ///
  157|       |    /// The returned value will always be in the range `0..=53`.
  158|       |    ///
  159|       |    /// ```rust
  160|       |    /// # use time::macros::datetime;
  161|       |    /// assert_eq!(datetime!(2019-01-01 0:00).sunday_based_week(), 0);
  162|       |    /// assert_eq!(datetime!(2020-01-01 0:00).sunday_based_week(), 0);
  163|       |    /// assert_eq!(datetime!(2020-12-31 0:00).sunday_based_week(), 52);
  164|       |    /// assert_eq!(datetime!(2021-01-01 0:00).sunday_based_week(), 0);
  165|       |    /// ```
  166|      0|    pub const fn sunday_based_week(self) -> u8 {
  167|      0|        self.date.sunday_based_week()
  168|      0|    }
  169|       |
  170|       |    /// Get the week number where week 1 begins on the first Monday.
  171|       |    ///
  172|       |    /// The returned value will always be in the range `0..=53`.
  173|       |    ///
  174|       |    /// ```rust
  175|       |    /// # use time::macros::datetime;
  176|       |    /// assert_eq!(datetime!(2019-01-01 0:00).monday_based_week(), 0);
  177|       |    /// assert_eq!(datetime!(2020-01-01 0:00).monday_based_week(), 0);
  178|       |    /// assert_eq!(datetime!(2020-12-31 0:00).monday_based_week(), 52);
  179|       |    /// assert_eq!(datetime!(2021-01-01 0:00).monday_based_week(), 0);
  180|       |    /// ```
  181|      0|    pub const fn monday_based_week(self) -> u8 {
  182|      0|        self.date.monday_based_week()
  183|      0|    }
  184|       |
  185|       |    /// Get the year, month, and day.
  186|       |    ///
  187|       |    /// ```rust
  188|       |    /// # use time::{macros::datetime, Month};
  189|       |    /// assert_eq!(
  190|       |    ///     datetime!(2019-01-01 0:00).to_calendar_date(),
  191|       |    ///     (2019, Month::January, 1)
  192|       |    /// );
  193|       |    /// ```
  194|      0|    pub const fn to_calendar_date(self) -> (i32, Month, u8) {
  195|      0|        self.date.to_calendar_date()
  196|      0|    }
  197|       |
  198|       |    /// Get the year and ordinal day number.
  199|       |    ///
  200|       |    /// ```rust
  201|       |    /// # use time::macros::datetime;
  202|       |    /// assert_eq!(datetime!(2019-01-01 0:00).to_ordinal_date(), (2019, 1));
  203|       |    /// ```
  204|      0|    pub const fn to_ordinal_date(self) -> (i32, u16) {
  205|      0|        self.date.to_ordinal_date()
  206|      0|    }
  207|       |
  208|       |    /// Get the ISO 8601 year, week number, and weekday.
  209|       |    ///
  210|       |    /// ```rust
  211|       |    /// # use time::{Weekday::*, macros::datetime};
  212|       |    /// assert_eq!(
  213|       |    ///     datetime!(2019-01-01 0:00).to_iso_week_date(),
  214|       |    ///     (2019, 1, Tuesday)
  215|       |    /// );
  216|       |    /// assert_eq!(
  217|       |    ///     datetime!(2019-10-04 0:00).to_iso_week_date(),
  218|       |    ///     (2019, 40, Friday)
  219|       |    /// );
  220|       |    /// assert_eq!(
  221|       |    ///     datetime!(2020-01-01 0:00).to_iso_week_date(),
  222|       |    ///     (2020, 1, Wednesday)
  223|       |    /// );
  224|       |    /// assert_eq!(
  225|       |    ///     datetime!(2020-12-31 0:00).to_iso_week_date(),
  226|       |    ///     (2020, 53, Thursday)
  227|       |    /// );
  228|       |    /// assert_eq!(
  229|       |    ///     datetime!(2021-01-01 0:00).to_iso_week_date(),
  230|       |    ///     (2020, 53, Friday)
  231|       |    /// );
  232|       |    /// ```
  233|      0|    pub const fn to_iso_week_date(self) -> (i32, u8, Weekday) {
  234|      0|        self.date.to_iso_week_date()
  235|      0|    }
  236|       |
  237|       |    /// Get the weekday.
  238|       |    ///
  239|       |    /// ```rust
  240|       |    /// # use time::{Weekday::*, macros::datetime};
  241|       |    /// assert_eq!(datetime!(2019-01-01 0:00).weekday(), Tuesday);
  242|       |    /// assert_eq!(datetime!(2019-02-01 0:00).weekday(), Friday);
  243|       |    /// assert_eq!(datetime!(2019-03-01 0:00).weekday(), Friday);
  244|       |    /// assert_eq!(datetime!(2019-04-01 0:00).weekday(), Monday);
  245|       |    /// assert_eq!(datetime!(2019-05-01 0:00).weekday(), Wednesday);
  246|       |    /// assert_eq!(datetime!(2019-06-01 0:00).weekday(), Saturday);
  247|       |    /// assert_eq!(datetime!(2019-07-01 0:00).weekday(), Monday);
  248|       |    /// assert_eq!(datetime!(2019-08-01 0:00).weekday(), Thursday);
  249|       |    /// assert_eq!(datetime!(2019-09-01 0:00).weekday(), Sunday);
  250|       |    /// assert_eq!(datetime!(2019-10-01 0:00).weekday(), Tuesday);
  251|       |    /// assert_eq!(datetime!(2019-11-01 0:00).weekday(), Friday);
  252|       |    /// assert_eq!(datetime!(2019-12-01 0:00).weekday(), Sunday);
  253|       |    /// ```
  254|      0|    pub const fn weekday(self) -> Weekday {
  255|      0|        self.date.weekday()
  256|      0|    }
  257|       |
  258|       |    /// Get the Julian day for the date. The time is not taken into account for this calculation.
  259|       |    ///
  260|       |    /// The algorithm to perform this conversion is derived from one provided by Peter Baum; it is
  261|       |    /// freely available [here](https://www.researchgate.net/publication/316558298_Date_Algorithms).
  262|       |    ///
  263|       |    /// ```rust
  264|       |    /// # use time::macros::datetime;
  265|       |    /// assert_eq!(datetime!(-4713-11-24 0:00).to_julian_day(), 0);
  266|       |    /// assert_eq!(datetime!(2000-01-01 0:00).to_julian_day(), 2_451_545);
  267|       |    /// assert_eq!(datetime!(2019-01-01 0:00).to_julian_day(), 2_458_485);
  268|       |    /// assert_eq!(datetime!(2019-12-31 0:00).to_julian_day(), 2_458_849);
  269|       |    /// ```
  270|      0|    pub const fn to_julian_day(self) -> i32 {
  271|      0|        self.date.to_julian_day()
  272|      0|    }
  273|       |    // endregion date getters
  274|       |
  275|       |    // region: time getters
  276|       |    /// Get the clock hour, minute, and second.
  277|       |    ///
  278|       |    /// ```rust
  279|       |    /// # use time::macros::datetime;
  280|       |    /// assert_eq!(datetime!(2020-01-01 0:00:00).as_hms(), (0, 0, 0));
  281|       |    /// assert_eq!(datetime!(2020-01-01 23:59:59).as_hms(), (23, 59, 59));
  282|       |    /// ```
  283|      0|    pub const fn as_hms(self) -> (u8, u8, u8) {
  284|      0|        self.time.as_hms()
  285|      0|    }
  286|       |
  287|       |    /// Get the clock hour, minute, second, and millisecond.
  288|       |    ///
  289|       |    /// ```rust
  290|       |    /// # use time::macros::datetime;
  291|       |    /// assert_eq!(datetime!(2020-01-01 0:00:00).as_hms_milli(), (0, 0, 0, 0));
  292|       |    /// assert_eq!(
  293|       |    ///     datetime!(2020-01-01 23:59:59.999).as_hms_milli(),
  294|       |    ///     (23, 59, 59, 999)
  295|       |    /// );
  296|       |    /// ```
  297|      0|    pub const fn as_hms_milli(self) -> (u8, u8, u8, u16) {
  298|      0|        self.time.as_hms_milli()
  299|      0|    }
  300|       |
  301|       |    /// Get the clock hour, minute, second, and microsecond.
  302|       |    ///
  303|       |    /// ```rust
  304|       |    /// # use time::macros::datetime;
  305|       |    /// assert_eq!(datetime!(2020-01-01 0:00:00).as_hms_micro(), (0, 0, 0, 0));
  306|       |    /// assert_eq!(
  307|       |    ///     datetime!(2020-01-01 23:59:59.999_999).as_hms_micro(),
  308|       |    ///     (23, 59, 59, 999_999)
  309|       |    /// );
  310|       |    /// ```
  311|      0|    pub const fn as_hms_micro(self) -> (u8, u8, u8, u32) {
  312|      0|        self.time.as_hms_micro()
  313|      0|    }
  314|       |
  315|       |    /// Get the clock hour, minute, second, and nanosecond.
  316|       |    ///
  317|       |    /// ```rust
  318|       |    /// # use time::macros::datetime;
  319|       |    /// assert_eq!(datetime!(2020-01-01 0:00:00).as_hms_nano(), (0, 0, 0, 0));
  320|       |    /// assert_eq!(
  321|       |    ///     datetime!(2020-01-01 23:59:59.999_999_999).as_hms_nano(),
  322|       |    ///     (23, 59, 59, 999_999_999)
  323|       |    /// );
  324|       |    /// ```
  325|      0|    pub const fn as_hms_nano(self) -> (u8, u8, u8, u32) {
  326|      0|        self.time.as_hms_nano()
  327|      0|    }
  328|       |
  329|       |    /// Get the clock hour.
  330|       |    ///
  331|       |    /// The returned value will always be in the range `0..24`.
  332|       |    ///
  333|       |    /// ```rust
  334|       |    /// # use time::macros::datetime;
  335|       |    /// assert_eq!(datetime!(2019-01-01 0:00).hour(), 0);
  336|       |    /// assert_eq!(datetime!(2019-01-01 23:59:59).hour(), 23);
  337|       |    /// ```
  338|      0|    pub const fn hour(self) -> u8 {
  339|      0|        self.time.hour()
  340|      0|    }
  341|       |
  342|       |    /// Get the minute within the hour.
  343|       |    ///
  344|       |    /// The returned value will always be in the range `0..60`.
  345|       |    ///
  346|       |    /// ```rust
  347|       |    /// # use time::macros::datetime;
  348|       |    /// assert_eq!(datetime!(2019-01-01 0:00).minute(), 0);
  349|       |    /// assert_eq!(datetime!(2019-01-01 23:59:59).minute(), 59);
  350|       |    /// ```
  351|      0|    pub const fn minute(self) -> u8 {
  352|      0|        self.time.minute()
  353|      0|    }
  354|       |
  355|       |    /// Get the second within the minute.
  356|       |    ///
  357|       |    /// The returned value will always be in the range `0..60`.
  358|       |    ///
  359|       |    /// ```rust
  360|       |    /// # use time::macros::datetime;
  361|       |    /// assert_eq!(datetime!(2019-01-01 0:00).second(), 0);
  362|       |    /// assert_eq!(datetime!(2019-01-01 23:59:59).second(), 59);
  363|       |    /// ```
  364|      0|    pub const fn second(self) -> u8 {
  365|      0|        self.time.second()
  366|      0|    }
  367|       |
  368|       |    /// Get the milliseconds within the second.
  369|       |    ///
  370|       |    /// The returned value will always be in the range `0..1_000`.
  371|       |    ///
  372|       |    /// ```rust
  373|       |    /// # use time::macros::datetime;
  374|       |    /// assert_eq!(datetime!(2019-01-01 0:00).millisecond(), 0);
  375|       |    /// assert_eq!(datetime!(2019-01-01 23:59:59.999).millisecond(), 999);
  376|       |    /// ```
  377|      0|    pub const fn millisecond(self) -> u16 {
  378|      0|        self.time.millisecond()
  379|      0|    }
  380|       |
  381|       |    /// Get the microseconds within the second.
  382|       |    ///
  383|       |    /// The returned value will always be in the range `0..1_000_000`.
  384|       |    ///
  385|       |    /// ```rust
  386|       |    /// # use time::macros::datetime;
  387|       |    /// assert_eq!(datetime!(2019-01-01 0:00).microsecond(), 0);
  388|       |    /// assert_eq!(
  389|       |    ///     datetime!(2019-01-01 23:59:59.999_999).microsecond(),
  390|       |    ///     999_999
  391|       |    /// );
  392|       |    /// ```
  393|      0|    pub const fn microsecond(self) -> u32 {
  394|      0|        self.time.microsecond()
  395|      0|    }
  396|       |
  397|       |    /// Get the nanoseconds within the second.
  398|       |    ///
  399|       |    /// The returned value will always be in the range `0..1_000_000_000`.
  400|       |    ///
  401|       |    /// ```rust
  402|       |    /// # use time::macros::datetime;
  403|       |    /// assert_eq!(datetime!(2019-01-01 0:00).nanosecond(), 0);
  404|       |    /// assert_eq!(
  405|       |    ///     datetime!(2019-01-01 23:59:59.999_999_999).nanosecond(),
  406|       |    ///     999_999_999,
  407|       |    /// );
  408|       |    /// ```
  409|      0|    pub const fn nanosecond(self) -> u32 {
  410|      0|        self.time.nanosecond()
  411|      0|    }
  412|       |    // endregion time getters
  413|       |
  414|       |    // region: attach offset
  415|       |    /// Assuming that the existing `PrimitiveDateTime` represents a moment in the provided
  416|       |    /// [`UtcOffset`], return an [`OffsetDateTime`].
  417|       |    ///
  418|       |    /// ```rust
  419|       |    /// # use time::macros::{datetime, offset};
  420|       |    /// assert_eq!(
  421|       |    ///     datetime!(2019-01-01 0:00)
  422|       |    ///         .assume_offset(offset!(UTC))
  423|       |    ///         .unix_timestamp(),
  424|       |    ///     1_546_300_800,
  425|       |    /// );
  426|       |    /// assert_eq!(
  427|       |    ///     datetime!(2019-01-01 0:00)
  428|       |    ///         .assume_offset(offset!(-1))
  429|       |    ///         .unix_timestamp(),
  430|       |    ///     1_546_304_400,
  431|       |    /// );
  432|       |    /// ```
  433|      0|    pub const fn assume_offset(self, offset: UtcOffset) -> OffsetDateTime {
  434|      0|        OffsetDateTime {
  435|      0|            utc_datetime: self.offset_to_utc(offset),
  436|      0|            offset,
  437|      0|        }
  438|      0|    }
  439|       |
  440|       |    /// Assuming that the existing `PrimitiveDateTime` represents a moment in UTC, return an
  441|       |    /// [`OffsetDateTime`].
  442|       |    ///
  443|       |    /// ```rust
  444|       |    /// # use time::macros::datetime;
  445|       |    /// assert_eq!(
  446|       |    ///     datetime!(2019-01-01 0:00).assume_utc().unix_timestamp(),
  447|       |    ///     1_546_300_800,
  448|       |    /// );
  449|       |    /// ```
  450|      0|    pub const fn assume_utc(self) -> OffsetDateTime {
  451|      0|        OffsetDateTime {
  452|      0|            utc_datetime: self,
  453|      0|            offset: UtcOffset::UTC,
  454|      0|        }
  455|      0|    }
  456|       |    // endregion attach offset
  457|       |
  458|       |    // region: checked arithmetic
  459|       |    /// Computes `self + duration`, returning `None` if an overflow occurred.
  460|       |    ///
  461|       |    /// ```
  462|       |    /// # use time::{Date, ext::NumericalDuration};
  463|       |    /// # use time::macros::datetime;
  464|       |    /// let datetime = Date::MIN.midnight();
  465|       |    /// assert_eq!(datetime.checked_add((-2).days()), None);
  466|       |    ///
  467|       |    /// let datetime = Date::MAX.midnight();
  468|       |    /// assert_eq!(datetime.checked_add(1.days()), None);
  469|       |    ///
  470|       |    /// assert_eq!(
  471|       |    ///     datetime!(2019 - 11 - 25 15:30).checked_add(27.hours()),
  472|       |    ///     Some(datetime!(2019 - 11 - 26 18:30))
  473|       |    /// );
  474|       |    /// ```
  475|      0|    pub const fn checked_add(self, duration: Duration) -> Option<Self> {
  476|      0|        let (date_adjustment, time) = self.time.adjusting_add(duration);
  477|      0|        let date = const_try_opt!(self.date.checked_add(duration));
  478|       |
  479|       |        Some(Self {
  480|      0|            date: match date_adjustment {
  481|      0|                util::DateAdjustment::Previous => const_try_opt!(date.previous_day()),
  482|      0|                util::DateAdjustment::Next => const_try_opt!(date.next_day()),
  483|      0|                util::DateAdjustment::None => date,
  484|       |            },
  485|      0|            time,
  486|       |        })
  487|      0|    }
  488|       |
  489|       |    /// Computes `self - duration`, returning `None` if an overflow occurred.
  490|       |    ///
  491|       |    /// ```
  492|       |    /// # use time::{Date, ext::NumericalDuration};
  493|       |    /// # use time::macros::datetime;
  494|       |    /// let datetime = Date::MIN.midnight();
  495|       |    /// assert_eq!(datetime.checked_sub(2.days()), None);
  496|       |    ///
  497|       |    /// let datetime = Date::MAX.midnight();
  498|       |    /// assert_eq!(datetime.checked_sub((-1).days()), None);
  499|       |    ///
  500|       |    /// assert_eq!(
  501|       |    ///     datetime!(2019 - 11 - 25 15:30).checked_sub(27.hours()),
  502|       |    ///     Some(datetime!(2019 - 11 - 24 12:30))
  503|       |    /// );
  504|       |    /// ```
  505|      0|    pub const fn checked_sub(self, duration: Duration) -> Option<Self> {
  506|      0|        let (date_adjustment, time) = self.time.adjusting_sub(duration);
  507|      0|        let date = const_try_opt!(self.date.checked_sub(duration));
  508|       |
  509|       |        Some(Self {
  510|      0|            date: match date_adjustment {
  511|      0|                util::DateAdjustment::Previous => const_try_opt!(date.previous_day()),
  512|      0|                util::DateAdjustment::Next => const_try_opt!(date.next_day()),
  513|      0|                util::DateAdjustment::None => date,
  514|       |            },
  515|      0|            time,
  516|       |        })
  517|      0|    }
  518|       |    // endregion: checked arithmetic
  519|       |
  520|       |    // region: saturating arithmetic
  521|       |    /// Computes `self + duration`, saturating value on overflow.
  522|       |    ///
  523|       |    /// ```
  524|       |    /// # use time::{PrimitiveDateTime, ext::NumericalDuration};
  525|       |    /// # use time::macros::datetime;
  526|       |    /// assert_eq!(
  527|       |    ///     PrimitiveDateTime::MIN.saturating_add((-2).days()),
  528|       |    ///     PrimitiveDateTime::MIN
  529|       |    /// );
  530|       |    ///
  531|       |    /// assert_eq!(
  532|       |    ///     PrimitiveDateTime::MAX.saturating_add(2.days()),
  533|       |    ///     PrimitiveDateTime::MAX
  534|       |    /// );
  535|       |    ///
  536|       |    /// assert_eq!(
  537|       |    ///     datetime!(2019 - 11 - 25 15:30).saturating_add(27.hours()),
  538|       |    ///     datetime!(2019 - 11 - 26 18:30)
  539|       |    /// );
  540|       |    /// ```
  541|       |    pub const fn saturating_add(self, duration: Duration) -> Self {
  542|      0|        if let Some(datetime) = self.checked_add(duration) {
  543|      0|            datetime
  544|      0|        } else if duration.is_negative() {
  545|      0|            Self::MIN
  546|       |        } else {
  547|      0|            Self::MAX
  548|       |        }
  549|      0|    }
  550|       |
  551|       |    /// Computes `self - duration`, saturating value on overflow.
  552|       |    ///
  553|       |    /// ```
  554|       |    /// # use time::{PrimitiveDateTime, ext::NumericalDuration};
  555|       |    /// # use time::macros::datetime;
  556|       |    /// assert_eq!(
  557|       |    ///     PrimitiveDateTime::MIN.saturating_sub(2.days()),
  558|       |    ///     PrimitiveDateTime::MIN
  559|       |    /// );
  560|       |    ///
  561|       |    /// assert_eq!(
  562|       |    ///     PrimitiveDateTime::MAX.saturating_sub((-2).days()),
  563|       |    ///     PrimitiveDateTime::MAX
  564|       |    /// );
  565|       |    ///
  566|       |    /// assert_eq!(
  567|       |    ///     datetime!(2019 - 11 - 25 15:30).saturating_sub(27.hours()),
  568|       |    ///     datetime!(2019 - 11 - 24 12:30)
  569|       |    /// );
  570|       |    /// ```
  571|       |    pub const fn saturating_sub(self, duration: Duration) -> Self {
  572|      0|        if let Some(datetime) = self.checked_sub(duration) {
  573|      0|            datetime
  574|      0|        } else if duration.is_negative() {
  575|      0|            Self::MAX
  576|       |        } else {
  577|      0|            Self::MIN
  578|       |        }
  579|      0|    }
  580|       |    // endregion: saturating arithmetic
  581|       |}
  582|       |
  583|       |// region: replacement
  584|       |/// Methods that replace part of the `PrimitiveDateTime`.
  585|       |impl PrimitiveDateTime {
  586|       |    /// Replace the time, preserving the date.
  587|       |    ///
  588|       |    /// ```rust
  589|       |    /// # use time::macros::{datetime, time};
  590|       |    /// assert_eq!(
  591|       |    ///     datetime!(2020-01-01 17:00).replace_time(time!(5:00)),
  592|       |    ///     datetime!(2020-01-01 5:00)
  593|       |    /// );
  594|       |    /// ```
  595|       |    #[must_use = "This method does not mutate the original `PrimitiveDateTime`."]
  596|      0|    pub const fn replace_time(self, time: Time) -> Self {
  597|      0|        self.date.with_time(time)
  598|      0|    }
  599|       |
  600|       |    /// Replace the date, preserving the time.
  601|       |    ///
  602|       |    /// ```rust
  603|       |    /// # use time::macros::{datetime, date};
  604|       |    /// assert_eq!(
  605|       |    ///     datetime!(2020-01-01 12:00).replace_date(date!(2020-01-30)),
  606|       |    ///     datetime!(2020-01-30 12:00)
  607|       |    /// );
  608|       |    /// ```
  609|       |    #[must_use = "This method does not mutate the original `PrimitiveDateTime`."]
  610|      0|    pub const fn replace_date(self, date: Date) -> Self {
  611|      0|        date.with_time(self.time)
  612|      0|    }
  613|       |}
  614|       |// endregion replacement
  615|       |
  616|       |// region: offset conversion helpers
  617|       |/// Helper methods to adjust a [`PrimitiveDateTime`] to a given [`UtcOffset`].
  618|       |impl PrimitiveDateTime {
  619|       |    /// Assuming that the current [`PrimitiveDateTime`] is a value in the provided [`UtcOffset`],
  620|       |    /// obtain the equivalent value in the UTC.
  621|      0|    pub(crate) const fn offset_to_utc(self, offset: UtcOffset) -> Self {
  622|      0|        let mut second = self.second() as i8 - offset.seconds_past_minute();
  623|      0|        let mut minute = self.minute() as i8 - offset.minutes_past_hour();
  624|      0|        let mut hour = self.hour() as i8 - offset.whole_hours();
  625|      0|        let (mut year, mut ordinal) = self.date.to_ordinal_date();
  626|      0|
  627|      0|        cascade!(second in 0..60 => minute);
  628|      0|        cascade!(minute in 0..60 => hour);
  629|      0|        cascade!(hour in 0..24 => ordinal);
  630|      0|        cascade!(ordinal => year);
  631|       |
  632|      0|        Self {
  633|      0|            date: Date::__from_ordinal_date_unchecked(year, ordinal),
  634|      0|            time: Time::__from_hms_nanos_unchecked(
  635|      0|                hour as _,
  636|      0|                minute as _,
  637|      0|                second as _,
  638|      0|                self.nanosecond(),
  639|      0|            ),
  640|      0|        }
  641|      0|    }
  642|       |
  643|       |    /// Assuming that the current [`PrimitiveDateTime`] is a value in UTC, obtain the equivalent
  644|       |    /// value in the provided [`UtcOffset`].
  645|      0|    pub(crate) const fn utc_to_offset(self, offset: UtcOffset) -> Self {
  646|      0|        self.offset_to_utc(UtcOffset::__from_hms_unchecked(
  647|      0|            -offset.whole_hours(),
  648|      0|            -offset.minutes_past_hour(),
  649|      0|            -offset.seconds_past_minute(),
  650|      0|        ))
  651|      0|    }
  652|       |}
  653|       |// endregion offset conversion helpers
  654|       |
  655|       |// region: formatting & parsing
  656|       |#[cfg(feature = "formatting")]
  657|       |impl PrimitiveDateTime {
  658|       |    /// Format the `PrimitiveDateTime` using the provided [format
  659|       |    /// description](crate::format_description).
  660|       |    pub fn format_into(
  661|       |        self,
  662|       |        output: &mut impl io::Write,
  663|       |        format: &(impl Formattable + ?Sized),
  664|       |    ) -> Result<usize, error::Format> {
  665|       |        format.format_into(output, Some(self.date), Some(self.time), None)
  666|       |    }
  667|       |
  668|       |    /// Format the `PrimitiveDateTime` using the provided [format
  669|       |    /// description](crate::format_description).
  670|       |    ///
  671|       |    /// ```rust
  672|       |    /// # use time::{format_description, macros::datetime};
  673|       |    /// let format = format_description::parse("[year]-[month]-[day] [hour]:[minute]:[second]")?;
  674|       |    /// assert_eq!(
  675|       |    ///     datetime!(2020-01-02 03:04:05).format(&format)?,
  676|       |    ///     "2020-01-02 03:04:05"
  677|       |    /// );
  678|       |    /// # Ok::<_, time::Error>(())
  679|       |    /// ```
  680|       |    pub fn format(self, format: &(impl Formattable + ?Sized)) -> Result<String, error::Format> {
  681|       |        format.format(Some(self.date), Some(self.time), None)
  682|       |    }
  683|       |}
  684|       |
  685|       |#[cfg(feature = "parsing")]
  686|       |impl PrimitiveDateTime {
  687|       |    /// Parse a `PrimitiveDateTime` from the input using the provided [format
  688|       |    /// description](crate::format_description).
  689|       |    ///
  690|       |    /// ```rust
  691|       |    /// # use time::{format_description, macros::datetime, PrimitiveDateTime};
  692|       |    /// let format = format_description::parse("[year]-[month]-[day] [hour]:[minute]:[second]")?;
  693|       |    /// assert_eq!(
  694|       |    ///     PrimitiveDateTime::parse("2020-01-02 03:04:05", &format)?,
  695|       |    ///     datetime!(2020-01-02 03:04:05)
  696|       |    /// );
  697|       |    /// # Ok::<_, time::Error>(())
  698|       |    /// ```
  699|       |    pub fn parse(
  700|       |        input: &str,
  701|       |        description: &(impl Parsable + ?Sized),
  702|       |    ) -> Result<Self, error::Parse> {
  703|       |        description.parse_date_time(input.as_bytes())
  704|       |    }
  705|       |}
  706|       |
  707|       |impl fmt::Display for PrimitiveDateTime {
  708|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  709|      0|        write!(f, "{} {}", self.date, self.time)
  710|      0|    }
  711|       |}
  712|       |// endregion formatting & parsing
  713|       |
  714|       |// region: trait impls
  715|       |impl Add<Duration> for PrimitiveDateTime {
  716|       |    type Output = Self;
  717|       |
  718|      0|    fn add(self, duration: Duration) -> Self::Output {
  719|      0|        self.checked_add(duration)
  720|      0|            .expect("resulting value is out of range")
  721|      0|    }
  722|       |}
  723|       |
  724|       |impl Add<StdDuration> for PrimitiveDateTime {
  725|       |    type Output = Self;
  726|       |
  727|      0|    fn add(self, duration: StdDuration) -> Self::Output {
  728|      0|        let (is_next_day, time) = self.time.adjusting_add_std(duration);
  729|      0|
  730|      0|        Self {
  731|      0|            date: if is_next_day {
  732|      0|                (self.date + duration)
  733|      0|                    .next_day()
  734|      0|                    .expect("resulting value is out of range")
  735|       |            } else {
  736|      0|                self.date + duration
  737|       |            },
  738|      0|            time,
  739|      0|        }
  740|      0|    }
  741|       |}
  742|       |
  743|       |impl_add_assign!(PrimitiveDateTime: Duration, StdDuration);
  744|       |
  745|       |impl Sub<Duration> for PrimitiveDateTime {
  746|       |    type Output = Self;
  747|       |
  748|      0|    fn sub(self, duration: Duration) -> Self::Output {
  749|      0|        self.checked_sub(duration)
  750|      0|            .expect("resulting value is out of range")
  751|      0|    }
  752|       |}
  753|       |
  754|       |impl Sub<StdDuration> for PrimitiveDateTime {
  755|       |    type Output = Self;
  756|       |
  757|      0|    fn sub(self, duration: StdDuration) -> Self::Output {
  758|      0|        let (is_previous_day, time) = self.time.adjusting_sub_std(duration);
  759|      0|
  760|      0|        Self {
  761|      0|            date: if is_previous_day {
  762|      0|                (self.date - duration)
  763|      0|                    .previous_day()
  764|      0|                    .expect("resulting value is out of range")
  765|       |            } else {
  766|      0|                self.date - duration
  767|       |            },
  768|      0|            time,
  769|      0|        }
  770|      0|    }
  771|       |}
  772|       |
  773|       |impl_sub_assign!(PrimitiveDateTime: Duration, StdDuration);
  774|       |
  775|       |impl Sub for PrimitiveDateTime {
  776|       |    type Output = Duration;
  777|       |
  778|      0|    fn sub(self, rhs: Self) -> Self::Output {
  779|      0|        (self.date - rhs.date) + (self.time - rhs.time)
  780|      0|    }
  781|       |}
  782|       |// endregion trait impls
  783|       |
  784|       |#[cfg(test)]
  785|       |mod rusty_tests {
  786|       |	use crate::*;
  787|       |	use std::cmp::Ord;
  788|       |	use std::cmp::PartialEq;
  789|       |	use std::clone::Clone;
  790|       |	use std::ops::Add;
  791|       |	use std::ops::Sub;
  792|       |	use std::cmp::Eq;
  793|       |//#[no_coverage]
  794|      1|#[test]
  795|       |#[should_panic]
  796|      1|#[timeout(3000)]
  797|      1|fn rusty_test_1877() {
  798|      1|    rusty_monitor::set_test_id(1877);
  799|      1|    let mut i64_0: i64 = 9223372036854775807i64;
  800|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  801|      1|    let mut i8_0: i8 = 127i8;
  802|      1|    let mut i8_1: i8 = 127i8;
  803|      1|    let mut i8_2: i8 = 2i8;
  804|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  805|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  806|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
  807|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  808|      1|    let mut u32_0: u32 = 999999999u32;
  809|      1|    let mut u8_0: u8 = 1u8;
  810|      1|    let mut u8_1: u8 = 12u8;
  811|      1|    let mut u8_2: u8 = 9u8;
  812|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  813|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  814|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_1);
  815|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  816|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  817|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  818|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
  819|      1|    let mut i64_1: i64 = 0i64;
  820|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  821|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  822|      1|    let mut i8_3: i8 = 5i8;
  823|      1|    let mut i8_4: i8 = 2i8;
  824|      1|    let mut i8_5: i8 = 127i8;
  825|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  826|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  827|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_4, utcoffset_1);
  828|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_5);
  829|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  830|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_2, duration_2);
  831|      1|    let mut primitivedatetime_3_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_3;
  832|      1|    let mut i32_0: i32 = 37i32;
  833|      1|    let mut i64_2: i64 = 1000i64;
  834|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_0);
  835|      1|    let mut i64_3: i64 = 1i64;
  836|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
  837|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  838|      1|    let mut i64_4: i64 = 12i64;
  839|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_4);
  840|      1|    let mut u16_0: u16 = 999u16;
  841|      1|    let mut i32_1: i32 = 252i32;
  842|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  843|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(primitivedatetime_3_ref_0, primitivedatetime_1_ref_0);
  844|      1|    panic!("From RustyUnit with love");
  845|       |}
  846|       |
  847|       |//#[no_coverage]
  848|      1|#[test]
  849|       |#[should_panic]
  850|      1|#[timeout(3000)]
  851|      1|fn rusty_test_7482() {
  852|      1|    rusty_monitor::set_test_id(7482);
  853|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  854|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
  855|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  856|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  857|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  858|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
  859|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  860|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
  861|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  862|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
  863|      1|    let mut i8_0: i8 = 3i8;
  864|      1|    let mut i8_1: i8 = -42i8;
  865|      1|    let mut i8_2: i8 = 23i8;
  866|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  867|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  868|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_4, utcoffset_1);
  869|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_5);
  870|      1|    let mut i32_0: i32 = 86399i32;
  871|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  872|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_2};
  873|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_2, time_1);
  874|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(primitivedatetime_3, primitivedatetime_1);
  875|      1|    let mut u16_0: u16 = 60u16;
  876|      1|    let mut i32_1: i32 = 172i32;
  877|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  878|      1|    let mut weekday_0: weekday::Weekday = crate::date::Date::weekday(date_2);
  879|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
  880|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
  881|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  882|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  883|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  884|      1|    let mut i32_2: i32 = 1000000000i32;
  885|      1|    let mut i64_0: i64 = 3600i64;
  886|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_2);
  887|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_3, duration_2);
  888|      1|    let mut u32_0: u32 = 100u32;
  889|      1|    let mut u8_0: u8 = 3u8;
  890|      1|    let mut u8_1: u8 = 10u8;
  891|      1|    let mut u8_2: u8 = 5u8;
  892|      1|    let mut i64_1: i64 = 1000000000i64;
  893|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  894|      1|    let mut u16_1: u16 = 999u16;
  895|      1|    let mut i32_3: i32 = -159i32;
  896|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  897|      1|    let mut u16_2: u16 = 367u16;
  898|      1|    let mut i32_4: i32 = 5i32;
  899|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
  900|      1|    let mut i32_5: i32 = 9i32;
  901|      1|    let mut date_5: crate::date::Date = crate::date::Date {value: i32_5};
  902|      1|    let mut i64_2: i64 = 2440588i64;
  903|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
  904|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
  905|      1|    let mut u32_1: u32 = 999999999u32;
  906|      1|    let mut u8_3: u8 = 3u8;
  907|      1|    let mut u8_4: u8 = 11u8;
  908|      1|    let mut u8_5: u8 = 1u8;
  909|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  910|      1|    let mut i32_6: i32 = 195i32;
  911|      1|    let mut date_6: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_6);
  912|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_6, time: time_3};
  913|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_4, duration_7);
  914|      1|    let mut u8_6: u8 = 8u8;
  915|      1|    let mut month_0: month::Month = crate::month::Month::November;
  916|      1|    let mut i32_7: i32 = -64i32;
  917|      1|    let mut u8_7: u8 = 31u8;
  918|      1|    let mut month_1: month::Month = crate::month::Month::February;
  919|      1|    let mut i32_8: i32 = 111i32;
  920|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_8, month_1, u8_7);
  921|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_7, month_0, u8_6);
  922|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::date::Date::to_iso_week_date(date_4);
  923|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_3, duration_5);
  924|      1|    let mut time_4: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  925|      1|    let mut option_1: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_sub(duration_4, duration_1);
  926|      1|    let mut u8_8: u8 = crate::weekday::Weekday::number_days_from_monday(weekday_1);
  927|      1|    let mut i128_0: i128 = crate::duration::Duration::whole_milliseconds(duration_0);
  928|      1|    panic!("From RustyUnit with love");
  929|       |}
  930|       |
  931|       |//#[no_coverage]
  932|      1|#[test]
  933|       |#[should_panic]
  934|      1|#[timeout(3000)]
  935|      1|fn rusty_test_2472() {
  936|      1|    rusty_monitor::set_test_id(2472);
  937|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Monday;
  938|      1|    let mut u32_0: u32 = 1000u32;
  939|      1|    let mut u8_0: u8 = 3u8;
  940|      1|    let mut u8_1: u8 = 1u8;
  941|      1|    let mut u8_2: u8 = 12u8;
  942|      1|    let mut i32_0: i32 = 65i32;
  943|      1|    let mut i64_0: i64 = 86400i64;
  944|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
  945|      1|    let mut i32_1: i32 = 364i32;
  946|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  947|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
  948|      1|    let mut i64_1: i64 = 0i64;
  949|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
  950|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  951|      1|    let mut u16_0: u16 = 999u16;
  952|      1|    let mut i32_2: i32 = 215i32;
  953|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  954|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  955|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  956|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  957|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  958|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  959|      1|    let mut u16_1: u16 = 1u16;
  960|      1|    let mut i32_3: i32 = 128i32;
  961|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  962|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
  963|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_1);
  964|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
  965|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
  966|      1|    panic!("From RustyUnit with love");
  967|       |}
  968|       |
  969|       |//#[no_coverage]
  970|      1|#[test]
  971|       |#[should_panic]
  972|      1|#[timeout(3000)]
  973|      1|fn rusty_test_8486() {
  974|      1|    rusty_monitor::set_test_id(8486);
  975|      1|    let mut i8_0: i8 = 6i8;
  976|      1|    let mut i8_1: i8 = 127i8;
  977|      1|    let mut i8_2: i8 = 5i8;
  978|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  979|      1|    let mut i64_0: i64 = 3600i64;
  980|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
  981|      1|    let mut u32_0: u32 = 10000000u32;
  982|      1|    let mut u8_0: u8 = 2u8;
  983|      1|    let mut u8_1: u8 = 23u8;
  984|      1|    let mut u8_2: u8 = 3u8;
  985|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  986|      1|    let mut u16_0: u16 = 60u16;
  987|      1|    let mut i32_0: i32 = 9999i32;
  988|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  989|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  990|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_0, duration_0);
  991|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
  992|      1|    let mut u32_1: u32 = 10000u32;
  993|      1|    let mut u8_3: u8 = 60u8;
  994|      1|    let mut u8_4: u8 = 52u8;
  995|      1|    let mut u8_5: u8 = 2u8;
  996|      1|    let mut u32_2: u32 = 1000000000u32;
  997|      1|    let mut u8_6: u8 = 77u8;
  998|      1|    let mut u8_7: u8 = 0u8;
  999|      1|    let mut u8_8: u8 = 12u8;
 1000|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1001|      1|    let mut u16_1: u16 = 367u16;
 1002|      1|    let mut i32_1: i32 = 156i32;
 1003|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1004|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_1);
 1005|      1|    let mut i32_2: i32 = 99i32;
 1006|      1|    let mut i64_1: i64 = 12i64;
 1007|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1008|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_2);
 1009|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1010|      1|    let mut u32_3: u32 = 10u32;
 1011|      1|    let mut u8_9: u8 = 19u8;
 1012|      1|    let mut u8_10: u8 = 30u8;
 1013|      1|    let mut u8_11: u8 = 9u8;
 1014|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 1015|      1|    let mut i32_3: i32 = 25i32;
 1016|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
 1017|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_2};
 1018|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_3, duration_3);
 1019|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1020|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1021|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1022|      1|    let mut u16_2: u16 = 999u16;
 1023|      1|    let mut i32_4: i32 = 161i32;
 1024|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
 1025|      1|    let mut u8_12: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_4);
 1026|      1|    let mut u8_13: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_2);
 1027|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1028|      1|    let mut u8_14: u8 = crate::offset_date_time::OffsetDateTime::minute(offsetdatetime_0);
 1029|      1|    panic!("From RustyUnit with love");
 1030|       |}
 1031|       |
 1032|       |//#[no_coverage]
 1033|      1|#[test]
 1034|       |#[should_panic]
 1035|      1|#[timeout(3000)]
 1036|      1|fn rusty_test_1353() {
 1037|      1|    rusty_monitor::set_test_id(1353);
 1038|      1|    let mut i32_0: i32 = 9i32;
 1039|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1040|      1|    let mut i64_0: i64 = 2440588i64;
 1041|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1042|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1043|      1|    let mut u32_0: u32 = 999999999u32;
 1044|      1|    let mut u8_0: u8 = 3u8;
 1045|      1|    let mut u8_1: u8 = 11u8;
 1046|      1|    let mut u8_2: u8 = 1u8;
 1047|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1048|      1|    let mut i32_1: i32 = 195i32;
 1049|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1050|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 1051|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_1);
 1052|      1|    let mut u8_3: u8 = 8u8;
 1053|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1054|      1|    let mut i32_2: i32 = -64i32;
 1055|      1|    let mut u8_4: u8 = 31u8;
 1056|      1|    let mut month_1: month::Month = crate::month::Month::February;
 1057|      1|    let mut i32_3: i32 = 111i32;
 1058|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_1, u8_4);
 1059|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_2, month_0, u8_3);
 1060|      1|    panic!("From RustyUnit with love");
 1061|       |}
 1062|       |
 1063|       |//#[no_coverage]
 1064|      1|#[test]
 1065|       |#[should_panic]
 1066|      1|#[timeout(3000)]
 1067|      1|fn rusty_test_666() {
 1068|      1|    rusty_monitor::set_test_id(666);
 1069|      1|    let mut i32_0: i32 = 43i32;
 1070|      1|    let mut i64_0: i64 = 49i64;
 1071|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1072|      1|    let mut i32_1: i32 = -41i32;
 1073|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1074|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_0);
 1075|      1|    let mut i64_1: i64 = 24i64;
 1076|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1077|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1078|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1079|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1080|      1|    let mut i32_2: i32 = 201i32;
 1081|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1082|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
 1083|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 1084|      1|    let mut i64_2: i64 = 60i64;
 1085|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1086|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1087|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1088|      1|    let mut u32_0: u32 = 999999u32;
 1089|      1|    let mut u8_0: u8 = 82u8;
 1090|      1|    let mut u8_1: u8 = 4u8;
 1091|      1|    let mut u8_2: u8 = 5u8;
 1092|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1093|      1|    let mut i32_3: i32 = 331i32;
 1094|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1095|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_3, time_1);
 1096|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_5);
 1097|      1|    let mut u8_3: u8 = crate::primitive_date_time::PrimitiveDateTime::minute(primitivedatetime_1);
 1098|      1|    let mut u8_4: u8 = crate::date::Date::iso_week(date_1);
 1099|      1|    panic!("From RustyUnit with love");
 1100|       |}
 1101|       |
 1102|       |//#[no_coverage]
 1103|      1|#[test]
 1104|       |#[should_panic]
 1105|      1|#[timeout(3000)]
 1106|      1|fn rusty_test_975() {
 1107|      1|    rusty_monitor::set_test_id(975);
 1108|      1|    let mut i8_0: i8 = 0i8;
 1109|      1|    let mut i8_1: i8 = 127i8;
 1110|      1|    let mut i8_2: i8 = 24i8;
 1111|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1112|      1|    let mut i32_0: i32 = 314i32;
 1113|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1114|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1115|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1116|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1117|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1118|      1|    let mut i32_1: i32 = 364i32;
 1119|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1120|      1|    let mut i64_0: i64 = 0i64;
 1121|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1122|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1123|      1|    let mut u16_0: u16 = 999u16;
 1124|      1|    let mut i32_2: i32 = 215i32;
 1125|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1126|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1127|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1128|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1129|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_1);
 1130|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1131|      1|    let mut u16_1: u16 = 1u16;
 1132|      1|    let mut i32_3: i32 = 128i32;
 1133|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 1134|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_1};
 1135|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_0);
 1136|      1|    let mut u8_0: u8 = crate::time::Time::minute(time_0);
 1137|      1|    panic!("From RustyUnit with love");
 1138|       |}
 1139|       |
 1140|       |//#[no_coverage]
 1141|      1|#[test]
 1142|       |#[should_panic]
 1143|      1|#[timeout(3000)]
 1144|      1|fn rusty_test_528() {
 1145|      1|    rusty_monitor::set_test_id(528);
 1146|      1|    let mut i8_0: i8 = 4i8;
 1147|      1|    let mut i8_1: i8 = 0i8;
 1148|      1|    let mut i8_2: i8 = 127i8;
 1149|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1150|      1|    let mut i64_0: i64 = 9223372036854775807i64;
 1151|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1152|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1153|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1154|      1|    let mut u32_0: u32 = 999999u32;
 1155|      1|    let mut u8_0: u8 = 82u8;
 1156|      1|    let mut u8_1: u8 = 4u8;
 1157|      1|    let mut u8_2: u8 = 5u8;
 1158|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1159|      1|    let mut i32_0: i32 = 331i32;
 1160|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1161|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1162|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 1163|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1164|      1|    let mut month_0: month::Month = crate::offset_date_time::OffsetDateTime::month(offsetdatetime_0);
 1165|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
 1166|      1|    panic!("From RustyUnit with love");
 1167|       |}
 1168|       |
 1169|       |//#[no_coverage]
 1170|      1|#[test]
 1171|       |#[should_panic]
 1172|      1|#[timeout(3000)]
 1173|      1|fn rusty_test_2479() {
 1174|      1|    rusty_monitor::set_test_id(2479);
 1175|      1|    let mut i128_0: i128 = 1000000000i128;
 1176|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1177|      1|    let mut i32_0: i32 = 7i32;
 1178|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1179|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
 1180|      1|    let mut weekday_0: weekday::Weekday = crate::date::Date::weekday(date_1);
 1181|      1|    let mut u32_0: u32 = 1000u32;
 1182|      1|    let mut u8_0: u8 = 3u8;
 1183|      1|    let mut u8_1: u8 = 1u8;
 1184|      1|    let mut u8_2: u8 = 12u8;
 1185|      1|    let mut i32_1: i32 = 65i32;
 1186|      1|    let mut i64_0: i64 = 86400i64;
 1187|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1188|      1|    let mut i32_2: i32 = 364i32;
 1189|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1190|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_1);
 1191|      1|    let mut i64_1: i64 = 0i64;
 1192|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1193|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1194|      1|    let mut u16_0: u16 = 999u16;
 1195|      1|    let mut i32_3: i32 = 215i32;
 1196|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1197|      1|    let mut i32_4: i32 = -60i32;
 1198|      1|    let mut i64_2: i64 = 604800i64;
 1199|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_4);
 1200|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1201|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1202|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1203|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1204|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1205|      1|    let mut u16_1: u16 = 1u16;
 1206|      1|    let mut i32_5: i32 = 128i32;
 1207|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_1);
 1208|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_5, time: time_0};
 1209|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_3);
 1210|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_3, u8_2, u8_1, u8_0, u32_0);
 1211|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
 1212|      1|    panic!("From RustyUnit with love");
 1213|       |}
 1214|       |
 1215|       |//#[no_coverage]
 1216|      1|#[test]
 1217|       |#[should_panic]
 1218|      1|#[timeout(3000)]
 1219|      1|fn rusty_test_301() {
 1220|      1|    rusty_monitor::set_test_id(301);
 1221|      1|    let mut i8_0: i8 = 1i8;
 1222|      1|    let mut i8_1: i8 = 6i8;
 1223|      1|    let mut i8_2: i8 = 6i8;
 1224|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1225|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1226|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1227|      1|    let mut u32_0: u32 = 999999u32;
 1228|      1|    let mut u8_0: u8 = 1u8;
 1229|      1|    let mut u8_1: u8 = 1u8;
 1230|      1|    let mut u8_2: u8 = 3u8;
 1231|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1232|      1|    let mut i32_0: i32 = 139i32;
 1233|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1234|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1235|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
 1236|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
 1237|      1|    let mut i32_1: i32 = 331i32;
 1238|      1|    let mut i64_0: i64 = 1000i64;
 1239|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1240|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1241|      1|    let mut u32_1: u32 = 1000000u32;
 1242|      1|    let mut u8_3: u8 = 23u8;
 1243|      1|    let mut u8_4: u8 = 53u8;
 1244|      1|    let mut u8_5: u8 = 23u8;
 1245|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1246|      1|    let mut i64_1: i64 = 60i64;
 1247|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1248|      1|    let mut u16_0: u16 = 1u16;
 1249|      1|    let mut i32_2: i32 = 172i32;
 1250|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1251|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_3);
 1252|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
 1253|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_2, duration_2);
 1254|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_3);
 1255|      1|    let mut tuple_0: (u8, u8, u8, u16) = crate::offset_date_time::OffsetDateTime::to_hms_milli(offsetdatetime_1);
 1256|      1|    let mut tuple_1: (u8, u8, u8, u16) = crate::offset_date_time::OffsetDateTime::to_hms_milli(offsetdatetime_0);
 1257|      1|    panic!("From RustyUnit with love");
 1258|       |}
 1259|       |
 1260|       |//#[no_coverage]
 1261|      1|#[test]
 1262|       |#[should_panic]
 1263|      1|#[timeout(3000)]
 1264|      1|fn rusty_test_3475() {
 1265|      1|    rusty_monitor::set_test_id(3475);
 1266|      1|    let mut u32_0: u32 = 1000u32;
 1267|      1|    let mut u8_0: u8 = 3u8;
 1268|      1|    let mut u8_1: u8 = 3u8;
 1269|      1|    let mut u8_2: u8 = 12u8;
 1270|      1|    let mut i32_0: i32 = 65i32;
 1271|      1|    let mut i64_0: i64 = 86400i64;
 1272|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1273|      1|    let mut i32_1: i32 = 364i32;
 1274|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1275|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
 1276|      1|    let mut i64_1: i64 = 0i64;
 1277|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1278|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1279|      1|    let mut u16_0: u16 = 999u16;
 1280|      1|    let mut i32_2: i32 = 215i32;
 1281|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1282|      1|    let mut i32_3: i32 = -47i32;
 1283|      1|    let mut i64_2: i64 = 604800i64;
 1284|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_3);
 1285|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1286|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1287|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1288|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_3);
 1289|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1290|      1|    let mut u16_1: u16 = 1u16;
 1291|      1|    let mut i32_4: i32 = 128i32;
 1292|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 1293|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 1294|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 1295|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
 1296|      1|    let mut u8_3: u8 = crate::primitive_date_time::PrimitiveDateTime::monday_based_week(primitivedatetime_1);
 1297|      1|    panic!("From RustyUnit with love");
 1298|       |}
 1299|       |
 1300|       |//#[no_coverage]
 1301|      1|#[test]
 1302|       |#[should_panic]
 1303|      1|#[timeout(3000)]
 1304|      1|fn rusty_test_3379() {
 1305|      1|    rusty_monitor::set_test_id(3379);
 1306|      1|    let mut i64_0: i64 = 24i64;
 1307|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1308|      1|    let mut u32_0: u32 = 1000u32;
 1309|      1|    let mut u8_0: u8 = 3u8;
 1310|      1|    let mut u8_1: u8 = 1u8;
 1311|      1|    let mut u8_2: u8 = 0u8;
 1312|      1|    let mut i32_0: i32 = 65i32;
 1313|      1|    let mut i64_1: i64 = 86400i64;
 1314|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1315|      1|    let mut i32_1: i32 = 364i32;
 1316|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1317|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 1318|      1|    let mut i64_2: i64 = 0i64;
 1319|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1320|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1321|      1|    let mut i32_2: i32 = -60i32;
 1322|      1|    let mut i64_3: i64 = 604800i64;
 1323|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_2);
 1324|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1325|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1326|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1327|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1328|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1329|      1|    let mut u16_0: u16 = 1u16;
 1330|      1|    let mut i32_3: i32 = 128i32;
 1331|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1332|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
 1333|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_3);
 1334|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
 1335|      1|    let mut i32_4: i32 = crate::duration::Duration::subsec_microseconds(duration_0);
 1336|      1|    panic!("From RustyUnit with love");
 1337|       |}
 1338|       |
 1339|       |//#[no_coverage]
 1340|      1|#[test]
 1341|       |#[should_panic]
 1342|      1|#[timeout(3000)]
 1343|      1|fn rusty_test_3935() {
 1344|      1|    rusty_monitor::set_test_id(3935);
 1345|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1346|      1|    let mut u32_0: u32 = 100u32;
 1347|      1|    let mut u8_0: u8 = 3u8;
 1348|      1|    let mut u8_1: u8 = 10u8;
 1349|      1|    let mut u8_2: u8 = 5u8;
 1350|      1|    let mut i64_0: i64 = 1000000000i64;
 1351|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1352|      1|    let mut u16_0: u16 = 999u16;
 1353|      1|    let mut i32_0: i32 = -159i32;
 1354|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1355|      1|    let mut u16_1: u16 = 367u16;
 1356|      1|    let mut i32_1: i32 = 5i32;
 1357|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1358|      1|    let mut i32_2: i32 = 9i32;
 1359|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1360|      1|    let mut i64_1: i64 = 2440588i64;
 1361|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1362|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1363|      1|    let mut u32_1: u32 = 999999999u32;
 1364|      1|    let mut u8_3: u8 = 3u8;
 1365|      1|    let mut u8_4: u8 = 11u8;
 1366|      1|    let mut u8_5: u8 = 1u8;
 1367|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1368|      1|    let mut i32_3: i32 = 195i32;
 1369|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1370|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 1371|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 1372|      1|    let mut u8_6: u8 = 8u8;
 1373|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1374|      1|    let mut i32_4: i32 = -64i32;
 1375|      1|    let mut u8_7: u8 = 31u8;
 1376|      1|    let mut month_1: month::Month = crate::month::Month::February;
 1377|      1|    let mut i32_5: i32 = 111i32;
 1378|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_5, month_1, u8_7);
 1379|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_4, month_0, u8_6);
 1380|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::date::Date::to_iso_week_date(date_1);
 1381|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_0);
 1382|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1383|      1|    let mut i128_0: i128 = crate::offset_date_time::OffsetDateTime::unix_timestamp_nanos(offsetdatetime_0);
 1384|      1|    let mut u16_2: u16 = crate::date::Date::ordinal(date_2);
 1385|      1|    panic!("From RustyUnit with love");
 1386|       |}
 1387|       |
 1388|       |//#[no_coverage]
 1389|      1|#[test]
 1390|       |#[should_panic]
 1391|      1|#[timeout(3000)]
 1392|      1|fn rusty_test_4374() {
 1393|      1|    rusty_monitor::set_test_id(4374);
 1394|      1|    let mut u32_0: u32 = 15u32;
 1395|      1|    let mut u8_0: u8 = 12u8;
 1396|      1|    let mut u8_1: u8 = 70u8;
 1397|      1|    let mut u8_2: u8 = 7u8;
 1398|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1399|      1|    let mut u16_0: u16 = 59u16;
 1400|      1|    let mut i32_0: i32 = 161i32;
 1401|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1402|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
 1403|      1|    let mut primitivedatetime_0_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
 1404|      1|    let mut i64_0: i64 = 1000i64;
 1405|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1406|      1|    let mut u32_1: u32 = 81u32;
 1407|      1|    let mut u8_3: u8 = 0u8;
 1408|      1|    let mut u8_4: u8 = 24u8;
 1409|      1|    let mut u8_5: u8 = 52u8;
 1410|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1411|      1|    let mut i32_1: i32 = 43i32;
 1412|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1413|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 1414|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_1, duration_0);
 1415|      1|    let mut primitivedatetime_2_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_2;
 1416|      1|    let mut u32_2: u32 = 1000u32;
 1417|      1|    let mut u8_6: u8 = 3u8;
 1418|      1|    let mut u8_7: u8 = 1u8;
 1419|      1|    let mut u8_8: u8 = 0u8;
 1420|      1|    let mut i32_2: i32 = 65i32;
 1421|      1|    let mut i64_1: i64 = 86400i64;
 1422|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_2);
 1423|      1|    let mut i32_3: i32 = 364i32;
 1424|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1425|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_1);
 1426|      1|    let mut i64_2: i64 = 0i64;
 1427|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1428|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1429|      1|    let mut u16_1: u16 = 0u16;
 1430|      1|    let mut i32_4: i32 = 215i32;
 1431|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 1432|      1|    let mut i32_5: i32 = -60i32;
 1433|      1|    let mut i64_3: i64 = 604800i64;
 1434|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_5);
 1435|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1436|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1437|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1438|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1439|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1440|      1|    let mut u16_2: u16 = 1u16;
 1441|      1|    let mut i32_6: i32 = 128i32;
 1442|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_6, u16_2);
 1443|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_5, time: time_2};
 1444|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_3, duration_3);
 1445|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_3, u8_8, u8_7, u8_6, u32_2);
 1446|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(primitivedatetime_2_ref_0, primitivedatetime_0_ref_0);
 1447|      1|    panic!("From RustyUnit with love");
 1448|       |}
 1449|       |
 1450|       |//#[no_coverage]
 1451|      1|#[test]
 1452|       |#[should_panic]
 1453|      1|#[timeout(3000)]
 1454|      1|fn rusty_test_3347() {
 1455|      1|    rusty_monitor::set_test_id(3347);
 1456|      1|    let mut i128_0: i128 = -88i128;
 1457|      1|    let mut i32_0: i32 = -44i32;
 1458|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1459|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1460|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_0);
 1461|      1|    let mut u16_0: u16 = 0u16;
 1462|      1|    let mut i32_1: i32 = 1000000000i32;
 1463|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1464|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 1465|      1|    let mut u32_0: u32 = 1000000000u32;
 1466|      1|    let mut u8_0: u8 = 77u8;
 1467|      1|    let mut u8_1: u8 = 0u8;
 1468|      1|    let mut u8_2: u8 = 12u8;
 1469|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1470|      1|    let mut u16_1: u16 = 367u16;
 1471|      1|    let mut i32_2: i32 = 156i32;
 1472|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
 1473|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_2, time_0);
 1474|      1|    let mut i32_3: i32 = 99i32;
 1475|      1|    let mut i64_0: i64 = 168i64;
 1476|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1477|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_3);
 1478|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1479|      1|    let mut u32_1: u32 = 10u32;
 1480|      1|    let mut u8_3: u8 = 19u8;
 1481|      1|    let mut u8_4: u8 = 30u8;
 1482|      1|    let mut u8_5: u8 = 9u8;
 1483|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1484|      1|    let mut i32_4: i32 = 25i32;
 1485|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_4};
 1486|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_1};
 1487|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_4);
 1488|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1489|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1490|      1|    let mut i8_0: i8 = 23i8;
 1491|      1|    let mut i8_1: i8 = 4i8;
 1492|      1|    let mut i8_2: i8 = 4i8;
 1493|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1494|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1495|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 1496|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1497|      1|    let mut u16_2: u16 = 999u16;
 1498|      1|    let mut i32_5: i32 = 161i32;
 1499|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_2);
 1500|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_2};
 1501|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_3, duration_5);
 1502|      1|    let mut u8_6: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_4);
 1503|      1|    let mut u8_7: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_2);
 1504|      1|    let mut u8_8: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_0);
 1505|      1|    let mut tuple_0: (month::Month, u8) = crate::date::Date::month_day(date_1);
 1506|      1|    let mut result_0: std::result::Result<crate::offset_date_time::OffsetDateTime, crate::error::component_range::ComponentRange> = crate::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos(i128_0);
 1507|      1|    panic!("From RustyUnit with love");
 1508|       |}
 1509|       |
 1510|       |//#[no_coverage]
 1511|      1|#[test]
 1512|       |#[should_panic]
 1513|      1|#[timeout(3000)]
 1514|      1|fn rusty_test_1298() {
 1515|      1|    rusty_monitor::set_test_id(1298);
 1516|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1517|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1518|      1|    let mut u16_0: u16 = 366u16;
 1519|      1|    let mut i32_0: i32 = 150i32;
 1520|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1521|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1522|      1|    let mut u32_0: u32 = 1000000000u32;
 1523|      1|    let mut u8_0: u8 = 3u8;
 1524|      1|    let mut u8_1: u8 = 0u8;
 1525|      1|    let mut u8_2: u8 = 12u8;
 1526|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1527|      1|    let mut u16_1: u16 = 367u16;
 1528|      1|    let mut i32_1: i32 = 155i32;
 1529|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1530|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_1);
 1531|      1|    let mut i32_2: i32 = 99i32;
 1532|      1|    let mut i64_0: i64 = 12i64;
 1533|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1534|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_2);
 1535|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1536|      1|    let mut u32_1: u32 = 10u32;
 1537|      1|    let mut u8_3: u8 = 19u8;
 1538|      1|    let mut u8_4: u8 = 30u8;
 1539|      1|    let mut u8_5: u8 = 9u8;
 1540|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1541|      1|    let mut i32_3: i32 = 25i32;
 1542|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
 1543|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_2};
 1544|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_2);
 1545|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1546|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1547|      1|    let mut i8_0: i8 = 23i8;
 1548|      1|    let mut i8_1: i8 = 4i8;
 1549|      1|    let mut i8_2: i8 = 4i8;
 1550|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1551|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1552|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_1, utcoffset_0);
 1553|      1|    let mut time_3: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1554|      1|    let mut u16_2: u16 = 999u16;
 1555|      1|    let mut i32_4: i32 = 161i32;
 1556|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
 1557|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_3};
 1558|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_4, duration_3);
 1559|      1|    let mut u8_6: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_0);
 1560|      1|    let mut u8_7: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_3);
 1561|      1|    let mut u8_8: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_1);
 1562|      1|    let mut i32_5: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_5);
 1563|      1|    panic!("From RustyUnit with love");
 1564|       |}
 1565|       |
 1566|       |//#[no_coverage]
 1567|      1|#[test]
 1568|       |#[should_panic]
 1569|      1|#[timeout(3000)]
 1570|      1|fn rusty_test_543() {
 1571|      1|    rusty_monitor::set_test_id(543);
 1572|      1|    let mut i64_0: i64 = 604800i64;
 1573|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1574|      1|    let mut i32_0: i32 = 0i32;
 1575|      1|    let mut i64_1: i64 = -46i64;
 1576|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
 1577|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 1578|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1579|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_2);
 1580|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1581|      1|    let mut i32_1: i32 = 65i32;
 1582|      1|    let mut i64_2: i64 = 604800i64;
 1583|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
 1584|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_3, i32_1);
 1585|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1586|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1587|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_4);
 1588|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 1589|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 1590|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
 1591|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1592|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
 1593|      1|    let mut i64_3: i64 = 1000000000i64;
 1594|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1595|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1596|      1|    let mut u32_0: u32 = 0u32;
 1597|      1|    let mut u8_0: u8 = 31u8;
 1598|      1|    let mut u8_1: u8 = 53u8;
 1599|      1|    let mut u8_2: u8 = 3u8;
 1600|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1601|      1|    let mut i64_4: i64 = 2147483647i64;
 1602|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
 1603|      1|    let mut i32_2: i32 = 144i32;
 1604|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1605|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_7);
 1606|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::clone::Clone::clone(primitivedatetime_1_ref_0);
 1607|      1|    panic!("From RustyUnit with love");
 1608|       |}
 1609|       |
 1610|       |//#[no_coverage]
 1611|      1|#[test]
 1612|       |#[should_panic]
 1613|      1|#[timeout(3000)]
 1614|      1|fn rusty_test_1167() {
 1615|      1|    rusty_monitor::set_test_id(1167);
 1616|      1|    let mut i64_0: i64 = 1000000i64;
 1617|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1618|      1|    let mut i32_0: i32 = 336i32;
 1619|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1620|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_0);
 1621|      1|    let mut i32_1: i32 = 9i32;
 1622|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1623|      1|    let mut i64_1: i64 = 2440588i64;
 1624|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1625|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1626|      1|    let mut u32_0: u32 = 999999999u32;
 1627|      1|    let mut u8_0: u8 = 3u8;
 1628|      1|    let mut u8_1: u8 = 11u8;
 1629|      1|    let mut u8_2: u8 = 1u8;
 1630|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1631|      1|    let mut i32_2: i32 = 195i32;
 1632|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1633|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 1634|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 1635|      1|    let mut u8_3: u8 = 8u8;
 1636|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1637|      1|    let mut i32_3: i32 = -64i32;
 1638|      1|    let mut u8_4: u8 = 31u8;
 1639|      1|    let mut month_1: month::Month = crate::month::Month::February;
 1640|      1|    let mut i32_4: i32 = 111i32;
 1641|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_4, month_1, u8_4);
 1642|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_0, u8_3);
 1643|      1|    let mut u8_5: u8 = crate::date::Date::iso_week(date_1);
 1644|      1|    panic!("From RustyUnit with love");
 1645|       |}
 1646|       |
 1647|       |//#[no_coverage]
 1648|      1|#[test]
 1649|       |#[should_panic]
 1650|      1|#[timeout(3000)]
 1651|      1|fn rusty_test_7604() {
 1652|      1|    rusty_monitor::set_test_id(7604);
 1653|      1|    let mut i32_0: i32 = 201i32;
 1654|      1|    let mut i64_0: i64 = -50i64;
 1655|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1656|      1|    let mut u32_0: u32 = 100u32;
 1657|      1|    let mut u8_0: u8 = 31u8;
 1658|      1|    let mut u8_1: u8 = 30u8;
 1659|      1|    let mut u8_2: u8 = 86u8;
 1660|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1661|      1|    let mut i32_1: i32 = 195i32;
 1662|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1663|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1664|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_1);
 1665|      1|    let mut u16_0: u16 = 0u16;
 1666|      1|    let mut i32_2: i32 = 40i32;
 1667|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 1668|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_2);
 1669|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 1670|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_0, duration_0);
 1671|      1|    let mut i8_0: i8 = 0i8;
 1672|      1|    let mut i8_1: i8 = 1i8;
 1673|      1|    let mut i8_2: i8 = 0i8;
 1674|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1675|      1|    let mut i8_3: i8 = 3i8;
 1676|      1|    let mut i8_4: i8 = 1i8;
 1677|      1|    let mut i8_5: i8 = 1i8;
 1678|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1679|      1|    let mut u32_1: u32 = 100000u32;
 1680|      1|    let mut u8_3: u8 = 28u8;
 1681|      1|    let mut u8_4: u8 = 23u8;
 1682|      1|    let mut u8_5: u8 = 59u8;
 1683|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1684|      1|    let mut f64_0: f64 = 4794699203894837248.000000f64;
 1685|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1686|      1|    let mut i32_3: i32 = 114i32;
 1687|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1688|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_3);
 1689|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_3, time_1);
 1690|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_1);
 1691|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_3, utcoffset_0);
 1692|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1693|      1|    let mut u32_2: u32 = 55u32;
 1694|      1|    let mut u8_6: u8 = 9u8;
 1695|      1|    let mut u8_7: u8 = 60u8;
 1696|      1|    let mut u8_8: u8 = 1u8;
 1697|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1698|      1|    let mut i32_4: i32 = 43i32;
 1699|      1|    let mut i64_1: i64 = 1000000i64;
 1700|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_4);
 1701|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1702|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_4);
 1703|      1|    let mut date_4: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 1704|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_4, time_2);
 1705|      1|    let mut f64_1: f64 = 4794699203894837248.000000f64;
 1706|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_1);
 1707|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1708|      1|    let mut duration_6: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 1709|      1|    let mut i32_5: i32 = 1000000000i32;
 1710|      1|    let mut i64_2: i64 = 3600i64;
 1711|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_5);
 1712|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_7, duration_6);
 1713|      1|    let mut u32_3: u32 = 100u32;
 1714|      1|    let mut u8_9: u8 = 3u8;
 1715|      1|    let mut u8_10: u8 = 10u8;
 1716|      1|    let mut u8_11: u8 = 5u8;
 1717|      1|    let mut i64_3: i64 = 1000000000i64;
 1718|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1719|      1|    let mut u16_1: u16 = 999u16;
 1720|      1|    let mut i32_6: i32 = -159i32;
 1721|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_6, u16_1);
 1722|      1|    let mut u16_2: u16 = 367u16;
 1723|      1|    let mut i32_7: i32 = 5i32;
 1724|      1|    let mut date_6: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_7, u16_2);
 1725|      1|    let mut i32_8: i32 = 9i32;
 1726|      1|    let mut date_7: crate::date::Date = crate::date::Date {value: i32_8};
 1727|      1|    let mut i64_4: i64 = 2440588i64;
 1728|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 1729|      1|    let mut duration_11: std::time::Duration = crate::duration::Duration::abs_std(duration_10);
 1730|      1|    let mut u32_4: u32 = 999999999u32;
 1731|      1|    let mut u8_12: u8 = 3u8;
 1732|      1|    let mut u8_13: u8 = 11u8;
 1733|      1|    let mut u8_14: u8 = 1u8;
 1734|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_14, u8_13, u8_12, u32_4);
 1735|      1|    let mut i32_9: i32 = 195i32;
 1736|      1|    let mut date_8: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_9);
 1737|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_8, time: time_3};
 1738|      1|    let mut primitivedatetime_6: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_5, duration_11);
 1739|      1|    let mut u8_15: u8 = 8u8;
 1740|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1741|      1|    let mut i32_10: i32 = -64i32;
 1742|      1|    let mut u8_16: u8 = 31u8;
 1743|      1|    let mut month_1: month::Month = crate::month::Month::February;
 1744|      1|    let mut i32_11: i32 = 111i32;
 1745|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_11, month_1, u8_16);
 1746|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_10, month_0, u8_15);
 1747|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::date::Date::to_iso_week_date(date_6);
 1748|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_5, duration_9);
 1749|      1|    let mut time_4: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 1750|      1|    let mut option_1: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_sub(duration_8, duration_5);
 1751|      1|    let mut tuple_1: (i32, u16) = crate::primitive_date_time::PrimitiveDateTime::to_ordinal_date(primitivedatetime_4);
 1752|      1|    let mut u16_3: u16 = crate::offset_date_time::OffsetDateTime::ordinal(offsetdatetime_1);
 1753|      1|    panic!("From RustyUnit with love");
 1754|       |}
 1755|       |
 1756|       |//#[no_coverage]
 1757|      1|#[test]
 1758|       |#[should_panic]
 1759|      1|#[timeout(3000)]
 1760|      1|fn rusty_test_7391() {
 1761|      1|    rusty_monitor::set_test_id(7391);
 1762|      1|    let mut i8_0: i8 = 60i8;
 1763|      1|    let mut i8_1: i8 = 5i8;
 1764|      1|    let mut i8_2: i8 = 4i8;
 1765|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1766|      1|    let mut i8_3: i8 = 2i8;
 1767|      1|    let mut i8_4: i8 = 114i8;
 1768|      1|    let mut i8_5: i8 = 3i8;
 1769|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1770|      1|    let mut u32_0: u32 = 999999u32;
 1771|      1|    let mut u8_0: u8 = 12u8;
 1772|      1|    let mut u8_1: u8 = 3u8;
 1773|      1|    let mut u8_2: u8 = 3u8;
 1774|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1775|      1|    let mut i32_0: i32 = 263i32;
 1776|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1777|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1778|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_1);
 1779|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1780|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 1781|      1|    let mut month_0: month::Month = crate::month::Month::September;
 1782|      1|    let mut u32_1: u32 = 1000u32;
 1783|      1|    let mut u8_3: u8 = 3u8;
 1784|      1|    let mut u8_4: u8 = 1u8;
 1785|      1|    let mut u8_5: u8 = 12u8;
 1786|      1|    let mut i32_1: i32 = 65i32;
 1787|      1|    let mut i64_0: i64 = 86400i64;
 1788|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1789|      1|    let mut i32_2: i32 = 364i32;
 1790|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1791|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_0);
 1792|      1|    let mut i64_1: i64 = 0i64;
 1793|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1794|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1795|      1|    let mut u16_0: u16 = 999u16;
 1796|      1|    let mut i32_3: i32 = 215i32;
 1797|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 1798|      1|    let mut i32_4: i32 = -60i32;
 1799|      1|    let mut i64_2: i64 = 604800i64;
 1800|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_4);
 1801|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1802|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1803|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1804|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_3);
 1805|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1806|      1|    let mut u16_1: u16 = 1u16;
 1807|      1|    let mut i32_5: i32 = 128i32;
 1808|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_1);
 1809|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_1};
 1810|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_2);
 1811|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_2, u8_5, u8_4, u8_3, u32_1);
 1812|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1813|      1|    let mut u8_6: u8 = crate::offset_date_time::OffsetDateTime::iso_week(offsetdatetime_1);
 1814|      1|    panic!("From RustyUnit with love");
 1815|       |}
 1816|       |
 1817|       |//#[no_coverage]
 1818|      1|#[test]
 1819|       |#[should_panic]
 1820|      1|#[timeout(3000)]
 1821|      1|fn rusty_test_8629() {
 1822|      1|    rusty_monitor::set_test_id(8629);
 1823|      1|    let mut i8_0: i8 = 23i8;
 1824|      1|    let mut i8_1: i8 = 23i8;
 1825|      1|    let mut i8_2: i8 = 12i8;
 1826|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1827|      1|    let mut i8_3: i8 = -69i8;
 1828|      1|    let mut i8_4: i8 = 61i8;
 1829|      1|    let mut i8_5: i8 = 30i8;
 1830|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1831|      1|    let mut u32_0: u32 = 100u32;
 1832|      1|    let mut u8_0: u8 = 4u8;
 1833|      1|    let mut u8_1: u8 = 0u8;
 1834|      1|    let mut u8_2: u8 = 87u8;
 1835|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1836|      1|    let mut i32_0: i32 = 15i32;
 1837|      1|    let mut i32_1: i32 = 93i32;
 1838|      1|    let mut i64_0: i64 = 604800i64;
 1839|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1840|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_0);
 1841|      1|    let mut i32_2: i32 = 336i32;
 1842|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_2};
 1843|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 1844|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 1845|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_1);
 1846|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
 1847|      1|    let mut u32_1: u32 = 1000u32;
 1848|      1|    let mut u8_3: u8 = 3u8;
 1849|      1|    let mut u8_4: u8 = 1u8;
 1850|      1|    let mut u8_5: u8 = 0u8;
 1851|      1|    let mut i32_3: i32 = 65i32;
 1852|      1|    let mut i64_1: i64 = 86400i64;
 1853|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_3);
 1854|      1|    let mut i32_4: i32 = 364i32;
 1855|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_4);
 1856|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_2);
 1857|      1|    let mut i64_2: i64 = 0i64;
 1858|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1859|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1860|      1|    let mut u16_0: u16 = 0u16;
 1861|      1|    let mut i32_5: i32 = 215i32;
 1862|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_0);
 1863|      1|    let mut i32_6: i32 = -60i32;
 1864|      1|    let mut i64_3: i64 = 604800i64;
 1865|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_6);
 1866|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1867|      1|    let mut duration_5: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1868|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1869|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_5);
 1870|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 1871|      1|    let mut u16_1: u16 = 1u16;
 1872|      1|    let mut i32_7: i32 = 128i32;
 1873|      1|    let mut date_5: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_7, u16_1);
 1874|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_5, time: time_1};
 1875|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_4);
 1876|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_3, u8_5, u8_4, u8_3, u32_1);
 1877|      1|    let mut i32_8: i32 = crate::offset_date_time::OffsetDateTime::year(offsetdatetime_1);
 1878|      1|    panic!("From RustyUnit with love");
 1879|       |}
 1880|       |
 1881|       |//#[no_coverage]
 1882|      1|#[test]
 1883|       |#[should_panic]
 1884|      1|#[timeout(3000)]
 1885|      1|fn rusty_test_337() {
 1886|      1|    rusty_monitor::set_test_id(337);
 1887|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1888|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 1889|      1|    let mut u32_0: u32 = 1000000u32;
 1890|      1|    let mut u8_0: u8 = 8u8;
 1891|      1|    let mut u8_1: u8 = 9u8;
 1892|      1|    let mut u8_2: u8 = 60u8;
 1893|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1894|      1|    let mut i8_0: i8 = 3i8;
 1895|      1|    let mut i8_1: i8 = 4i8;
 1896|      1|    let mut i8_2: i8 = 5i8;
 1897|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1898|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1899|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_1, utcoffset_1);
 1900|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
 1901|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1902|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_0, utcoffset_0);
 1903|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1904|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1905|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1906|      1|    let mut i8_3: i8 = 6i8;
 1907|      1|    let mut i8_4: i8 = 60i8;
 1908|      1|    let mut i8_5: i8 = 4i8;
 1909|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1910|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1911|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_2);
 1912|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_4);
 1913|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1914|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1915|      1|    let mut i8_6: i8 = 60i8;
 1916|      1|    let mut i8_7: i8 = 3i8;
 1917|      1|    let mut i8_8: i8 = 4i8;
 1918|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1919|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1920|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_5, utcoffset_3);
 1921|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_6);
 1922|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_2);
 1923|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_1);
 1924|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_1);
 1925|      1|    let mut u8_3: u8 = crate::primitive_date_time::PrimitiveDateTime::sunday_based_week(primitivedatetime_3);
 1926|      1|    let mut u8_4: u8 = crate::primitive_date_time::PrimitiveDateTime::sunday_based_week(primitivedatetime_1);
 1927|      1|    panic!("From RustyUnit with love");
 1928|       |}
 1929|       |
 1930|       |//#[no_coverage]
 1931|      1|#[test]
 1932|       |#[should_panic]
 1933|      1|#[timeout(3000)]
 1934|      1|fn rusty_test_2604() {
 1935|      1|    rusty_monitor::set_test_id(2604);
 1936|      1|    let mut month_0: month::Month = crate::month::Month::November;
 1937|      1|    let mut i64_0: i64 = 253402300799i64;
 1938|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1939|      1|    let mut u16_0: u16 = 0u16;
 1940|      1|    let mut i32_0: i32 = 54i32;
 1941|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1942|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
 1943|      1|    let mut u32_0: u32 = 100000u32;
 1944|      1|    let mut u8_0: u8 = 30u8;
 1945|      1|    let mut u8_1: u8 = 30u8;
 1946|      1|    let mut u8_2: u8 = 6u8;
 1947|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1948|      1|    let mut i32_1: i32 = 1000000i32;
 1949|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1950|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1951|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1952|      1|    let mut i64_1: i64 = 38i64;
 1953|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1954|      1|    let mut i32_2: i32 = 1i32;
 1955|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_2};
 1956|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_sub(date_3, duration_1);
 1957|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_1};
 1958|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_2);
 1959|      1|    let mut i64_2: i64 = 9223372036854775807i64;
 1960|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 1961|      1|    let mut i8_0: i8 = 127i8;
 1962|      1|    let mut i8_1: i8 = 127i8;
 1963|      1|    let mut i8_2: i8 = 2i8;
 1964|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1965|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1966|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_0);
 1967|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1968|      1|    let mut u32_1: u32 = 999999999u32;
 1969|      1|    let mut u8_3: u8 = 1u8;
 1970|      1|    let mut u8_4: u8 = 12u8;
 1971|      1|    let mut u8_5: u8 = 9u8;
 1972|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1973|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1974|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_3, time_3);
 1975|      1|    let mut date_5: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_4);
 1976|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_5, time: time_2};
 1977|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_2, duration_2);
 1978|      1|    let mut primitivedatetime_3_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_3;
 1979|      1|    let mut i64_3: i64 = 0i64;
 1980|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 1981|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1982|      1|    let mut i8_3: i8 = 5i8;
 1983|      1|    let mut i8_4: i8 = 2i8;
 1984|      1|    let mut i8_5: i8 = 127i8;
 1985|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1986|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1987|      1|    let mut offsetdatetime_6: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_5, utcoffset_1);
 1988|      1|    let mut date_6: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_6);
 1989|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_6);
 1990|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_4, duration_4);
 1991|      1|    let mut primitivedatetime_5_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_5;
 1992|      1|    let mut i32_3: i32 = 37i32;
 1993|      1|    let mut i64_4: i64 = 1000i64;
 1994|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_4, i32_3);
 1995|      1|    let mut u16_1: u16 = 7u16;
 1996|      1|    let mut i32_4: i32 = 4i32;
 1997|      1|    let mut date_7: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_1);
 1998|      1|    let mut i64_5: i64 = 1i64;
 1999|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_5);
 2000|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2001|      1|    let mut i64_6: i64 = 12i64;
 2002|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::minutes(i64_6);
 2003|      1|    let mut u16_2: u16 = 999u16;
 2004|      1|    let mut i32_5: i32 = 252i32;
 2005|      1|    let mut date_8: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_2);
 2006|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(primitivedatetime_5_ref_0, primitivedatetime_3_ref_0);
 2007|      1|    let mut primitivedatetime_6: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_1, time_0);
 2008|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::None;
 2009|      1|    let mut tuple_0: (i32, month::Month, u8) = crate::date::Date::to_calendar_date(date_1);
 2010|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
 2011|      1|    panic!("From RustyUnit with love");
 2012|       |}
 2013|       |
 2014|       |//#[no_coverage]
 2015|      1|#[test]
 2016|       |#[should_panic]
 2017|      1|#[timeout(3000)]
 2018|      1|fn rusty_test_390() {
 2019|      1|    rusty_monitor::set_test_id(390);
 2020|      1|    let mut i32_0: i32 = 76i32;
 2021|      1|    let mut i64_0: i64 = 3600i64;
 2022|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 2023|      1|    let mut u16_0: u16 = 365u16;
 2024|      1|    let mut i32_1: i32 = 156i32;
 2025|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2026|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2027|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_0);
 2028|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 2029|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 2030|      1|    panic!("From RustyUnit with love");
 2031|       |}
 2032|       |
 2033|       |//#[no_coverage]
 2034|      1|#[test]
 2035|       |#[should_panic]
 2036|      1|#[timeout(3000)]
 2037|      1|fn rusty_test_276() {
 2038|      1|    rusty_monitor::set_test_id(276);
 2039|      1|    let mut f64_0: f64 = -39.826641f64;
 2040|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2041|      1|    let mut i8_0: i8 = 32i8;
 2042|      1|    let mut i8_1: i8 = 23i8;
 2043|      1|    let mut i8_2: i8 = 6i8;
 2044|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2045|      1|    let mut u32_0: u32 = 1000000000u32;
 2046|      1|    let mut u8_0: u8 = 53u8;
 2047|      1|    let mut u8_1: u8 = 53u8;
 2048|      1|    let mut u8_2: u8 = 28u8;
 2049|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2050|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 2051|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2052|      1|    let mut i32_0: i32 = 150i32;
 2053|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2054|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 2055|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 2056|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
 2057|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
 2058|      1|    let mut month_0: month::Month = crate::offset_date_time::OffsetDateTime::month(offsetdatetime_1);
 2059|      1|    let mut month_1: month::Month = crate::month::Month::December;
 2060|      1|    let mut i64_0: i64 = 12i64;
 2061|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 2062|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 2063|      1|    let mut i32_1: i32 = 4i32;
 2064|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 2065|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 2066|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_3);
 2067|      1|    let mut month_2: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_2);
 2068|      1|    let mut month_3: month::Month = crate::month::Month::previous(month_2);
 2069|      1|    let mut month_4: month::Month = crate::month::Month::February;
 2070|      1|    let mut month_5: month::Month = crate::month::Month::December;
 2071|      1|    let mut month_6: month::Month = crate::month::Month::January;
 2072|      1|    let mut month_7: month::Month = crate::month::Month::next(month_6);
 2073|      1|    let mut month_8: month::Month = crate::month::Month::next(month_5);
 2074|      1|    let mut month_9: month::Month = crate::month::Month::next(month_4);
 2075|      1|    let mut month_10: month::Month = crate::month::Month::next(month_3);
 2076|      1|    let mut month_11: month::Month = crate::month::Month::next(month_1);
 2077|      1|    let mut month_12: month::Month = crate::month::Month::next(month_0);
 2078|      1|    panic!("From RustyUnit with love");
 2079|       |}
 2080|       |
 2081|       |//#[no_coverage]
 2082|      1|#[test]
 2083|       |#[should_panic]
 2084|      1|#[timeout(3000)]
 2085|      1|fn rusty_test_2222() {
 2086|      1|    rusty_monitor::set_test_id(2222);
 2087|      1|    let mut u32_0: u32 = 1000000000u32;
 2088|      1|    let mut u8_0: u8 = 77u8;
 2089|      1|    let mut u8_1: u8 = 0u8;
 2090|      1|    let mut u8_2: u8 = 12u8;
 2091|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2092|      1|    let mut u16_0: u16 = 367u16;
 2093|      1|    let mut i32_0: i32 = 156i32;
 2094|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2095|      1|    let mut i32_1: i32 = 99i32;
 2096|      1|    let mut i64_0: i64 = 12i64;
 2097|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 2098|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_1);
 2099|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2100|      1|    let mut u32_1: u32 = 10u32;
 2101|      1|    let mut u8_3: u8 = 19u8;
 2102|      1|    let mut u8_4: u8 = 30u8;
 2103|      1|    let mut u8_5: u8 = 9u8;
 2104|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2105|      1|    let mut i32_2: i32 = 25i32;
 2106|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 2107|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 2108|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_2);
 2109|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2110|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2111|      1|    let mut i8_0: i8 = 23i8;
 2112|      1|    let mut i8_1: i8 = 4i8;
 2113|      1|    let mut i8_2: i8 = 4i8;
 2114|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2115|      1|    let mut u16_1: u16 = 999u16;
 2116|      1|    let mut i32_3: i32 = 161i32;
 2117|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 2118|      1|    let mut u8_6: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_1);
 2119|      1|    panic!("From RustyUnit with love");
 2120|       |}
 2121|       |
 2122|       |//#[no_coverage]
 2123|      1|#[test]
 2124|       |#[should_panic]
 2125|      1|#[timeout(3000)]
 2126|      1|fn rusty_test_423() {
 2127|      1|    rusty_monitor::set_test_id(423);
 2128|      1|    let mut i64_0: i64 = 1i64;
 2129|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 2130|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 2131|      1|    let mut i64_1: i64 = 1000000i64;
 2132|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2133|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2134|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_2);
 2135|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2136|      1|    let mut i32_0: i32 = 178i32;
 2137|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2138|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 2139|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_1);
 2140|      1|    let mut weekday_0: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
 2141|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
 2142|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Thursday;
 2143|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
 2144|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 2145|      1|    let mut weekday_2_ref_0: &weekday::Weekday = &mut weekday_2;
 2146|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2147|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2148|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 2149|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2150|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_3);
 2151|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 2152|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2153|      1|    let mut weekday_3: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_2);
 2154|      1|    let mut weekday_3_ref_0: &weekday::Weekday = &mut weekday_3;
 2155|      1|    panic!("From RustyUnit with love");
 2156|       |}
 2157|       |
 2158|       |//#[no_coverage]
 2159|      1|#[test]
 2160|       |#[should_panic]
 2161|      1|#[timeout(3000)]
 2162|      1|fn rusty_test_2822() {
 2163|      1|    rusty_monitor::set_test_id(2822);
 2164|      1|    let mut u32_0: u32 = 1000000000u32;
 2165|      1|    let mut u8_0: u8 = 77u8;
 2166|      1|    let mut u8_1: u8 = 0u8;
 2167|      1|    let mut u8_2: u8 = 12u8;
 2168|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2169|      1|    let mut u16_0: u16 = 367u16;
 2170|      1|    let mut i32_0: i32 = 156i32;
 2171|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2172|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 2173|      1|    let mut i32_1: i32 = 99i32;
 2174|      1|    let mut i64_0: i64 = 12i64;
 2175|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 2176|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_1);
 2177|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2178|      1|    let mut u32_1: u32 = 10u32;
 2179|      1|    let mut u8_3: u8 = 19u8;
 2180|      1|    let mut u8_4: u8 = 30u8;
 2181|      1|    let mut u8_5: u8 = 9u8;
 2182|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2183|      1|    let mut i32_2: i32 = 25i32;
 2184|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 2185|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 2186|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_2);
 2187|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2188|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2189|      1|    let mut i8_0: i8 = 23i8;
 2190|      1|    let mut i8_1: i8 = 4i8;
 2191|      1|    let mut i8_2: i8 = 4i8;
 2192|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2193|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2194|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 2195|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2196|      1|    let mut u8_6: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_2);
 2197|      1|    let mut u8_7: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_0);
 2198|      1|    panic!("From RustyUnit with love");
 2199|       |}
 2200|       |
 2201|       |//#[no_coverage]
 2202|      1|#[test]
 2203|       |#[should_panic]
 2204|      1|#[timeout(3000)]
 2205|      1|fn rusty_test_295() {
 2206|      1|    rusty_monitor::set_test_id(295);
 2207|      1|    let mut i8_0: i8 = 16i8;
 2208|      1|    let mut i8_1: i8 = 3i8;
 2209|      1|    let mut i8_2: i8 = 2i8;
 2210|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2211|      1|    let mut i32_0: i32 = 178i32;
 2212|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2213|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2214|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
 2215|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2216|      1|    let mut i8_3: i8 = 6i8;
 2217|      1|    let mut i8_4: i8 = 6i8;
 2218|      1|    let mut i8_5: i8 = 6i8;
 2219|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2220|      1|    let mut i32_1: i32 = 9999i32;
 2221|      1|    let mut i64_0: i64 = -7i64;
 2222|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 2223|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_1);
 2224|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 2225|      1|    let mut u32_0: u32 = 999999u32;
 2226|      1|    let mut u8_0: u8 = 2u8;
 2227|      1|    let mut u8_1: u8 = 28u8;
 2228|      1|    let mut u8_2: u8 = 11u8;
 2229|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2230|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2231|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2232|      1|    let mut i32_2: i32 = 309i32;
 2233|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2234|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_3);
 2235|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_0);
 2236|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_1, duration_2);
 2237|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_2, utcoffset_1);
 2238|      1|    let mut tuple_0: (i32, month::Month, u8) = crate::offset_date_time::OffsetDateTime::to_calendar_date(offsetdatetime_2);
 2239|      1|    let mut tuple_1: (i32, month::Month, u8) = crate::offset_date_time::OffsetDateTime::to_calendar_date(offsetdatetime_1);
 2240|      1|    let mut tuple_2: (i32, month::Month, u8) = crate::offset_date_time::OffsetDateTime::to_calendar_date(offsetdatetime_0);
 2241|      1|    panic!("From RustyUnit with love");
 2242|       |}
 2243|       |
 2244|       |//#[no_coverage]
 2245|      1|#[test]
 2246|       |#[should_panic]
 2247|      1|#[timeout(3000)]
 2248|      1|fn rusty_test_657() {
 2249|      1|    rusty_monitor::set_test_id(657);
 2250|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 2251|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2252|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2253|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 2254|      1|    let mut u32_0: u32 = 999999999u32;
 2255|      1|    let mut u8_0: u8 = 3u8;
 2256|      1|    let mut u8_1: u8 = 5u8;
 2257|      1|    let mut u8_2: u8 = 9u8;
 2258|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2259|      1|    let mut i32_0: i32 = 3600i32;
 2260|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2261|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 2262|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2263|      1|    let mut i8_0: i8 = 24i8;
 2264|      1|    let mut i8_1: i8 = 28i8;
 2265|      1|    let mut i8_2: i8 = 4i8;
 2266|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2267|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2268|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_0);
 2269|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 2270|      1|    let mut u16_0: u16 = 7u16;
 2271|      1|    let mut i32_1: i32 = 52i32;
 2272|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2273|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_2);
 2274|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(primitivedatetime_2, primitivedatetime_1);
 2275|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 2276|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2277|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_1);
 2278|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 2279|      1|    panic!("From RustyUnit with love");
 2280|       |}
 2281|       |
 2282|       |//#[no_coverage]
 2283|      1|#[test]
 2284|       |#[should_panic]
 2285|      1|#[timeout(3000)]
 2286|      1|fn rusty_test_1711() {
 2287|      1|    rusty_monitor::set_test_id(1711);
 2288|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2289|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2290|      1|    let mut i64_0: i64 = 2440588i64;
 2291|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 2292|      1|    let mut i32_0: i32 = 8i32;
 2293|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2294|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 2295|      1|    let mut i8_0: i8 = 5i8;
 2296|      1|    let mut i8_1: i8 = 59i8;
 2297|      1|    let mut i8_2: i8 = 24i8;
 2298|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2299|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 2300|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2301|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 2302|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 2303|      1|    let mut i64_1: i64 = -19i64;
 2304|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 2305|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2306|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_5);
 2307|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2308|      1|    let mut i128_0: i128 = 0i128;
 2309|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2310|      1|    let mut i32_1: i32 = 86399i32;
 2311|      1|    let mut i64_2: i64 = 2147483647i64;
 2312|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 2313|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_7, duration_6);
 2314|      1|    let mut i64_3: i64 = 2440588i64;
 2315|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::days(i64_3);
 2316|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2317|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_9);
 2318|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 2319|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_8);
 2320|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 2321|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_4);
 2322|      1|    let mut u8_0: u8 = crate::primitive_date_time::PrimitiveDateTime::day(primitivedatetime_1);
 2323|      1|    panic!("From RustyUnit with love");
 2324|       |}
 2325|       |
 2326|       |//#[no_coverage]
 2327|      1|#[test]
 2328|       |#[should_panic]
 2329|      1|#[timeout(3000)]
 2330|      1|fn rusty_test_546() {
 2331|      1|    rusty_monitor::set_test_id(546);
 2332|      1|    let mut u32_0: u32 = 100000u32;
 2333|      1|    let mut u8_0: u8 = 10u8;
 2334|      1|    let mut u8_1: u8 = 4u8;
 2335|      1|    let mut u8_2: u8 = 30u8;
 2336|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2337|      1|    let mut i32_0: i32 = 314i32;
 2338|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2339|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2340|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
 2341|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2342|      1|    let mut i32_1: i32 = -117i32;
 2343|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 2344|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 2345|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2346|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
 2347|      1|    let mut i64_0: i64 = -178i64;
 2348|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 2349|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 2350|      1|    let mut u32_1: u32 = 100000u32;
 2351|      1|    let mut u8_3: u8 = 11u8;
 2352|      1|    let mut u8_4: u8 = 83u8;
 2353|      1|    let mut u8_5: u8 = 9u8;
 2354|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2355|      1|    let mut i8_0: i8 = 0i8;
 2356|      1|    let mut i8_1: i8 = 1i8;
 2357|      1|    let mut i8_2: i8 = -59i8;
 2358|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2359|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2360|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
 2361|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 2362|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_2};
 2363|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_1);
 2364|      1|    let mut primitivedatetime_3_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_3;
 2365|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(primitivedatetime_3_ref_0);
 2366|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(primitivedatetime_1_ref_0);
 2367|      1|    panic!("From RustyUnit with love");
 2368|       |}
 2369|       |
 2370|       |//#[no_coverage]
 2371|      1|#[test]
 2372|       |#[should_panic]
 2373|      1|#[timeout(3000)]
 2374|      1|fn rusty_test_589() {
 2375|      1|    rusty_monitor::set_test_id(589);
 2376|      1|    let mut i64_0: i64 = 1000000i64;
 2377|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 2378|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 2379|      1|    let mut i64_1: i64 = 1000000i64;
 2380|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 2381|      1|    let mut i8_0: i8 = 24i8;
 2382|      1|    let mut i8_1: i8 = 60i8;
 2383|      1|    let mut i8_2: i8 = 1i8;
 2384|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2385|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2386|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
 2387|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 2388|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_2);
 2389|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2390|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_1);
 2391|      1|    let mut weekday_0: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
 2392|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
 2393|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Monday;
 2394|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::previous(weekday_1);
 2395|      1|    let mut weekday_2_ref_0: &weekday::Weekday = &mut weekday_2;
 2396|      1|    let mut weekday_3: weekday::Weekday = crate::weekday::Weekday::Saturday;
 2397|      1|    let mut weekday_3_ref_0: &weekday::Weekday = &mut weekday_3;
 2398|      1|    let mut weekday_4: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 2399|      1|    let mut weekday_4_ref_0: &weekday::Weekday = &mut weekday_4;
 2400|      1|    panic!("From RustyUnit with love");
 2401|       |}
 2402|       |
 2403|       |//#[no_coverage]
 2404|      1|#[test]
 2405|       |#[should_panic]
 2406|      1|#[timeout(3000)]
 2407|      1|fn rusty_test_453() {
 2408|      1|    rusty_monitor::set_test_id(453);
 2409|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 2410|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2411|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2412|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 2413|      1|    let mut u32_0: u32 = 999999999u32;
 2414|      1|    let mut u8_0: u8 = 3u8;
 2415|      1|    let mut u8_1: u8 = 5u8;
 2416|      1|    let mut u8_2: u8 = 9u8;
 2417|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2418|      1|    let mut i32_0: i32 = 3600i32;
 2419|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2420|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 2421|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2422|      1|    let mut i8_0: i8 = 24i8;
 2423|      1|    let mut i8_1: i8 = 28i8;
 2424|      1|    let mut i8_2: i8 = 4i8;
 2425|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2426|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2427|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_0);
 2428|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 2429|      1|    let mut u16_0: u16 = 7u16;
 2430|      1|    let mut i32_1: i32 = 52i32;
 2431|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2432|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_2);
 2433|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(primitivedatetime_2, primitivedatetime_1);
 2434|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 2435|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 2436|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_1);
 2437|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
 2438|      1|    panic!("From RustyUnit with love");
 2439|       |}
 2440|       |
 2441|       |//#[no_coverage]
 2442|      1|#[test]
 2443|       |#[should_panic]
 2444|      1|#[timeout(3000)]
 2445|      1|fn rusty_test_7776() {
 2446|      1|    rusty_monitor::set_test_id(7776);
 2447|      1|    let mut i64_0: i64 = 78i64;
 2448|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 2449|      1|    let mut i64_1: i64 = -40i64;
 2450|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 2451|      1|    let mut u32_0: u32 = 10000u32;
 2452|      1|    let mut u8_0: u8 = 53u8;
 2453|      1|    let mut u8_1: u8 = 85u8;
 2454|      1|    let mut u8_2: u8 = 11u8;
 2455|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2456|      1|    let mut i64_2: i64 = 12i64;
 2457|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 2458|      1|    let mut f32_0: f32 = 52.411992f32;
 2459|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2460|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
 2461|      1|    let mut i32_0: i32 = 268i32;
 2462|      1|    let mut i64_3: i64 = 253402300799i64;
 2463|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 2464|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_5, i32_0);
 2465|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2466|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_6);
 2467|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 2468|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_4);
 2469|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 2470|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_0, duration_1);
 2471|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
 2472|      1|    let mut u32_1: u32 = 1000u32;
 2473|      1|    let mut u8_3: u8 = 10u8;
 2474|      1|    let mut u8_4: u8 = 12u8;
 2475|      1|    let mut u8_5: u8 = 14u8;
 2476|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2477|      1|    let mut i64_4: i64 = -101i64;
 2478|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 2479|      1|    let mut u16_0: u16 = 34u16;
 2480|      1|    let mut i32_1: i32 = 6i32;
 2481|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2482|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_7);
 2483|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_3, time_1);
 2484|      1|    let mut primitivedatetime_2_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_2;
 2485|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2486|      1|    let mut duration_8: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2487|      1|    let mut i64_5: i64 = 2440588i64;
 2488|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::minutes(i64_5);
 2489|      1|    let mut i32_2: i32 = 8i32;
 2490|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_2};
 2491|      1|    let mut date_5: crate::date::Date = crate::date::Date::saturating_sub(date_4, duration_9);
 2492|      1|    let mut i8_0: i8 = 5i8;
 2493|      1|    let mut i8_1: i8 = 59i8;
 2494|      1|    let mut i8_2: i8 = 24i8;
 2495|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2496|      1|    let mut u16_1: u16 = 367u16;
 2497|      1|    let mut i32_3: i32 = 381i32;
 2498|      1|    let mut date_6: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 2499|      1|    let mut f32_1: f32 = 1065353216.000000f32;
 2500|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_1);
 2501|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::abs(duration_10);
 2502|      1|    let mut i64_6: i64 = -19i64;
 2503|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::days(i64_6);
 2504|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2505|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_12);
 2506|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 2507|      1|    let mut i128_0: i128 = 0i128;
 2508|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2509|      1|    let mut i64_7: i64 = 2440588i64;
 2510|      1|    let mut duration_14: crate::duration::Duration = crate::duration::Duration::days(i64_7);
 2511|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2512|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_4, duration_14);
 2513|      1|    let mut date_7: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_5);
 2514|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(primitivedatetime_2_ref_0, primitivedatetime_1_ref_0);
 2515|      1|    let mut i64_8: i64 = crate::duration::Duration::whole_minutes(duration_0);
 2516|      1|    panic!("From RustyUnit with love");
 2517|       |}
 2518|       |
 2519|       |//#[no_coverage]
 2520|      1|#[test]
 2521|       |#[should_panic]
 2522|      1|#[timeout(3000)]
 2523|      1|fn rusty_test_3603() {
 2524|      1|    rusty_monitor::set_test_id(3603);
 2525|      1|    let mut u16_0: u16 = 367u16;
 2526|      1|    let mut i32_0: i32 = 128i32;
 2527|      1|    let mut i64_0: i64 = -52i64;
 2528|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2529|      1|    let mut i32_1: i32 = -52i32;
 2530|      1|    let mut i64_1: i64 = 1000i64;
 2531|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 2532|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 2533|      1|    let mut u16_1: u16 = 59u16;
 2534|      1|    let mut i32_2: i32 = 1721119i32;
 2535|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
 2536|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_2);
 2537|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2538|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 2539|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 2540|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2541|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 2542|      1|    let mut u32_0: u32 = 38u32;
 2543|      1|    let mut u8_0: u8 = 10u8;
 2544|      1|    let mut u8_1: u8 = 10u8;
 2545|      1|    let mut u8_2: u8 = 86u8;
 2546|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2547|      1|    let mut i32_3: i32 = 252i32;
 2548|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
 2549|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2550|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
 2551|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_4);
 2552|      1|    panic!("From RustyUnit with love");
 2553|       |}
 2554|       |
 2555|       |//#[no_coverage]
 2556|      1|#[test]
 2557|       |#[should_panic]
 2558|      1|#[timeout(3000)]
 2559|      1|fn rusty_test_3604() {
 2560|      1|    rusty_monitor::set_test_id(3604);
 2561|      1|    let mut u32_0: u32 = 999999999u32;
 2562|      1|    let mut u8_0: u8 = 30u8;
 2563|      1|    let mut u8_1: u8 = 0u8;
 2564|      1|    let mut u8_2: u8 = 6u8;
 2565|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2566|      1|    let mut u32_1: u32 = 100u32;
 2567|      1|    let mut u8_3: u8 = 60u8;
 2568|      1|    let mut u8_4: u8 = 0u8;
 2569|      1|    let mut u8_5: u8 = 23u8;
 2570|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2571|      1|    let mut u16_0: u16 = 999u16;
 2572|      1|    let mut i32_0: i32 = 184i32;
 2573|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2574|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_1};
 2575|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2576|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 2577|      1|    let mut u32_2: u32 = 1000u32;
 2578|      1|    let mut u8_6: u8 = 3u8;
 2579|      1|    let mut u8_7: u8 = 1u8;
 2580|      1|    let mut u8_8: u8 = 0u8;
 2581|      1|    let mut i32_1: i32 = 65i32;
 2582|      1|    let mut i64_0: i64 = 86400i64;
 2583|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 2584|      1|    let mut i32_2: i32 = 364i32;
 2585|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2586|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_0);
 2587|      1|    let mut i64_1: i64 = 0i64;
 2588|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 2589|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2590|      1|    let mut u16_1: u16 = 0u16;
 2591|      1|    let mut i32_3: i32 = 215i32;
 2592|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 2593|      1|    let mut i32_4: i32 = -60i32;
 2594|      1|    let mut i64_2: i64 = 604800i64;
 2595|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_4);
 2596|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2597|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2598|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2599|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_3);
 2600|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 2601|      1|    let mut u16_2: u16 = 1u16;
 2602|      1|    let mut i32_5: i32 = 128i32;
 2603|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_2);
 2604|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_4, time: time_2};
 2605|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_2, duration_2);
 2606|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_2, u8_8, u8_7, u8_6, u32_2);
 2607|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_0);
 2608|      1|    panic!("From RustyUnit with love");
 2609|       |}
 2610|       |
 2611|       |//#[no_coverage]
 2612|      1|#[test]
 2613|       |#[should_panic]
 2614|      1|#[timeout(3000)]
 2615|      1|fn rusty_test_729() {
 2616|      1|    rusty_monitor::set_test_id(729);
 2617|      1|    let mut i64_0: i64 = 86400i64;
 2618|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
 2619|      1|    let mut i64_1: i64 = 2440588i64;
 2620|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2621|      1|    let mut i32_0: i32 = 122i32;
 2622|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2623|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 2624|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2625|      1|    let mut i32_1: i32 = 9i32;
 2626|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 2627|      1|    let mut i64_2: i64 = 2440588i64;
 2628|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
 2629|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 2630|      1|    let mut u32_0: u32 = 999999999u32;
 2631|      1|    let mut u8_0: u8 = 3u8;
 2632|      1|    let mut u8_1: u8 = 11u8;
 2633|      1|    let mut u8_2: u8 = 1u8;
 2634|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2635|      1|    let mut i32_2: i32 = 195i32;
 2636|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2637|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 2638|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_1, duration_3);
 2639|      1|    let mut u8_3: u8 = 8u8;
 2640|      1|    let mut month_0: month::Month = crate::month::Month::November;
 2641|      1|    let mut i32_3: i32 = -64i32;
 2642|      1|    let mut u8_4: u8 = 31u8;
 2643|      1|    let mut month_1: month::Month = crate::month::Month::February;
 2644|      1|    let mut i32_4: i32 = 111i32;
 2645|      1|    let mut result_0: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_4, month_1, u8_4);
 2646|      1|    let mut result_1: std::result::Result<crate::date::Date, crate::error::component_range::ComponentRange> = crate::date::Date::from_calendar_date(i32_3, month_0, u8_3);
 2647|      1|    let mut tuple_0: (i32, month::Month, u8) = crate::primitive_date_time::PrimitiveDateTime::to_calendar_date(primitivedatetime_0);
 2648|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_2, duration_0);
 2649|      1|    panic!("From RustyUnit with love");
 2650|       |}
 2651|       |
 2652|       |//#[no_coverage]
 2653|      1|#[test]
 2654|       |#[should_panic]
 2655|      1|#[timeout(3000)]
 2656|      1|fn rusty_test_5074() {
 2657|      1|    rusty_monitor::set_test_id(5074);
 2658|      1|    let mut u32_0: u32 = 10u32;
 2659|      1|    let mut u8_0: u8 = 8u8;
 2660|      1|    let mut u8_1: u8 = 6u8;
 2661|      1|    let mut u8_2: u8 = 31u8;
 2662|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2663|      1|    let mut u32_1: u32 = 67u32;
 2664|      1|    let mut u8_3: u8 = 52u8;
 2665|      1|    let mut u8_4: u8 = 23u8;
 2666|      1|    let mut u8_5: u8 = 60u8;
 2667|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2668|      1|    let mut u16_0: u16 = 60u16;
 2669|      1|    let mut i32_0: i32 = 4i32;
 2670|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 2671|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 2672|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 2673|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2674|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
 2675|      1|    let mut u32_2: u32 = 999999u32;
 2676|      1|    let mut u8_6: u8 = 5u8;
 2677|      1|    let mut u8_7: u8 = 28u8;
 2678|      1|    let mut u8_8: u8 = 59u8;
 2679|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 2680|      1|    let mut i32_1: i32 = 144i32;
 2681|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 2682|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_2);
 2683|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_0);
 2684|      1|    let mut duration_0: crate::duration::Duration = std::ops::Sub::sub(primitivedatetime_3, primitivedatetime_1);
 2685|      1|    let mut i64_0: i64 = 9223372036854775807i64;
 2686|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 2687|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 2688|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 2689|      1|    let mut u32_3: u32 = 60u32;
 2690|      1|    let mut u8_9: u8 = 53u8;
 2691|      1|    let mut u8_10: u8 = 70u8;
 2692|      1|    let mut u8_11: u8 = 3u8;
 2693|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 2694|      1|    let mut u32_4: u32 = 100000000u32;
 2695|      1|    let mut u8_12: u8 = 29u8;
 2696|      1|    let mut u8_13: u8 = 88u8;
 2697|      1|    let mut u8_14: u8 = 9u8;
 2698|      1|    let mut time_4: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_14, u8_13, u8_12, u32_4);
 2699|      1|    let mut i128_0: i128 = -98i128;
 2700|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2701|      1|    let mut i32_2: i32 = 3600i32;
 2702|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2703|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_4);
 2704|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_3, time_4);
 2705|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_4, time_3);
 2706|      1|    let mut i64_1: i64 = 0i64;
 2707|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2708|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2709|      1|    let mut u32_5: u32 = 100u32;
 2710|      1|    let mut u8_15: u8 = 28u8;
 2711|      1|    let mut u8_16: u8 = 29u8;
 2712|      1|    let mut u8_17: u8 = 20u8;
 2713|      1|    let mut time_5: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_17, u8_16, u8_15, u32_5);
 2714|      1|    let mut i8_0: i8 = 23i8;
 2715|      1|    let mut i8_1: i8 = 23i8;
 2716|      1|    let mut i8_2: i8 = 59i8;
 2717|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2718|      1|    let mut u32_6: u32 = 10000u32;
 2719|      1|    let mut u8_18: u8 = 11u8;
 2720|      1|    let mut u8_19: u8 = 37u8;
 2721|      1|    let mut u8_20: u8 = 95u8;
 2722|      1|    let mut time_6: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_20, u8_19, u8_18, u32_6);
 2723|      1|    let mut i64_2: i64 = 1000000000i64;
 2724|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 2725|      1|    let mut u16_1: u16 = 0u16;
 2726|      1|    let mut i32_3: i32 = 195i32;
 2727|      1|    let mut date_4: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
 2728|      1|    let mut date_5: crate::date::Date = crate::date::Date::saturating_add(date_4, duration_6);
 2729|      1|    let mut primitivedatetime_6: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_5, time: time_6};
 2730|      1|    let mut primitivedatetime_7: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_6, utcoffset_1);
 2731|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2732|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_1, primitivedatetime_7);
 2733|      1|    let mut u32_7: u32 = 1000000000u32;
 2734|      1|    let mut u8_21: u8 = 77u8;
 2735|      1|    let mut u8_22: u8 = 0u8;
 2736|      1|    let mut u8_23: u8 = 12u8;
 2737|      1|    let mut time_7: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_23, u8_22, u8_21, u32_7);
 2738|      1|    let mut u16_2: u16 = 367u16;
 2739|      1|    let mut i32_4: i32 = 156i32;
 2740|      1|    let mut date_6: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
 2741|      1|    let mut primitivedatetime_8: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_6, time_7);
 2742|      1|    let mut i32_5: i32 = 99i32;
 2743|      1|    let mut i64_3: i64 = 12i64;
 2744|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2745|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_7, i32_5);
 2746|      1|    let mut duration_9: std::time::Duration = crate::duration::Duration::abs_std(duration_8);
 2747|      1|    let mut u32_8: u32 = 10u32;
 2748|      1|    let mut u8_24: u8 = 19u8;
 2749|      1|    let mut u8_25: u8 = 30u8;
 2750|      1|    let mut u8_26: u8 = 9u8;
 2751|      1|    let mut time_8: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_26, u8_25, u8_24, u32_8);
 2752|      1|    let mut i32_6: i32 = 25i32;
 2753|      1|    let mut date_7: crate::date::Date = crate::date::Date {value: i32_6};
 2754|      1|    let mut primitivedatetime_9: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_7, time: time_8};
 2755|      1|    let mut primitivedatetime_10: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_9, duration_9);
 2756|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 2757|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 2758|      1|    let mut i8_3: i8 = 23i8;
 2759|      1|    let mut i8_4: i8 = 4i8;
 2760|      1|    let mut i8_5: i8 = 4i8;
 2761|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2762|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2763|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_2);
 2764|      1|    let mut time_9: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_4);
 2765|      1|    let mut u16_3: u16 = 999u16;
 2766|      1|    let mut i32_7: i32 = 161i32;
 2767|      1|    let mut date_8: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_7, u16_3);
 2768|      1|    let mut primitivedatetime_11: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_8, time: time_9};
 2769|      1|    let mut primitivedatetime_12: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_11, duration_10);
 2770|      1|    let mut u8_27: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_12);
 2771|      1|    let mut u8_28: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_10);
 2772|      1|    let mut u8_29: u8 = crate::primitive_date_time::PrimitiveDateTime::iso_week(primitivedatetime_8);
 2773|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_5);
 2774|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_sub(instant_0, duration_5);
 2775|      1|    let mut dateadjustment_0: util::DateAdjustment = crate::util::DateAdjustment::None;
 2776|      1|    let mut primitivedatetime_13: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_5, duration_3);
 2777|      1|    panic!("From RustyUnit with love");
 2778|       |}
 2779|       |
 2780|       |//#[no_coverage]
 2781|      1|#[test]
 2782|       |#[should_panic]
 2783|      1|#[timeout(3000)]
 2784|      1|fn rusty_test_3915() {
 2785|      1|    rusty_monitor::set_test_id(3915);
 2786|      1|    let mut i64_0: i64 = 9223372036854775807i64;
 2787|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 2788|      1|    let mut i8_0: i8 = 127i8;
 2789|      1|    let mut i8_1: i8 = 127i8;
 2790|      1|    let mut i8_2: i8 = 2i8;
 2791|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2792|      1|    let mut u32_0: u32 = 999999999u32;
 2793|      1|    let mut u8_0: u8 = 1u8;
 2794|      1|    let mut u8_1: u8 = 12u8;
 2795|      1|    let mut u8_2: u8 = 9u8;
 2796|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2797|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2798|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 2799|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 2800|      1|    let mut i64_1: i64 = 0i64;
 2801|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 2802|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
 2803|      1|    let mut i8_3: i8 = 5i8;
 2804|      1|    let mut i8_4: i8 = 2i8;
 2805|      1|    let mut i8_5: i8 = 127i8;
 2806|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2807|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2808|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_2, utcoffset_1);
 2809|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 2810|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2811|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_0, duration_2);
 2812|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
 2813|      1|    panic!("From RustyUnit with love");
 2814|       |}
 2815|       |
 2816|       |//#[no_coverage]
 2817|      1|#[test]
 2818|       |#[should_panic]
 2819|      1|#[timeout(3000)]
 2820|      1|fn rusty_test_413() {
 2821|      1|    rusty_monitor::set_test_id(413);
 2822|      1|    let mut month_0: month::Month = crate::month::Month::December;
 2823|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 2824|      1|    let mut i32_0: i32 = 285i32;
 2825|      1|    let mut month_2: month::Month = crate::month::Month::July;
 2826|      1|    let mut i32_1: i32 = 54i32;
 2827|      1|    let mut i64_0: i64 = 0i64;
 2828|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 2829|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 2830|      1|    let mut u32_0: u32 = 100000000u32;
 2831|      1|    let mut u8_0: u8 = 4u8;
 2832|      1|    let mut u8_1: u8 = 52u8;
 2833|      1|    let mut u8_2: u8 = 30u8;
 2834|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2835|      1|    let mut i32_2: i32 = 246i32;
 2836|      1|    let mut i64_1: i64 = 1000000000i64;
 2837|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2838|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_2, i32_2);
 2839|      1|    let mut u16_0: u16 = 367u16;
 2840|      1|    let mut i32_3: i32 = 6i32;
 2841|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 2842|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_3);
 2843|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_0);
 2844|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Add::add(primitivedatetime_0, duration_1);
 2845|      1|    let mut month_3: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_1);
 2846|      1|    let mut i32_4: i32 = 60i32;
 2847|      1|    let mut month_4: month::Month = crate::month::Month::January;
 2848|      1|    let mut i32_5: i32 = 111i32;
 2849|      1|    let mut u8_3: u8 = crate::util::days_in_year_month(i32_5, month_4);
 2850|      1|    let mut u8_4: u8 = crate::util::days_in_year_month(i32_4, month_3);
 2851|      1|    let mut u8_5: u8 = crate::util::days_in_year_month(i32_1, month_2);
 2852|      1|    let mut u8_6: u8 = crate::util::days_in_year_month(i32_0, month_1);
 2853|      1|    panic!("From RustyUnit with love");
 2854|       |}
 2855|       |
 2856|       |//#[no_coverage]
 2857|      1|#[test]
 2858|       |#[should_panic]
 2859|      1|#[timeout(3000)]
 2860|      1|fn rusty_test_1025() {
 2861|      1|    rusty_monitor::set_test_id(1025);
 2862|      1|    let mut i32_0: i32 = 55i32;
 2863|      1|    let mut i64_0: i64 = 1000i64;
 2864|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 2865|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2866|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
 2867|      1|    let mut u32_0: u32 = 1000u32;
 2868|      1|    let mut u8_0: u8 = 3u8;
 2869|      1|    let mut u8_1: u8 = 1u8;
 2870|      1|    let mut u8_2: u8 = 2u8;
 2871|      1|    let mut i32_1: i32 = 65i32;
 2872|      1|    let mut i64_1: i64 = 86400i64;
 2873|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 2874|      1|    let mut i32_2: i32 = 364i32;
 2875|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2876|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
 2877|      1|    let mut i64_2: i64 = 0i64;
 2878|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
 2879|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2880|      1|    let mut u16_0: u16 = 999u16;
 2881|      1|    let mut i32_3: i32 = 215i32;
 2882|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
 2883|      1|    let mut i32_4: i32 = -60i32;
 2884|      1|    let mut i64_3: i64 = 604800i64;
 2885|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_4);
 2886|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2887|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2888|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2889|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_4);
 2890|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 2891|      1|    let mut u16_1: u16 = 1u16;
 2892|      1|    let mut i32_5: i32 = 128i32;
 2893|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_5, u16_1);
 2894|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_0};
 2895|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = std::ops::Sub::sub(primitivedatetime_0, duration_3);
 2896|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_micro(date_1, u8_2, u8_1, u8_0, u32_0);
 2897|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 2898|      1|    let mut u8_3: u8 = crate::offset_date_time::OffsetDateTime::minute(offsetdatetime_1);
 2899|      1|    panic!("From RustyUnit with love");
 2900|       |}
 2901|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/rusty_monitor.rs:
    1|       |use redis::Connection;
    2|       |use std::cell::RefCell;
    3|       |use std::io::{Read, Write};
    4|       |use std::rc::Rc;
    5|       |use std::str::from_utf8;
    6|       |
    7|    287|thread_local! {
    8|    287|    static MONITOR: Rc<RefCell<Monitor>> = Rc::new(RefCell::new(Monitor::new()));
    9|    287|}
   10|       |
   11|      0|#[derive(Clone, Debug, Copy, PartialEq, Eq, Hash)]
   12|       |pub enum BinaryOp {
   13|       |    /// The `+` operator
   14|       |    Add,
   15|       |    /// The `-` operator (subtraction)
   16|       |    Sub,
   17|       |    /// The `*` operator (multiplication)
   18|       |    Mul,
   19|       |    /// The `/` operator (division)
   20|       |    Div,
   21|       |    /// The `%` operator (modulus)
   22|       |    Rem,
   23|       |    /// The `^` operator (bitwise xor)
   24|       |    BitXor,
   25|       |    /// The `&` operator (bitwise and)
   26|       |    BitAnd,
   27|       |    /// The `|` operator (bitwise or)
   28|       |    BitOr,
   29|       |    /// The `<<` operator (shift left)
   30|       |    Shl,
   31|       |    /// The `>>` operator (shift right)
   32|       |    Shr,
   33|       |    /// The `==` operator (equality)
   34|       |    Eq,
   35|       |    /// The `<` operator (less than)
   36|       |    Lt,
   37|       |    /// The `<=` operator (less than or equal to)
   38|       |    Le,
   39|       |    /// The `!=` operator (not equal to)
   40|       |    Ne,
   41|       |    /// The `>=` operator (greater than or equal to)
   42|       |    Ge,
   43|       |    /// The `>` operator (greater than)
   44|       |    Gt,
   45|       |    /// The `ptr.offset` operator
   46|       |    Offset,
   47|       |}
   48|       |
   49|       |impl Into<u32> for BinaryOp {
   50|      0|    fn into(self) -> u32 {
   51|      0|        match self {
   52|      0|            BinaryOp::Add => 0,
   53|      0|            BinaryOp::Sub => 1,
   54|      0|            BinaryOp::Mul => 2,
   55|      0|            BinaryOp::Div => 3,
   56|      0|            BinaryOp::Rem => 4,
   57|      0|            BinaryOp::BitXor => 5,
   58|      0|            BinaryOp::BitAnd => 6,
   59|      0|            BinaryOp::BitOr => 7,
   60|      0|            BinaryOp::Shl => 8,
   61|      0|            BinaryOp::Shr => 9,
   62|      0|            BinaryOp::Eq => 10,
   63|      0|            BinaryOp::Lt => 11,
   64|      0|            BinaryOp::Le => 12,
   65|      0|            BinaryOp::Ne => 13,
   66|      0|            BinaryOp::Ge => 14,
   67|      0|            BinaryOp::Gt => 15,
   68|      0|            BinaryOp::Offset => 16,
   69|       |        }
   70|      0|    }
   71|       |}
   72|       |
   73|      0|#[derive(Clone, Debug, Copy, PartialEq, Eq, Hash)]
   74|       |pub enum UnaryOp {
   75|       |    Not,
   76|       |    /// The `-` operator for negation
   77|       |    Neg,
   78|       |}
   79|       |
   80|       |impl Into<u32> for UnaryOp {
   81|      0|    fn into(self) -> u32 {
   82|      0|        match self {
   83|      0|            UnaryOp::Not => 0,
   84|      0|            UnaryOp::Neg => 1,
   85|       |        }
   86|      0|    }
   87|       |}
   88|       |
   89|       |struct Monitor {
   90|       |    connection: redis::Connection,
   91|       |    test_id: u64,
   92|       |    redis_db: String
   93|       |}
   94|       |
   95|       |const ROOT_BRANCH: &'static str = "{} root[{}, {}];";
   96|       |const BRANCH: &'static str = "{} branch[{}, {}, {}];";
   97|       |
   98|       |impl Monitor {
   99|      0|    pub(crate) fn set_test_id(&mut self, test_id: u64) {
  100|      0|        self.test_id = test_id;
  101|      0|    }
  102|       |
  103|      0|    pub(crate) fn trace_fn(&mut self, run: u64, global_id: &str) {
  104|      0|        let msg = format!("{} {} ${}$ root", run, self.test_id, global_id);
  105|      0|        println!("Visited root {}", global_id);
  106|      0|
  107|      0|        let _: () = redis::cmd("SADD")
  108|      0|            .arg(self.redis_db.as_str())
  109|      0|            .arg(&msg)
  110|      0|            .query(&mut self.connection)
  111|      0|            .expect("Could not store trace to redis");
  112|      0|    }
  113|      0|    pub(crate) fn trace_branch(&mut self, run: u64, global_id: &str, block: u64, dist: f64) {
  114|      0|        let msg = format!("{} {} ${}$ branch[{} {}]", run, self.test_id, global_id, block, dist);
  115|      0|        println!("Visited branch {}::{}", global_id, block);
  116|      0|        let _: () = redis::cmd("SADD")
  117|      0|            .arg(self.redis_db.as_str())
  118|      0|            .arg(&msg)
  119|      0|            .query(&mut self.connection)
  120|      0|            .expect("Could not store trace to redis");
  121|      0|    }
  122|       |
  123|      0|    fn clear(&self, connection: &mut Connection) {
  124|      0|        let _: () = redis::cmd("DEL")
  125|      0|            .arg(self.redis_db.as_str())
  126|      0|            .query(connection)
  127|      0|            .expect("Could not clear redis storage");
  128|      0|    }
  129|       |
  130|    286|    fn new() -> Self {
  131|    286|        println!("Connected");
  132|    286|        let client =
  133|    286|            redis::Client::open("redis://127.0.0.1/").expect("Could not open connection to redis");
  134|    286|        let mut connection = client
  135|    286|            .get_connection()
  136|    286|            .expect("Could not obtain connection from client");
  137|    286|
  138|    286|        let run = std::env::var("RU_RUN").expect("Run is not set");
  139|    286|        let redis_db_args = vec!["traces-", run.as_str()];
  140|    286|        Monitor {
  141|    286|            connection,
  142|    286|            test_id: u64::MAX,
  143|    286|            redis_db: redis_db_args.concat()
  144|    286|        }
  145|    286|    }
  146|       |}
  147|       |
  148|      0|pub(crate) fn trace_entry(run: u64, global_id: &str) {
  149|      0|    MONITOR.with(|m| m.borrow_mut().trace_fn(run, global_id));
  150|      0|}
  151|       |
  152|      0|pub(crate) fn trace_zero_or_one(run: u64, global_id: &str, block: u64, is_hit: bool) {
  153|      0|    let dist = if is_hit { 0.0 } else { 1.0 };
  154|      0|    MONITOR.with(|m| m.borrow_mut().trace_branch(run, global_id, block, dist));
  155|      0|}
  156|       |
  157|      0|pub(crate) fn trace_switch_value_with_var_bool(run: u64, global_id: &str, block: u64, switch_value: u64, var_value: u64, is_hit: bool) {
  158|      0|    let dist = if is_hit {
  159|      0|        0
  160|       |    } else {
  161|      0|        1
  162|       |    };
  163|       |
  164|      0|    MONITOR.with(|m| {
  165|      0|        m.borrow_mut().trace_branch(run, global_id, block, dist as f64);
  166|      0|    });
  167|      0|}
  168|       |
  169|      0|pub(crate) fn trace_switch_value_with_var_int(run: u64, global_id: &str, block: u64, switch_value: u64, var_value: u64, is_hit: bool) {
  170|      0|    let dist = if is_hit {
  171|      0|        0
  172|       |    } else {
  173|      0|        if switch_value > var_value {
  174|      0|            switch_value - var_value
  175|       |        } else {
  176|      0|            var_value - switch_value
  177|       |        }
  178|       |    };
  179|       |
  180|      0|    MONITOR.with(|m| {
  181|      0|        m.borrow_mut().trace_branch(run, global_id, block, dist as f64);
  182|      0|    });
  183|      0|}
  184|       |
  185|      0|pub(crate) fn trace_switch_value_with_var_char(run: u64, global_id: &str, block: u64, switch_value: u64, var_value: u64, is_hit: bool) {
  186|      0|    let dist = if is_hit {
  187|      0|        0
  188|       |    } else {
  189|      0|        if switch_value > var_value {
  190|      0|            switch_value - var_value
  191|       |        } else {
  192|      0|            var_value - switch_value
  193|       |        }
  194|       |    };
  195|       |
  196|      0|    MONITOR.with(|m| {
  197|      0|        m.borrow_mut().trace_branch(run, global_id, block, dist as f64);
  198|      0|    });
  199|      0|}
  200|       |
  201|      0|pub(crate) fn trace_op(global_id: &str, block: u64, op: BinaryOp, left: f64, right: f64, local: u64) {
  202|      0|
  203|      0|}
  204|       |
  205|      0|pub(crate) fn trace_branch_hit(run: u64, global_id: &str, block: u64) {
  206|      0|    MONITOR.with(|m| {
  207|      0|        m.borrow_mut().trace_branch(run, global_id, block, 0.0);
  208|      0|    })
  209|      0|}
  210|       |
  211|      0|pub(crate) fn trace_branch_bool(
  212|      0|    run: u64,
  213|      0|    global_id: &str,
  214|      0|    block: u64,
  215|      0|    left: f64,
  216|      0|    right: f64,
  217|      0|    op: BinaryOp,
  218|      0|    is_true_branch: bool,
  219|      0|) {
  220|      0|    let dist = distance(left, right, op, is_true_branch);
  221|      0|    MONITOR.with(|m| m.borrow_mut().trace_branch(run, global_id, block, dist));
  222|      0|}
  223|       |
  224|      0|fn distance(left: f64, right: f64, op: BinaryOp, is_true_branch: bool) -> f64 {
  225|      0|    match op {
  226|       |        // left <= right
  227|       |        BinaryOp::Le => {
  228|      0|            if is_true_branch {
  229|       |                // left <= right
  230|      0|                right - left + 1.0
  231|       |            } else {
  232|       |                // left > right
  233|      0|                left - right
  234|       |            }
  235|       |        }
  236|       |        // left < right
  237|       |        BinaryOp::Lt => {
  238|      0|            if is_true_branch {
  239|       |                // left < right
  240|      0|                right - left
  241|       |            } else {
  242|       |                // left >= right
  243|      0|                left - right + 1.0
  244|       |            }
  245|       |        }
  246|       |        // left > right
  247|       |        BinaryOp::Gt => {
  248|      0|            if is_true_branch {
  249|       |                // left > right
  250|      0|                left - right
  251|       |            } else {
  252|       |                // left <= right
  253|      0|                right - left + 1.0
  254|       |            }
  255|       |        }
  256|       |        // left >= right
  257|       |        BinaryOp::Ge => {
  258|      0|            if is_true_branch {
  259|       |                // left >= right
  260|      0|                left - right + 1.0
  261|       |            } else {
  262|       |                // left < right
  263|      0|                right - left
  264|       |            }
  265|       |        }
  266|       |        // left == right
  267|       |        BinaryOp::Eq => {
  268|      0|            if is_true_branch {
  269|       |                // left == right
  270|      0|                1.0
  271|       |            } else {
  272|      0|                (left - right).abs()
  273|       |            }
  274|       |        }
  275|       |        // left != right
  276|       |        BinaryOp::Ne => {
  277|      0|            if is_true_branch {
  278|       |                // left != right
  279|      0|                (left - right).abs()
  280|       |            } else {
  281|       |                // left == right
  282|      0|                1.0
  283|       |            }
  284|       |        }
  285|      0|        _ => todo!(),
  286|       |    }
  287|      0|}
  288|       |
  289|      0|pub fn trace_const() {}
  290|       |
  291|    287|pub(crate) fn set_test_id(id: u64) {
  292|    287|    MONITOR.with(|m| m.borrow_mut().set_test_id(id));
  293|    287|}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/sys/mod.rs:
    1|       |//! Functions with a common interface that rely on system calls.
    2|       |
    3|       |#![allow(unsafe_code)] // We're interfacing with system calls.
    4|       |
    5|       |#[cfg(feature = "local-offset")]
    6|       |mod local_offset_at;
    7|       |
    8|       |#[cfg(feature = "local-offset")]
    9|       |pub(crate) use local_offset_at::local_offset_at;
   10|       |
   11|       |#[cfg(test)]
   12|       |mod rusty_tests {
   13|       |	use crate::*;
   14|       |
   15|       |//#[no_coverage]
   16|      1|#[test]
   17|       |#[should_panic]
   18|      1|#[timeout(3000)]
   19|      1|fn rusty_test_8698() {
   20|      1|    rusty_monitor::set_test_id(8698);
   21|      1|    let mut i128_0: i128 = -168i128;
   22|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
   23|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
   24|      1|    let mut i32_0: i32 = 82i32;
   25|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
   26|      1|    let mut i8_0: i8 = 1i8;
   27|      1|    let mut i8_1: i8 = 56i8;
   28|      1|    let mut i8_2: i8 = 73i8;
   29|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
   30|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
   31|      1|    let mut i32_1: i32 = 229i32;
   32|      1|    let mut i64_0: i64 = 3600i64;
   33|      1|    let mut i64_1: i64 = -90i64;
   34|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
   35|      1|    let mut padding_0: duration::Padding = crate::duration::Padding::Optimize;
   36|      1|    let mut i32_2: i32 = 5119853i32;
   37|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
   38|      1|    let mut i64_2: i64 = 2440588i64;
   39|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
   40|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
   41|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_3);
   42|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
   43|      1|    let mut i64_3: i64 = 12i64;
   44|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
   45|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
   46|      1|    let mut i64_4: i64 = 60i64;
   47|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
   48|      1|    let mut i64_5: i64 = 86400i64;
   49|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_5);
   50|      1|    let mut u32_0: u32 = 10u32;
   51|      1|    let mut u8_0: u8 = 40u8;
   52|      1|    let mut u8_1: u8 = 12u8;
   53|      1|    let mut u8_2: u8 = 30u8;
   54|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
   55|      1|    let mut i64_6: i64 = 86400i64;
   56|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::days(i64_6);
   57|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
   58|      1|    let mut duration_8: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
   59|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
   60|      1|    let mut i32_3: i32 = 3652425i32;
   61|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_3};
   62|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_1);
   63|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_1);
   64|      1|    panic!("From RustyUnit with love");
   65|       |}
   66|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/time.rs:
    1|       |//! The [`Time`] struct and its associated `impl`s.
    2|       |
    3|       |use core::fmt;
    4|       |use core::ops::{Add, Sub};
    5|       |use core::time::Duration as StdDuration;
    6|       |#[cfg(feature = "formatting")]
    7|       |use std::io;
    8|       |
    9|       |#[cfg(feature = "formatting")]
   10|       |use crate::formatting::Formattable;
   11|       |#[cfg(feature = "parsing")]
   12|       |use crate::parsing::Parsable;
   13|       |use crate::util::DateAdjustment;
   14|       |use crate::{error, Duration};
   15|       |
   16|       |/// By explicitly inserting this enum where padding is expected, the compiler is able to better
   17|       |/// perform niche value optimization.
   18|       |#[repr(u8)]
   19|      0|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
   20|       |pub(crate) enum Padding {
   21|       |    #[allow(clippy::missing_docs_in_private_items)]
   22|       |    Optimize,
   23|       |}
   24|       |
   25|       |/// The clock time within a given date. Nanosecond precision.
   26|       |///
   27|       |/// All minutes are assumed to have exactly 60 seconds; no attempt is made to handle leap seconds
   28|       |/// (either positive or negative).
   29|       |///
   30|       |/// When comparing two `Time`s, they are assumed to be in the same calendar date.
   31|      0|#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
   32|       |pub struct Time {
   33|       |    #[allow(clippy::missing_docs_in_private_items)]
   34|       |    hour: u8,
   35|       |    #[allow(clippy::missing_docs_in_private_items)]
   36|       |    minute: u8,
   37|       |    #[allow(clippy::missing_docs_in_private_items)]
   38|       |    second: u8,
   39|       |    #[allow(clippy::missing_docs_in_private_items)]
   40|       |    nanosecond: u32,
   41|       |    #[allow(clippy::missing_docs_in_private_items)]
   42|       |    padding: Padding,
   43|       |}
   44|       |
   45|       |impl fmt::Debug for Time {
   46|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   47|      0|        f.debug_struct("Time")
   48|      0|            .field("hour", &self.hour)
   49|      0|            .field("minute", &self.minute)
   50|      0|            .field("second", &self.second)
   51|      0|            .field("nanosecond", &self.nanosecond)
   52|      0|            .finish()
   53|      0|    }
   54|       |}
   55|       |
   56|       |impl Time {
   57|       |    /// Create a `Time` that is exactly midnight.
   58|       |    ///
   59|       |    /// ```rust
   60|       |    /// # use time::{Time, macros::time};
   61|       |    /// assert_eq!(Time::MIDNIGHT, time!(0:00));
   62|       |    /// ```
   63|       |    pub const MIDNIGHT: Self = Self::__from_hms_nanos_unchecked(0, 0, 0, 0);
   64|       |
   65|       |    /// The smallest value that can be represented by `Time`.
   66|       |    ///
   67|       |    /// `00:00:00.0`
   68|       |    pub(crate) const MIN: Self = Self::__from_hms_nanos_unchecked(0, 0, 0, 0);
   69|       |
   70|       |    /// The largest value that can be represented by `Time`.
   71|       |    ///
   72|       |    /// `23:59:59.999_999_999`
   73|       |    pub(crate) const MAX: Self = Self::__from_hms_nanos_unchecked(23, 59, 59, 999_999_999);
   74|       |
   75|       |    // region: constructors
   76|       |    /// Create a `Time` from its components.
   77|       |    #[doc(hidden)]
   78|      0|    pub const fn __from_hms_nanos_unchecked(
   79|      0|        hour: u8,
   80|      0|        minute: u8,
   81|      0|        second: u8,
   82|      0|        nanosecond: u32,
   83|      0|    ) -> Self {
   84|      0|        Self {
   85|      0|            hour,
   86|      0|            minute,
   87|      0|            second,
   88|      0|            nanosecond,
   89|      0|            padding: Padding::Optimize,
   90|      0|        }
   91|      0|    }
   92|       |
   93|       |    /// Attempt to create a `Time` from the hour, minute, and second.
   94|       |    ///
   95|       |    /// ```rust
   96|       |    /// # use time::Time;
   97|       |    /// assert!(Time::from_hms(1, 2, 3).is_ok());
   98|       |    /// ```
   99|       |    ///
  100|       |    /// ```rust
  101|       |    /// # use time::Time;
  102|       |    /// assert!(Time::from_hms(24, 0, 0).is_err()); // 24 isn't a valid hour.
  103|       |    /// assert!(Time::from_hms(0, 60, 0).is_err()); // 60 isn't a valid minute.
  104|       |    /// assert!(Time::from_hms(0, 0, 60).is_err()); // 60 isn't a valid second.
  105|       |    /// ```
  106|      0|    pub const fn from_hms(hour: u8, minute: u8, second: u8) -> Result<Self, error::ComponentRange> {
  107|      0|        ensure_value_in_range!(hour in 0 => 23);
  108|      0|        ensure_value_in_range!(minute in 0 => 59);
  109|      0|        ensure_value_in_range!(second in 0 => 59);
  110|      0|        Ok(Self::__from_hms_nanos_unchecked(hour, minute, second, 0))
  111|      0|    }
  112|       |
  113|       |    /// Attempt to create a `Time` from the hour, minute, second, and millisecond.
  114|       |    ///
  115|       |    /// ```rust
  116|       |    /// # use time::Time;
  117|       |    /// assert!(Time::from_hms_milli(1, 2, 3, 4).is_ok());
  118|       |    /// ```
  119|       |    ///
  120|       |    /// ```rust
  121|       |    /// # use time::Time;
  122|       |    /// assert!(Time::from_hms_milli(24, 0, 0, 0).is_err()); // 24 isn't a valid hour.
  123|       |    /// assert!(Time::from_hms_milli(0, 60, 0, 0).is_err()); // 60 isn't a valid minute.
  124|       |    /// assert!(Time::from_hms_milli(0, 0, 60, 0).is_err()); // 60 isn't a valid second.
  125|       |    /// assert!(Time::from_hms_milli(0, 0, 0, 1_000).is_err()); // 1_000 isn't a valid millisecond.
  126|       |    /// ```
  127|      0|    pub const fn from_hms_milli(
  128|      0|        hour: u8,
  129|      0|        minute: u8,
  130|      0|        second: u8,
  131|      0|        millisecond: u16,
  132|      0|    ) -> Result<Self, error::ComponentRange> {
  133|      0|        ensure_value_in_range!(hour in 0 => 23);
  134|      0|        ensure_value_in_range!(minute in 0 => 59);
  135|      0|        ensure_value_in_range!(second in 0 => 59);
  136|      0|        ensure_value_in_range!(millisecond in 0 => 999);
  137|      0|        Ok(Self::__from_hms_nanos_unchecked(
  138|      0|            hour,
  139|      0|            minute,
  140|      0|            second,
  141|      0|            millisecond as u32 * 1_000_000,
  142|      0|        ))
  143|      0|    }
  144|       |
  145|       |    /// Attempt to create a `Time` from the hour, minute, second, and microsecond.
  146|       |    ///
  147|       |    /// ```rust
  148|       |    /// # use time::Time;
  149|       |    /// assert!(Time::from_hms_micro(1, 2, 3, 4).is_ok());
  150|       |    /// ```
  151|       |    ///
  152|       |    /// ```rust
  153|       |    /// # use time::Time;
  154|       |    /// assert!(Time::from_hms_micro(24, 0, 0, 0).is_err()); // 24 isn't a valid hour.
  155|       |    /// assert!(Time::from_hms_micro(0, 60, 0, 0).is_err()); // 60 isn't a valid minute.
  156|       |    /// assert!(Time::from_hms_micro(0, 0, 60, 0).is_err()); // 60 isn't a valid second.
  157|       |    /// assert!(Time::from_hms_micro(0, 0, 0, 1_000_000).is_err()); // 1_000_000 isn't a valid microsecond.
  158|       |    /// ```
  159|      0|    pub const fn from_hms_micro(
  160|      0|        hour: u8,
  161|      0|        minute: u8,
  162|      0|        second: u8,
  163|      0|        microsecond: u32,
  164|      0|    ) -> Result<Self, error::ComponentRange> {
  165|      0|        ensure_value_in_range!(hour in 0 => 23);
  166|      0|        ensure_value_in_range!(minute in 0 => 59);
  167|      0|        ensure_value_in_range!(second in 0 => 59);
  168|      0|        ensure_value_in_range!(microsecond in 0 => 999_999);
  169|      0|        Ok(Self::__from_hms_nanos_unchecked(
  170|      0|            hour,
  171|      0|            minute,
  172|      0|            second,
  173|      0|            microsecond * 1_000,
  174|      0|        ))
  175|      0|    }
  176|       |
  177|       |    /// Attempt to create a `Time` from the hour, minute, second, and nanosecond.
  178|       |    ///
  179|       |    /// ```rust
  180|       |    /// # use time::Time;
  181|       |    /// assert!(Time::from_hms_nano(1, 2, 3, 4).is_ok());
  182|       |    /// ```
  183|       |    ///
  184|       |    /// ```rust
  185|       |    /// # use time::Time;
  186|       |    /// assert!(Time::from_hms_nano(24, 0, 0, 0).is_err()); // 24 isn't a valid hour.
  187|       |    /// assert!(Time::from_hms_nano(0, 60, 0, 0).is_err()); // 60 isn't a valid minute.
  188|       |    /// assert!(Time::from_hms_nano(0, 0, 60, 0).is_err()); // 60 isn't a valid second.
  189|       |    /// assert!(Time::from_hms_nano(0, 0, 0, 1_000_000_000).is_err()); // 1_000_000_000 isn't a valid nanosecond.
  190|       |    /// ```
  191|      0|    pub const fn from_hms_nano(
  192|      0|        hour: u8,
  193|      0|        minute: u8,
  194|      0|        second: u8,
  195|      0|        nanosecond: u32,
  196|      0|    ) -> Result<Self, error::ComponentRange> {
  197|      0|        ensure_value_in_range!(hour in 0 => 23);
  198|      0|        ensure_value_in_range!(minute in 0 => 59);
  199|      0|        ensure_value_in_range!(second in 0 => 59);
  200|      0|        ensure_value_in_range!(nanosecond in 0 => 999_999_999);
  201|      0|        Ok(Self::__from_hms_nanos_unchecked(
  202|      0|            hour, minute, second, nanosecond,
  203|      0|        ))
  204|      0|    }
  205|       |    // endregion constructors
  206|       |
  207|       |    // region: getters
  208|       |    /// Get the clock hour, minute, and second.
  209|       |    ///
  210|       |    /// ```rust
  211|       |    /// # use time::macros::time;
  212|       |    /// assert_eq!(time!(0:00:00).as_hms(), (0, 0, 0));
  213|       |    /// assert_eq!(time!(23:59:59).as_hms(), (23, 59, 59));
  214|       |    /// ```
  215|      0|    pub const fn as_hms(self) -> (u8, u8, u8) {
  216|      0|        (self.hour, self.minute, self.second)
  217|      0|    }
  218|       |
  219|       |    /// Get the clock hour, minute, second, and millisecond.
  220|       |    ///
  221|       |    /// ```rust
  222|       |    /// # use time::macros::time;
  223|       |    /// assert_eq!(time!(0:00:00).as_hms_milli(), (0, 0, 0, 0));
  224|       |    /// assert_eq!(time!(23:59:59.999).as_hms_milli(), (23, 59, 59, 999));
  225|       |    /// ```
  226|      0|    pub const fn as_hms_milli(self) -> (u8, u8, u8, u16) {
  227|      0|        (
  228|      0|            self.hour,
  229|      0|            self.minute,
  230|      0|            self.second,
  231|      0|            (self.nanosecond / 1_000_000) as u16,
  232|      0|        )
  233|      0|    }
  234|       |
  235|       |    /// Get the clock hour, minute, second, and microsecond.
  236|       |    ///
  237|       |    /// ```rust
  238|       |    /// # use time::macros::time;
  239|       |    /// assert_eq!(time!(0:00:00).as_hms_micro(), (0, 0, 0, 0));
  240|       |    /// assert_eq!(
  241|       |    ///     time!(23:59:59.999_999).as_hms_micro(),
  242|       |    ///     (23, 59, 59, 999_999)
  243|       |    /// );
  244|       |    /// ```
  245|      0|    pub const fn as_hms_micro(self) -> (u8, u8, u8, u32) {
  246|      0|        (self.hour, self.minute, self.second, self.nanosecond / 1_000)
  247|      0|    }
  248|       |
  249|       |    /// Get the clock hour, minute, second, and nanosecond.
  250|       |    ///
  251|       |    /// ```rust
  252|       |    /// # use time::macros::time;
  253|       |    /// assert_eq!(time!(0:00:00).as_hms_nano(), (0, 0, 0, 0));
  254|       |    /// assert_eq!(
  255|       |    ///     time!(23:59:59.999_999_999).as_hms_nano(),
  256|       |    ///     (23, 59, 59, 999_999_999)
  257|       |    /// );
  258|       |    /// ```
  259|      0|    pub const fn as_hms_nano(self) -> (u8, u8, u8, u32) {
  260|      0|        (self.hour, self.minute, self.second, self.nanosecond)
  261|      0|    }
  262|       |
  263|       |    /// Get the clock hour.
  264|       |    ///
  265|       |    /// The returned value will always be in the range `0..24`.
  266|       |    ///
  267|       |    /// ```rust
  268|       |    /// # use time::macros::time;
  269|       |    /// assert_eq!(time!(0:00:00).hour(), 0);
  270|       |    /// assert_eq!(time!(23:59:59).hour(), 23);
  271|       |    /// ```
  272|      0|    pub const fn hour(self) -> u8 {
  273|      0|        self.hour
  274|      0|    }
  275|       |
  276|       |    /// Get the minute within the hour.
  277|       |    ///
  278|       |    /// The returned value will always be in the range `0..60`.
  279|       |    ///
  280|       |    /// ```rust
  281|       |    /// # use time::macros::time;
  282|       |    /// assert_eq!(time!(0:00:00).minute(), 0);
  283|       |    /// assert_eq!(time!(23:59:59).minute(), 59);
  284|       |    /// ```
  285|      0|    pub const fn minute(self) -> u8 {
  286|      0|        self.minute
  287|      0|    }
  288|       |
  289|       |    /// Get the second within the minute.
  290|       |    ///
  291|       |    /// The returned value will always be in the range `0..60`.
  292|       |    ///
  293|       |    /// ```rust
  294|       |    /// # use time::macros::time;
  295|       |    /// assert_eq!(time!(0:00:00).second(), 0);
  296|       |    /// assert_eq!(time!(23:59:59).second(), 59);
  297|       |    /// ```
  298|      0|    pub const fn second(self) -> u8 {
  299|      0|        self.second
  300|      0|    }
  301|       |
  302|       |    /// Get the milliseconds within the second.
  303|       |    ///
  304|       |    /// The returned value will always be in the range `0..1_000`.
  305|       |    ///
  306|       |    /// ```rust
  307|       |    /// # use time::macros::time;
  308|       |    /// assert_eq!(time!(0:00).millisecond(), 0);
  309|       |    /// assert_eq!(time!(23:59:59.999).millisecond(), 999);
  310|       |    /// ```
  311|      0|    pub const fn millisecond(self) -> u16 {
  312|      0|        (self.nanosecond / 1_000_000) as _
  313|      0|    }
  314|       |
  315|       |    /// Get the microseconds within the second.
  316|       |    ///
  317|       |    /// The returned value will always be in the range `0..1_000_000`.
  318|       |    ///
  319|       |    /// ```rust
  320|       |    /// # use time::macros::time;
  321|       |    /// assert_eq!(time!(0:00).microsecond(), 0);
  322|       |    /// assert_eq!(time!(23:59:59.999_999).microsecond(), 999_999);
  323|       |    /// ```
  324|      0|    pub const fn microsecond(self) -> u32 {
  325|      0|        self.nanosecond / 1_000
  326|      0|    }
  327|       |
  328|       |    /// Get the nanoseconds within the second.
  329|       |    ///
  330|       |    /// The returned value will always be in the range `0..1_000_000_000`.
  331|       |    ///
  332|       |    /// ```rust
  333|       |    /// # use time::macros::time;
  334|       |    /// assert_eq!(time!(0:00).nanosecond(), 0);
  335|       |    /// assert_eq!(time!(23:59:59.999_999_999).nanosecond(), 999_999_999);
  336|       |    /// ```
  337|      0|    pub const fn nanosecond(self) -> u32 {
  338|      0|        self.nanosecond
  339|      0|    }
  340|       |    // endregion getters
  341|       |
  342|       |    // region: arithmetic helpers
  343|       |    /// Add the sub-day time of the [`Duration`] to the `Time`. Wraps on overflow, returning whether
  344|       |    /// the date is different.
  345|      0|    pub(crate) const fn adjusting_add(self, duration: Duration) -> (DateAdjustment, Self) {
  346|      0|        let mut nanoseconds = self.nanosecond as i32 + duration.subsec_nanoseconds();
  347|      0|        let mut seconds = self.second as i8 + (duration.whole_seconds() % 60) as i8;
  348|      0|        let mut minutes = self.minute as i8 + (duration.whole_minutes() % 60) as i8;
  349|      0|        let mut hours = self.hour as i8 + (duration.whole_hours() % 24) as i8;
  350|      0|        let mut date_adjustment = DateAdjustment::None;
  351|      0|
  352|      0|        cascade!(nanoseconds in 0..1_000_000_000 => seconds);
  353|      0|        cascade!(seconds in 0..60 => minutes);
  354|      0|        cascade!(minutes in 0..60 => hours);
  355|      0|        if hours >= 24 {
  356|      0|            hours -= 24;
  357|      0|            date_adjustment = DateAdjustment::Next;
  358|      0|        } else if hours < 0 {
  359|      0|            hours += 24;
  360|      0|            date_adjustment = DateAdjustment::Previous;
  361|      0|        }
  362|       |
  363|      0|        (
  364|      0|            date_adjustment,
  365|      0|            Self::__from_hms_nanos_unchecked(
  366|      0|                hours as _,
  367|      0|                minutes as _,
  368|      0|                seconds as _,
  369|      0|                nanoseconds as _,
  370|      0|            ),
  371|      0|        )
  372|      0|    }
  373|       |
  374|       |    /// Subtract the sub-day time of the [`Duration`] to the `Time`. Wraps on overflow, returning
  375|       |    /// whether the date is different.
  376|      0|    pub(crate) const fn adjusting_sub(self, duration: Duration) -> (DateAdjustment, Self) {
  377|      0|        let mut nanoseconds = self.nanosecond as i32 - duration.subsec_nanoseconds();
  378|      0|        let mut seconds = self.second as i8 - (duration.whole_seconds() % 60) as i8;
  379|      0|        let mut minutes = self.minute as i8 - (duration.whole_minutes() % 60) as i8;
  380|      0|        let mut hours = self.hour as i8 - (duration.whole_hours() % 24) as i8;
  381|      0|        let mut date_adjustment = DateAdjustment::None;
  382|      0|
  383|      0|        cascade!(nanoseconds in 0..1_000_000_000 => seconds);
  384|      0|        cascade!(seconds in 0..60 => minutes);
  385|      0|        cascade!(minutes in 0..60 => hours);
  386|      0|        if hours >= 24 {
  387|      0|            hours -= 24;
  388|      0|            date_adjustment = DateAdjustment::Next;
  389|      0|        } else if hours < 0 {
  390|      0|            hours += 24;
  391|      0|            date_adjustment = DateAdjustment::Previous;
  392|      0|        }
  393|       |
  394|      0|        (
  395|      0|            date_adjustment,
  396|      0|            Self::__from_hms_nanos_unchecked(
  397|      0|                hours as _,
  398|      0|                minutes as _,
  399|      0|                seconds as _,
  400|      0|                nanoseconds as _,
  401|      0|            ),
  402|      0|        )
  403|      0|    }
  404|       |
  405|       |    /// Add the sub-day time of the [`std::time::Duration`] to the `Time`. Wraps on overflow,
  406|       |    /// returning whether the date is the previous date as the first element of the tuple.
  407|      0|    pub(crate) const fn adjusting_add_std(self, duration: StdDuration) -> (bool, Self) {
  408|      0|        let mut nanosecond = self.nanosecond + duration.subsec_nanos();
  409|      0|        let mut second = self.second + (duration.as_secs() % 60) as u8;
  410|      0|        let mut minute = self.minute + ((duration.as_secs() / 60) % 60) as u8;
  411|      0|        let mut hour = self.hour + ((duration.as_secs() / 3_600) % 24) as u8;
  412|      0|        let mut is_next_day = false;
  413|      0|
  414|      0|        cascade!(nanosecond in 0..1_000_000_000 => second);
  415|      0|        cascade!(second in 0..60 => minute);
  416|      0|        cascade!(minute in 0..60 => hour);
  417|      0|        if hour >= 24 {
  418|      0|            hour -= 24;
  419|      0|            is_next_day = true;
  420|      0|        }
  421|       |
  422|      0|        (
  423|      0|            is_next_day,
  424|      0|            Self::__from_hms_nanos_unchecked(hour, minute, second, nanosecond),
  425|      0|        )
  426|      0|    }
  427|       |
  428|       |    /// Subtract the sub-day time of the [`std::time::Duration`] to the `Time`. Wraps on overflow,
  429|       |    /// returning whether the date is the previous date as the first element of the tuple.
  430|      0|    pub(crate) const fn adjusting_sub_std(self, duration: StdDuration) -> (bool, Self) {
  431|      0|        let mut nanosecond = self.nanosecond as i32 - duration.subsec_nanos() as i32;
  432|      0|        let mut second = self.second as i8 - (duration.as_secs() % 60) as i8;
  433|      0|        let mut minute = self.minute as i8 - ((duration.as_secs() / 60) % 60) as i8;
  434|      0|        let mut hour = self.hour as i8 - ((duration.as_secs() / 3_600) % 24) as i8;
  435|      0|        let mut is_previous_day = false;
  436|      0|
  437|      0|        cascade!(nanosecond in 0..1_000_000_000 => second);
  438|      0|        cascade!(second in 0..60 => minute);
  439|      0|        cascade!(minute in 0..60 => hour);
  440|      0|        if hour < 0 {
  441|      0|            hour += 24;
  442|      0|            is_previous_day = true;
  443|      0|        }
  444|       |
  445|      0|        (
  446|      0|            is_previous_day,
  447|      0|            Self::__from_hms_nanos_unchecked(hour as _, minute as _, second as _, nanosecond as _),
  448|      0|        )
  449|      0|    }
  450|       |    // endregion arithmetic helpers
  451|       |}
  452|       |
  453|       |// region: formatting & parsing
  454|       |#[cfg(feature = "formatting")]
  455|       |impl Time {
  456|       |    /// Format the `Time` using the provided [format description](crate::format_description).
  457|       |    pub fn format_into(
  458|       |        self,
  459|       |        output: &mut impl io::Write,
  460|       |        format: &(impl Formattable + ?Sized),
  461|       |    ) -> Result<usize, crate::error::Format> {
  462|       |        format.format_into(output, None, Some(self), None)
  463|       |    }
  464|       |
  465|       |    /// Format the `Time` using the provided [format description](crate::format_description).
  466|       |    ///
  467|       |    /// ```rust
  468|       |    /// # use time::{format_description, macros::time};
  469|       |    /// let format = format_description::parse("[hour]:[minute]:[second]")?;
  470|       |    /// assert_eq!(time!(12:00).format(&format)?, "12:00:00");
  471|       |    /// # Ok::<_, time::Error>(())
  472|       |    /// ```
  473|       |    pub fn format(
  474|       |        self,
  475|       |        format: &(impl Formattable + ?Sized),
  476|       |    ) -> Result<String, crate::error::Format> {
  477|       |        format.format(None, Some(self), None)
  478|       |    }
  479|       |}
  480|       |
  481|       |#[cfg(feature = "parsing")]
  482|       |impl Time {
  483|       |    /// Parse a `Time` from the input using the provided [format
  484|       |    /// description](crate::format_description).
  485|       |    ///
  486|       |    /// ```rust
  487|       |    /// # use time::{format_description, macros::time, Time};
  488|       |    /// let format = format_description::parse("[hour]:[minute]:[second]")?;
  489|       |    /// assert_eq!(Time::parse("12:00:00", &format)?, time!(12:00));
  490|       |    /// # Ok::<_, time::Error>(())
  491|       |    /// ```
  492|       |    pub fn parse(
  493|       |        input: &str,
  494|       |        description: &(impl Parsable + ?Sized),
  495|       |    ) -> Result<Self, error::Parse> {
  496|       |        description.parse_time(input.as_bytes())
  497|       |    }
  498|       |}
  499|       |
  500|       |impl fmt::Display for Time {
  501|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  502|      0|        let (value, width) = match self.nanosecond() {
  503|      0|            nanos if nanos % 10 != 0 => (nanos, 9),
  504|      0|            nanos if (nanos / 10) % 10 != 0 => (nanos / 10, 8),
  505|      0|            nanos if (nanos / 100) % 10 != 0 => (nanos / 100, 7),
  506|      0|            nanos if (nanos / 1_000) % 10 != 0 => (nanos / 1_000, 6),
  507|      0|            nanos if (nanos / 10_000) % 10 != 0 => (nanos / 10_000, 5),
  508|      0|            nanos if (nanos / 100_000) % 10 != 0 => (nanos / 100_000, 4),
  509|      0|            nanos if (nanos / 1_000_000) % 10 != 0 => (nanos / 1_000_000, 3),
  510|      0|            nanos if (nanos / 10_000_000) % 10 != 0 => (nanos / 10_000_000, 2),
  511|      0|            nanos => (nanos / 100_000_000, 1),
  512|       |        };
  513|      0|        write!(
  514|      0|            f,
  515|      0|            "{}:{:02}:{:02}.{:0width$}",
  516|      0|            self.hour,
  517|      0|            self.minute,
  518|      0|            self.second,
  519|      0|            value,
  520|      0|            width = width
  521|      0|        )
  522|      0|    }
  523|       |}
  524|       |// endregion formatting & parsing
  525|       |
  526|       |// region: trait impls
  527|       |impl Add<Duration> for Time {
  528|       |    type Output = Self;
  529|       |
  530|       |    /// Add the sub-day time of the [`Duration`] to the `Time`. Wraps on overflow.
  531|       |    ///
  532|       |    /// ```rust
  533|       |    /// # use time::{ext::NumericalDuration, macros::time};
  534|       |    /// assert_eq!(time!(12:00) + 2.hours(), time!(14:00));
  535|       |    /// assert_eq!(time!(0:00:01) + (-2).seconds(), time!(23:59:59));
  536|       |    /// ```
  537|      0|    fn add(self, duration: Duration) -> Self::Output {
  538|      0|        self.adjusting_add(duration).1
  539|      0|    }
  540|       |}
  541|       |
  542|       |impl Add<StdDuration> for Time {
  543|       |    type Output = Self;
  544|       |
  545|       |    /// Add the sub-day time of the [`std::time::Duration`] to the `Time`. Wraps on overflow.
  546|       |    ///
  547|       |    /// ```rust
  548|       |    /// # use time::{ext::NumericalStdDuration, macros::time};
  549|       |    /// assert_eq!(time!(12:00) + 2.std_hours(), time!(14:00));
  550|       |    /// assert_eq!(time!(23:59:59) + 2.std_seconds(), time!(0:00:01));
  551|       |    /// ```
  552|      0|    fn add(self, duration: StdDuration) -> Self::Output {
  553|      0|        self.adjusting_add_std(duration).1
  554|      0|    }
  555|       |}
  556|       |
  557|       |impl_add_assign!(Time: Duration, StdDuration);
  558|       |
  559|       |impl Sub<Duration> for Time {
  560|       |    type Output = Self;
  561|       |
  562|       |    /// Subtract the sub-day time of the [`Duration`] from the `Time`. Wraps on overflow.
  563|       |    ///
  564|       |    /// ```rust
  565|       |    /// # use time::{ext::NumericalDuration, macros::time};
  566|       |    /// assert_eq!(time!(14:00) - 2.hours(), time!(12:00));
  567|       |    /// assert_eq!(time!(23:59:59) - (-2).seconds(), time!(0:00:01));
  568|       |    /// ```
  569|      0|    fn sub(self, duration: Duration) -> Self::Output {
  570|      0|        self.adjusting_sub(duration).1
  571|      0|    }
  572|       |}
  573|       |
  574|       |impl Sub<StdDuration> for Time {
  575|       |    type Output = Self;
  576|       |
  577|       |    /// Subtract the sub-day time of the [`std::time::Duration`] from the `Time`. Wraps on overflow.
  578|       |    ///
  579|       |    /// ```rust
  580|       |    /// # use time::{ext::NumericalStdDuration, macros::time};
  581|       |    /// assert_eq!(time!(14:00) - 2.std_hours(), time!(12:00));
  582|       |    /// assert_eq!(time!(0:00:01) - 2.std_seconds(), time!(23:59:59));
  583|       |    /// ```
  584|      0|    fn sub(self, duration: StdDuration) -> Self::Output {
  585|      0|        self.adjusting_sub_std(duration).1
  586|      0|    }
  587|       |}
  588|       |
  589|       |impl_sub_assign!(Time: Duration, StdDuration);
  590|       |
  591|       |impl Sub for Time {
  592|       |    type Output = Duration;
  593|       |
  594|       |    /// Subtract two `Time`s, returning the [`Duration`] between. This assumes both `Time`s are in
  595|       |    /// the same calendar day.
  596|       |    ///
  597|       |    /// ```rust
  598|       |    /// # use time::{ext::NumericalDuration, macros::time};
  599|       |    /// assert_eq!(time!(0:00) - time!(0:00), 0.seconds());
  600|       |    /// assert_eq!(time!(1:00) - time!(0:00), 1.hours());
  601|       |    /// assert_eq!(time!(0:00) - time!(1:00), (-1).hours());
  602|       |    /// assert_eq!(time!(0:00) - time!(23:00), (-23).hours());
  603|       |    /// ```
  604|      0|    fn sub(self, rhs: Self) -> Self::Output {
  605|      0|        let hour_diff = (self.hour as i8) - (rhs.hour as i8);
  606|      0|        let minute_diff = (self.minute as i8) - (rhs.minute as i8);
  607|      0|        let mut second_diff = (self.second as i8) - (rhs.second as i8);
  608|      0|        let mut nanosecond_diff = (self.nanosecond as i32) - (rhs.nanosecond as i32);
  609|      0|
  610|      0|        cascade!(nanosecond_diff in 0..1_000_000_000 => second_diff);
  611|       |
  612|      0|        Duration::new_unchecked(
  613|      0|            hour_diff as i64 * 3_600 + minute_diff as i64 * 60 + second_diff as i64,
  614|      0|            nanosecond_diff,
  615|      0|        )
  616|      0|    }
  617|       |}
  618|       |
  619|       |// endregion trait impls
  620|       |
  621|       |#[cfg(test)]
  622|       |mod rusty_tests {
  623|       |	use crate::*;
  624|       |	use std::cmp::Ord;
  625|       |	use std::cmp::PartialEq;
  626|       |	use std::clone::Clone;
  627|       |	use std::ops::Add;
  628|       |	use std::cmp::PartialOrd;
  629|       |	use std::ops::Sub;
  630|       |	use std::cmp::Eq;
  631|       |//#[no_coverage]
  632|      1|#[test]
  633|       |#[should_panic]
  634|      1|#[timeout(3000)]
  635|      1|fn rusty_test_551() {
  636|      1|    rusty_monitor::set_test_id(551);
  637|      1|    let mut i32_0: i32 = 235i32;
  638|      1|    let mut i64_0: i64 = -38i64;
  639|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  640|      1|    let mut i64_1: i64 = 0i64;
  641|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  642|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
  643|      1|    let mut i64_2: i64 = 1000000i64;
  644|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
  645|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  646|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_3);
  647|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  648|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_2);
  649|      1|    let mut i32_1: i32 = 392i32;
  650|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  651|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
  652|      1|    let mut primitivedatetime_0_ref_0: &mut crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
  653|      1|    panic!("From RustyUnit with love");
  654|       |}
  655|       |
  656|       |//#[no_coverage]
  657|      1|#[test]
  658|       |#[should_panic]
  659|      1|#[timeout(3000)]
  660|      1|fn rusty_test_3572() {
  661|      1|    rusty_monitor::set_test_id(3572);
  662|      1|    let mut u16_0: u16 = 22u16;
  663|      1|    let mut i32_0: i32 = 93i32;
  664|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  665|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
  666|      1|    let mut i128_0: i128 = 0i128;
  667|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  668|      1|    let mut i128_1: i128 = 9223372036854775807i128;
  669|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  670|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
  671|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
  672|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  673|      1|    let mut u32_0: u32 = 79u32;
  674|      1|    let mut u8_0: u8 = 6u8;
  675|      1|    let mut u8_1: u8 = 60u8;
  676|      1|    let mut u8_2: u8 = 8u8;
  677|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
  678|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_3);
  679|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  680|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  681|      1|    let mut u32_1: u32 = 100000u32;
  682|      1|    let mut u8_3: u8 = 5u8;
  683|      1|    let mut u8_4: u8 = 9u8;
  684|      1|    let mut u8_5: u8 = 7u8;
  685|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  686|      1|    let mut u16_1: u16 = 365u16;
  687|      1|    let mut i32_1: i32 = 381i32;
  688|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
  689|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_2);
  690|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
  691|      1|    let mut month_0: month::Month = crate::month::Month::June;
  692|      1|    let mut month_1: month::Month = crate::month::Month::April;
  693|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::primitive_date_time::PrimitiveDateTime::as_hms_micro(primitivedatetime_0);
  694|      1|    panic!("From RustyUnit with love");
  695|       |}
  696|       |
  697|       |//#[no_coverage]
  698|      1|#[test]
  699|       |#[should_panic]
  700|      1|#[timeout(3000)]
  701|      1|fn rusty_test_320() {
  702|      1|    rusty_monitor::set_test_id(320);
  703|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  704|      1|    let mut offsetdatetime_0_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_0;
  705|      1|    let mut i64_0: i64 = 24i64;
  706|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
  707|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  708|      1|    let mut u32_0: u32 = 72u32;
  709|      1|    let mut u8_0: u8 = 52u8;
  710|      1|    let mut u8_1: u8 = 8u8;
  711|      1|    let mut u8_2: u8 = 6u8;
  712|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
  713|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_0);
  714|      1|    let mut u32_1: u32 = 28u32;
  715|      1|    let mut u8_3: u8 = 59u8;
  716|      1|    let mut u8_4: u8 = 59u8;
  717|      1|    let mut u8_5: u8 = 4u8;
  718|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  719|      1|    let mut i64_1: i64 = 1i64;
  720|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  721|      1|    let mut i32_0: i32 = 3600i32;
  722|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  723|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  724|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_2};
  725|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
  726|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_1, time_1);
  727|      1|    let mut offsetdatetime_2_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_2;
  728|      1|    panic!("From RustyUnit with love");
  729|       |}
  730|       |
  731|       |//#[no_coverage]
  732|      1|#[test]
  733|       |#[should_panic]
  734|      1|#[timeout(3000)]
  735|      1|fn rusty_test_976() {
  736|      1|    rusty_monitor::set_test_id(976);
  737|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  738|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  739|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  740|      1|    let mut u32_0: u32 = 1000000u32;
  741|      1|    let mut u8_0: u8 = 11u8;
  742|      1|    let mut u8_1: u8 = 61u8;
  743|      1|    let mut u8_2: u8 = 86u8;
  744|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
  745|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_0);
  746|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
  747|      1|    let mut i64_0: i64 = 2440588i64;
  748|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  749|      1|    let mut i64_1: i64 = 86400i64;
  750|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  751|      1|    let mut i32_0: i32 = 342i32;
  752|      1|    let mut i64_2: i64 = 111i64;
  753|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_0);
  754|      1|    let mut i8_0: i8 = 0i8;
  755|      1|    let mut i8_1: i8 = 24i8;
  756|      1|    let mut i8_2: i8 = 23i8;
  757|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  758|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  759|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
  760|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  761|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_3);
  762|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  763|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_2);
  764|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
  765|      1|    let mut time_3: crate::time::Time = std::ops::Sub::sub(time_2, duration_1);
  766|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
  767|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(time_3_ref_0, time_1_ref_0);
  768|      1|    panic!("From RustyUnit with love");
  769|       |}
  770|       |
  771|       |//#[no_coverage]
  772|      1|#[test]
  773|       |#[should_panic]
  774|      1|#[timeout(3000)]
  775|      1|fn rusty_test_1982() {
  776|      1|    rusty_monitor::set_test_id(1982);
  777|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  778|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  779|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
  780|      1|    let mut i128_0: i128 = 1i128;
  781|      1|    let mut i128_1: i128 = 0i128;
  782|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  783|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  784|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_1);
  785|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
  786|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  787|      1|    let mut u32_0: u32 = 4u32;
  788|      1|    let mut u8_0: u8 = 6u8;
  789|      1|    let mut u8_1: u8 = 60u8;
  790|      1|    let mut u8_2: u8 = 8u8;
  791|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
  792|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_4);
  793|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
  794|      1|    let mut duration_5: crate::duration::Duration = crate::instant::Instant::elapsed(instant_2);
  795|      1|    let mut u16_0: u16 = 63u16;
  796|      1|    let mut i32_0: i32 = -96i32;
  797|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  798|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_5);
  799|      1|    let mut u32_1: u32 = 100000u32;
  800|      1|    let mut u8_3: u8 = 5u8;
  801|      1|    let mut u8_4: u8 = 9u8;
  802|      1|    let mut u8_5: u8 = 7u8;
  803|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  804|      1|    let mut u16_1: u16 = 365u16;
  805|      1|    let mut i32_1: i32 = 381i32;
  806|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
  807|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_2);
  808|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_1);
  809|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
  810|      1|    let mut month_0: month::Month = crate::month::Month::June;
  811|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_1, time_1);
  812|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
  813|      1|    let mut option_0: std::option::Option<crate::instant::Instant> = crate::instant::Instant::checked_add(instant_1, duration_0);
  814|      1|    panic!("From RustyUnit with love");
  815|       |}
  816|       |
  817|       |//#[no_coverage]
  818|      1|#[test]
  819|       |#[should_panic]
  820|      1|#[timeout(3000)]
  821|      1|fn rusty_test_557() {
  822|      1|    rusty_monitor::set_test_id(557);
  823|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  824|      1|    let mut padding_0_ref_0: &time::Padding = &mut padding_0;
  825|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
  826|      1|    let mut padding_1_ref_0: &time::Padding = &mut padding_1;
  827|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
  828|      1|    let mut padding_2_ref_0: &time::Padding = &mut padding_2;
  829|      1|    let mut padding_3: time::Padding = crate::time::Padding::Optimize;
  830|      1|    let mut padding_3_ref_0: &time::Padding = &mut padding_3;
  831|      1|    let mut padding_4: time::Padding = crate::time::Padding::Optimize;
  832|      1|    let mut padding_4_ref_0: &time::Padding = &mut padding_4;
  833|      1|    let mut padding_5: time::Padding = crate::time::Padding::Optimize;
  834|      1|    let mut padding_5_ref_0: &time::Padding = &mut padding_5;
  835|      1|    let mut padding_6: time::Padding = crate::time::Padding::Optimize;
  836|      1|    let mut padding_6_ref_0: &time::Padding = &mut padding_6;
  837|      1|    let mut padding_7: time::Padding = crate::time::Padding::Optimize;
  838|      1|    let mut padding_7_ref_0: &time::Padding = &mut padding_7;
  839|      1|    let mut padding_8: time::Padding = crate::time::Padding::Optimize;
  840|      1|    let mut padding_8_ref_0: &time::Padding = &mut padding_8;
  841|      1|    let mut padding_9: time::Padding = crate::time::Padding::Optimize;
  842|      1|    let mut padding_9_ref_0: &time::Padding = &mut padding_9;
  843|      1|    let mut padding_10: time::Padding = crate::time::Padding::Optimize;
  844|      1|    let mut padding_10_ref_0: &time::Padding = &mut padding_10;
  845|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_10_ref_0);
  846|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_9_ref_0);
  847|      1|    let mut tuple_2: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_8_ref_0);
  848|      1|    let mut tuple_3: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_7_ref_0);
  849|      1|    let mut tuple_4: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_6_ref_0);
  850|      1|    let mut tuple_5: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_5_ref_0);
  851|      1|    let mut tuple_6: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_4_ref_0);
  852|      1|    let mut tuple_7: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_3_ref_0);
  853|      1|    let mut tuple_8: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_2_ref_0);
  854|      1|    let mut tuple_9: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_1_ref_0);
  855|      1|    let mut tuple_10: () = std::cmp::Eq::assert_receiver_is_total_eq(padding_0_ref_0);
  856|      1|    panic!("From RustyUnit with love");
  857|       |}
  858|       |
  859|       |//#[no_coverage]
  860|      1|#[test]
  861|       |#[should_panic]
  862|      1|#[timeout(3000)]
  863|      1|fn rusty_test_377() {
  864|      1|    rusty_monitor::set_test_id(377);
  865|      1|    let mut i64_0: i64 = 9223372036854775807i64;
  866|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  867|      1|    let mut i32_0: i32 = 207i32;
  868|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  869|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
  870|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_0);
  871|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_0);
  872|      1|    let mut u32_0: u32 = 85u32;
  873|      1|    let mut u8_0: u8 = 3u8;
  874|      1|    let mut u8_1: u8 = 53u8;
  875|      1|    let mut u8_2: u8 = 4u8;
  876|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  877|      1|    let mut i64_1: i64 = 3600i64;
  878|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  879|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
  880|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  881|      1|    let mut u32_1: u32 = 1000u32;
  882|      1|    let mut u8_3: u8 = 1u8;
  883|      1|    let mut u8_4: u8 = 59u8;
  884|      1|    let mut u8_5: u8 = 29u8;
  885|      1|    let mut time_3: crate::time::Time = crate::time::Time {hour: u8_5, minute: u8_4, second: u8_3, nanosecond: u32_1, padding: padding_0};
  886|      1|    let mut time_4: crate::time::Time = std::ops::Sub::sub(time_3, duration_2);
  887|      1|    let mut i64_2: i64 = 604800i64;
  888|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::days(i64_2);
  889|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
  890|      1|    let mut u32_2: u32 = 10000000u32;
  891|      1|    let mut u8_6: u8 = 3u8;
  892|      1|    let mut u8_7: u8 = 51u8;
  893|      1|    let mut u8_8: u8 = 56u8;
  894|      1|    let mut time_5: crate::time::Time = crate::time::Time {hour: u8_8, minute: u8_7, second: u8_6, nanosecond: u32_2, padding: padding_1};
  895|      1|    let mut time_6: crate::time::Time = std::ops::Sub::sub(time_5, duration_3);
  896|      1|    let mut tuple_0: (u8, u8, u8, u16) = crate::time::Time::as_hms_milli(time_6);
  897|      1|    let mut tuple_1: (u8, u8, u8, u16) = crate::time::Time::as_hms_milli(time_4);
  898|      1|    let mut tuple_2: (u8, u8, u8, u16) = crate::time::Time::as_hms_milli(time_2);
  899|      1|    let mut tuple_3: (u8, u8, u8, u16) = crate::time::Time::as_hms_milli(time_1);
  900|      1|    panic!("From RustyUnit with love");
  901|       |}
  902|       |
  903|       |//#[no_coverage]
  904|      1|#[test]
  905|       |#[should_panic]
  906|      1|#[timeout(3000)]
  907|      1|fn rusty_test_533() {
  908|      1|    rusty_monitor::set_test_id(533);
  909|      1|    let mut i64_0: i64 = 12i64;
  910|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  911|      1|    let mut i128_0: i128 = 53i128;
  912|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  913|      1|    let mut i64_1: i64 = 60i64;
  914|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  915|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_2, duration_1);
  916|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
  917|      1|    let mut u32_0: u32 = 100u32;
  918|      1|    let mut u8_0: u8 = 24u8;
  919|      1|    let mut u8_1: u8 = 31u8;
  920|      1|    let mut u8_2: u8 = 11u8;
  921|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  922|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_4);
  923|      1|    let mut i64_2: i64 = 253402300799i64;
  924|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::microseconds(i64_2);
  925|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
  926|      1|    let mut i32_0: i32 = 100i32;
  927|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  928|      1|    let mut f64_0: f64 = -168.591858f64;
  929|      1|    let mut i64_3: i64 = -24i64;
  930|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
  931|      1|    let mut i8_0: i8 = 59i8;
  932|      1|    let mut i8_1: i8 = 6i8;
  933|      1|    let mut i8_2: i8 = -75i8;
  934|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  935|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  936|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  937|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  938|      1|    let mut u32_1: u32 = 999999999u32;
  939|      1|    let mut u8_3: u8 = 59u8;
  940|      1|    let mut u8_4: u8 = 32u8;
  941|      1|    let mut u8_5: u8 = 2u8;
  942|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  943|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  944|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_3);
  945|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  946|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_2);
  947|      1|    panic!("From RustyUnit with love");
  948|       |}
  949|       |
  950|       |//#[no_coverage]
  951|      1|#[test]
  952|       |#[should_panic]
  953|      1|#[timeout(3000)]
  954|      1|fn rusty_test_341() {
  955|      1|    rusty_monitor::set_test_id(341);
  956|      1|    let mut i64_0: i64 = 12i64;
  957|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  958|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  959|      1|    let mut u16_0: u16 = 0u16;
  960|      1|    let mut i32_0: i32 = -275i32;
  961|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
  962|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  963|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
  964|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  965|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_1);
  966|      1|    let mut i32_1: i32 = 0i32;
  967|      1|    let mut i64_1: i64 = 2440588i64;
  968|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_1);
  969|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
  970|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
  971|      1|    let mut u32_0: u32 = 1000000000u32;
  972|      1|    let mut u8_0: u8 = 2u8;
  973|      1|    let mut u8_1: u8 = 23u8;
  974|      1|    let mut u8_2: u8 = 12u8;
  975|      1|    let mut time_2: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
  976|      1|    let mut time_3: crate::time::Time = std::ops::Sub::sub(time_2, duration_3);
  977|      1|    let mut i32_2: i32 = 105i32;
  978|      1|    let mut i64_2: i64 = 1000i64;
  979|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
  980|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  981|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_2, duration_4);
  982|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  983|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_3};
  984|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_1);
  985|      1|    let mut i64_3: i64 = -110i64;
  986|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_3);
  987|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  988|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_4, duration_5);
  989|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_5);
  990|      1|    let mut u32_1: u32 = 100000000u32;
  991|      1|    let mut u8_3: u8 = 3u8;
  992|      1|    let mut u8_4: u8 = 60u8;
  993|      1|    let mut u8_5: u8 = 3u8;
  994|      1|    let mut time_4: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  995|      1|    let mut u16_1: u16 = 367u16;
  996|      1|    let mut i32_3: i32 = -41i32;
  997|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_1);
  998|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_4);
  999|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_0);
 1000|      1|    let mut i8_0: i8 = 3i8;
 1001|      1|    let mut i8_1: i8 = 4i8;
 1002|      1|    let mut i8_2: i8 = -60i8;
 1003|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1004|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1005|      1|    let mut u32_2: u32 = 100000u32;
 1006|      1|    let mut u8_6: u8 = 10u8;
 1007|      1|    let mut u8_7: u8 = 9u8;
 1008|      1|    let mut u8_8: u8 = 0u8;
 1009|      1|    let mut time_5: crate::time::Time = crate::time::Time {hour: u8_8, minute: u8_7, second: u8_6, nanosecond: u32_2, padding: padding_1};
 1010|      1|    let mut u16_2: u16 = 366u16;
 1011|      1|    let mut i32_4: i32 = 20i32;
 1012|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_2);
 1013|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_5);
 1014|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::primitive_date_time::PrimitiveDateTime::to_iso_week_date(primitivedatetime_3);
 1015|      1|    let mut tuple_1: (i32, u8, weekday::Weekday) = crate::primitive_date_time::PrimitiveDateTime::to_iso_week_date(primitivedatetime_1);
 1016|      1|    panic!("From RustyUnit with love");
 1017|       |}
 1018|       |
 1019|       |//#[no_coverage]
 1020|      1|#[test]
 1021|       |#[should_panic]
 1022|      1|#[timeout(3000)]
 1023|      1|fn rusty_test_569() {
 1024|      1|    rusty_monitor::set_test_id(569);
 1025|      1|    let mut f64_0: f64 = 4696837146684686336.000000f64;
 1026|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1027|      1|    let mut i128_0: i128 = 1000000000i128;
 1028|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1029|      1|    let mut u32_0: u32 = 1000u32;
 1030|      1|    let mut u8_0: u8 = 29u8;
 1031|      1|    let mut u8_1: u8 = 59u8;
 1032|      1|    let mut u8_2: u8 = 53u8;
 1033|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1034|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_1);
 1035|      1|    let mut time_1_ref_0: &mut crate::time::Time = &mut time_1;
 1036|      1|    panic!("From RustyUnit with love");
 1037|       |}
 1038|       |
 1039|       |//#[no_coverage]
 1040|      1|#[test]
 1041|       |#[should_panic]
 1042|      1|#[timeout(3000)]
 1043|      1|fn rusty_test_8840() {
 1044|      1|    rusty_monitor::set_test_id(8840);
 1045|      1|    let mut i64_0: i64 = 12i64;
 1046|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1047|      1|    let mut i64_1: i64 = 12i64;
 1048|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1049|      1|    let mut i8_0: i8 = 1i8;
 1050|      1|    let mut i8_1: i8 = 3i8;
 1051|      1|    let mut i8_2: i8 = 5i8;
 1052|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1053|      1|    let mut i64_2: i64 = 2440588i64;
 1054|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 1055|      1|    let mut i32_0: i32 = 1i32;
 1056|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1057|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1058|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_2);
 1059|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 1060|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_1);
 1061|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1062|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_0);
 1063|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1064|      1|    let mut i64_3: i64 = -73i64;
 1065|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 1066|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 1067|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1068|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 1069|      1|    let mut i8_3: i8 = 4i8;
 1070|      1|    let mut i8_4: i8 = 3i8;
 1071|      1|    let mut i8_5: i8 = 1i8;
 1072|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1073|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1074|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_2);
 1075|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_4);
 1076|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1077|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_1);
 1078|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1079|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_4);
 1080|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1081|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(time_3_ref_0, time_1_ref_0);
 1082|      1|    panic!("From RustyUnit with love");
 1083|       |}
 1084|       |
 1085|       |//#[no_coverage]
 1086|      1|#[test]
 1087|       |#[should_panic]
 1088|      1|#[timeout(3000)]
 1089|      1|fn rusty_test_382() {
 1090|      1|    rusty_monitor::set_test_id(382);
 1091|      1|    let mut i128_0: i128 = 1000000000i128;
 1092|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1093|      1|    let mut i64_0: i64 = 7i64;
 1094|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1095|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1096|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1097|      1|    let mut i64_1: i64 = 2147483647i64;
 1098|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1099|      1|    let mut i64_2: i64 = 253402300799i64;
 1100|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1101|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_5, duration_4);
 1102|      1|    let mut i32_0: i32 = 47i32;
 1103|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1104|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_6);
 1105|      1|    let mut i8_0: i8 = 127i8;
 1106|      1|    let mut i8_1: i8 = 60i8;
 1107|      1|    let mut i8_2: i8 = 6i8;
 1108|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1109|      1|    let mut i8_3: i8 = 3i8;
 1110|      1|    let mut i8_4: i8 = -49i8;
 1111|      1|    let mut i8_5: i8 = 2i8;
 1112|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1113|      1|    let mut i64_3: i64 = 1i64;
 1114|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1115|      1|    let mut i32_1: i32 = 128i32;
 1116|      1|    let mut i64_4: i64 = 3600i64;
 1117|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_4);
 1118|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_8, i32_1);
 1119|      1|    let mut i8_6: i8 = -30i8;
 1120|      1|    let mut i8_7: i8 = 59i8;
 1121|      1|    let mut i8_8: i8 = 4i8;
 1122|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1123|      1|    let mut i32_2: i32 = 376i32;
 1124|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
 1125|      1|    let mut i32_3: i32 = 400i32;
 1126|      1|    let mut date_3: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_3);
 1127|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
 1128|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_2);
 1129|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_2};
 1130|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_1);
 1131|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1132|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_3);
 1133|      1|    let mut u8_0: u8 = crate::time::Time::second(time_1);
 1134|      1|    panic!("From RustyUnit with love");
 1135|       |}
 1136|       |
 1137|       |//#[no_coverage]
 1138|      1|#[test]
 1139|       |#[should_panic]
 1140|      1|#[timeout(3000)]
 1141|      1|fn rusty_test_364() {
 1142|      1|    rusty_monitor::set_test_id(364);
 1143|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1144|      1|    let mut u32_0: u32 = 100000u32;
 1145|      1|    let mut u8_0: u8 = 6u8;
 1146|      1|    let mut u8_1: u8 = 11u8;
 1147|      1|    let mut u8_2: u8 = 53u8;
 1148|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1149|      1|    let mut i32_0: i32 = 257i32;
 1150|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1151|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
 1152|      1|    let mut primitivedatetime_0_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_0;
 1153|      1|    panic!("From RustyUnit with love");
 1154|       |}
 1155|       |
 1156|       |//#[no_coverage]
 1157|      1|#[test]
 1158|       |#[should_panic]
 1159|      1|#[timeout(3000)]
 1160|      1|fn rusty_test_555() {
 1161|      1|    rusty_monitor::set_test_id(555);
 1162|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1163|      1|    let mut padding_0_ref_0: &time::Padding = &mut padding_0;
 1164|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1165|      1|    let mut padding_1_ref_0: &time::Padding = &mut padding_1;
 1166|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
 1167|      1|    let mut padding_2_ref_0: &time::Padding = &mut padding_2;
 1168|      1|    let mut padding_3: time::Padding = crate::time::Padding::Optimize;
 1169|      1|    let mut padding_3_ref_0: &time::Padding = &mut padding_3;
 1170|      1|    let mut padding_4: time::Padding = crate::time::Padding::Optimize;
 1171|      1|    let mut padding_4_ref_0: &time::Padding = &mut padding_4;
 1172|      1|    let mut padding_5: time::Padding = crate::time::Padding::Optimize;
 1173|      1|    let mut padding_5_ref_0: &time::Padding = &mut padding_5;
 1174|      1|    let mut padding_6: time::Padding = crate::time::Padding::Optimize;
 1175|      1|    let mut padding_6_ref_0: &time::Padding = &mut padding_6;
 1176|      1|    let mut padding_7: time::Padding = crate::time::Padding::Optimize;
 1177|      1|    let mut padding_7_ref_0: &time::Padding = &mut padding_7;
 1178|      1|    let mut padding_8: time::Padding = crate::time::Padding::Optimize;
 1179|      1|    let mut padding_8_ref_0: &time::Padding = &mut padding_8;
 1180|      1|    let mut padding_9: time::Padding = crate::time::Padding::Optimize;
 1181|      1|    let mut padding_9_ref_0: &time::Padding = &mut padding_9;
 1182|      1|    let mut padding_10: time::Padding = crate::time::Padding::Optimize;
 1183|      1|    let mut padding_10_ref_0: &time::Padding = &mut padding_10;
 1184|      1|    let mut padding_11: time::Padding = std::clone::Clone::clone(padding_10_ref_0);
 1185|      1|    let mut padding_12: time::Padding = std::clone::Clone::clone(padding_9_ref_0);
 1186|      1|    let mut padding_13: time::Padding = std::clone::Clone::clone(padding_8_ref_0);
 1187|      1|    let mut padding_14: time::Padding = std::clone::Clone::clone(padding_7_ref_0);
 1188|      1|    let mut padding_15: time::Padding = std::clone::Clone::clone(padding_6_ref_0);
 1189|      1|    let mut padding_16: time::Padding = std::clone::Clone::clone(padding_5_ref_0);
 1190|      1|    let mut padding_17: time::Padding = std::clone::Clone::clone(padding_4_ref_0);
 1191|      1|    let mut padding_18: time::Padding = std::clone::Clone::clone(padding_3_ref_0);
 1192|      1|    let mut padding_19: time::Padding = std::clone::Clone::clone(padding_2_ref_0);
 1193|      1|    let mut padding_20: time::Padding = std::clone::Clone::clone(padding_1_ref_0);
 1194|      1|    let mut padding_21: time::Padding = std::clone::Clone::clone(padding_0_ref_0);
 1195|      1|    panic!("From RustyUnit with love");
 1196|       |}
 1197|       |
 1198|       |//#[no_coverage]
 1199|      1|#[test]
 1200|       |#[should_panic]
 1201|      1|#[timeout(3000)]
 1202|      1|fn rusty_test_3979() {
 1203|      1|    rusty_monitor::set_test_id(3979);
 1204|      1|    let mut i64_0: i64 = 1000i64;
 1205|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
 1206|      1|    let mut u32_0: u32 = 100000u32;
 1207|      1|    let mut u8_0: u8 = 2u8;
 1208|      1|    let mut u8_1: u8 = 0u8;
 1209|      1|    let mut u8_2: u8 = 29u8;
 1210|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1211|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_0);
 1212|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1213|      1|    let mut i32_0: i32 = 1000i32;
 1214|      1|    let mut i64_1: i64 = 253402300799i64;
 1215|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1216|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
 1217|      1|    let mut u32_1: u32 = 100u32;
 1218|      1|    let mut u8_3: u8 = 60u8;
 1219|      1|    let mut u8_4: u8 = 5u8;
 1220|      1|    let mut u8_5: u8 = 30u8;
 1221|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1222|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_2);
 1223|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1224|      1|    let mut i32_1: i32 = 1000000i32;
 1225|      1|    let mut i64_2: i64 = 1000000i64;
 1226|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_1);
 1227|      1|    let mut i64_3: i64 = 0i64;
 1228|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1229|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::abs(duration_4);
 1230|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1231|      1|    let mut i64_4: i64 = -176i64;
 1232|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::minutes(i64_4);
 1233|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1234|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_7);
 1235|      1|    let mut time_4: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1236|      1|    let mut time_5: crate::time::Time = std::ops::Add::add(time_4, duration_6);
 1237|      1|    let mut i32_2: i32 = 167i32;
 1238|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1239|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1240|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_8, i32_2);
 1241|      1|    let mut duration_10: std::time::Duration = crate::duration::Duration::abs_std(duration_9);
 1242|      1|    let mut i32_3: i32 = -34i32;
 1243|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_3};
 1244|      1|    let mut i32_4: i32 = 291i32;
 1245|      1|    let mut i64_5: i64 = 1000000000i64;
 1246|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_5, i32_4);
 1247|      1|    let mut i32_5: i32 = 9i32;
 1248|      1|    let mut i64_6: i64 = 604800i64;
 1249|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_6, i32_5);
 1250|      1|    let mut duration_13: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_12, duration_11);
 1251|      1|    let mut u32_2: u32 = 10000000u32;
 1252|      1|    let mut u8_6: u8 = 61u8;
 1253|      1|    let mut u8_7: u8 = 29u8;
 1254|      1|    let mut u8_8: u8 = 9u8;
 1255|      1|    let mut time_6: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1256|      1|    let mut i8_0: i8 = 5i8;
 1257|      1|    let mut i8_1: i8 = -57i8;
 1258|      1|    let mut i8_2: i8 = 5i8;
 1259|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1260|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1261|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
 1262|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 1263|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_6);
 1264|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_13);
 1265|      1|    let mut weekday_0: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
 1266|      1|    let mut bool_0: bool = crate::duration::Duration::is_zero(duration_3);
 1267|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(time_3_ref_0, time_1_ref_0);
 1268|      1|    panic!("From RustyUnit with love");
 1269|       |}
 1270|       |
 1271|       |//#[no_coverage]
 1272|      1|#[test]
 1273|       |#[should_panic]
 1274|      1|#[timeout(3000)]
 1275|      1|fn rusty_test_6796() {
 1276|      1|    rusty_monitor::set_test_id(6796);
 1277|      1|    let mut i64_0: i64 = 1000i64;
 1278|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1279|      1|    let mut i64_1: i64 = 12i64;
 1280|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1281|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1282|      1|    let mut i64_2: i64 = 12i64;
 1283|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1284|      1|    let mut i64_3: i64 = 12i64;
 1285|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_3);
 1286|      1|    let mut i8_0: i8 = 1i8;
 1287|      1|    let mut i8_1: i8 = 3i8;
 1288|      1|    let mut i8_2: i8 = 5i8;
 1289|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1290|      1|    let mut i64_4: i64 = 2440588i64;
 1291|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
 1292|      1|    let mut i32_0: i32 = 1i32;
 1293|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1294|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1295|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_5);
 1296|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 1297|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_4);
 1298|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1299|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_3);
 1300|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1301|      1|    let mut i64_5: i64 = -73i64;
 1302|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::minutes(i64_5);
 1303|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 1304|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1305|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 1306|      1|    let mut i8_3: i8 = 4i8;
 1307|      1|    let mut i8_4: i8 = 3i8;
 1308|      1|    let mut i8_5: i8 = 1i8;
 1309|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1310|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1311|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_2);
 1312|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_4);
 1313|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1314|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_1);
 1315|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1316|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_7);
 1317|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1318|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(time_3_ref_0, time_1_ref_0);
 1319|      1|    panic!("From RustyUnit with love");
 1320|       |}
 1321|       |
 1322|       |//#[no_coverage]
 1323|      1|#[test]
 1324|       |#[should_panic]
 1325|      1|#[timeout(3000)]
 1326|      1|fn rusty_test_8065() {
 1327|      1|    rusty_monitor::set_test_id(8065);
 1328|      1|    let mut month_0: month::Month = crate::month::Month::June;
 1329|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1330|      1|    let mut i32_0: i32 = 71i32;
 1331|      1|    let mut i64_0: i64 = 2147483643i64;
 1332|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1333|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_0, i32_0);
 1334|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1335|      1|    let mut u32_0: u32 = 10000u32;
 1336|      1|    let mut u8_0: u8 = 29u8;
 1337|      1|    let mut u8_1: u8 = 12u8;
 1338|      1|    let mut u8_2: u8 = 8u8;
 1339|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1340|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_1);
 1341|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1342|      1|    let mut i64_1: i64 = 0i64;
 1343|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1344|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 1345|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1346|      1|    let mut i64_2: i64 = -176i64;
 1347|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
 1348|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1349|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_5);
 1350|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1351|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_4);
 1352|      1|    let mut i32_1: i32 = 167i32;
 1353|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1354|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1355|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_6, i32_1);
 1356|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
 1357|      1|    let mut i32_2: i32 = -34i32;
 1358|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_2};
 1359|      1|    let mut i32_3: i32 = 291i32;
 1360|      1|    let mut i64_3: i64 = 1000000000i64;
 1361|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
 1362|      1|    let mut i32_4: i32 = 9i32;
 1363|      1|    let mut i64_4: i64 = 604800i64;
 1364|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_4, i32_4);
 1365|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_10, duration_9);
 1366|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1367|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1368|      1|    panic!("From RustyUnit with love");
 1369|       |}
 1370|       |
 1371|       |//#[no_coverage]
 1372|      1|#[test]
 1373|       |#[should_panic]
 1374|      1|#[timeout(3000)]
 1375|      1|fn rusty_test_7046() {
 1376|      1|    rusty_monitor::set_test_id(7046);
 1377|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1378|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_0);
 1379|      1|    let mut i64_0: i64 = 60i64;
 1380|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1381|      1|    let mut u16_0: u16 = 999u16;
 1382|      1|    let mut i32_0: i32 = -72i32;
 1383|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1384|      1|    let mut u32_0: u32 = 999999999u32;
 1385|      1|    let mut u8_0: u8 = 29u8;
 1386|      1|    let mut u8_1: u8 = 5u8;
 1387|      1|    let mut u8_2: u8 = 75u8;
 1388|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1389|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 1390|      1|    let mut i64_1: i64 = 2147483647i64;
 1391|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1392|      1|    let mut i128_0: i128 = 1000i128;
 1393|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1394|      1|    let mut i32_1: i32 = 32i32;
 1395|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1396|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1397|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_2);
 1398|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1399|      1|    let mut time_2: crate::time::Time = std::ops::Add::add(time_1, duration_1);
 1400|      1|    let mut time_2_ref_0: &crate::time::Time = &mut time_2;
 1401|      1|    let mut u32_1: u32 = 10000000u32;
 1402|      1|    let mut u8_3: u8 = 29u8;
 1403|      1|    let mut u8_4: u8 = 1u8;
 1404|      1|    let mut u8_5: u8 = 1u8;
 1405|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1406|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1407|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(time_3_ref_0, time_2_ref_0);
 1408|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::next_day(date_0);
 1409|      1|    panic!("From RustyUnit with love");
 1410|       |}
 1411|       |
 1412|       |//#[no_coverage]
 1413|      1|#[test]
 1414|       |#[should_panic]
 1415|      1|#[timeout(3000)]
 1416|      1|fn rusty_test_1977() {
 1417|      1|    rusty_monitor::set_test_id(1977);
 1418|      1|    let mut i32_0: i32 = 1000000i32;
 1419|      1|    let mut i64_0: i64 = 1000000000i64;
 1420|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1421|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1422|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1423|      1|    let mut i128_0: i128 = 0i128;
 1424|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1425|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1426|      1|    let mut u32_0: u32 = 79u32;
 1427|      1|    let mut u8_0: u8 = 6u8;
 1428|      1|    let mut u8_1: u8 = 60u8;
 1429|      1|    let mut u8_2: u8 = 8u8;
 1430|      1|    let mut time_1: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1431|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1432|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1433|      1|    let mut u16_0: u16 = 63u16;
 1434|      1|    let mut i32_1: i32 = -96i32;
 1435|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1436|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_2);
 1437|      1|    let mut u16_1: u16 = 365u16;
 1438|      1|    let mut i32_2: i32 = 381i32;
 1439|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
 1440|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 1441|      1|    let mut month_0: month::Month = crate::month::Month::June;
 1442|      1|    let mut u16_2: u16 = crate::time::Time::millisecond(time_0);
 1443|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1444|      1|    panic!("From RustyUnit with love");
 1445|       |}
 1446|       |
 1447|       |//#[no_coverage]
 1448|      1|#[test]
 1449|       |#[should_panic]
 1450|      1|#[timeout(3000)]
 1451|      1|fn rusty_test_6894() {
 1452|      1|    rusty_monitor::set_test_id(6894);
 1453|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1454|      1|    let mut i64_0: i64 = 0i64;
 1455|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1456|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1457|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1458|      1|    let mut i64_1: i64 = 60i64;
 1459|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1460|      1|    let mut u16_0: u16 = 999u16;
 1461|      1|    let mut i32_0: i32 = -72i32;
 1462|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1463|      1|    let mut i64_2: i64 = 2147483647i64;
 1464|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1465|      1|    let mut i128_0: i128 = 1000i128;
 1466|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1467|      1|    let mut i32_1: i32 = 32i32;
 1468|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1469|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1470|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_4);
 1471|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1472|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_3);
 1473|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1474|      1|    let mut u32_0: u32 = 10000000u32;
 1475|      1|    let mut u8_0: u8 = 29u8;
 1476|      1|    let mut u8_1: u8 = 1u8;
 1477|      1|    let mut u8_2: u8 = 1u8;
 1478|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1479|      1|    panic!("From RustyUnit with love");
 1480|       |}
 1481|       |
 1482|       |//#[no_coverage]
 1483|      1|#[test]
 1484|       |#[should_panic]
 1485|      1|#[timeout(3000)]
 1486|      1|fn rusty_test_321() {
 1487|      1|    rusty_monitor::set_test_id(321);
 1488|      1|    let mut i64_0: i64 = 604800i64;
 1489|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 1490|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1491|      1|    let mut u32_0: u32 = 100u32;
 1492|      1|    let mut u8_0: u8 = 52u8;
 1493|      1|    let mut u8_1: u8 = 53u8;
 1494|      1|    let mut u8_2: u8 = 90u8;
 1495|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1496|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_0);
 1497|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1498|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_1);
 1499|      1|    let mut offsetdatetime_1_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 1500|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1501|      1|    let mut offsetdatetime_2_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_2;
 1502|      1|    panic!("From RustyUnit with love");
 1503|       |}
 1504|       |
 1505|       |//#[no_coverage]
 1506|      1|#[test]
 1507|       |#[should_panic]
 1508|      1|#[timeout(3000)]
 1509|      1|fn rusty_test_556() {
 1510|      1|    rusty_monitor::set_test_id(556);
 1511|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1512|      1|    let mut padding_0_ref_0: &time::Padding = &mut padding_0;
 1513|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1514|      1|    let mut padding_1_ref_0: &time::Padding = &mut padding_1;
 1515|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
 1516|      1|    let mut padding_2_ref_0: &time::Padding = &mut padding_2;
 1517|      1|    let mut padding_3: time::Padding = crate::time::Padding::Optimize;
 1518|      1|    let mut padding_3_ref_0: &time::Padding = &mut padding_3;
 1519|      1|    let mut padding_4: time::Padding = crate::time::Padding::Optimize;
 1520|      1|    let mut padding_4_ref_0: &time::Padding = &mut padding_4;
 1521|      1|    let mut padding_5: time::Padding = crate::time::Padding::Optimize;
 1522|      1|    let mut padding_5_ref_0: &time::Padding = &mut padding_5;
 1523|      1|    let mut padding_6: time::Padding = crate::time::Padding::Optimize;
 1524|      1|    let mut padding_6_ref_0: &time::Padding = &mut padding_6;
 1525|      1|    let mut padding_7: time::Padding = crate::time::Padding::Optimize;
 1526|      1|    let mut padding_7_ref_0: &time::Padding = &mut padding_7;
 1527|      1|    let mut padding_8: time::Padding = crate::time::Padding::Optimize;
 1528|      1|    let mut padding_8_ref_0: &time::Padding = &mut padding_8;
 1529|      1|    let mut padding_9: time::Padding = crate::time::Padding::Optimize;
 1530|      1|    let mut padding_9_ref_0: &time::Padding = &mut padding_9;
 1531|      1|    let mut padding_10: time::Padding = crate::time::Padding::Optimize;
 1532|      1|    let mut padding_10_ref_0: &time::Padding = &mut padding_10;
 1533|      1|    let mut padding_11: time::Padding = crate::time::Padding::Optimize;
 1534|      1|    let mut padding_11_ref_0: &time::Padding = &mut padding_11;
 1535|      1|    let mut padding_12: time::Padding = crate::time::Padding::Optimize;
 1536|      1|    let mut padding_12_ref_0: &time::Padding = &mut padding_12;
 1537|      1|    let mut padding_13: time::Padding = crate::time::Padding::Optimize;
 1538|      1|    let mut padding_13_ref_0: &time::Padding = &mut padding_13;
 1539|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(padding_13_ref_0, padding_12_ref_0);
 1540|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(padding_11_ref_0, padding_10_ref_0);
 1541|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(padding_9_ref_0, padding_8_ref_0);
 1542|      1|    let mut bool_3: bool = std::cmp::PartialEq::eq(padding_7_ref_0, padding_6_ref_0);
 1543|      1|    let mut bool_4: bool = std::cmp::PartialEq::eq(padding_5_ref_0, padding_4_ref_0);
 1544|      1|    let mut bool_5: bool = std::cmp::PartialEq::eq(padding_3_ref_0, padding_2_ref_0);
 1545|      1|    let mut bool_6: bool = std::cmp::PartialEq::eq(padding_1_ref_0, padding_0_ref_0);
 1546|      1|    panic!("From RustyUnit with love");
 1547|       |}
 1548|       |
 1549|       |//#[no_coverage]
 1550|      1|#[test]
 1551|       |#[should_panic]
 1552|      1|#[timeout(3000)]
 1553|      1|fn rusty_test_565() {
 1554|      1|    rusty_monitor::set_test_id(565);
 1555|      1|    let mut f32_0: f32 = 1315859240.000000f32;
 1556|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1557|      1|    let mut i32_0: i32 = 218i32;
 1558|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1559|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1560|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
 1561|      1|    let mut i8_0: i8 = 24i8;
 1562|      1|    let mut i8_1: i8 = 91i8;
 1563|      1|    let mut i8_2: i8 = 0i8;
 1564|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1565|      1|    let mut i8_3: i8 = 59i8;
 1566|      1|    let mut i8_4: i8 = 3i8;
 1567|      1|    let mut i8_5: i8 = 6i8;
 1568|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1569|      1|    let mut i32_1: i32 = 172i32;
 1570|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1571|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1572|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_1);
 1573|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_3, offset: utcoffset_0};
 1574|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_1);
 1575|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1576|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 1577|      1|    let mut i64_0: i64 = 24i64;
 1578|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1579|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1580|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1581|      1|    let mut u32_0: u32 = 24u32;
 1582|      1|    let mut u8_0: u8 = 0u8;
 1583|      1|    let mut u8_1: u8 = 7u8;
 1584|      1|    let mut u8_2: u8 = 53u8;
 1585|      1|    let mut time_1: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1586|      1|    let mut time_2: crate::time::Time = std::ops::Sub::sub(time_1, duration_2);
 1587|      1|    let mut time_2_ref_0: &crate::time::Time = &mut time_2;
 1588|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(time_2_ref_0);
 1589|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(time_0_ref_0);
 1590|      1|    panic!("From RustyUnit with love");
 1591|       |}
 1592|       |
 1593|       |//#[no_coverage]
 1594|      1|#[test]
 1595|       |#[should_panic]
 1596|      1|#[timeout(3000)]
 1597|      1|fn rusty_test_385() {
 1598|      1|    rusty_monitor::set_test_id(385);
 1599|      1|    let mut i8_0: i8 = 59i8;
 1600|      1|    let mut i8_1: i8 = 127i8;
 1601|      1|    let mut i8_2: i8 = 5i8;
 1602|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1603|      1|    let mut u16_0: u16 = 999u16;
 1604|      1|    let mut i32_0: i32 = 71i32;
 1605|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1606|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 1607|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_0, offset: utcoffset_0};
 1608|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1609|      1|    let mut i8_3: i8 = 4i8;
 1610|      1|    let mut i8_4: i8 = 23i8;
 1611|      1|    let mut i8_5: i8 = 5i8;
 1612|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1613|      1|    let mut i64_0: i64 = -123i64;
 1614|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1615|      1|    let mut i32_1: i32 = 5i32;
 1616|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1617|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1618|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_1, duration_0);
 1619|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_2, utcoffset_1);
 1620|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1621|      1|    let mut i32_2: i32 = 82i32;
 1622|      1|    let mut i64_1: i64 = 3600i64;
 1623|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
 1624|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_2);
 1625|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1626|      1|    let mut time_2: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_2);
 1627|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_2);
 1628|      1|    let mut u32_0: u32 = crate::time::Time::nanosecond(time_3);
 1629|      1|    let mut u32_1: u32 = crate::time::Time::nanosecond(time_1);
 1630|      1|    let mut u32_2: u32 = crate::time::Time::nanosecond(time_0);
 1631|      1|    panic!("From RustyUnit with love");
 1632|       |}
 1633|       |
 1634|       |//#[no_coverage]
 1635|      1|#[test]
 1636|       |#[should_panic]
 1637|      1|#[timeout(3000)]
 1638|      1|fn rusty_test_345() {
 1639|      1|    rusty_monitor::set_test_id(345);
 1640|      1|    let mut f32_0: f32 = 1065353216.000000f32;
 1641|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
 1642|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1643|      1|    let mut i32_0: i32 = 172i32;
 1644|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1645|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1646|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_0, date_0);
 1647|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1648|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_1);
 1649|      1|    let mut u16_0: u16 = 10u16;
 1650|      1|    let mut i32_1: i32 = 20i32;
 1651|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1652|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_1};
 1653|      1|    let mut u32_0: u32 = 92u32;
 1654|      1|    let mut u8_0: u8 = 30u8;
 1655|      1|    let mut u8_1: u8 = 11u8;
 1656|      1|    let mut u8_2: u8 = 4u8;
 1657|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1658|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1659|      1|    let mut u32_1: u32 = 100000000u32;
 1660|      1|    let mut u8_3: u8 = 2u8;
 1661|      1|    let mut u8_4: u8 = 24u8;
 1662|      1|    let mut u8_5: u8 = 2u8;
 1663|      1|    let mut time_3: crate::time::Time = crate::time::Time {hour: u8_5, minute: u8_4, second: u8_3, nanosecond: u32_1, padding: padding_0};
 1664|      1|    let mut duration_2: crate::duration::Duration = std::ops::Sub::sub(time_3, time_2);
 1665|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 1666|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1667|      1|    let mut u32_2: u32 = 100000000u32;
 1668|      1|    let mut u8_6: u8 = 5u8;
 1669|      1|    let mut u8_7: u8 = 35u8;
 1670|      1|    let mut u8_8: u8 = 70u8;
 1671|      1|    let mut time_4: crate::time::Time = crate::time::Time {hour: u8_8, minute: u8_7, second: u8_6, nanosecond: u32_2, padding: padding_1};
 1672|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
 1673|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1674|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 1675|      1|    let mut u16_1: u16 = 0u16;
 1676|      1|    let mut i32_2: i32 = -118i32;
 1677|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_1);
 1678|      1|    let mut tuple_0: (u8, u8, u8, u16) = crate::primitive_date_time::PrimitiveDateTime::as_hms_milli(primitivedatetime_0);
 1679|      1|    panic!("From RustyUnit with love");
 1680|       |}
 1681|       |
 1682|       |//#[no_coverage]
 1683|      1|#[test]
 1684|       |#[should_panic]
 1685|      1|#[timeout(3000)]
 1686|      1|fn rusty_test_1413() {
 1687|      1|    rusty_monitor::set_test_id(1413);
 1688|      1|    let mut i64_0: i64 = 0i64;
 1689|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1690|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1691|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1692|      1|    let mut i64_1: i64 = -176i64;
 1693|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1694|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1695|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_3);
 1696|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1697|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_2);
 1698|      1|    let mut i32_0: i32 = 167i32;
 1699|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
 1700|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1701|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_4, i32_0);
 1702|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
 1703|      1|    let mut i32_1: i32 = -34i32;
 1704|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1705|      1|    let mut i32_2: i32 = 291i32;
 1706|      1|    let mut i64_2: i64 = 1000000000i64;
 1707|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
 1708|      1|    let mut i32_3: i32 = 9i32;
 1709|      1|    let mut i64_3: i64 = 604800i64;
 1710|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_3, i32_3);
 1711|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_8, duration_7);
 1712|      1|    let mut u32_0: u32 = 10000000u32;
 1713|      1|    let mut u8_0: u8 = 61u8;
 1714|      1|    let mut u8_1: u8 = 29u8;
 1715|      1|    let mut u8_2: u8 = 9u8;
 1716|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1717|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1718|      1|    panic!("From RustyUnit with love");
 1719|       |}
 1720|       |
 1721|       |//#[no_coverage]
 1722|      1|#[test]
 1723|       |#[should_panic]
 1724|      1|#[timeout(3000)]
 1725|      1|fn rusty_test_2972() {
 1726|      1|    rusty_monitor::set_test_id(2972);
 1727|      1|    let mut i64_0: i64 = 0i64;
 1728|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1729|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1730|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_1);
 1731|      1|    let mut i64_1: i64 = -176i64;
 1732|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1733|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1734|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_3);
 1735|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1736|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_2);
 1737|      1|    let mut i32_0: i32 = -34i32;
 1738|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1739|      1|    let mut i32_1: i32 = 291i32;
 1740|      1|    let mut i64_2: i64 = 1000000000i64;
 1741|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_1);
 1742|      1|    let mut u32_0: u32 = 10000000u32;
 1743|      1|    let mut u8_0: u8 = 61u8;
 1744|      1|    let mut u8_1: u8 = 29u8;
 1745|      1|    let mut u8_2: u8 = 9u8;
 1746|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1747|      1|    let mut i8_0: i8 = 5i8;
 1748|      1|    let mut i8_1: i8 = -57i8;
 1749|      1|    let mut i8_2: i8 = 5i8;
 1750|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1751|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1752|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
 1753|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
 1754|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_1, time_2);
 1755|      1|    panic!("From RustyUnit with love");
 1756|       |}
 1757|       |
 1758|       |//#[no_coverage]
 1759|      1|#[test]
 1760|       |#[should_panic]
 1761|      1|#[timeout(3000)]
 1762|      1|fn rusty_test_7877() {
 1763|      1|    rusty_monitor::set_test_id(7877);
 1764|      1|    let mut i128_0: i128 = 0i128;
 1765|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1766|      1|    let mut i128_1: i128 = 9223372036854775807i128;
 1767|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
 1768|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_1, duration_0);
 1769|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1770|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1771|      1|    let mut u32_0: u32 = 79u32;
 1772|      1|    let mut u8_0: u8 = 6u8;
 1773|      1|    let mut u8_1: u8 = 60u8;
 1774|      1|    let mut u8_2: u8 = 8u8;
 1775|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1776|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_3);
 1777|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1778|      1|    let mut duration_4: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1779|      1|    let mut u16_0: u16 = 63u16;
 1780|      1|    let mut i32_0: i32 = -96i32;
 1781|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1782|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_4);
 1783|      1|    let mut u16_1: u16 = 365u16;
 1784|      1|    let mut i32_1: i32 = 381i32;
 1785|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_1);
 1786|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 1787|      1|    let mut month_0: month::Month = crate::month::Month::June;
 1788|      1|    panic!("From RustyUnit with love");
 1789|       |}
 1790|       |
 1791|       |//#[no_coverage]
 1792|      1|#[test]
 1793|       |#[should_panic]
 1794|      1|#[timeout(3000)]
 1795|      1|fn rusty_test_300() {
 1796|      1|    rusty_monitor::set_test_id(300);
 1797|      1|    let mut i64_0: i64 = 60i64;
 1798|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1799|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1800|      1|    let mut i32_0: i32 = 86399i32;
 1801|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1802|      1|    let mut i32_1: i32 = 52i32;
 1803|      1|    let mut i64_1: i64 = 2147483647i64;
 1804|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
 1805|      1|    let mut i32_2: i32 = 20i32;
 1806|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 1807|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_2);
 1808|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1809|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
 1810|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1811|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_1);
 1812|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1813|      1|    let mut u32_0: u32 = 10000u32;
 1814|      1|    let mut u8_0: u8 = 12u8;
 1815|      1|    let mut u8_1: u8 = 29u8;
 1816|      1|    let mut u8_2: u8 = 30u8;
 1817|      1|    let mut time_2: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1818|      1|    let mut i64_2: i64 = 1000000000i64;
 1819|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1820|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 1821|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1822|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_4, duration_3);
 1823|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1824|      1|    let mut u32_1: u32 = 31u32;
 1825|      1|    let mut u8_3: u8 = 9u8;
 1826|      1|    let mut u8_4: u8 = 4u8;
 1827|      1|    let mut u8_5: u8 = 52u8;
 1828|      1|    let mut time_3: crate::time::Time = crate::time::Time {hour: u8_5, minute: u8_4, second: u8_3, nanosecond: u32_1, padding: padding_1};
 1829|      1|    let mut time_4: crate::time::Time = std::ops::Sub::sub(time_3, duration_5);
 1830|      1|    let mut i32_3: i32 = 76i32;
 1831|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_3};
 1832|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_4);
 1833|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_2, time_2);
 1834|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_3);
 1835|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_1);
 1836|      1|    let mut tuple_0: (u8, u8, u8) = crate::offset_date_time::OffsetDateTime::to_hms(offsetdatetime_1);
 1837|      1|    panic!("From RustyUnit with love");
 1838|       |}
 1839|       |
 1840|       |//#[no_coverage]
 1841|      1|#[test]
 1842|       |#[should_panic]
 1843|      1|#[timeout(3000)]
 1844|      1|fn rusty_test_558() {
 1845|      1|    rusty_monitor::set_test_id(558);
 1846|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1847|      1|    let mut padding_0_ref_0: &time::Padding = &mut padding_0;
 1848|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1849|      1|    let mut padding_1_ref_0: &time::Padding = &mut padding_1;
 1850|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
 1851|      1|    let mut padding_2_ref_0: &time::Padding = &mut padding_2;
 1852|      1|    let mut padding_3: time::Padding = crate::time::Padding::Optimize;
 1853|      1|    let mut padding_3_ref_0: &time::Padding = &mut padding_3;
 1854|      1|    let mut padding_4: time::Padding = crate::time::Padding::Optimize;
 1855|      1|    let mut padding_4_ref_0: &time::Padding = &mut padding_4;
 1856|      1|    let mut padding_5: time::Padding = crate::time::Padding::Optimize;
 1857|      1|    let mut padding_5_ref_0: &time::Padding = &mut padding_5;
 1858|      1|    let mut padding_6: time::Padding = crate::time::Padding::Optimize;
 1859|      1|    let mut padding_6_ref_0: &time::Padding = &mut padding_6;
 1860|      1|    let mut padding_7: time::Padding = crate::time::Padding::Optimize;
 1861|      1|    let mut padding_7_ref_0: &time::Padding = &mut padding_7;
 1862|      1|    let mut padding_8: time::Padding = crate::time::Padding::Optimize;
 1863|      1|    let mut padding_8_ref_0: &time::Padding = &mut padding_8;
 1864|      1|    let mut padding_9: time::Padding = crate::time::Padding::Optimize;
 1865|      1|    let mut padding_9_ref_0: &time::Padding = &mut padding_9;
 1866|      1|    let mut padding_10: time::Padding = crate::time::Padding::Optimize;
 1867|      1|    let mut padding_10_ref_0: &time::Padding = &mut padding_10;
 1868|      1|    let mut padding_11: time::Padding = crate::time::Padding::Optimize;
 1869|      1|    let mut padding_11_ref_0: &time::Padding = &mut padding_11;
 1870|      1|    let mut padding_12: time::Padding = crate::time::Padding::Optimize;
 1871|      1|    let mut padding_12_ref_0: &time::Padding = &mut padding_12;
 1872|      1|    let mut padding_13: time::Padding = crate::time::Padding::Optimize;
 1873|      1|    let mut padding_13_ref_0: &time::Padding = &mut padding_13;
 1874|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_13_ref_0, padding_12_ref_0);
 1875|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_11_ref_0, padding_10_ref_0);
 1876|      1|    let mut option_2: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_9_ref_0, padding_8_ref_0);
 1877|      1|    let mut option_3: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_7_ref_0, padding_6_ref_0);
 1878|      1|    let mut option_4: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_5_ref_0, padding_4_ref_0);
 1879|      1|    let mut option_5: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_3_ref_0, padding_2_ref_0);
 1880|      1|    let mut option_6: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(padding_1_ref_0, padding_0_ref_0);
 1881|      1|    panic!("From RustyUnit with love");
 1882|       |}
 1883|       |
 1884|       |//#[no_coverage]
 1885|      1|#[test]
 1886|       |#[should_panic]
 1887|      1|#[timeout(3000)]
 1888|      1|fn rusty_test_5104() {
 1889|      1|    rusty_monitor::set_test_id(5104);
 1890|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Sunday;
 1891|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
 1892|      1|    let mut i64_0: i64 = 60i64;
 1893|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1894|      1|    let mut i64_1: i64 = 60i64;
 1895|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1896|      1|    let mut u16_0: u16 = 999u16;
 1897|      1|    let mut i32_0: i32 = -72i32;
 1898|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1899|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 1900|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1901|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_0);
 1902|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 1903|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 1904|      1|    let mut u32_0: u32 = 999999999u32;
 1905|      1|    let mut u8_0: u8 = 29u8;
 1906|      1|    let mut u8_1: u8 = 5u8;
 1907|      1|    let mut u8_2: u8 = 75u8;
 1908|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1909|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 1910|      1|    let mut i64_2: i64 = 2147483647i64;
 1911|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1912|      1|    let mut i128_0: i128 = 1000i128;
 1913|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1914|      1|    let mut i32_1: i32 = 32i32;
 1915|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
 1916|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1917|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_2, duration_3);
 1918|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 1919|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_2);
 1920|      1|    let mut time_3_ref_0: &crate::time::Time = &mut time_3;
 1921|      1|    let mut u32_1: u32 = 10000000u32;
 1922|      1|    let mut u8_3: u8 = 29u8;
 1923|      1|    let mut u8_4: u8 = 1u8;
 1924|      1|    let mut u8_5: u8 = 1u8;
 1925|      1|    let mut time_4: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1926|      1|    let mut time_4_ref_0: &crate::time::Time = &mut time_4;
 1927|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(time_4_ref_0, time_3_ref_0);
 1928|      1|    let mut bool_1: bool = std::cmp::PartialEq::ne(time_1_ref_0, time_0_ref_0);
 1929|      1|    let mut u8_6: u8 = crate::weekday::Weekday::number_from_monday(weekday_1);
 1930|      1|    panic!("From RustyUnit with love");
 1931|       |}
 1932|       |
 1933|       |//#[no_coverage]
 1934|      1|#[test]
 1935|       |#[should_panic]
 1936|      1|#[timeout(3000)]
 1937|      1|fn rusty_test_378() {
 1938|      1|    rusty_monitor::set_test_id(378);
 1939|      1|    let mut i32_0: i32 = 229i32;
 1940|      1|    let mut i64_0: i64 = 9223372036854775807i64;
 1941|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1942|      1|    let mut i64_1: i64 = 86400i64;
 1943|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 1944|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 1945|      1|    let mut i64_2: i64 = 2147483647i64;
 1946|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds(i64_2);
 1947|      1|    let mut i64_3: i64 = 1000000000i64;
 1948|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1949|      1|    let mut i32_1: i32 = -87i32;
 1950|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1951|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_4);
 1952|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1953|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_3);
 1954|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1955|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_2);
 1956|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 1957|      1|    let mut i32_2: i32 = 359i32;
 1958|      1|    let mut i64_4: i64 = 3600i64;
 1959|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
 1960|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_5, i32_2);
 1961|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1962|      1|    let mut u32_0: u32 = 999999999u32;
 1963|      1|    let mut u8_0: u8 = 24u8;
 1964|      1|    let mut u8_1: u8 = 53u8;
 1965|      1|    let mut u8_2: u8 = 56u8;
 1966|      1|    let mut time_1: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 1967|      1|    let mut time_2: crate::time::Time = std::ops::Sub::sub(time_1, duration_6);
 1968|      1|    let mut u32_1: u32 = 999999u32;
 1969|      1|    let mut u8_3: u8 = 6u8;
 1970|      1|    let mut u8_4: u8 = 0u8;
 1971|      1|    let mut u8_5: u8 = 29u8;
 1972|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1973|      1|    let mut tuple_0: (u8, u8, u8, u32) = crate::time::Time::as_hms_micro(time_3);
 1974|      1|    let mut tuple_1: (u8, u8, u8, u32) = crate::time::Time::as_hms_micro(time_2);
 1975|      1|    let mut tuple_2: (u8, u8, u8, u32) = crate::time::Time::as_hms_micro(time_0);
 1976|      1|    panic!("From RustyUnit with love");
 1977|       |}
 1978|       |
 1979|       |//#[no_coverage]
 1980|      1|#[test]
 1981|       |#[should_panic]
 1982|      1|#[timeout(3000)]
 1983|      1|fn rusty_test_5015() {
 1984|      1|    rusty_monitor::set_test_id(5015);
 1985|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1986|      1|    let mut padding_0_ref_0: &time::Padding = &mut padding_0;
 1987|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 1988|      1|    let mut padding_1_ref_0: &time::Padding = &mut padding_1;
 1989|      1|    let mut i32_0: i32 = 114i32;
 1990|      1|    let mut i32_1: i32 = 65i32;
 1991|      1|    let mut i64_0: i64 = 86400i64;
 1992|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1993|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1994|      1|    let mut i64_1: i64 = 0i64;
 1995|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
 1996|      1|    let mut padding_2: time::Padding = crate::time::Padding::Optimize;
 1997|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1998|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1999|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2000|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
 2001|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2002|      1|    let mut u16_0: u16 = 1u16;
 2003|      1|    let mut i32_2: i32 = 122i32;
 2004|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 2005|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
 2006|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(padding_1_ref_0, padding_0_ref_0);
 2007|      1|    panic!("From RustyUnit with love");
 2008|       |}
 2009|       |
 2010|       |//#[no_coverage]
 2011|      1|#[test]
 2012|       |#[should_panic]
 2013|      1|#[timeout(3000)]
 2014|      1|fn rusty_test_224() {
 2015|      1|    rusty_monitor::set_test_id(224);
 2016|      1|    let mut i32_0: i32 = 26i32;
 2017|      1|    let mut i32_1: i32 = 320i32;
 2018|      1|    let mut i64_0: i64 = 12i64;
 2019|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 2020|      1|    let mut i32_2: i32 = 3i32;
 2021|      1|    let mut u32_0: u32 = 13u32;
 2022|      1|    let mut u8_0: u8 = 52u8;
 2023|      1|    let mut u8_1: u8 = 30u8;
 2024|      1|    let mut u8_2: u8 = 60u8;
 2025|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2026|      1|    let mut i8_0: i8 = 59i8;
 2027|      1|    let mut i8_1: i8 = 59i8;
 2028|      1|    let mut i8_2: i8 = 2i8;
 2029|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2030|      1|    let mut i32_3: i32 = -149i32;
 2031|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_3};
 2032|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2033|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_0);
 2034|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 2035|      1|    let mut duration_1: crate::duration::Duration = std::ops::Sub::sub(time_1, time_0);
 2036|      1|    let mut i8_3: i8 = 112i8;
 2037|      1|    let mut i8_4: i8 = 59i8;
 2038|      1|    let mut i8_5: i8 = 2i8;
 2039|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2040|      1|    let mut u16_0: u16 = 10u16;
 2041|      1|    let mut i32_4: i32 = 102i32;
 2042|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_4, u16_0);
 2043|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 2044|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_1);
 2045|      1|    let mut time_2: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
 2046|      1|    let mut option_0: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_mul(duration_1, i32_2);
 2047|      1|    let mut option_1: std::option::Option<crate::duration::Duration> = crate::duration::Duration::checked_mul(duration_0, i32_0);
 2048|      1|    panic!("From RustyUnit with love");
 2049|       |}
 2050|       |
 2051|       |//#[no_coverage]
 2052|      1|#[test]
 2053|       |#[should_panic]
 2054|      1|#[timeout(3000)]
 2055|      1|fn rusty_test_4093() {
 2056|      1|    rusty_monitor::set_test_id(4093);
 2057|      1|    let mut i8_0: i8 = 4i8;
 2058|      1|    let mut i8_1: i8 = -8i8;
 2059|      1|    let mut i8_2: i8 = 2i8;
 2060|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2061|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2062|      1|    let mut u32_0: u32 = 0u32;
 2063|      1|    let mut u8_0: u8 = 53u8;
 2064|      1|    let mut u8_1: u8 = 4u8;
 2065|      1|    let mut u8_2: u8 = 9u8;
 2066|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 2067|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2068|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_0);
 2069|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 2070|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_0, utcoffset_0);
 2071|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2072|      1|    let mut i32_0: i32 = 122i32;
 2073|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 2074|      1|    let mut i8_3: i8 = 0i8;
 2075|      1|    let mut i8_4: i8 = 5i8;
 2076|      1|    let mut i8_5: i8 = 2i8;
 2077|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2078|      1|    let mut i32_1: i32 = 257i32;
 2079|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 2080|      1|    let mut u32_1: u32 = 1000000u32;
 2081|      1|    let mut u8_3: u8 = 3u8;
 2082|      1|    let mut u8_4: u8 = 14u8;
 2083|      1|    let mut u8_5: u8 = 6u8;
 2084|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2085|      1|    let mut u16_0: u16 = 367u16;
 2086|      1|    let mut i32_2: i32 = 263i32;
 2087|      1|    let mut date_3: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
 2088|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_3, time_1);
 2089|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_2, date_2);
 2090|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_3, offset: utcoffset_1};
 2091|      1|    let mut u16_1: u16 = crate::primitive_date_time::PrimitiveDateTime::millisecond(primitivedatetime_1);
 2092|      1|    let mut u8_6: u8 = crate::offset_date_time::OffsetDateTime::sunday_based_week(offsetdatetime_2);
 2093|      1|    panic!("From RustyUnit with love");
 2094|       |}
 2095|       |
 2096|       |//#[no_coverage]
 2097|      1|#[test]
 2098|       |#[should_panic]
 2099|      1|#[timeout(3000)]
 2100|      1|fn rusty_test_4978() {
 2101|      1|    rusty_monitor::set_test_id(4978);
 2102|      1|    let mut i8_0: i8 = -84i8;
 2103|      1|    let mut i8_1: i8 = 1i8;
 2104|      1|    let mut i8_2: i8 = 8i8;
 2105|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2106|      1|    let mut i8_3: i8 = 127i8;
 2107|      1|    let mut i8_4: i8 = 4i8;
 2108|      1|    let mut i8_5: i8 = -15i8;
 2109|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2110|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2111|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2112|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 2113|      1|    let mut i128_0: i128 = 9223372036854775807i128;
 2114|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 2115|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 2116|      1|    let mut u32_0: u32 = 49u32;
 2117|      1|    let mut u8_0: u8 = 31u8;
 2118|      1|    let mut u8_1: u8 = 8u8;
 2119|      1|    let mut u8_2: u8 = 12u8;
 2120|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2121|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_3);
 2122|      1|    let mut i32_0: i32 = 257i32;
 2123|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2124|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_1};
 2125|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_1);
 2126|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_1);
 2127|      1|    let mut i64_0: i64 = 2440588i64;
 2128|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 2129|      1|    let mut duration_5: std::time::Duration = crate::duration::Duration::abs_std(duration_4);
 2130|      1|    let mut u32_1: u32 = 100000000u32;
 2131|      1|    let mut u8_3: u8 = 88u8;
 2132|      1|    let mut u8_4: u8 = 52u8;
 2133|      1|    let mut u8_5: u8 = 24u8;
 2134|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2135|      1|    let mut time_3: crate::time::Time = std::ops::Add::add(time_2, duration_5);
 2136|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2137|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_1, time_3);
 2138|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 2139|      1|    let mut i64_1: i64 = 175i64;
 2140|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 2141|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2142|      1|    let mut u32_2: u32 = 100000000u32;
 2143|      1|    let mut u8_6: u8 = 6u8;
 2144|      1|    let mut u8_7: u8 = 0u8;
 2145|      1|    let mut u8_8: u8 = 53u8;
 2146|      1|    let mut time_4: crate::time::Time = crate::time::Time {hour: u8_8, minute: u8_7, second: u8_6, nanosecond: u32_2, padding: padding_0};
 2147|      1|    let mut time_5: crate::time::Time = std::ops::Sub::sub(time_4, duration_6);
 2148|      1|    let mut i32_1: i32 = 240i32;
 2149|      1|    let mut i64_2: i64 = 1000000000i64;
 2150|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::days(i64_2);
 2151|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_7, i32_1);
 2152|      1|    let mut i32_2: i32 = -56i32;
 2153|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 2154|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_8);
 2155|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_5};
 2156|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::utc_to_offset(primitivedatetime_2, utcoffset_2);
 2157|      1|    let mut i8_6: i8 = 59i8;
 2158|      1|    let mut i8_7: i8 = 5i8;
 2159|      1|    let mut i8_8: i8 = 6i8;
 2160|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 2161|      1|    let mut i8_9: i8 = 101i8;
 2162|      1|    let mut i8_10: i8 = 3i8;
 2163|      1|    let mut i8_11: i8 = 23i8;
 2164|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
 2165|      1|    let mut u32_3: u32 = 2u32;
 2166|      1|    let mut u8_9: u8 = 8u8;
 2167|      1|    let mut u8_10: u8 = 3u8;
 2168|      1|    let mut u8_11: u8 = 23u8;
 2169|      1|    let mut time_6: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_11, u8_10, u8_9, u32_3);
 2170|      1|    let mut u32_4: u32 = 10000u32;
 2171|      1|    let mut u8_12: u8 = 5u8;
 2172|      1|    let mut u8_13: u8 = 2u8;
 2173|      1|    let mut u8_14: u8 = 0u8;
 2174|      1|    let mut time_7: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_14, u8_13, u8_12, u32_4);
 2175|      1|    let mut u32_5: u32 = 999999u32;
 2176|      1|    let mut u8_15: u8 = 28u8;
 2177|      1|    let mut u8_16: u8 = 1u8;
 2178|      1|    let mut u8_17: u8 = 11u8;
 2179|      1|    let mut time_8: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_17, u8_16, u8_15, u32_5);
 2180|      1|    let mut padding_1: time::Padding = crate::time::Padding::Optimize;
 2181|      1|    let mut u32_6: u32 = 100u32;
 2182|      1|    let mut u8_18: u8 = 19u8;
 2183|      1|    let mut u8_19: u8 = 1u8;
 2184|      1|    let mut u8_20: u8 = 2u8;
 2185|      1|    let mut time_9: crate::time::Time = crate::time::Time {hour: u8_20, minute: u8_19, second: u8_18, nanosecond: u32_6, padding: padding_1};
 2186|      1|    let mut duration_9: crate::duration::Duration = std::ops::Sub::sub(time_9, time_6);
 2187|      1|    let mut i32_3: i32 = 100i32;
 2188|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_3};
 2189|      1|    let mut primitivedatetime_4: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
 2190|      1|    let mut primitivedatetime_5: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_4, duration_9);
 2191|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_5, offset: utcoffset_4};
 2192|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
 2193|      1|    let mut i64_3: i64 = 253402300799i64;
 2194|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 2195|      1|    let mut i64_4: i64 = 12i64;
 2196|      1|    let mut duration_11: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
 2197|      1|    let mut duration_12: crate::duration::Duration = crate::duration::Duration::abs(duration_11);
 2198|      1|    let mut duration_13: std::time::Duration = crate::duration::Duration::abs_std(duration_12);
 2199|      1|    let mut u32_7: u32 = 1000000000u32;
 2200|      1|    let mut u8_21: u8 = 9u8;
 2201|      1|    let mut u8_22: u8 = 9u8;
 2202|      1|    let mut u8_23: u8 = 96u8;
 2203|      1|    let mut time_10: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_23, u8_22, u8_21, u32_7);
 2204|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 2205|      1|    let mut duration_14: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 2206|      1|    let mut duration_15: std::time::Duration = crate::duration::Duration::abs_std(duration_14);
 2207|      1|    let mut u32_8: u32 = 1000000000u32;
 2208|      1|    let mut u8_24: u8 = 9u8;
 2209|      1|    let mut u8_25: u8 = 8u8;
 2210|      1|    let mut u8_26: u8 = 9u8;
 2211|      1|    let mut time_11: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_26, u8_25, u8_24, u32_8);
 2212|      1|    let mut time_12: crate::time::Time = std::ops::Add::add(time_11, duration_15);
 2213|      1|    let mut u8_27: u8 = crate::time::Time::second(time_12);
 2214|      1|    let mut time_13: crate::time::Time = std::ops::Sub::sub(time_10, duration_13);
 2215|      1|    let mut time_13_ref_0: &crate::time::Time = &mut time_13;
 2216|      1|    let mut time_14: crate::time::Time = std::clone::Clone::clone(time_13_ref_0);
 2217|      1|    let mut i32_4: i32 = crate::duration::Duration::subsec_microseconds(duration_10);
 2218|      1|    let mut u16_0: u16 = crate::offset_date_time::OffsetDateTime::ordinal(offsetdatetime_4);
 2219|      1|    let mut month_0: month::Month = crate::month::Month::December;
 2220|      1|    let mut month_1: month::Month = crate::primitive_date_time::PrimitiveDateTime::month(primitivedatetime_3);
 2221|      1|    panic!("From RustyUnit with love");
 2222|       |}
 2223|       |
 2224|       |//#[no_coverage]
 2225|      1|#[test]
 2226|       |#[should_panic]
 2227|      1|#[timeout(3000)]
 2228|      1|fn rusty_test_535() {
 2229|      1|    rusty_monitor::set_test_id(535);
 2230|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2231|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2232|      1|    let mut i64_0: i64 = 24i64;
 2233|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 2234|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
 2235|      1|    let mut u32_0: u32 = 10000u32;
 2236|      1|    let mut u8_0: u8 = 49u8;
 2237|      1|    let mut u8_1: u8 = 4u8;
 2238|      1|    let mut u8_2: u8 = 13u8;
 2239|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 2240|      1|    let mut time_1: crate::time::Time = std::ops::Sub::sub(time_0, duration_2);
 2241|      1|    let mut i32_0: i32 = 201i32;
 2242|      1|    let mut i64_1: i64 = 9223372036854775807i64;
 2243|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
 2244|      1|    let mut u32_1: u32 = 1000000000u32;
 2245|      1|    let mut u8_3: u8 = 8u8;
 2246|      1|    let mut u8_4: u8 = 12u8;
 2247|      1|    let mut u8_5: u8 = 5u8;
 2248|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 2249|      1|    let mut u16_0: u16 = 10u16;
 2250|      1|    let mut i32_1: i32 = 37i32;
 2251|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 2252|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_2};
 2253|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_3);
 2254|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 2255|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_1);
 2256|      1|    let mut offsetdatetime_1_ref_0: &crate::offset_date_time::OffsetDateTime = &mut offsetdatetime_1;
 2257|      1|    panic!("From RustyUnit with love");
 2258|       |}
 2259|       |
 2260|       |//#[no_coverage]
 2261|      1|#[test]
 2262|       |#[should_panic]
 2263|      1|#[timeout(3000)]
 2264|      1|fn rusty_test_141() {
 2265|      1|    rusty_monitor::set_test_id(141);
 2266|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 2267|      1|    let mut u32_0: u32 = 1000000000u32;
 2268|      1|    let mut u8_0: u8 = 28u8;
 2269|      1|    let mut u8_1: u8 = 30u8;
 2270|      1|    let mut u8_2: u8 = 70u8;
 2271|      1|    let mut time_0: crate::time::Time = crate::time::Time {hour: u8_2, minute: u8_1, second: u8_0, nanosecond: u32_0, padding: padding_0};
 2272|      1|    let mut time_0_ref_0: &crate::time::Time = &mut time_0;
 2273|      1|    let mut i64_0: i64 = 1i64;
 2274|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
 2275|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 2276|      1|    let mut i8_0: i8 = -6i8;
 2277|      1|    let mut i8_1: i8 = 1i8;
 2278|      1|    let mut i8_2: i8 = 23i8;
 2279|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2280|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2281|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_0);
 2282|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
 2283|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 2284|      1|    let mut i8_3: i8 = 0i8;
 2285|      1|    let mut i8_4: i8 = 6i8;
 2286|      1|    let mut i8_5: i8 = 60i8;
 2287|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 2288|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2289|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_1);
 2290|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_3);
 2291|      1|    let mut i32_0: i32 = 224i32;
 2292|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_0};
 2293|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_2, time_1);
 2294|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_1);
 2295|      1|    let mut u8_3: u8 = crate::primitive_date_time::PrimitiveDateTime::minute(primitivedatetime_1);
 2296|      1|    let mut time_2: crate::time::Time = std::clone::Clone::clone(time_0_ref_0);
 2297|      1|    panic!("From RustyUnit with love");
 2298|       |}
 2299|       |
 2300|       |//#[no_coverage]
 2301|      1|#[test]
 2302|       |#[should_panic]
 2303|      1|#[timeout(3000)]
 2304|      1|fn rusty_test_737() {
 2305|      1|    rusty_monitor::set_test_id(737);
 2306|      1|    let mut i64_0: i64 = 2440588i64;
 2307|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 2308|      1|    let mut i64_1: i64 = 253402300799i64;
 2309|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::days(i64_1);
 2310|      1|    let mut i32_0: i32 = 60i32;
 2311|      1|    let mut i64_2: i64 = -43i64;
 2312|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_2, i32_0);
 2313|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
 2314|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 2315|      1|    let mut i64_3: i64 = 1000000000i64;
 2316|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
 2317|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 2318|      1|    let mut duration_6: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 2319|      1|    let mut i32_1: i32 = 376i32;
 2320|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 2321|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2322|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_0, duration_6);
 2323|      1|    let mut time_0: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_1);
 2324|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_5);
 2325|      1|    let mut u32_0: u32 = 999999999u32;
 2326|      1|    let mut u8_0: u8 = 85u8;
 2327|      1|    let mut u8_1: u8 = 2u8;
 2328|      1|    let mut u8_2: u8 = 28u8;
 2329|      1|    let mut i32_2: i32 = 381i32;
 2330|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
 2331|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_nano(date_1, u8_2, u8_1, u8_0, u32_0);
 2332|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = std::result::Result::unwrap(result_0);
 2333|      1|    let mut tuple_0: (bool, crate::time::Time) = crate::time::Time::adjusting_sub_std(time_1, duration_4);
 2334|      1|    let mut i32_3: i32 = crate::duration::Duration::subsec_microseconds(duration_1);
 2335|      1|    let mut bool_0: bool = crate::duration::Duration::is_positive(duration_0);
 2336|      1|    panic!("From RustyUnit with love");
 2337|       |}
 2338|       |
 2339|       |//#[no_coverage]
 2340|      1|#[test]
 2341|       |#[should_panic]
 2342|      1|#[timeout(3000)]
 2343|      1|fn rusty_test_7225() {
 2344|      1|    rusty_monitor::set_test_id(7225);
 2345|      1|    let mut i64_0: i64 = 12i64;
 2346|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 2347|      1|    let mut i64_1: i64 = 12i64;
 2348|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
 2349|      1|    let mut i8_0: i8 = 1i8;
 2350|      1|    let mut i8_1: i8 = 3i8;
 2351|      1|    let mut i8_2: i8 = 5i8;
 2352|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 2353|      1|    let mut i64_2: i64 = 2440588i64;
 2354|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 2355|      1|    let mut i32_0: i32 = 1i32;
 2356|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 2357|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
 2358|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_2);
 2359|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 2360|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_1);
 2361|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
 2362|      1|    let mut time_1: crate::time::Time = std::ops::Add::add(time_0, duration_0);
 2363|      1|    let mut time_1_ref_0: &crate::time::Time = &mut time_1;
 2364|      1|    let mut i64_3: i64 = -73i64;
 2365|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::minutes(i64_3);
 2366|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
 2367|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2368|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 2369|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 2370|      1|    panic!("From RustyUnit with love");
 2371|       |}
 2372|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/utc_offset.rs:
    1|       |//! The [`UtcOffset`] struct and its associated `impl`s.
    2|       |
    3|       |use core::fmt;
    4|       |use core::ops::Neg;
    5|       |#[cfg(feature = "formatting")]
    6|       |use std::io;
    7|       |
    8|       |use crate::error;
    9|       |#[cfg(feature = "formatting")]
   10|       |use crate::formatting::Formattable;
   11|       |#[cfg(feature = "parsing")]
   12|       |use crate::parsing::Parsable;
   13|       |#[cfg(feature = "local-offset")]
   14|       |use crate::sys::local_offset_at;
   15|       |#[cfg(feature = "local-offset")]
   16|       |use crate::OffsetDateTime;
   17|       |
   18|       |/// An offset from UTC.
   19|       |///
   20|       |/// This struct can store values up to ±23:59:59. If you need support outside this range, please
   21|       |/// file an issue with your use case.
   22|       |// All three components _must_ have the same sign.
   23|      0|#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
   24|       |pub struct UtcOffset {
   25|       |    #[allow(clippy::missing_docs_in_private_items)]
   26|       |    hours: i8,
   27|       |    #[allow(clippy::missing_docs_in_private_items)]
   28|       |    minutes: i8,
   29|       |    #[allow(clippy::missing_docs_in_private_items)]
   30|       |    seconds: i8,
   31|       |}
   32|       |
   33|       |impl UtcOffset {
   34|       |    /// A `UtcOffset` that is UTC.
   35|       |    ///
   36|       |    /// ```rust
   37|       |    /// # use time::{UtcOffset, macros::offset};
   38|       |    /// assert_eq!(UtcOffset::UTC, offset!(UTC));
   39|       |    /// ```
   40|       |    pub const UTC: Self = Self::__from_hms_unchecked(0, 0, 0);
   41|       |
   42|       |    // region: constructors
   43|       |    /// Create a `UtcOffset` representing an offset of the hours, minutes, and seconds provided, the
   44|       |    /// validity of which must be guaranteed by the caller. All three parameters must have the same
   45|       |    /// sign.
   46|       |    #[doc(hidden)]
   47|      0|    pub const fn __from_hms_unchecked(hours: i8, minutes: i8, seconds: i8) -> Self {
   48|      0|        Self {
   49|      0|            hours,
   50|      0|            minutes,
   51|      0|            seconds,
   52|      0|        }
   53|      0|    }
   54|       |
   55|       |    /// Create a `UtcOffset` representing an offset by the number of hours, minutes, and seconds
   56|       |    /// provided.
   57|       |    ///
   58|       |    /// The sign of all three components should match. If they do not, all smaller components will
   59|       |    /// have their signs flipped.
   60|       |    ///
   61|       |    /// ```rust
   62|       |    /// # use time::UtcOffset;
   63|       |    /// assert_eq!(UtcOffset::from_hms(1, 2, 3)?.as_hms(), (1, 2, 3));
   64|       |    /// assert_eq!(UtcOffset::from_hms(1, -2, -3)?.as_hms(), (1, 2, 3));
   65|       |    /// # Ok::<_, time::Error>(())
   66|       |    /// ```
   67|      0|    pub const fn from_hms(
   68|      0|        hours: i8,
   69|      0|        mut minutes: i8,
   70|      0|        mut seconds: i8,
   71|      0|    ) -> Result<Self, error::ComponentRange> {
   72|      0|        ensure_value_in_range!(hours in -23 => 23);
   73|      0|        ensure_value_in_range!(minutes in -59 => 59);
   74|      0|        ensure_value_in_range!(seconds in -59 => 59);
   75|       |
   76|      0|        if (hours > 0 && minutes < 0) || (hours < 0 && minutes > 0) {
   77|      0|            minutes *= -1;
   78|      0|        }
   79|      0|        if (hours > 0 && seconds < 0)
   80|      0|            || (hours < 0 && seconds > 0)
   81|      0|            || (minutes > 0 && seconds < 0)
   82|      0|            || (minutes < 0 && seconds > 0)
   83|      0|        {
   84|      0|            seconds *= -1;
   85|      0|        }
   86|       |
   87|      0|        Ok(Self::__from_hms_unchecked(hours, minutes, seconds))
   88|      0|    }
   89|       |
   90|       |    /// Create a `UtcOffset` representing an offset by the number of seconds provided.
   91|       |    ///
   92|       |    /// ```rust
   93|       |    /// # use time::UtcOffset;
   94|       |    /// assert_eq!(UtcOffset::from_whole_seconds(3_723)?.as_hms(), (1, 2, 3));
   95|       |    /// # Ok::<_, time::Error>(())
   96|       |    /// ```
   97|      0|    pub const fn from_whole_seconds(seconds: i32) -> Result<Self, error::ComponentRange> {
   98|      0|        ensure_value_in_range!(seconds in -86_399 => 86_399);
   99|       |
  100|      0|        Ok(Self::__from_hms_unchecked(
  101|      0|            (seconds / 3_600) as _,
  102|      0|            ((seconds / 60) % 60) as _,
  103|      0|            (seconds % 60) as _,
  104|      0|        ))
  105|      0|    }
  106|       |    // endregion constructors
  107|       |
  108|       |    // region: getters
  109|       |    /// Obtain the UTC offset as its hours, minutes, and seconds. The sign of all three components
  110|       |    /// will always match. A positive value indicates an offset to the east; a negative to the west.
  111|       |    ///
  112|       |    /// ```rust
  113|       |    /// # use time::macros::offset;
  114|       |    /// assert_eq!(offset!(+1:02:03).as_hms(), (1, 2, 3));
  115|       |    /// assert_eq!(offset!(-1:02:03).as_hms(), (-1, -2, -3));
  116|       |    /// ```
  117|      0|    pub const fn as_hms(self) -> (i8, i8, i8) {
  118|      0|        (self.hours, self.minutes, self.seconds)
  119|      0|    }
  120|       |
  121|       |    /// Obtain the number of whole hours the offset is from UTC. A positive value indicates an
  122|       |    /// offset to the east; a negative to the west.
  123|       |    ///
  124|       |    /// ```rust
  125|       |    /// # use time::macros::offset;
  126|       |    /// assert_eq!(offset!(+1:02:03).whole_hours(), 1);
  127|       |    /// assert_eq!(offset!(-1:02:03).whole_hours(), -1);
  128|       |    /// ```
  129|      0|    pub const fn whole_hours(self) -> i8 {
  130|      0|        self.hours
  131|      0|    }
  132|       |
  133|       |    /// Obtain the number of whole minutes the offset is from UTC. A positive value indicates an
  134|       |    /// offset to the east; a negative to the west.
  135|       |    ///
  136|       |    /// ```rust
  137|       |    /// # use time::macros::offset;
  138|       |    /// assert_eq!(offset!(+1:02:03).whole_minutes(), 62);
  139|       |    /// assert_eq!(offset!(-1:02:03).whole_minutes(), -62);
  140|       |    /// ```
  141|      0|    pub const fn whole_minutes(self) -> i16 {
  142|      0|        self.hours as i16 * 60 + self.minutes as i16
  143|      0|    }
  144|       |
  145|       |    /// Obtain the number of minutes past the hour the offset is from UTC. A positive value
  146|       |    /// indicates an offset to the east; a negative to the west.
  147|       |    ///
  148|       |    /// ```rust
  149|       |    /// # use time::macros::offset;
  150|       |    /// assert_eq!(offset!(+1:02:03).minutes_past_hour(), 2);
  151|       |    /// assert_eq!(offset!(-1:02:03).minutes_past_hour(), -2);
  152|       |    /// ```
  153|      0|    pub const fn minutes_past_hour(self) -> i8 {
  154|      0|        self.minutes
  155|      0|    }
  156|       |
  157|       |    /// Obtain the number of whole seconds the offset is from UTC. A positive value indicates an
  158|       |    /// offset to the east; a negative to the west.
  159|       |    ///
  160|       |    /// ```rust
  161|       |    /// # use time::macros::offset;
  162|       |    /// assert_eq!(offset!(+1:02:03).whole_seconds(), 3723);
  163|       |    /// assert_eq!(offset!(-1:02:03).whole_seconds(), -3723);
  164|       |    /// ```
  165|       |    // This may be useful for anyone manually implementing arithmetic, as it
  166|       |    // would let them construct a `Duration` directly.
  167|      0|    pub const fn whole_seconds(self) -> i32 {
  168|      0|        self.hours as i32 * 3_600 + self.minutes as i32 * 60 + self.seconds as i32
  169|      0|    }
  170|       |
  171|       |    /// Obtain the number of seconds past the minute the offset is from UTC. A positive value
  172|       |    /// indicates an offset to the east; a negative to the west.
  173|       |    ///
  174|       |    /// ```rust
  175|       |    /// # use time::macros::offset;
  176|       |    /// assert_eq!(offset!(+1:02:03).seconds_past_minute(), 3);
  177|       |    /// assert_eq!(offset!(-1:02:03).seconds_past_minute(), -3);
  178|       |    /// ```
  179|      0|    pub const fn seconds_past_minute(self) -> i8 {
  180|      0|        self.seconds
  181|      0|    }
  182|       |    // endregion getters
  183|       |
  184|       |    // region: is_{sign}
  185|       |    /// Check if the offset is exactly UTC.
  186|       |    ///
  187|       |    ///
  188|       |    /// ```rust
  189|       |    /// # use time::macros::offset;
  190|       |    /// assert!(!offset!(+1:02:03).is_utc());
  191|       |    /// assert!(!offset!(-1:02:03).is_utc());
  192|       |    /// assert!(offset!(UTC).is_utc());
  193|       |    /// ```
  194|      0|    pub const fn is_utc(self) -> bool {
  195|      0|        self.hours == 0 && self.minutes == 0 && self.seconds == 0
  196|      0|    }
  197|       |
  198|       |    /// Check if the offset is positive, or east of UTC.
  199|       |    ///
  200|       |    /// ```rust
  201|       |    /// # use time::macros::offset;
  202|       |    /// assert!(offset!(+1:02:03).is_positive());
  203|       |    /// assert!(!offset!(-1:02:03).is_positive());
  204|       |    /// assert!(!offset!(UTC).is_positive());
  205|       |    /// ```
  206|      0|    pub const fn is_positive(self) -> bool {
  207|      0|        self.hours > 0 || self.minutes > 0 || self.seconds > 0
  208|      0|    }
  209|       |
  210|       |    /// Check if the offset is negative, or west of UTC.
  211|       |    ///
  212|       |    /// ```rust
  213|       |    /// # use time::macros::offset;
  214|       |    /// assert!(!offset!(+1:02:03).is_negative());
  215|       |    /// assert!(offset!(-1:02:03).is_negative());
  216|       |    /// assert!(!offset!(UTC).is_negative());
  217|       |    /// ```
  218|      0|    pub const fn is_negative(self) -> bool {
  219|      0|        self.hours < 0 || self.minutes < 0 || self.seconds < 0
  220|      0|    }
  221|       |    // endregion is_{sign}
  222|       |
  223|       |    // region: local offset
  224|       |    /// Attempt to obtain the system's UTC offset at a known moment in time. If the offset cannot be
  225|       |    /// determined, an error is returned.
  226|       |    ///
  227|       |    /// ```rust
  228|       |    /// # use time::{UtcOffset, OffsetDateTime};
  229|       |    /// let local_offset = UtcOffset::local_offset_at(OffsetDateTime::UNIX_EPOCH);
  230|       |    /// # if false {
  231|       |    /// assert!(local_offset.is_ok());
  232|       |    /// # }
  233|       |    /// ```
  234|       |    #[cfg(feature = "local-offset")]
  235|       |    pub fn local_offset_at(datetime: OffsetDateTime) -> Result<Self, error::IndeterminateOffset> {
  236|       |        local_offset_at(datetime).ok_or(error::IndeterminateOffset)
  237|       |    }
  238|       |
  239|       |    /// Attempt to obtain the system's current UTC offset. If the offset cannot be determined, an
  240|       |    /// error is returned.
  241|       |    ///
  242|       |    /// ```rust
  243|       |    /// # use time::UtcOffset;
  244|       |    /// let local_offset = UtcOffset::current_local_offset();
  245|       |    /// # if false {
  246|       |    /// assert!(local_offset.is_ok());
  247|       |    /// # }
  248|       |    /// ```
  249|       |    #[cfg(feature = "local-offset")]
  250|       |    pub fn current_local_offset() -> Result<Self, error::IndeterminateOffset> {
  251|       |        let now = OffsetDateTime::now_utc();
  252|       |        local_offset_at(now).ok_or(error::IndeterminateOffset)
  253|       |    }
  254|       |    // endregion: local offset
  255|       |}
  256|       |
  257|       |// region: formatting & parsing
  258|       |#[cfg(feature = "formatting")]
  259|       |impl UtcOffset {
  260|       |    /// Format the `UtcOffset` using the provided [format description](crate::format_description).
  261|       |    pub fn format_into(
  262|       |        self,
  263|       |        output: &mut impl io::Write,
  264|       |        format: &(impl Formattable + ?Sized),
  265|       |    ) -> Result<usize, error::Format> {
  266|       |        format.format_into(output, None, None, Some(self))
  267|       |    }
  268|       |
  269|       |    /// Format the `UtcOffset` using the provided [format description](crate::format_description).
  270|       |    ///
  271|       |    /// ```rust
  272|       |    /// # use time::{format_description, macros::offset};
  273|       |    /// let format = format_description::parse("[offset_hour sign:mandatory]:[offset_minute]")?;
  274|       |    /// assert_eq!(offset!(+1).format(&format)?, "+01:00");
  275|       |    /// # Ok::<_, time::Error>(())
  276|       |    /// ```
  277|       |    pub fn format(self, format: &(impl Formattable + ?Sized)) -> Result<String, error::Format> {
  278|       |        format.format(None, None, Some(self))
  279|       |    }
  280|       |}
  281|       |
  282|       |#[cfg(feature = "parsing")]
  283|       |impl UtcOffset {
  284|       |    /// Parse a `UtcOffset` from the input using the provided [format
  285|       |    /// description](crate::format_description).
  286|       |    ///
  287|       |    /// ```rust
  288|       |    /// # use time::{format_description, macros::offset, UtcOffset};
  289|       |    /// let format = format_description::parse("[offset_hour]:[offset_minute]")?;
  290|       |    /// assert_eq!(UtcOffset::parse("-03:42", &format)?, offset!(-3:42));
  291|       |    /// # Ok::<_, time::Error>(())
  292|       |    /// ```
  293|       |    pub fn parse(
  294|       |        input: &str,
  295|       |        description: &(impl Parsable + ?Sized),
  296|       |    ) -> Result<Self, error::Parse> {
  297|       |        description.parse_offset(input.as_bytes())
  298|       |    }
  299|       |}
  300|       |
  301|       |impl fmt::Display for UtcOffset {
  302|      0|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  303|      0|        write!(
  304|      0|            f,
  305|      0|            "{}{:02}:{:02}:{:02}",
  306|      0|            if self.is_negative() { '-' } else { '+' },
  307|      0|            self.hours.abs(),
  308|      0|            self.minutes.abs(),
  309|      0|            self.seconds.abs()
  310|      0|        )
  311|      0|    }
  312|       |}
  313|       |// endregion formatting & parsing
  314|       |
  315|       |impl Neg for UtcOffset {
  316|       |    type Output = Self;
  317|       |
  318|      0|    fn neg(self) -> Self::Output {
  319|      0|        Self::__from_hms_unchecked(-self.hours, -self.minutes, -self.seconds)
  320|      0|    }
  321|       |}
  322|       |
  323|       |#[cfg(test)]
  324|       |mod rusty_tests {
  325|       |	use crate::*;
  326|       |	use std::cmp::Ord;
  327|       |	use std::cmp::PartialEq;
  328|       |	use std::clone::Clone;
  329|       |	use std::cmp::PartialOrd;
  330|       |	use std::ops::Neg;
  331|       |	use std::cmp::Eq;
  332|       |//#[no_coverage]
  333|      1|#[test]
  334|       |#[should_panic]
  335|      1|#[timeout(3000)]
  336|      1|fn rusty_test_696() {
  337|      1|    rusty_monitor::set_test_id(696);
  338|      1|    let mut i8_0: i8 = 127i8;
  339|      1|    let mut i8_1: i8 = 1i8;
  340|      1|    let mut i8_2: i8 = 3i8;
  341|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  342|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  343|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  344|      1|    let mut i32_0: i32 = 353i32;
  345|      1|    let mut i64_0: i64 = 604800i64;
  346|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
  347|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_1, i32_0);
  348|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  349|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  350|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  351|      1|    let mut i8_3: i8 = 59i8;
  352|      1|    let mut i8_4: i8 = 5i8;
  353|      1|    let mut i8_5: i8 = 6i8;
  354|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  355|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
  356|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
  357|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
  358|      1|    panic!("From RustyUnit with love");
  359|       |}
  360|       |
  361|       |//#[no_coverage]
  362|      1|#[test]
  363|       |#[should_panic]
  364|      1|#[timeout(3000)]
  365|      1|fn rusty_test_54() {
  366|      1|    rusty_monitor::set_test_id(54);
  367|      1|    let mut i32_0: i32 = 212i32;
  368|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  369|      1|    let mut u32_0: u32 = 999999999u32;
  370|      1|    let mut u8_0: u8 = 11u8;
  371|      1|    let mut u8_1: u8 = 10u8;
  372|      1|    let mut u8_2: u8 = 30u8;
  373|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  374|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  375|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
  376|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  377|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
  378|      1|    let mut i128_0: i128 = 1000i128;
  379|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  380|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  381|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_2, duration_0);
  382|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  383|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
  384|      1|    let mut i64_0: i64 = 60i64;
  385|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  386|      1|    let mut i64_1: i64 = 86400i64;
  387|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
  388|      1|    let mut i64_2: i64 = -70i64;
  389|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
  390|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  391|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_4, duration_3);
  392|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_5);
  393|      1|    let mut i32_1: i32 = 167i32;
  394|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
  395|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
  396|      1|    let mut i8_0: i8 = 23i8;
  397|      1|    let mut i8_1: i8 = 127i8;
  398|      1|    let mut i8_2: i8 = 59i8;
  399|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  400|      1|    let mut i8_3: i8 = crate::utc_offset::UtcOffset::seconds_past_minute(utcoffset_4);
  401|      1|    let mut u8_3: u8 = crate::weekday::Weekday::number_from_monday(weekday_1);
  402|      1|    let mut bool_0: bool = crate::util::is_leap_year(i32_1);
  403|      1|    let mut u8_4: u8 = crate::date::Date::monday_based_week(date_0);
  404|      1|    panic!("From RustyUnit with love");
  405|       |}
  406|       |
  407|       |//#[no_coverage]
  408|      1|#[test]
  409|       |#[should_panic]
  410|      1|#[timeout(3000)]
  411|      1|fn rusty_test_4309() {
  412|      1|    rusty_monitor::set_test_id(4309);
  413|      1|    let mut i64_0: i64 = 253402300799i64;
  414|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::minutes(i64_0);
  415|      1|    let mut i64_1: i64 = 1000000000i64;
  416|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  417|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_1, duration_0);
  418|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  419|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  420|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  421|      1|    let mut i32_0: i32 = -72i32;
  422|      1|    let mut i64_2: i64 = 253402300799i64;
  423|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_2);
  424|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_mul(duration_3, i32_0);
  425|      1|    let mut u16_0: u16 = 367u16;
  426|      1|    let mut i32_1: i32 = 15i32;
  427|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  428|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_4);
  429|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_1, time: time_0};
  430|      1|    let mut i8_0: i8 = -99i8;
  431|      1|    let mut i8_1: i8 = 6i8;
  432|      1|    let mut i8_2: i8 = 23i8;
  433|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  434|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  435|      1|    let mut i64_3: i64 = 1000i64;
  436|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
  437|      1|    let mut i64_4: i64 = 1000000000i64;
  438|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
  439|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_6, duration_5);
  440|      1|    let mut i32_2: i32 = 348i32;
  441|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_2};
  442|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_7);
  443|      1|    let mut i32_3: i32 = -9i32;
  444|      1|    let mut i64_5: i64 = 0i64;
  445|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_5, i32_3);
  446|      1|    let mut i32_4: i32 = 9i32;
  447|      1|    let mut i64_6: i64 = 27i64;
  448|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::new(i64_6, i32_4);
  449|      1|    let mut u32_0: u32 = 18u32;
  450|      1|    let mut u8_0: u8 = 3u8;
  451|      1|    let mut u8_1: u8 = 12u8;
  452|      1|    let mut u8_2: u8 = 45u8;
  453|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  454|      1|    let mut i32_5: i32 = 1000000000i32;
  455|      1|    let mut date_4: crate::date::Date = crate::date::Date {value: i32_5};
  456|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_4);
  457|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
  458|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_3);
  459|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  460|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  461|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  462|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_4);
  463|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  464|      1|    let mut i8_3: i8 = 1i8;
  465|      1|    let mut i8_4: i8 = -43i8;
  466|      1|    let mut i8_5: i8 = 3i8;
  467|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  468|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
  469|      1|    let mut i8_6: i8 = 4i8;
  470|      1|    let mut i8_7: i8 = 24i8;
  471|      1|    let mut i8_8: i8 = 5i8;
  472|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  473|      1|    let mut utcoffset_4_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_4;
  474|      1|    let mut i8_9: i8 = 60i8;
  475|      1|    let mut i8_10: i8 = 2i8;
  476|      1|    let mut i8_11: i8 = 4i8;
  477|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
  478|      1|    let mut utcoffset_5_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_5;
  479|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(utcoffset_5_ref_0, utcoffset_4_ref_0);
  480|      1|    let mut bool_1: bool = std::cmp::PartialEq::ne(utcoffset_3_ref_0, utcoffset_2_ref_0);
  481|      1|    let mut bool_2: bool = std::cmp::PartialEq::ne(utcoffset_1_ref_0, utcoffset_0_ref_0);
  482|      1|    let mut u8_3: u8 = crate::primitive_date_time::PrimitiveDateTime::monday_based_week(primitivedatetime_0);
  483|      1|    panic!("From RustyUnit with love");
  484|       |}
  485|       |
  486|       |//#[no_coverage]
  487|      1|#[test]
  488|       |#[should_panic]
  489|      1|#[timeout(3000)]
  490|      1|fn rusty_test_4571() {
  491|      1|    rusty_monitor::set_test_id(4571);
  492|      1|    let mut i8_0: i8 = 127i8;
  493|      1|    let mut i8_1: i8 = 5i8;
  494|      1|    let mut i8_2: i8 = 3i8;
  495|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  496|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  497|      1|    let mut u32_0: u32 = 100u32;
  498|      1|    let mut u8_0: u8 = 24u8;
  499|      1|    let mut u8_1: u8 = 31u8;
  500|      1|    let mut u8_2: u8 = 23u8;
  501|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  502|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  503|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
  504|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  505|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  506|      1|    let mut i32_0: i32 = 172i32;
  507|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  508|      1|    let mut u32_1: u32 = 0u32;
  509|      1|    let mut u8_3: u8 = 4u8;
  510|      1|    let mut u8_4: u8 = 52u8;
  511|      1|    let mut u8_5: u8 = 6u8;
  512|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  513|      1|    let mut i32_1: i32 = 43i32;
  514|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  515|      1|    let mut i8_3: i8 = 43i8;
  516|      1|    let mut i8_4: i8 = 29i8;
  517|      1|    let mut i8_5: i8 = 0i8;
  518|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  519|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  520|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
  521|      1|    panic!("From RustyUnit with love");
  522|       |}
  523|       |
  524|       |//#[no_coverage]
  525|      1|#[test]
  526|       |#[should_panic]
  527|      1|#[timeout(3000)]
  528|      1|fn rusty_test_2354() {
  529|      1|    rusty_monitor::set_test_id(2354);
  530|      1|    let mut i8_0: i8 = -85i8;
  531|      1|    let mut i8_1: i8 = 23i8;
  532|      1|    let mut i8_2: i8 = 5i8;
  533|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  534|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  535|      1|    let mut i8_3: i8 = 60i8;
  536|      1|    let mut i8_4: i8 = 0i8;
  537|      1|    let mut i8_5: i8 = 59i8;
  538|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  539|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  540|      1|    let mut i128_0: i128 = 0i128;
  541|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  542|      1|    let mut u32_0: u32 = 62u32;
  543|      1|    let mut u8_0: u8 = 23u8;
  544|      1|    let mut u8_1: u8 = 44u8;
  545|      1|    let mut u8_2: u8 = 6u8;
  546|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  547|      1|    let mut i32_0: i32 = 296i32;
  548|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  549|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  550|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  551|      1|    let mut i64_0: i64 = 60i64;
  552|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  553|      1|    let mut duration_1_ref_0: &crate::duration::Duration = &mut duration_1;
  554|      1|    let mut u32_1: u32 = 13u32;
  555|      1|    let mut u8_3: u8 = 0u8;
  556|      1|    let mut u8_4: u8 = 12u8;
  557|      1|    let mut u8_5: u8 = 38u8;
  558|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  559|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
  560|      1|    let mut i8_6: i8 = 5i8;
  561|      1|    let mut i8_7: i8 = -20i8;
  562|      1|    let mut i8_8: i8 = 0i8;
  563|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  564|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  565|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_1, utcoffset_3);
  566|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_2);
  567|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  568|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_2, utcoffset_2);
  569|      1|    let mut time_1: crate::time::Time = crate::primitive_date_time::PrimitiveDateTime::time(primitivedatetime_3);
  570|      1|    let mut month_0: month::Month = crate::month::Month::August;
  571|      1|    let mut month_1: month::Month = crate::month::Month::next(month_0);
  572|      1|    let mut tuple_0: (u8, u8, u8) = crate::time::Time::as_hms(time_1);
  573|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_5, u8_4, u8_3, u32_1);
  574|      1|    let mut i32_1: i32 = crate::primitive_date_time::PrimitiveDateTime::year(primitivedatetime_1);
  575|      1|    let mut ordering_0: std::cmp::Ordering = std::cmp::Ord::cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
  576|      1|    panic!("From RustyUnit with love");
  577|       |}
  578|       |
  579|       |//#[no_coverage]
  580|      1|#[test]
  581|       |#[should_panic]
  582|      1|#[timeout(3000)]
  583|      1|fn rusty_test_7216() {
  584|      1|    rusty_monitor::set_test_id(7216);
  585|      1|    let mut u32_0: u32 = 999999u32;
  586|      1|    let mut u8_0: u8 = 23u8;
  587|      1|    let mut u8_1: u8 = 29u8;
  588|      1|    let mut u8_2: u8 = 29u8;
  589|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  590|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  591|      1|    let mut time_1: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
  592|      1|    let mut i32_0: i32 = 111i32;
  593|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  594|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_1};
  595|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
  596|      1|    let mut i8_0: i8 = 127i8;
  597|      1|    let mut i8_1: i8 = 5i8;
  598|      1|    let mut i8_2: i8 = 3i8;
  599|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  600|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  601|      1|    let mut u32_1: u32 = 100u32;
  602|      1|    let mut u8_3: u8 = 24u8;
  603|      1|    let mut u8_4: u8 = 31u8;
  604|      1|    let mut u8_5: u8 = 23u8;
  605|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  606|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  607|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_1, time_2);
  608|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  609|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  610|      1|    let mut i32_1: i32 = 172i32;
  611|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  612|      1|    let mut u32_2: u32 = 0u32;
  613|      1|    let mut u8_6: u8 = 4u8;
  614|      1|    let mut u8_7: u8 = 52u8;
  615|      1|    let mut u8_8: u8 = 6u8;
  616|      1|    let mut time_3: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
  617|      1|    let mut i64_0: i64 = 86400i64;
  618|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  619|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  620|      1|    let mut i32_2: i32 = 43i32;
  621|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  622|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_sub(date_2, duration_1);
  623|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_3, time: time_3};
  624|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
  625|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_3, date_1);
  626|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_4);
  627|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  628|      1|    let mut i8_3: i8 = 43i8;
  629|      1|    let mut i8_4: i8 = 29i8;
  630|      1|    let mut i8_5: i8 = 0i8;
  631|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  632|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
  633|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_3_ref_0, utcoffset_2_ref_0);
  634|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
  635|      1|    let mut u16_0: u16 = crate::primitive_date_time::PrimitiveDateTime::ordinal(primitivedatetime_1);
  636|      1|    let mut ordering_0: std::cmp::Ordering = std::option::Option::unwrap(option_0);
  637|      1|    panic!("From RustyUnit with love");
  638|       |}
  639|       |
  640|       |//#[no_coverage]
  641|      1|#[test]
  642|       |#[should_panic]
  643|      1|#[timeout(3000)]
  644|      1|fn rusty_test_7115() {
  645|      1|    rusty_monitor::set_test_id(7115);
  646|      1|    let mut i8_0: i8 = 24i8;
  647|      1|    let mut i8_1: i8 = 24i8;
  648|      1|    let mut i8_2: i8 = 60i8;
  649|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  650|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  651|      1|    let mut i16_0: i16 = 4i16;
  652|      1|    let mut i64_0: i64 = 24i64;
  653|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::microseconds(i64_0);
  654|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  655|      1|    let mut i64_1: i64 = 9223372036854775807i64;
  656|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
  657|      1|    let mut i8_3: i8 = 127i8;
  658|      1|    let mut i8_4: i8 = 127i8;
  659|      1|    let mut i8_5: i8 = 2i8;
  660|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  661|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  662|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_offset(offsetdatetime_0, utcoffset_1);
  663|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  664|      1|    let mut u32_0: u32 = 999999999u32;
  665|      1|    let mut u8_0: u8 = 1u8;
  666|      1|    let mut u8_1: u8 = 12u8;
  667|      1|    let mut u8_2: u8 = 9u8;
  668|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  669|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  670|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_2, time_1);
  671|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  672|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
  673|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_1);
  674|      1|    let mut primitivedatetime_1_ref_0: &crate::primitive_date_time::PrimitiveDateTime = &mut primitivedatetime_1;
  675|      1|    let mut i64_2: i64 = 0i64;
  676|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_2);
  677|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::abs(duration_2);
  678|      1|    let mut i8_6: i8 = 5i8;
  679|      1|    let mut i8_7: i8 = 2i8;
  680|      1|    let mut i8_8: i8 = 127i8;
  681|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  682|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  683|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  684|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  685|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(utcoffset_2_ref_0, utcoffset_0_ref_0);
  686|      1|    panic!("From RustyUnit with love");
  687|       |}
  688|       |
  689|       |//#[no_coverage]
  690|      1|#[test]
  691|       |#[should_panic]
  692|      1|#[timeout(3000)]
  693|      1|fn rusty_test_2138() {
  694|      1|    rusty_monitor::set_test_id(2138);
  695|      1|    let mut i8_0: i8 = 24i8;
  696|      1|    let mut i8_1: i8 = 120i8;
  697|      1|    let mut i8_2: i8 = 64i8;
  698|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  699|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  700|      1|    let mut i64_0: i64 = 2440588i64;
  701|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  702|      1|    let mut i64_1: i64 = -98i64;
  703|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_1);
  704|      1|    let mut i32_0: i32 = 103i32;
  705|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  706|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
  707|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  708|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  709|      1|    let mut u32_0: u32 = 1000u32;
  710|      1|    let mut u8_0: u8 = 28u8;
  711|      1|    let mut u8_1: u8 = 52u8;
  712|      1|    let mut u8_2: u8 = 60u8;
  713|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  714|      1|    let mut u16_0: u16 = 65u16;
  715|      1|    let mut i32_1: i32 = 48i32;
  716|      1|    let mut date_2: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  717|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
  718|      1|    let mut i8_3: i8 = 6i8;
  719|      1|    let mut i8_4: i8 = 4i8;
  720|      1|    let mut i8_5: i8 = 59i8;
  721|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  722|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
  723|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  724|      1|    let mut i8_6: i8 = 127i8;
  725|      1|    let mut i8_7: i8 = 0i8;
  726|      1|    let mut i8_8: i8 = 24i8;
  727|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  728|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
  729|      1|    let mut i8_9: i8 = 6i8;
  730|      1|    let mut i8_10: i8 = 59i8;
  731|      1|    let mut i8_11: i8 = 6i8;
  732|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
  733|      1|    let mut utcoffset_4_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_4;
  734|      1|    let mut i32_2: i32 = 184i32;
  735|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_2};
  736|      1|    let mut primitivedatetime_3: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_3);
  737|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  738|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_3);
  739|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  740|      1|    let mut utcoffset_5_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_5;
  741|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(utcoffset_5_ref_0, utcoffset_4_ref_0);
  742|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(utcoffset_3_ref_0, utcoffset_2_ref_0);
  743|      1|    let mut month_0: month::Month = crate::month::Month::October;
  744|      1|    panic!("From RustyUnit with love");
  745|       |}
  746|       |
  747|       |//#[no_coverage]
  748|      1|#[test]
  749|       |#[should_panic]
  750|      1|#[timeout(3000)]
  751|      1|fn rusty_test_418() {
  752|      1|    rusty_monitor::set_test_id(418);
  753|      1|    let mut i64_0: i64 = 1i64;
  754|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  755|      1|    let mut u32_0: u32 = 999999u32;
  756|      1|    let mut u8_0: u8 = 28u8;
  757|      1|    let mut u8_1: u8 = 59u8;
  758|      1|    let mut u8_2: u8 = 59u8;
  759|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  760|      1|    let mut i32_0: i32 = 111i32;
  761|      1|    let mut i64_1: i64 = 2147483647i64;
  762|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_0);
  763|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  764|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  765|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_2);
  766|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  767|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
  768|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  769|      1|    let mut weekday_0: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
  770|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  771|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Monday;
  772|      1|    let mut i64_2: i64 = 604800i64;
  773|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::hours(i64_2);
  774|      1|    let mut i8_0: i8 = 2i8;
  775|      1|    let mut i8_1: i8 = 24i8;
  776|      1|    let mut i8_2: i8 = 2i8;
  777|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  778|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  779|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_2, utcoffset_0);
  780|      1|    let mut date_1: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_3);
  781|      1|    let mut i8_3: i8 = -59i8;
  782|      1|    let mut i8_4: i8 = 127i8;
  783|      1|    let mut i8_5: i8 = 0i8;
  784|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  785|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
  786|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  787|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_4, utcoffset_2);
  788|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_5);
  789|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
  790|      1|    let mut weekday_3: weekday::Weekday = crate::weekday::Weekday::next(weekday_2);
  791|      1|    let mut weekday_4: weekday::Weekday = crate::weekday::Weekday::next(weekday_1);
  792|      1|    let mut weekday_5: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
  793|      1|    panic!("From RustyUnit with love");
  794|       |}
  795|       |
  796|       |//#[no_coverage]
  797|      1|#[test]
  798|       |#[should_panic]
  799|      1|#[timeout(3000)]
  800|      1|fn rusty_test_1361() {
  801|      1|    rusty_monitor::set_test_id(1361);
  802|      1|    let mut i32_0: i32 = 353i32;
  803|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  804|      1|    let mut i32_1: i32 = 167i32;
  805|      1|    let mut i64_0: i64 = 0i64;
  806|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  807|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  808|      1|    let mut month_0: month::Month = crate::month::Month::July;
  809|      1|    let mut i32_2: i32 = 207i32;
  810|      1|    let mut i64_1: i64 = 253402300799i64;
  811|      1|    let mut i8_0: i8 = 3i8;
  812|      1|    let mut i8_1: i8 = 24i8;
  813|      1|    let mut i8_2: i8 = 2i8;
  814|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  815|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
  816|      1|    let mut str_0: &str = "lztQjvdrjE";
  817|      1|    let mut str_0_ref_0: &str = &mut str_0;
  818|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
  819|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_2);
  820|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  821|      1|    let mut u8_0: u8 = crate::util::days_in_year_month(i32_2, month_0);
  822|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  823|      1|    let mut i64_2: i64 = crate::duration::Duration::whole_minutes(duration_0);
  824|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  825|      1|    let mut bool_1: bool = crate::util::is_leap_year(i32_1);
  826|      1|    let mut u8_1: u8 = crate::date::Date::day(date_0);
  827|      1|    panic!("From RustyUnit with love");
  828|       |}
  829|       |
  830|       |//#[no_coverage]
  831|      1|#[test]
  832|       |#[should_panic]
  833|      1|#[timeout(3000)]
  834|      1|fn rusty_test_575() {
  835|      1|    rusty_monitor::set_test_id(575);
  836|      1|    let mut u32_0: u32 = 100u32;
  837|      1|    let mut u8_0: u8 = 23u8;
  838|      1|    let mut u8_1: u8 = 10u8;
  839|      1|    let mut u8_2: u8 = 9u8;
  840|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  841|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  842|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
  843|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  844|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
  845|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  846|      1|    let mut i8_0: i8 = 2i8;
  847|      1|    let mut i8_1: i8 = 24i8;
  848|      1|    let mut i8_2: i8 = 3i8;
  849|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  850|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
  851|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  852|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  853|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
  854|      1|    let mut i8_3: i8 = -92i8;
  855|      1|    let mut i8_4: i8 = 4i8;
  856|      1|    let mut i8_5: i8 = -20i8;
  857|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
  858|      1|    let mut utcoffset_4_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_4;
  859|      1|    let mut i8_6: i8 = 24i8;
  860|      1|    let mut i8_7: i8 = 60i8;
  861|      1|    let mut i8_8: i8 = 23i8;
  862|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_8, minutes: i8_7, seconds: i8_6};
  863|      1|    let mut utcoffset_5_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_5;
  864|      1|    let mut utcoffset_6: crate::utc_offset::UtcOffset = std::clone::Clone::clone(utcoffset_5_ref_0);
  865|      1|    let mut utcoffset_7: crate::utc_offset::UtcOffset = std::clone::Clone::clone(utcoffset_4_ref_0);
  866|      1|    let mut utcoffset_8: crate::utc_offset::UtcOffset = std::clone::Clone::clone(utcoffset_3_ref_0);
  867|      1|    let mut utcoffset_9: crate::utc_offset::UtcOffset = std::clone::Clone::clone(utcoffset_2_ref_0);
  868|      1|    let mut utcoffset_10: crate::utc_offset::UtcOffset = std::clone::Clone::clone(utcoffset_1_ref_0);
  869|      1|    panic!("From RustyUnit with love");
  870|       |}
  871|       |
  872|       |//#[no_coverage]
  873|      1|#[test]
  874|       |#[should_panic]
  875|      1|#[timeout(3000)]
  876|      1|fn rusty_test_673() {
  877|      1|    rusty_monitor::set_test_id(673);
  878|      1|    let mut u32_0: u32 = 0u32;
  879|      1|    let mut u8_0: u8 = 28u8;
  880|      1|    let mut u8_1: u8 = 0u8;
  881|      1|    let mut u8_2: u8 = 28u8;
  882|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  883|      1|    let mut i32_0: i32 = 400i32;
  884|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  885|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
  886|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
  887|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_0);
  888|      1|    let mut i32_1: i32 = 133i32;
  889|      1|    let mut i64_0: i64 = 2440588i64;
  890|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
  891|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  892|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  893|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_1, duration_1);
  894|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  895|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  896|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
  897|      1|    let mut i64_1: i64 = -48i64;
  898|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::microseconds(i64_1);
  899|      1|    let mut u32_1: u32 = 100000000u32;
  900|      1|    let mut u8_3: u8 = 11u8;
  901|      1|    let mut u8_4: u8 = 28u8;
  902|      1|    let mut u8_5: u8 = 31u8;
  903|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  904|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  905|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  906|      1|    let mut u16_0: u16 = 1u16;
  907|      1|    let mut i32_2: i32 = 86399i32;
  908|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_2, u16_0);
  909|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_add(date_1, duration_3);
  910|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
  911|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_sub(primitivedatetime_1, duration_2);
  912|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
  913|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_4);
  914|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_3);
  915|      1|    let mut i32_3: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_4);
  916|      1|    let mut i32_4: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_2);
  917|      1|    let mut i32_5: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_1);
  918|      1|    let mut i32_6: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_0);
  919|      1|    panic!("From RustyUnit with love");
  920|       |}
  921|       |
  922|       |//#[no_coverage]
  923|      1|#[test]
  924|       |#[should_panic]
  925|      1|#[timeout(3000)]
  926|      1|fn rusty_test_5475() {
  927|      1|    rusty_monitor::set_test_id(5475);
  928|      1|    let mut i64_0: i64 = 9223372036854775807i64;
  929|      1|    let mut u32_0: u32 = 56u32;
  930|      1|    let mut u8_0: u8 = 2u8;
  931|      1|    let mut u8_1: u8 = 0u8;
  932|      1|    let mut u8_2: u8 = 11u8;
  933|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  934|      1|    let mut i32_0: i32 = 172i32;
  935|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  936|      1|    let mut u32_1: u32 = 0u32;
  937|      1|    let mut u8_3: u8 = 4u8;
  938|      1|    let mut u8_4: u8 = 52u8;
  939|      1|    let mut u8_5: u8 = 6u8;
  940|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  941|      1|    let mut i64_1: i64 = 86400i64;
  942|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
  943|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  944|      1|    let mut i32_1: i32 = 43i32;
  945|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
  946|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
  947|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_0};
  948|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
  949|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_1, date_0);
  950|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  951|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
  952|      1|    let mut i8_0: i8 = 43i8;
  953|      1|    let mut i8_1: i8 = 29i8;
  954|      1|    let mut i8_2: i8 = 0i8;
  955|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  956|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
  957|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
  958|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_2, u8_1, u8_0, u32_0);
  959|      1|    let mut result_1: std::result::Result<crate::offset_date_time::OffsetDateTime, crate::error::component_range::ComponentRange> = crate::offset_date_time::OffsetDateTime::from_unix_timestamp(i64_0);
  960|      1|    panic!("From RustyUnit with love");
  961|       |}
  962|       |
  963|       |//#[no_coverage]
  964|      1|#[test]
  965|       |#[should_panic]
  966|      1|#[timeout(3000)]
  967|      1|fn rusty_test_4981() {
  968|      1|    rusty_monitor::set_test_id(4981);
  969|      1|    let mut i32_0: i32 = 178i32;
  970|      1|    let mut i64_0: i64 = 2147483647i64;
  971|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
  972|      1|    let mut i8_0: i8 = 4i8;
  973|      1|    let mut i8_1: i8 = 60i8;
  974|      1|    let mut i8_2: i8 = 6i8;
  975|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
  976|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  977|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  978|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  979|      1|    let mut u16_0: u16 = 7u16;
  980|      1|    let mut i32_1: i32 = 76i32;
  981|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  982|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
  983|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
  984|      1|    let mut month_0: month::Month = crate::month::Month::January;
  985|      1|    let mut i32_2: i32 = 88i32;
  986|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
  987|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  988|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  989|      1|    let mut i32_3: i32 = 224i32;
  990|      1|    let mut i64_1: i64 = 12i64;
  991|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_3);
  992|      1|    let mut i128_0: i128 = 1000000000i128;
  993|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  994|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  995|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_3, duration_2);
  996|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_4);
  997|      1|    let mut i32_4: i32 = 336i32;
  998|      1|    let mut i64_2: i64 = 3600i64;
  999|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_4);
 1000|      1|    let mut duration_4: std::time::Duration = crate::duration::Duration::abs_std(duration_3);
 1001|      1|    let mut f64_0: f64 = 4741671816366391296.000000f64;
 1002|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1003|      1|    let mut i64_3: i64 = 2440588i64;
 1004|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::hours(i64_3);
 1005|      1|    let mut duration_7: std::time::Duration = crate::duration::Duration::abs_std(duration_6);
 1006|      1|    let mut i64_4: i64 = 142i64;
 1007|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::microseconds(i64_4);
 1008|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1009|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_2);
 1010|      1|    let mut tuple_0: (i32, month::Month, u8) = crate::primitive_date_time::PrimitiveDateTime::to_calendar_date(primitivedatetime_1);
 1011|      1|    panic!("From RustyUnit with love");
 1012|       |}
 1013|       |
 1014|       |//#[no_coverage]
 1015|      1|#[test]
 1016|       |#[should_panic]
 1017|      1|#[timeout(3000)]
 1018|      1|fn rusty_test_319() {
 1019|      1|    rusty_monitor::set_test_id(319);
 1020|      1|    let mut i8_0: i8 = 111i8;
 1021|      1|    let mut i8_1: i8 = 3i8;
 1022|      1|    let mut i8_2: i8 = 1i8;
 1023|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1024|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1025|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1026|      1|    let mut duration_1: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
 1027|      1|    let mut i32_0: i32 = 201i32;
 1028|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1029|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1030|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 1031|      1|    let mut duration_3: std::time::Duration = crate::duration::Duration::abs_std(duration_2);
 1032|      1|    let mut padding_0: time::Padding = crate::time::Padding::Optimize;
 1033|      1|    let mut u32_0: u32 = 100000u32;
 1034|      1|    let mut u8_0: u8 = 55u8;
 1035|      1|    let mut u8_1: u8 = 8u8;
 1036|      1|    let mut u8_2: u8 = 92u8;
 1037|      1|    let mut f64_0: f64 = 4768169126130614272.000000f64;
 1038|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1039|      1|    let mut i32_1: i32 = 139i32;
 1040|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1041|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_4);
 1042|      1|    panic!("From RustyUnit with love");
 1043|       |}
 1044|       |
 1045|       |//#[no_coverage]
 1046|      1|#[test]
 1047|       |#[should_panic]
 1048|      1|#[timeout(3000)]
 1049|      1|fn rusty_test_536() {
 1050|      1|    rusty_monitor::set_test_id(536);
 1051|      1|    let mut i8_0: i8 = 127i8;
 1052|      1|    let mut i8_1: i8 = 6i8;
 1053|      1|    let mut i8_2: i8 = 23i8;
 1054|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1055|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1056|      1|    let mut i8_3: i8 = 60i8;
 1057|      1|    let mut i8_4: i8 = 3i8;
 1058|      1|    let mut i8_5: i8 = 1i8;
 1059|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1060|      1|    let mut i16_0: i16 = 6i16;
 1061|      1|    let mut i64_0: i64 = 60i64;
 1062|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1063|      1|    let mut i32_0: i32 = 88i32;
 1064|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1065|      1|    panic!("From RustyUnit with love");
 1066|       |}
 1067|       |
 1068|       |//#[no_coverage]
 1069|      1|#[test]
 1070|       |#[should_panic]
 1071|      1|#[timeout(3000)]
 1072|      1|fn rusty_test_309() {
 1073|      1|    rusty_monitor::set_test_id(309);
 1074|      1|    let mut i8_0: i8 = 2i8;
 1075|      1|    let mut i8_1: i8 = 127i8;
 1076|      1|    let mut i8_2: i8 = 1i8;
 1077|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1078|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1079|      1|    let mut u32_0: u32 = 62u32;
 1080|      1|    let mut u8_0: u8 = 2u8;
 1081|      1|    let mut u8_1: u8 = 11u8;
 1082|      1|    let mut u8_2: u8 = 59u8;
 1083|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1084|      1|    let mut u32_1: u32 = 66u32;
 1085|      1|    let mut u8_3: u8 = 5u8;
 1086|      1|    let mut u8_4: u8 = 12u8;
 1087|      1|    let mut u8_5: u8 = 7u8;
 1088|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1089|      1|    let mut u16_0: u16 = 86u16;
 1090|      1|    let mut i32_0: i32 = 296i32;
 1091|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1092|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_1);
 1093|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_0, time_0);
 1094|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_1};
 1095|      1|    let mut i8_3: i8 = 4i8;
 1096|      1|    let mut i8_4: i8 = 3i8;
 1097|      1|    let mut i8_5: i8 = 3i8;
 1098|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1099|      1|    let mut i64_0: i64 = 1i64;
 1100|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1101|      1|    let mut u32_2: u32 = 1000000000u32;
 1102|      1|    let mut u8_6: u8 = 2u8;
 1103|      1|    let mut u8_7: u8 = 10u8;
 1104|      1|    let mut u8_8: u8 = 0u8;
 1105|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1106|      1|    let mut i32_1: i32 = 116i32;
 1107|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1108|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_2);
 1109|      1|    let mut u32_3: u32 = crate::offset_date_time::OffsetDateTime::microsecond(offsetdatetime_0);
 1110|      1|    panic!("From RustyUnit with love");
 1111|       |}
 1112|       |
 1113|       |//#[no_coverage]
 1114|      1|#[test]
 1115|       |#[should_panic]
 1116|      1|#[timeout(3000)]
 1117|      1|fn rusty_test_6177() {
 1118|      1|    rusty_monitor::set_test_id(6177);
 1119|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1120|      1|    let mut month_1: month::Month = crate::month::Month::previous(month_0);
 1121|      1|    let mut i8_0: i8 = 127i8;
 1122|      1|    let mut i8_1: i8 = 5i8;
 1123|      1|    let mut i8_2: i8 = 3i8;
 1124|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1125|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1126|      1|    let mut u32_0: u32 = 100u32;
 1127|      1|    let mut u8_0: u8 = 24u8;
 1128|      1|    let mut u8_1: u8 = 31u8;
 1129|      1|    let mut u8_2: u8 = 23u8;
 1130|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1131|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1132|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1133|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1134|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
 1135|      1|    let mut i32_0: i32 = 172i32;
 1136|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1137|      1|    let mut u32_1: u32 = 0u32;
 1138|      1|    let mut u8_3: u8 = 4u8;
 1139|      1|    let mut u8_4: u8 = 52u8;
 1140|      1|    let mut u8_5: u8 = 6u8;
 1141|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1142|      1|    let mut i64_0: i64 = 86400i64;
 1143|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1144|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1145|      1|    let mut i32_1: i32 = 43i32;
 1146|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1147|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
 1148|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
 1149|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1150|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_0);
 1151|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
 1152|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
 1153|      1|    let mut i8_3: i8 = 43i8;
 1154|      1|    let mut i8_4: i8 = 29i8;
 1155|      1|    let mut i8_5: i8 = 0i8;
 1156|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1157|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
 1158|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_3_ref_0, utcoffset_2_ref_0);
 1159|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
 1160|      1|    let mut month_2: month::Month = crate::month::Month::next(month_1);
 1161|      1|    panic!("From RustyUnit with love");
 1162|       |}
 1163|       |
 1164|       |//#[no_coverage]
 1165|      1|#[test]
 1166|       |#[should_panic]
 1167|      1|#[timeout(3000)]
 1168|      1|fn rusty_test_134() {
 1169|      1|    rusty_monitor::set_test_id(134);
 1170|      1|    let mut u32_0: u32 = 10000000u32;
 1171|      1|    let mut u8_0: u8 = 1u8;
 1172|      1|    let mut u8_1: u8 = 2u8;
 1173|      1|    let mut u8_2: u8 = 52u8;
 1174|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1175|      1|    let mut u16_0: u16 = 33u16;
 1176|      1|    let mut i32_0: i32 = 167i32;
 1177|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1178|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_0, time: time_0};
 1179|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1180|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date_time(offsetdatetime_0, primitivedatetime_0);
 1181|      1|    let mut i8_0: i8 = 4i8;
 1182|      1|    let mut i8_1: i8 = 2i8;
 1183|      1|    let mut i8_2: i8 = 59i8;
 1184|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1185|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1186|      1|    let mut u32_1: u32 = 100000000u32;
 1187|      1|    let mut u8_3: u8 = 8u8;
 1188|      1|    let mut u8_4: u8 = 7u8;
 1189|      1|    let mut u8_5: u8 = 28u8;
 1190|      1|    let mut i32_1: i32 = 144i32;
 1191|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1192|      1|    let mut i8_3: i8 = 24i8;
 1193|      1|    let mut i8_4: i8 = 54i8;
 1194|      1|    let mut i8_5: i8 = 3i8;
 1195|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1196|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
 1197|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Monday;
 1198|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
 1199|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
 1200|      1|    let mut i8_6: i8 = crate::utc_offset::UtcOffset::whole_hours(utcoffset_3);
 1201|      1|    let mut tuple_0: (i32, u16) = crate::date::Date::to_ordinal_date(date_1);
 1202|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1203|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Monday;
 1204|      1|    let mut i32_2: i32 = crate::utc_offset::UtcOffset::whole_seconds(utcoffset_1);
 1205|      1|    let mut i32_3: i32 = crate::offset_date_time::OffsetDateTime::to_julian_day(offsetdatetime_1);
 1206|      1|    panic!("From RustyUnit with love");
 1207|       |}
 1208|       |
 1209|       |//#[no_coverage]
 1210|      1|#[test]
 1211|       |#[should_panic]
 1212|      1|#[timeout(3000)]
 1213|      1|fn rusty_test_325() {
 1214|      1|    rusty_monitor::set_test_id(325);
 1215|      1|    let mut i8_0: i8 = 3i8;
 1216|      1|    let mut i8_1: i8 = 23i8;
 1217|      1|    let mut i8_2: i8 = 6i8;
 1218|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1219|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1220|      1|    let mut i8_3: i8 = -68i8;
 1221|      1|    let mut i8_4: i8 = 97i8;
 1222|      1|    let mut i8_5: i8 = 127i8;
 1223|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1224|      1|    let mut i64_0: i64 = 1000000000i64;
 1225|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
 1226|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1227|      1|    let mut u32_0: u32 = 1000u32;
 1228|      1|    let mut u8_0: u8 = 60u8;
 1229|      1|    let mut u8_1: u8 = 23u8;
 1230|      1|    let mut u8_2: u8 = 60u8;
 1231|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1232|      1|    let mut i32_0: i32 = 86399i32;
 1233|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1234|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1235|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_1);
 1236|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_2);
 1237|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_1);
 1238|      1|    let mut i32_1: i32 = 76i32;
 1239|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1240|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1241|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
 1242|      1|    panic!("From RustyUnit with love");
 1243|       |}
 1244|       |
 1245|       |//#[no_coverage]
 1246|      1|#[test]
 1247|       |#[should_panic]
 1248|      1|#[timeout(3000)]
 1249|      1|fn rusty_test_5164() {
 1250|      1|    rusty_monitor::set_test_id(5164);
 1251|      1|    let mut i32_0: i32 = 12i32;
 1252|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1253|      1|    let mut i8_0: i8 = -108i8;
 1254|      1|    let mut i8_1: i8 = 5i8;
 1255|      1|    let mut i8_2: i8 = 22i8;
 1256|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1257|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1258|      1|    let mut duration_0: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1259|      1|    let mut instant_1: crate::instant::Instant = crate::instant::Instant::now();
 1260|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_1);
 1261|      1|    let mut i32_1: i32 = 268i32;
 1262|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_1};
 1263|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
 1264|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1265|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_0);
 1266|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_1, utcoffset_0);
 1267|      1|    let mut i32_2: i32 = 167i32;
 1268|      1|    let mut i64_0: i64 = 60i64;
 1269|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_2);
 1270|      1|    let mut i32_3: i32 = 353i32;
 1271|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_3};
 1272|      1|    let mut i32_4: i32 = 167i32;
 1273|      1|    let mut i64_1: i64 = 0i64;
 1274|      1|    let mut instant_2: crate::instant::Instant = crate::instant::Instant::now();
 1275|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_2);
 1276|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1277|      1|    let mut i32_5: i32 = 207i32;
 1278|      1|    let mut i64_2: i64 = 253402300799i64;
 1279|      1|    let mut i8_3: i8 = 3i8;
 1280|      1|    let mut i8_4: i8 = 24i8;
 1281|      1|    let mut i8_5: i8 = 2i8;
 1282|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1283|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1284|      1|    let mut bool_0: bool = false;
 1285|      1|    let mut i64_3: i64 = 253402300799i64;
 1286|      1|    let mut i64_4: i64 = 9223372036854775807i64;
 1287|      1|    let mut i64_5: i64 = 24i64;
 1288|      1|    let mut str_0: &str = "lztQjvdrjE";
 1289|      1|    let mut str_0_ref_0: &str = &mut str_0;
 1290|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_0};
 1291|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
 1292|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
 1293|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_3);
 1294|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1295|      1|    let mut u8_0: u8 = crate::util::days_in_year_month(i32_5, month_0);
 1296|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1297|      1|    let mut i64_6: i64 = crate::duration::Duration::whole_minutes(duration_3);
 1298|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1299|      1|    let mut bool_2: bool = crate::util::is_leap_year(i32_4);
 1300|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_3, duration_2);
 1301|      1|    let mut u8_1: u8 = crate::offset_date_time::OffsetDateTime::day(offsetdatetime_0);
 1302|      1|    let mut i32_6: i32 = crate::date::Date::to_julian_day(date_0);
 1303|      1|    panic!("From RustyUnit with love");
 1304|       |}
 1305|       |
 1306|       |//#[no_coverage]
 1307|      1|#[test]
 1308|       |#[should_panic]
 1309|      1|#[timeout(3000)]
 1310|      1|fn rusty_test_136() {
 1311|      1|    rusty_monitor::set_test_id(136);
 1312|      1|    let mut i32_0: i32 = 325i32;
 1313|      1|    let mut i64_0: i64 = 24i64;
 1314|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1315|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1316|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
 1317|      1|    let mut i64_1: i64 = 2440588i64;
 1318|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
 1319|      1|    let mut i8_0: i8 = 5i8;
 1320|      1|    let mut i8_1: i8 = 6i8;
 1321|      1|    let mut i8_2: i8 = 23i8;
 1322|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1323|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1324|      1|    let mut u32_0: u32 = 55u32;
 1325|      1|    let mut u8_0: u8 = 87u8;
 1326|      1|    let mut u8_1: u8 = 7u8;
 1327|      1|    let mut u8_2: u8 = 12u8;
 1328|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1329|      1|    let mut i32_1: i32 = 246i32;
 1330|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1331|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::with_time(date_0, time_0);
 1332|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_1);
 1333|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_2, duration_1);
 1334|      1|    let mut i8_3: i8 = 4i8;
 1335|      1|    let mut i8_4: i8 = 59i8;
 1336|      1|    let mut i8_5: i8 = 1i8;
 1337|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1338|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
 1339|      1|    let mut i32_2: i32 = 60i32;
 1340|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_2};
 1341|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1342|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::offset_to_utc(primitivedatetime_1, utcoffset_3);
 1343|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
 1344|      1|    let mut u16_0: u16 = crate::offset_date_time::OffsetDateTime::millisecond(offsetdatetime_3);
 1345|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_1);
 1346|      1|    panic!("From RustyUnit with love");
 1347|       |}
 1348|       |
 1349|       |//#[no_coverage]
 1350|      1|#[test]
 1351|       |#[should_panic]
 1352|      1|#[timeout(3000)]
 1353|      1|fn rusty_test_3745() {
 1354|      1|    rusty_monitor::set_test_id(3745);
 1355|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Thursday;
 1356|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
 1357|      1|    let mut i64_0: i64 = 1000i64;
 1358|      1|    let mut i8_0: i8 = 6i8;
 1359|      1|    let mut i8_1: i8 = 3i8;
 1360|      1|    let mut i8_2: i8 = 6i8;
 1361|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1362|      1|    let mut i8_3: i8 = 127i8;
 1363|      1|    let mut i8_4: i8 = 5i8;
 1364|      1|    let mut i8_5: i8 = 3i8;
 1365|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1366|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1367|      1|    let mut u32_0: u32 = 100u32;
 1368|      1|    let mut u8_0: u8 = 24u8;
 1369|      1|    let mut u8_1: u8 = 31u8;
 1370|      1|    let mut u8_2: u8 = 23u8;
 1371|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1372|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1373|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1374|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1375|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
 1376|      1|    let mut i32_0: i32 = 172i32;
 1377|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1378|      1|    let mut u32_1: u32 = 0u32;
 1379|      1|    let mut u8_3: u8 = 4u8;
 1380|      1|    let mut u8_4: u8 = 52u8;
 1381|      1|    let mut u8_5: u8 = 6u8;
 1382|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1383|      1|    let mut i64_1: i64 = 86400i64;
 1384|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1385|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1386|      1|    let mut i32_1: i32 = 52i32;
 1387|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1388|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
 1389|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
 1390|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1391|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_0);
 1392|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
 1393|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
 1394|      1|    let mut i8_6: i8 = 43i8;
 1395|      1|    let mut i8_7: i8 = 29i8;
 1396|      1|    let mut i8_8: i8 = 0i8;
 1397|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_8, minutes: i8_7, seconds: i8_6};
 1398|      1|    let mut utcoffset_4_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_4;
 1399|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_4_ref_0, utcoffset_3_ref_0);
 1400|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_2_ref_0, utcoffset_0_ref_0);
 1401|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_0);
 1402|      1|    let mut u8_6: u8 = crate::weekday::Weekday::number_days_from_sunday(weekday_1);
 1403|      1|    panic!("From RustyUnit with love");
 1404|       |}
 1405|       |
 1406|       |//#[no_coverage]
 1407|      1|#[test]
 1408|       |#[should_panic]
 1409|      1|#[timeout(3000)]
 1410|      1|fn rusty_test_1682() {
 1411|      1|    rusty_monitor::set_test_id(1682);
 1412|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Sunday;
 1413|      1|    let mut i8_0: i8 = 127i8;
 1414|      1|    let mut i8_1: i8 = 5i8;
 1415|      1|    let mut i8_2: i8 = 3i8;
 1416|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1417|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1418|      1|    let mut u32_0: u32 = 100u32;
 1419|      1|    let mut u8_0: u8 = 24u8;
 1420|      1|    let mut u8_1: u8 = 31u8;
 1421|      1|    let mut u8_2: u8 = 23u8;
 1422|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1423|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1424|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
 1425|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1426|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
 1427|      1|    let mut i32_0: i32 = 172i32;
 1428|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1429|      1|    let mut u32_1: u32 = 0u32;
 1430|      1|    let mut u8_3: u8 = 4u8;
 1431|      1|    let mut u8_4: u8 = 52u8;
 1432|      1|    let mut u8_5: u8 = 6u8;
 1433|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
 1434|      1|    let mut i64_0: i64 = 86400i64;
 1435|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1436|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1437|      1|    let mut i32_1: i32 = 43i32;
 1438|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1439|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
 1440|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime {date: date_2, time: time_1};
 1441|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1442|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_2, date_0);
 1443|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_3);
 1444|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
 1445|      1|    let mut i8_3: i8 = 43i8;
 1446|      1|    let mut i8_4: i8 = 29i8;
 1447|      1|    let mut i8_5: i8 = 0i8;
 1448|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1449|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
 1450|      1|    let mut option_0: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_3_ref_0, utcoffset_2_ref_0);
 1451|      1|    let mut option_1: std::option::Option<std::cmp::Ordering> = std::cmp::PartialOrd::partial_cmp(utcoffset_1_ref_0, utcoffset_0_ref_0);
 1452|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
 1453|      1|    panic!("From RustyUnit with love");
 1454|       |}
 1455|       |
 1456|       |//#[no_coverage]
 1457|      1|#[test]
 1458|       |#[should_panic]
 1459|      1|#[timeout(3000)]
 1460|      1|fn rusty_test_405() {
 1461|      1|    rusty_monitor::set_test_id(405);
 1462|      1|    let mut i32_0: i32 = 240i32;
 1463|      1|    let mut i64_0: i64 = 66i64;
 1464|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_0);
 1465|      1|    let mut u32_0: u32 = 10u32;
 1466|      1|    let mut u8_0: u8 = 10u8;
 1467|      1|    let mut u8_1: u8 = 31u8;
 1468|      1|    let mut u8_2: u8 = 60u8;
 1469|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1470|      1|    let mut i64_1: i64 = 86400i64;
 1471|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1472|      1|    let mut u16_0: u16 = 999u16;
 1473|      1|    let mut i32_1: i32 = 229i32;
 1474|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
 1475|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_add(date_0, duration_1);
 1476|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
 1477|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1478|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
 1479|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1480|      1|    let mut i8_0: i8 = 5i8;
 1481|      1|    let mut i8_1: i8 = 23i8;
 1482|      1|    let mut i8_2: i8 = 1i8;
 1483|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1484|      1|    let mut i8_3: i8 = 24i8;
 1485|      1|    let mut i8_4: i8 = 5i8;
 1486|      1|    let mut i8_5: i8 = 1i8;
 1487|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1488|      1|    let mut i8_6: i8 = 0i8;
 1489|      1|    let mut i8_7: i8 = 3i8;
 1490|      1|    let mut i8_8: i8 = 1i8;
 1491|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_8, minutes: i8_7, seconds: i8_6};
 1492|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_3);
 1493|      1|    let mut i8_9: i8 = 58i8;
 1494|      1|    let mut i8_10: i8 = 41i8;
 1495|      1|    let mut i8_11: i8 = 5i8;
 1496|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_11, minutes: i8_10, seconds: i8_9};
 1497|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_5);
 1498|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_4);
 1499|      1|    let mut bool_2: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_2);
 1500|      1|    let mut bool_3: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_1);
 1501|      1|    let mut bool_4: bool = crate::utc_offset::UtcOffset::is_utc(utcoffset_0);
 1502|      1|    panic!("From RustyUnit with love");
 1503|       |}
 1504|       |
 1505|       |//#[no_coverage]
 1506|      1|#[test]
 1507|       |#[should_panic]
 1508|      1|#[timeout(3000)]
 1509|      1|fn rusty_test_4982() {
 1510|      1|    rusty_monitor::set_test_id(4982);
 1511|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1512|      1|    let mut i32_0: i32 = 167i32;
 1513|      1|    let mut i64_0: i64 = 60i64;
 1514|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1515|      1|    let mut i32_1: i32 = 353i32;
 1516|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1517|      1|    let mut i32_2: i32 = 167i32;
 1518|      1|    let mut i64_1: i64 = 0i64;
 1519|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1520|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1521|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1522|      1|    let mut i32_3: i32 = 207i32;
 1523|      1|    let mut i64_2: i64 = 253402300799i64;
 1524|      1|    let mut i8_0: i8 = 3i8;
 1525|      1|    let mut i8_1: i8 = 24i8;
 1526|      1|    let mut i8_2: i8 = 2i8;
 1527|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1528|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1529|      1|    let mut bool_0: bool = false;
 1530|      1|    let mut i64_3: i64 = 253402300799i64;
 1531|      1|    let mut i64_4: i64 = 9223372036854775807i64;
 1532|      1|    let mut i64_5: i64 = 24i64;
 1533|      1|    let mut str_0: &str = "lztQjvdrjE";
 1534|      1|    let mut str_0_ref_0: &str = &mut str_0;
 1535|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_0};
 1536|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
 1537|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1538|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_2);
 1539|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1540|      1|    let mut u8_0: u8 = crate::util::days_in_year_month(i32_3, month_0);
 1541|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1542|      1|    let mut i64_6: i64 = crate::duration::Duration::whole_minutes(duration_1);
 1543|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1544|      1|    let mut bool_2: bool = crate::util::is_leap_year(i32_2);
 1545|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_0);
 1546|      1|    let mut tuple_0: (i32, u8, weekday::Weekday) = crate::offset_date_time::OffsetDateTime::to_iso_week_date(offsetdatetime_0);
 1547|      1|    panic!("From RustyUnit with love");
 1548|       |}
 1549|       |
 1550|       |//#[no_coverage]
 1551|      1|#[test]
 1552|       |#[should_panic]
 1553|      1|#[timeout(3000)]
 1554|      1|fn rusty_test_5146() {
 1555|      1|    rusty_monitor::set_test_id(5146);
 1556|      1|    let mut i8_0: i8 = 127i8;
 1557|      1|    let mut i8_1: i8 = 5i8;
 1558|      1|    let mut i8_2: i8 = 3i8;
 1559|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1560|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1561|      1|    let mut u32_0: u32 = 100u32;
 1562|      1|    let mut u8_0: u8 = 24u8;
 1563|      1|    let mut u8_1: u8 = 31u8;
 1564|      1|    let mut u8_2: u8 = 23u8;
 1565|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1566|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1567|      1|    let mut i32_0: i32 = 172i32;
 1568|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
 1569|      1|    let mut i64_0: i64 = 86400i64;
 1570|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
 1571|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
 1572|      1|    let mut i32_1: i32 = 43i32;
 1573|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1574|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_1);
 1575|      1|    panic!("From RustyUnit with love");
 1576|       |}
 1577|       |
 1578|       |//#[no_coverage]
 1579|      1|#[test]
 1580|       |#[should_panic]
 1581|      1|#[timeout(3000)]
 1582|      1|fn rusty_test_177() {
 1583|      1|    rusty_monitor::set_test_id(177);
 1584|      1|    let mut f64_0: f64 = 4607182418800017408.000000f64;
 1585|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
 1586|      1|    let mut i32_0: i32 = 365i32;
 1587|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
 1588|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_0);
 1589|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1590|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_0);
 1591|      1|    let mut i8_0: i8 = 4i8;
 1592|      1|    let mut i8_1: i8 = 43i8;
 1593|      1|    let mut i8_2: i8 = 14i8;
 1594|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1595|      1|    let mut i32_1: i32 = 161i32;
 1596|      1|    let mut i64_0: i64 = 0i64;
 1597|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
 1598|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1599|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_1, duration_1);
 1600|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
 1601|      1|    let mut i64_1: i64 = 86400i64;
 1602|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::minutes(i64_1);
 1603|      1|    let mut i64_2: i64 = 12i64;
 1604|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::weeks(i64_2);
 1605|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_3, duration_2);
 1606|      1|    let mut i64_3: i64 = 253402300799i64;
 1607|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1608|      1|    let mut i8_3: i8 = 4i8;
 1609|      1|    let mut i8_4: i8 = 55i8;
 1610|      1|    let mut i8_5: i8 = 24i8;
 1611|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_5, minutes: i8_4, seconds: i8_3};
 1612|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
 1613|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1614|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_3, utcoffset_3);
 1615|      1|    let mut date_2: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_4);
 1616|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_2);
 1617|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
 1618|      1|    panic!("From RustyUnit with love");
 1619|       |}
 1620|       |
 1621|       |//#[no_coverage]
 1622|      1|#[test]
 1623|       |#[should_panic]
 1624|      1|#[timeout(3000)]
 1625|      1|fn rusty_test_6645() {
 1626|      1|    rusty_monitor::set_test_id(6645);
 1627|      1|    let mut i128_0: i128 = 1000000000i128;
 1628|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
 1629|      1|    let mut u32_0: u32 = 10000000u32;
 1630|      1|    let mut u8_0: u8 = 11u8;
 1631|      1|    let mut u8_1: u8 = 63u8;
 1632|      1|    let mut u8_2: u8 = 1u8;
 1633|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
 1634|      1|    let mut u16_0: u16 = 999u16;
 1635|      1|    let mut i32_0: i32 = 27i32;
 1636|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_0, u16_0);
 1637|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_0, time_0);
 1638|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_0);
 1639|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_0);
 1640|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
 1641|      1|    let mut u8_3: u8 = 11u8;
 1642|      1|    let mut i8_0: i8 = 5i8;
 1643|      1|    let mut i8_1: i8 = 0i8;
 1644|      1|    let mut i8_2: i8 = 2i8;
 1645|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset {hours: i8_2, minutes: i8_1, seconds: i8_0};
 1646|      1|    let mut utcoffset_1_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_1;
 1647|      1|    let mut i64_0: i64 = 191i64;
 1648|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
 1649|      1|    let mut i64_1: i64 = 12i64;
 1650|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
 1651|      1|    let mut u32_1: u32 = 100000u32;
 1652|      1|    let mut u8_4: u8 = 0u8;
 1653|      1|    let mut u8_5: u8 = 30u8;
 1654|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_3, u8_5, u8_4, u32_1);
 1655|      1|    let mut i64_2: i64 = 253402300801i64;
 1656|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1657|      1|    let mut i32_1: i32 = 178i32;
 1658|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_1);
 1659|      1|    let mut date_2: crate::date::Date = crate::date::Date::saturating_sub(date_1, duration_3);
 1660|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_2, time_1);
 1661|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_1);
 1662|      1|    let mut i8_3: i8 = -99i8;
 1663|      1|    let mut i8_4: i8 = 6i8;
 1664|      1|    let mut i8_5: i8 = 23i8;
 1665|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1666|      1|    let mut utcoffset_2_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_2;
 1667|      1|    let mut i64_3: i64 = 1000i64;
 1668|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::seconds(i64_3);
 1669|      1|    let mut i64_4: i64 = 1000000000i64;
 1670|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::hours(i64_4);
 1671|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::saturating_sub(duration_5, duration_4);
 1672|      1|    let mut i32_2: i32 = 348i32;
 1673|      1|    let mut date_3: crate::date::Date = crate::date::Date {value: i32_2};
 1674|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_sub(date_3, duration_6);
 1675|      1|    let mut i32_3: i32 = -9i32;
 1676|      1|    let mut i64_5: i64 = 0i64;
 1677|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_5, i32_3);
 1678|      1|    let mut i32_4: i32 = 9i32;
 1679|      1|    let mut i64_6: i64 = 27i64;
 1680|      1|    let mut duration_8: crate::duration::Duration = crate::duration::Duration::new(i64_6, i32_4);
 1681|      1|    let mut u32_2: u32 = 18u32;
 1682|      1|    let mut u8_6: u8 = 3u8;
 1683|      1|    let mut u8_7: u8 = 12u8;
 1684|      1|    let mut u8_8: u8 = 45u8;
 1685|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
 1686|      1|    let mut i32_5: i32 = 1000000000i32;
 1687|      1|    let mut date_5: crate::date::Date = crate::date::Date {value: i32_5};
 1688|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_5);
 1689|      1|    let mut offsetdatetime_3: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_utc(primitivedatetime_2);
 1690|      1|    let mut offsetdatetime_4: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_date(offsetdatetime_3, date_4);
 1691|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_4);
 1692|      1|    let mut utcoffset_3_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_3;
 1693|      1|    let mut offsetdatetime_5: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1694|      1|    let mut utcoffset_4: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_5);
 1695|      1|    let mut utcoffset_4_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_4;
 1696|      1|    let mut i8_6: i8 = 1i8;
 1697|      1|    let mut i8_7: i8 = -43i8;
 1698|      1|    let mut i8_8: i8 = 3i8;
 1699|      1|    let mut utcoffset_5: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
 1700|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1701|      1|    let mut i8_9: i8 = 4i8;
 1702|      1|    let mut i8_10: i8 = 24i8;
 1703|      1|    let mut i8_11: i8 = 5i8;
 1704|      1|    let mut utcoffset_6: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_11, i8_10, i8_9);
 1705|      1|    let mut utcoffset_6_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_6;
 1706|      1|    let mut i8_12: i8 = 60i8;
 1707|      1|    let mut i8_13: i8 = 2i8;
 1708|      1|    let mut i8_14: i8 = 4i8;
 1709|      1|    let mut utcoffset_7: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_14, i8_13, i8_12);
 1710|      1|    let mut utcoffset_7_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_7;
 1711|      1|    let mut bool_0: bool = std::cmp::PartialEq::ne(utcoffset_7_ref_0, utcoffset_6_ref_0);
 1712|      1|    let mut bool_1: bool = std::cmp::PartialEq::ne(utcoffset_0_ref_0, utcoffset_4_ref_0);
 1713|      1|    let mut bool_2: bool = std::cmp::PartialEq::ne(utcoffset_3_ref_0, utcoffset_2_ref_0);
 1714|      1|    panic!("From RustyUnit with love");
 1715|       |}
 1716|       |
 1717|       |//#[no_coverage]
 1718|      1|#[test]
 1719|       |#[should_panic]
 1720|      1|#[timeout(3000)]
 1721|      1|fn rusty_test_1723() {
 1722|      1|    rusty_monitor::set_test_id(1723);
 1723|      1|    let mut i64_0: i64 = 0i64;
 1724|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
 1725|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
 1726|      1|    let mut i32_0: i32 = 167i32;
 1727|      1|    let mut i64_1: i64 = 60i64;
 1728|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new(i64_1, i32_0);
 1729|      1|    let mut i32_1: i32 = 353i32;
 1730|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1731|      1|    let mut i32_2: i32 = 167i32;
 1732|      1|    let mut i64_2: i64 = 0i64;
 1733|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1734|      1|    let mut duration_2: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1735|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1736|      1|    let mut i32_3: i32 = 207i32;
 1737|      1|    let mut i64_3: i64 = 253402300799i64;
 1738|      1|    let mut i8_0: i8 = 3i8;
 1739|      1|    let mut i8_1: i8 = 24i8;
 1740|      1|    let mut i8_2: i8 = 2i8;
 1741|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1742|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1743|      1|    let mut bool_0: bool = false;
 1744|      1|    let mut i64_4: i64 = 253402300799i64;
 1745|      1|    let mut i64_5: i64 = 9223372036854775807i64;
 1746|      1|    let mut i64_6: i64 = 24i64;
 1747|      1|    let mut str_0: &str = "lztQjvdrjE";
 1748|      1|    let mut str_0_ref_0: &str = &mut str_0;
 1749|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_6, maximum: i64_5, value: i64_4, conditional_range: bool_0};
 1750|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
 1751|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1752|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_2);
 1753|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_3);
 1754|      1|    let mut u8_0: u8 = crate::util::days_in_year_month(i32_3, month_0);
 1755|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1756|      1|    let mut i64_7: i64 = crate::duration::Duration::whole_minutes(duration_2);
 1757|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1758|      1|    let mut bool_2: bool = crate::util::is_leap_year(i32_2);
 1759|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_1);
 1760|      1|    let mut u8_1: u8 = crate::offset_date_time::OffsetDateTime::iso_week(offsetdatetime_0);
 1761|      1|    let mut i64_8: i64 = crate::duration::Duration::whole_seconds(duration_0);
 1762|      1|    panic!("From RustyUnit with love");
 1763|       |}
 1764|       |
 1765|       |//#[no_coverage]
 1766|      1|#[test]
 1767|       |#[should_panic]
 1768|      1|#[timeout(3000)]
 1769|      1|fn rusty_test_4649() {
 1770|      1|    rusty_monitor::set_test_id(4649);
 1771|      1|    let mut i32_0: i32 = 167i32;
 1772|      1|    let mut i64_0: i64 = 60i64;
 1773|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1774|      1|    let mut i32_1: i32 = 353i32;
 1775|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1776|      1|    let mut i32_2: i32 = 167i32;
 1777|      1|    let mut i64_1: i64 = 0i64;
 1778|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1779|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1780|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1781|      1|    let mut i32_3: i32 = 207i32;
 1782|      1|    let mut i64_2: i64 = 253402300799i64;
 1783|      1|    let mut i8_0: i8 = 3i8;
 1784|      1|    let mut i8_1: i8 = 24i8;
 1785|      1|    let mut i8_2: i8 = 2i8;
 1786|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1787|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_0);
 1788|      1|    let mut bool_0: bool = false;
 1789|      1|    let mut i64_3: i64 = 253402300799i64;
 1790|      1|    let mut i64_4: i64 = 9223372036854775807i64;
 1791|      1|    let mut i64_5: i64 = 24i64;
 1792|      1|    let mut str_0: &str = "lztQjvdrjE";
 1793|      1|    let mut str_0_ref_0: &str = &mut str_0;
 1794|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_0};
 1795|      1|    let mut componentrange_0_ref_0: &crate::error::component_range::ComponentRange = &mut componentrange_0;
 1796|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1797|      1|    let mut bool_1: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_2);
 1798|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1799|      1|    let mut u8_0: u8 = crate::util::days_in_year_month(i32_3, month_0);
 1800|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1801|      1|    let mut i64_6: i64 = crate::duration::Duration::whole_minutes(duration_1);
 1802|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1803|      1|    let mut bool_2: bool = crate::util::is_leap_year(i32_2);
 1804|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_0);
 1805|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
 1806|      1|    panic!("From RustyUnit with love");
 1807|       |}
 1808|       |
 1809|       |//#[no_coverage]
 1810|      1|#[test]
 1811|       |#[should_panic]
 1812|      1|#[timeout(3000)]
 1813|      1|fn rusty_test_5868() {
 1814|      1|    rusty_monitor::set_test_id(5868);
 1815|      1|    let mut u32_0: u32 = 100000000u32;
 1816|      1|    let mut u8_0: u8 = 12u8;
 1817|      1|    let mut u8_1: u8 = 3u8;
 1818|      1|    let mut u8_2: u8 = 23u8;
 1819|      1|    let mut i8_0: i8 = 6i8;
 1820|      1|    let mut i8_1: i8 = 23i8;
 1821|      1|    let mut i8_2: i8 = -14i8;
 1822|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
 1823|      1|    let mut utcoffset_0_ref_0: &crate::utc_offset::UtcOffset = &mut utcoffset_0;
 1824|      1|    let mut i32_0: i32 = 167i32;
 1825|      1|    let mut i64_0: i64 = 60i64;
 1826|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new(i64_0, i32_0);
 1827|      1|    let mut i32_1: i32 = 353i32;
 1828|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_1};
 1829|      1|    let mut i32_2: i32 = 167i32;
 1830|      1|    let mut i64_1: i64 = 0i64;
 1831|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
 1832|      1|    let mut duration_1: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
 1833|      1|    let mut month_0: month::Month = crate::month::Month::July;
 1834|      1|    let mut i64_2: i64 = 253402300799i64;
 1835|      1|    let mut i8_3: i8 = 3i8;
 1836|      1|    let mut i8_4: i8 = 24i8;
 1837|      1|    let mut i8_5: i8 = 2i8;
 1838|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
 1839|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_1);
 1840|      1|    let mut utcoffset_3: crate::utc_offset::UtcOffset = std::ops::Neg::neg(utcoffset_2);
 1841|      1|    let mut bool_0: bool = crate::utc_offset::UtcOffset::is_positive(utcoffset_3);
 1842|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_2);
 1843|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
 1844|      1|    let mut i64_3: i64 = crate::duration::Duration::whole_minutes(duration_1);
 1845|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_1);
 1846|      1|    let mut bool_1: bool = crate::util::is_leap_year(i32_2);
 1847|      1|    let mut option_0: std::option::Option<crate::date::Date> = crate::date::Date::checked_sub(date_0, duration_0);
 1848|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(utcoffset_0_ref_0);
 1849|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_nano(u8_2, u8_1, u8_0, u32_0);
 1850|      1|    panic!("From RustyUnit with love");
 1851|       |}
 1852|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/util.rs:
    1|       |//! Utility functions.
    2|       |
    3|       |use crate::Month;
    4|       |
    5|       |/// Whether to adjust the date, and in which direction. Useful when implementing arithmetic.
    6|       |pub(crate) enum DateAdjustment {
    7|       |    /// The previous day should be used.
    8|       |    Previous,
    9|       |    /// The next day should be used.
   10|       |    Next,
   11|       |    /// The date should be used as-is.
   12|       |    None,
   13|       |}
   14|       |
   15|       |/// Get the number of days in the month of a given year.
   16|       |///
   17|       |/// ```rust
   18|       |/// # use time::{Month, util};
   19|       |/// assert_eq!(util::days_in_year_month(2020, Month::February), 29);
   20|       |/// ```
   21|       |pub const fn days_in_year_month(year: i32, month: Month) -> u8 {
   22|       |    use Month::*;
   23|      0|    match month {
   24|      0|        January | March | May | July | August | October | December => 31,
   25|      0|        April | June | September | November => 30,
   26|      0|        February if is_leap_year(year) => 29,
   27|      0|        February => 28,
   28|       |    }
   29|      0|}
   30|       |
   31|       |/// Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses
   32|       |/// [astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).
   33|       |///
   34|       |/// ```rust
   35|       |/// # use time::util::is_leap_year;
   36|       |/// assert!(!is_leap_year(1900));
   37|       |/// assert!(is_leap_year(2000));
   38|       |/// assert!(is_leap_year(2004));
   39|       |/// assert!(!is_leap_year(2005));
   40|       |/// assert!(!is_leap_year(2100));
   41|       |/// ```
   42|      0|pub const fn is_leap_year(year: i32) -> bool {
   43|      0|    year % 4 == 0 && (year % 25 != 0 || year % 16 == 0)
   44|      0|}
   45|       |
   46|       |/// Get the number of calendar days in a given year.
   47|       |///
   48|       |/// The returned value will always be either 365 or 366.
   49|       |///
   50|       |/// ```rust
   51|       |/// # use time::util::days_in_year;
   52|       |/// assert_eq!(days_in_year(1900), 365);
   53|       |/// assert_eq!(days_in_year(2000), 366);
   54|       |/// assert_eq!(days_in_year(2004), 366);
   55|       |/// assert_eq!(days_in_year(2005), 365);
   56|       |/// assert_eq!(days_in_year(2100), 365);
   57|       |/// ```
   58|      0|pub const fn days_in_year(year: i32) -> u16 {
   59|      0|    if is_leap_year(year) { 366 } else { 365 }
   60|      0|}
   61|       |
   62|       |/// Get the number of weeks in the ISO year.
   63|       |///
   64|       |/// The returned value will always be either 52 or 53.
   65|       |///
   66|       |/// ```rust
   67|       |/// # use time::util::weeks_in_year;
   68|       |/// assert_eq!(weeks_in_year(2019), 52);
   69|       |/// assert_eq!(weeks_in_year(2020), 53);
   70|       |/// ```
   71|      0|pub const fn weeks_in_year(year: i32) -> u8 {
   72|      0|    match year.rem_euclid(400) {
   73|       |        4 | 9 | 15 | 20 | 26 | 32 | 37 | 43 | 48 | 54 | 60 | 65 | 71 | 76 | 82 | 88 | 93 | 99
   74|       |        | 105 | 111 | 116 | 122 | 128 | 133 | 139 | 144 | 150 | 156 | 161 | 167 | 172 | 178
   75|       |        | 184 | 189 | 195 | 201 | 207 | 212 | 218 | 224 | 229 | 235 | 240 | 246 | 252 | 257
   76|       |        | 263 | 268 | 274 | 280 | 285 | 291 | 296 | 303 | 308 | 314 | 320 | 325 | 331 | 336
   77|      0|        | 342 | 348 | 353 | 359 | 364 | 370 | 376 | 381 | 387 | 392 | 398 => 53,
   78|      0|        _ => 52,
   79|       |    }
   80|      0|}
   81|       |
   82|       |#[cfg(test)]
   83|       |mod rusty_tests {
   84|       |	use crate::*;
   85|       |
   86|       |//#[no_coverage]
   87|      1|#[test]
   88|       |#[should_panic]
   89|      1|#[timeout(3000)]
   90|      1|fn rusty_test_246() {
   91|      1|    rusty_monitor::set_test_id(246);
   92|      1|    let mut bool_0: bool = false;
   93|      1|    let mut i64_0: i64 = 2147483647i64;
   94|      1|    let mut i64_1: i64 = 2440588i64;
   95|      1|    let mut i64_2: i64 = 1000000000i64;
   96|      1|    let mut str_0: &str = "name";
   97|      1|    let mut str_0_ref_0: &str = &mut str_0;
   98|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_2, maximum: i64_1, value: i64_0, conditional_range: bool_0};
   99|      1|    let mut bool_1: bool = false;
  100|      1|    let mut i64_3: i64 = 0i64;
  101|      1|    let mut i64_4: i64 = 253402300799i64;
  102|      1|    let mut i64_5: i64 = 3600i64;
  103|      1|    let mut str_1: &str = "Source value is out of range for the target type";
  104|      1|    let mut str_1_ref_0: &str = &mut str_1;
  105|      1|    let mut componentrange_1: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_1_ref_0, minimum: i64_5, maximum: i64_4, value: i64_3, conditional_range: bool_1};
  106|      1|    let mut bool_2: bool = true;
  107|      1|    let mut i64_6: i64 = 3600i64;
  108|      1|    let mut i64_7: i64 = 0i64;
  109|      1|    let mut i64_8: i64 = 2440588i64;
  110|      1|    let mut str_2: &str = "U2Co";
  111|      1|    let mut str_2_ref_0: &str = &mut str_2;
  112|      1|    let mut componentrange_2: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_2_ref_0, minimum: i64_8, maximum: i64_7, value: i64_6, conditional_range: bool_2};
  113|      1|    let mut bool_3: bool = true;
  114|      1|    let mut i64_9: i64 = 604800i64;
  115|      1|    let mut i64_10: i64 = 101i64;
  116|      1|    let mut i64_11: i64 = 18i64;
  117|      1|    let mut str_3: &str = "value";
  118|      1|    let mut str_3_ref_0: &str = &mut str_3;
  119|      1|    let mut componentrange_3: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_3_ref_0, minimum: i64_11, maximum: i64_10, value: i64_9, conditional_range: bool_3};
  120|      1|    let mut str_4: &str = crate::error::component_range::ComponentRange::name(componentrange_3);
  121|      1|    let mut str_5: &str = crate::error::component_range::ComponentRange::name(componentrange_2);
  122|      1|    let mut str_6: &str = crate::error::component_range::ComponentRange::name(componentrange_1);
  123|      1|    let mut str_7: &str = crate::error::component_range::ComponentRange::name(componentrange_0);
  124|      1|    panic!("From RustyUnit with love");
  125|       |}
  126|       |}

/home/xiang/workspace/rustyunit/time/rusty-unit/seeded-dynamosa/rusty-unit-8/src/weekday.rs:
    1|       |//! Days of the week.
    2|       |
    3|       |use core::fmt::{self, Display};
    4|       |
    5|       |use Weekday::*;
    6|       |
    7|       |/// Days of the week.
    8|       |///
    9|       |/// As order is dependent on context (Sunday could be either two days after or five days before
   10|       |/// Friday), this type does not implement `PartialOrd` or `Ord`.
   11|      0|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
   12|       |pub enum Weekday {
   13|       |    #[allow(clippy::missing_docs_in_private_items)]
   14|       |    Monday,
   15|       |    #[allow(clippy::missing_docs_in_private_items)]
   16|       |    Tuesday,
   17|       |    #[allow(clippy::missing_docs_in_private_items)]
   18|       |    Wednesday,
   19|       |    #[allow(clippy::missing_docs_in_private_items)]
   20|       |    Thursday,
   21|       |    #[allow(clippy::missing_docs_in_private_items)]
   22|       |    Friday,
   23|       |    #[allow(clippy::missing_docs_in_private_items)]
   24|       |    Saturday,
   25|       |    #[allow(clippy::missing_docs_in_private_items)]
   26|       |    Sunday,
   27|       |}
   28|       |
   29|       |impl Weekday {
   30|       |    /// Get the previous weekday.
   31|       |    ///
   32|       |    /// ```rust
   33|       |    /// # use time::Weekday;
   34|       |    /// assert_eq!(Weekday::Tuesday.previous(), Weekday::Monday);
   35|       |    /// ```
   36|      0|    pub const fn previous(self) -> Self {
   37|      0|        match self {
   38|      0|            Monday => Sunday,
   39|      0|            Tuesday => Monday,
   40|      0|            Wednesday => Tuesday,
   41|      0|            Thursday => Wednesday,
   42|      0|            Friday => Thursday,
   43|      0|            Saturday => Friday,
   44|      0|            Sunday => Saturday,
   45|       |        }
   46|      0|    }
   47|       |
   48|       |    /// Get the next weekday.
   49|       |    ///
   50|       |    /// ```rust
   51|       |    /// # use time::Weekday;
   52|       |    /// assert_eq!(Weekday::Monday.next(), Weekday::Tuesday);
   53|       |    /// ```
   54|      0|    pub const fn next(self) -> Self {
   55|      0|        match self {
   56|      0|            Monday => Tuesday,
   57|      0|            Tuesday => Wednesday,
   58|      0|            Wednesday => Thursday,
   59|      0|            Thursday => Friday,
   60|      0|            Friday => Saturday,
   61|      0|            Saturday => Sunday,
   62|      0|            Sunday => Monday,
   63|       |        }
   64|      0|    }
   65|       |
   66|       |    /// Get the one-indexed number of days from Monday.
   67|       |    ///
   68|       |    /// ```rust
   69|       |    /// # use time::Weekday;
   70|       |    /// assert_eq!(Weekday::Monday.number_from_monday(), 1);
   71|       |    /// ```
   72|       |    #[doc(alias = "iso_weekday_number")]
   73|      0|    pub const fn number_from_monday(self) -> u8 {
   74|      0|        self.number_days_from_monday() + 1
   75|      0|    }
   76|       |
   77|       |    /// Get the one-indexed number of days from Sunday.
   78|       |    ///
   79|       |    /// ```rust
   80|       |    /// # use time::Weekday;
   81|       |    /// assert_eq!(Weekday::Monday.number_from_sunday(), 2);
   82|       |    /// ```
   83|      0|    pub const fn number_from_sunday(self) -> u8 {
   84|      0|        self.number_days_from_sunday() + 1
   85|      0|    }
   86|       |
   87|       |    /// Get the zero-indexed number of days from Monday.
   88|       |    ///
   89|       |    /// ```rust
   90|       |    /// # use time::Weekday;
   91|       |    /// assert_eq!(Weekday::Monday.number_days_from_monday(), 0);
   92|       |    /// ```
   93|      0|    pub const fn number_days_from_monday(self) -> u8 {
   94|      0|        self as _
   95|      0|    }
   96|       |
   97|       |    /// Get the zero-indexed number of days from Sunday.
   98|       |    ///
   99|       |    /// ```rust
  100|       |    /// # use time::Weekday;
  101|       |    /// assert_eq!(Weekday::Monday.number_days_from_sunday(), 1);
  102|       |    /// ```
  103|      0|    pub const fn number_days_from_sunday(self) -> u8 {
  104|      0|        match self {
  105|      0|            Monday => 1,
  106|      0|            Tuesday => 2,
  107|      0|            Wednesday => 3,
  108|      0|            Thursday => 4,
  109|      0|            Friday => 5,
  110|      0|            Saturday => 6,
  111|      0|            Sunday => 0,
  112|       |        }
  113|      0|    }
  114|       |}
  115|       |
  116|       |impl Display for Weekday {
  117|       |    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  118|      0|        f.write_str(match self {
  119|      0|            Monday => "Monday",
  120|      0|            Tuesday => "Tuesday",
  121|      0|            Wednesday => "Wednesday",
  122|      0|            Thursday => "Thursday",
  123|      0|            Friday => "Friday",
  124|      0|            Saturday => "Saturday",
  125|      0|            Sunday => "Sunday",
  126|       |        })
  127|      0|    }
  128|       |}
  129|       |
  130|       |#[cfg(test)]
  131|       |mod rusty_tests {
  132|       |	use crate::*;
  133|       |	use std::cmp::PartialEq;
  134|       |	use std::clone::Clone;
  135|       |	use std::cmp::Eq;
  136|       |//#[no_coverage]
  137|      1|#[test]
  138|       |#[should_panic]
  139|      1|#[timeout(3000)]
  140|      1|fn rusty_test_592() {
  141|      1|    rusty_monitor::set_test_id(592);
  142|      1|    let mut i64_0: i64 = 0i64;
  143|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::hours(i64_0);
  144|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  145|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_0);
  146|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  147|      1|    let mut weekday_0: weekday::Weekday = crate::date::Date::weekday(date_0);
  148|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
  149|      1|    let mut i8_0: i8 = 24i8;
  150|      1|    let mut i8_1: i8 = 73i8;
  151|      1|    let mut i8_2: i8 = 3i8;
  152|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  153|      1|    let mut i8_3: i8 = 2i8;
  154|      1|    let mut i8_4: i8 = 6i8;
  155|      1|    let mut i8_5: i8 = 24i8;
  156|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  157|      1|    let mut i8_6: i8 = 0i8;
  158|      1|    let mut i8_7: i8 = 24i8;
  159|      1|    let mut i8_8: i8 = 127i8;
  160|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_8, i8_7, i8_6);
  161|      1|    let mut i64_1: i64 = 2147483647i64;
  162|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::nanoseconds(i64_1);
  163|      1|    let mut i128_0: i128 = 1i128;
  164|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  165|      1|    let mut u32_0: u32 = 1000000u32;
  166|      1|    let mut u8_0: u8 = 2u8;
  167|      1|    let mut u8_1: u8 = 10u8;
  168|      1|    let mut u8_2: u8 = 28u8;
  169|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  170|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Sunday;
  171|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
  172|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Sunday;
  173|      1|    let mut weekday_2_ref_0: &weekday::Weekday = &mut weekday_2;
  174|      1|    let mut weekday_3: weekday::Weekday = crate::weekday::Weekday::Saturday;
  175|      1|    let mut weekday_4: weekday::Weekday = crate::weekday::Weekday::next(weekday_3);
  176|      1|    let mut weekday_4_ref_0: &weekday::Weekday = &mut weekday_4;
  177|      1|    let mut tuple_0: () = std::cmp::Eq::assert_receiver_is_total_eq(weekday_4_ref_0);
  178|      1|    let mut tuple_1: () = std::cmp::Eq::assert_receiver_is_total_eq(weekday_2_ref_0);
  179|      1|    let mut tuple_2: () = std::cmp::Eq::assert_receiver_is_total_eq(weekday_1_ref_0);
  180|      1|    let mut tuple_3: () = std::cmp::Eq::assert_receiver_is_total_eq(weekday_0_ref_0);
  181|      1|    panic!("From RustyUnit with love");
  182|       |}
  183|       |
  184|       |//#[no_coverage]
  185|      1|#[test]
  186|       |#[should_panic]
  187|      1|#[timeout(3000)]
  188|      1|fn rusty_test_145() {
  189|      1|    rusty_monitor::set_test_id(145);
  190|      1|    let mut i64_0: i64 = 1i64;
  191|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::days(i64_0);
  192|      1|    let mut u32_0: u32 = 999999u32;
  193|      1|    let mut u8_0: u8 = 59u8;
  194|      1|    let mut u8_1: u8 = 5u8;
  195|      1|    let mut u8_2: u8 = 4u8;
  196|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  197|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  198|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::replace_time(offsetdatetime_0, time_0);
  199|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_1);
  200|      1|    let mut i32_0: i32 = 1721119i32;
  201|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  202|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
  203|      1|    let mut i64_1: i64 = 2440588i64;
  204|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::hours(i64_1);
  205|      1|    let mut u16_0: u16 = 10u16;
  206|      1|    let mut i32_1: i32 = 1i32;
  207|      1|    let mut date_0: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  208|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_0);
  209|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::saturating_add(primitivedatetime_0, duration_1);
  210|      1|    let mut weekday_1: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_1);
  211|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
  212|      1|    let mut i32_2: i32 = 28i32;
  213|      1|    let mut date_1: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  214|      1|    let mut date_1_ref_0: &crate::date::Date = &mut date_1;
  215|      1|    let mut month_0: month::Month = crate::month::Month::August;
  216|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(weekday_1_ref_0, weekday_0_ref_0);
  217|      1|    let mut month_0_ref_0: &month::Month = &mut month_0;
  218|      1|    let mut u16_1: u16 = crate::util::days_in_year(i32_0);
  219|      1|    let mut i16_0: i16 = crate::utc_offset::UtcOffset::whole_minutes(utcoffset_0);
  220|      1|    let mut duration_2: std::time::Duration = crate::duration::Duration::abs_std(duration_0);
  221|      1|    panic!("From RustyUnit with love");
  222|       |}
  223|       |
  224|       |//#[no_coverage]
  225|      1|#[test]
  226|       |#[should_panic]
  227|      1|#[timeout(3000)]
  228|      1|fn rusty_test_988() {
  229|      1|    rusty_monitor::set_test_id(988);
  230|      1|    let mut i128_0: i128 = 9223372036854775807i128;
  231|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  232|      1|    let mut i8_0: i8 = 24i8;
  233|      1|    let mut i8_1: i8 = 6i8;
  234|      1|    let mut i8_2: i8 = 3i8;
  235|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  236|      1|    let mut u32_0: u32 = 1000u32;
  237|      1|    let mut u8_0: u8 = 30u8;
  238|      1|    let mut u8_1: u8 = 53u8;
  239|      1|    let mut u8_2: u8 = 23u8;
  240|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  241|      1|    let mut i64_0: i64 = 3600i64;
  242|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::weeks(i64_0);
  243|      1|    let mut i32_0: i32 = -14i32;
  244|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  245|      1|    let mut date_1: crate::date::Date = crate::date::Date::saturating_sub(date_0, duration_1);
  246|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
  247|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::primitive_date_time::PrimitiveDateTime::assume_offset(primitivedatetime_0, utcoffset_0);
  248|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_add(offsetdatetime_0, duration_0);
  249|      1|    let mut weekday_0: weekday::Weekday = crate::offset_date_time::OffsetDateTime::weekday(offsetdatetime_1);
  250|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::previous(weekday_0);
  251|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
  252|      1|    let mut u32_1: u32 = 100000000u32;
  253|      1|    let mut u8_3: u8 = 24u8;
  254|      1|    let mut u8_4: u8 = 1u8;
  255|      1|    let mut u8_5: u8 = 0u8;
  256|      1|    let mut time_1: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_5, u8_4, u8_3, u32_1);
  257|      1|    let mut u32_2: u32 = 100u32;
  258|      1|    let mut u8_6: u8 = 31u8;
  259|      1|    let mut u8_7: u8 = 31u8;
  260|      1|    let mut u8_8: u8 = 23u8;
  261|      1|    let mut time_2: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_8, u8_7, u8_6, u32_2);
  262|      1|    let mut i32_1: i32 = 303i32;
  263|      1|    let mut date_2: crate::date::Date = crate::date::Date {value: i32_1};
  264|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_2, time_2);
  265|      1|    let mut primitivedatetime_2: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_time(primitivedatetime_1, time_1);
  266|      1|    let mut weekday_2: weekday::Weekday = crate::primitive_date_time::PrimitiveDateTime::weekday(primitivedatetime_2);
  267|      1|    let mut weekday_3: weekday::Weekday = crate::weekday::Weekday::previous(weekday_2);
  268|      1|    let mut weekday_3_ref_0: &weekday::Weekday = &mut weekday_3;
  269|      1|    let mut weekday_4: weekday::Weekday = crate::weekday::Weekday::Sunday;
  270|      1|    let mut weekday_4_ref_0: &weekday::Weekday = &mut weekday_4;
  271|      1|    let mut weekday_5: weekday::Weekday = crate::weekday::Weekday::Monday;
  272|      1|    let mut weekday_5_ref_0: &weekday::Weekday = &mut weekday_5;
  273|      1|    let mut weekday_6: weekday::Weekday = crate::weekday::Weekday::Wednesday;
  274|      1|    let mut weekday_6_ref_0: &weekday::Weekday = &mut weekday_6;
  275|      1|    let mut weekday_7: weekday::Weekday = crate::weekday::Weekday::Friday;
  276|      1|    let mut weekday_7_ref_0: &weekday::Weekday = &mut weekday_7;
  277|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(weekday_7_ref_0, weekday_6_ref_0);
  278|      1|    let mut bool_1: bool = std::cmp::PartialEq::eq(weekday_5_ref_0, weekday_4_ref_0);
  279|      1|    let mut bool_2: bool = std::cmp::PartialEq::eq(weekday_3_ref_0, weekday_1_ref_0);
  280|      1|    panic!("From RustyUnit with love");
  281|       |}
  282|       |
  283|       |//#[no_coverage]
  284|      1|#[test]
  285|       |#[should_panic]
  286|      1|#[timeout(3000)]
  287|      1|fn rusty_test_2261() {
  288|      1|    rusty_monitor::set_test_id(2261);
  289|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Saturday;
  290|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::next(weekday_0);
  291|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
  292|      1|    let mut u8_0: u8 = 28u8;
  293|      1|    let mut u8_1: u8 = 23u8;
  294|      1|    let mut u8_2: u8 = 37u8;
  295|      1|    let mut i32_0: i32 = 54i32;
  296|      1|    let mut date_0: crate::date::Date = crate::date::Date {value: i32_0};
  297|      1|    let mut i64_0: i64 = -20i64;
  298|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::milliseconds(i64_0);
  299|      1|    let mut i32_1: i32 = 348i32;
  300|      1|    let mut i64_1: i64 = 1000000000i64;
  301|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_1, i32_1);
  302|      1|    let mut i8_0: i8 = 1i8;
  303|      1|    let mut i8_1: i8 = 23i8;
  304|      1|    let mut i8_2: i8 = 4i8;
  305|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  306|      1|    let mut i32_2: i32 = 5119853i32;
  307|      1|    let mut i64_2: i64 = 0i64;
  308|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_2, i32_2);
  309|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  310|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_2);
  311|      1|    let mut time_0: crate::time::Time = crate::offset_date_time::OffsetDateTime::time(offsetdatetime_1);
  312|      1|    let mut i8_3: i8 = 60i8;
  313|      1|    let mut i8_4: i8 = 0i8;
  314|      1|    let mut i8_5: i8 = 41i8;
  315|      1|    let mut utcoffset_1: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_5, i8_4, i8_3);
  316|      1|    let mut offsetdatetime_2: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  317|      1|    let mut utcoffset_2: crate::utc_offset::UtcOffset = crate::offset_date_time::OffsetDateTime::offset(offsetdatetime_2);
  318|      1|    let mut i64_3: i64 = 604800i64;
  319|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::microseconds(i64_3);
  320|      1|    let mut u16_0: u16 = 60u16;
  321|      1|    let mut i32_3: i32 = 99i32;
  322|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_3, u16_0);
  323|      1|    let mut i64_4: i64 = 1000i64;
  324|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::weeks(i64_4);
  325|      1|    let mut f32_0: f32 = 1065353216.000000f32;
  326|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f32(f32_0);
  327|      1|    let mut duration_6: std::time::Duration = crate::duration::Duration::abs_std(duration_5);
  328|      1|    let mut weekday_2: weekday::Weekday = crate::weekday::Weekday::Wednesday;
  329|      1|    let mut duration_3_ref_0: &mut crate::duration::Duration = &mut duration_3;
  330|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms(date_0, u8_2, u8_1, u8_0);
  331|      1|    let mut weekday_2_ref_0: &weekday::Weekday = &mut weekday_2;
  332|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(weekday_2_ref_0, weekday_1_ref_0);
  333|      1|    panic!("From RustyUnit with love");
  334|       |}
  335|       |
  336|       |//#[no_coverage]
  337|      1|#[test]
  338|       |#[should_panic]
  339|      1|#[timeout(3000)]
  340|      1|fn rusty_test_4750() {
  341|      1|    rusty_monitor::set_test_id(4750);
  342|      1|    let mut i8_0: i8 = 24i8;
  343|      1|    let mut i8_1: i8 = 60i8;
  344|      1|    let mut i8_2: i8 = 0i8;
  345|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  346|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::now_utc();
  347|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::to_offset(offsetdatetime_0, utcoffset_0);
  348|      1|    let mut date_0: crate::date::Date = crate::offset_date_time::OffsetDateTime::date(offsetdatetime_1);
  349|      1|    let mut i32_0: i32 = 131i32;
  350|      1|    let mut date_1: crate::date::Date = crate::date::Date {value: i32_0};
  351|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::date::Date::midnight(date_1);
  352|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  353|      1|    let mut u16_0: u16 = 90u16;
  354|      1|    let mut u8_0: u8 = 6u8;
  355|      1|    let mut u8_1: u8 = 15u8;
  356|      1|    let mut u8_2: u8 = 4u8;
  357|      1|    let mut i32_1: i32 = 122i32;
  358|      1|    let mut i64_0: i64 = 86400i64;
  359|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::new_unchecked(i64_0, i32_1);
  360|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::abs(duration_0);
  361|      1|    let mut f64_0: f64 = 4652007308841189376.000000f64;
  362|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  363|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  364|      1|    let mut duration_3: crate::duration::Duration = crate::instant::Instant::elapsed(instant_0);
  365|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_3, duration_2);
  366|      1|    let mut i32_2: i32 = 1721425i32;
  367|      1|    let mut date_2: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_2);
  368|      1|    let mut date_3: crate::date::Date = crate::date::Date::saturating_add(date_2, duration_4);
  369|      1|    let mut bool_0: bool = true;
  370|      1|    let mut i64_1: i64 = 1000000000i64;
  371|      1|    let mut i64_2: i64 = 1000000000i64;
  372|      1|    let mut i64_3: i64 = 86400i64;
  373|      1|    let mut str_0: &str = "Cannot represent a resulting duration in std. Try `let x = x - rhs;`, which will change the type.";
  374|      1|    let mut str_0_ref_0: &str = &mut str_0;
  375|      1|    let mut componentrange_0: crate::error::component_range::ComponentRange = crate::error::component_range::ComponentRange {name: str_0_ref_0, minimum: i64_3, maximum: i64_2, value: i64_1, conditional_range: bool_0};
  376|      1|    let mut error_0: error::Error = crate::error::Error::ComponentRange(componentrange_0);
  377|      1|    let mut date_4: crate::date::Date = crate::date::Date::saturating_add(date_3, duration_1);
  378|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Friday;
  379|      1|    let mut result_0: std::result::Result<crate::primitive_date_time::PrimitiveDateTime, crate::error::component_range::ComponentRange> = crate::date::Date::with_hms_milli(date_4, u8_2, u8_1, u8_0, u16_0);
  380|      1|    let mut i32_3: i32 = crate::primitive_date_time::PrimitiveDateTime::to_julian_day(primitivedatetime_1);
  381|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
  382|      1|    let mut weekday_1: weekday::Weekday = std::clone::Clone::clone(weekday_0_ref_0);
  383|      1|    panic!("From RustyUnit with love");
  384|       |}
  385|       |
  386|       |//#[no_coverage]
  387|      1|#[test]
  388|       |#[should_panic]
  389|      1|#[timeout(3000)]
  390|      1|fn rusty_test_8562() {
  391|      1|    rusty_monitor::set_test_id(8562);
  392|      1|    let mut i64_0: i64 = 1000i64;
  393|      1|    let mut duration_0: crate::duration::Duration = crate::duration::Duration::seconds(i64_0);
  394|      1|    let mut i64_1: i64 = 3600i64;
  395|      1|    let mut duration_1: crate::duration::Duration = crate::duration::Duration::seconds(i64_1);
  396|      1|    let mut duration_2: crate::duration::Duration = crate::duration::Duration::abs(duration_1);
  397|      1|    let mut weekday_0: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  398|      1|    let mut weekday_0_ref_0: &weekday::Weekday = &mut weekday_0;
  399|      1|    let mut i128_0: i128 = 1000000000i128;
  400|      1|    let mut duration_3: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_0);
  401|      1|    let mut duration_4: crate::duration::Duration = crate::duration::Duration::abs(duration_3);
  402|      1|    let mut i64_2: i64 = -54i64;
  403|      1|    let mut f64_0: f64 = 4828193600913801216.000000f64;
  404|      1|    let mut duration_5: crate::duration::Duration = crate::duration::Duration::seconds_f64(f64_0);
  405|      1|    let mut duration_6: crate::duration::Duration = crate::duration::Duration::abs(duration_5);
  406|      1|    let mut i8_0: i8 = 9i8;
  407|      1|    let mut i8_1: i8 = 127i8;
  408|      1|    let mut i8_2: i8 = 23i8;
  409|      1|    let mut utcoffset_0: crate::utc_offset::UtcOffset = crate::utc_offset::UtcOffset::__from_hms_unchecked(i8_2, i8_1, i8_0);
  410|      1|    let mut i32_0: i32 = 48i32;
  411|      1|    let mut date_0: crate::date::Date = crate::date::Date::from_julian_day_unchecked(i32_0);
  412|      1|    let mut u32_0: u32 = 10000000u32;
  413|      1|    let mut u8_0: u8 = 9u8;
  414|      1|    let mut u8_1: u8 = 0u8;
  415|      1|    let mut u8_2: u8 = 9u8;
  416|      1|    let mut time_0: crate::time::Time = crate::time::Time::__from_hms_nanos_unchecked(u8_2, u8_1, u8_0, u32_0);
  417|      1|    let mut u16_0: u16 = 59u16;
  418|      1|    let mut i32_1: i32 = 136i32;
  419|      1|    let mut date_1: crate::date::Date = crate::date::Date::__from_ordinal_date_unchecked(i32_1, u16_0);
  420|      1|    let mut primitivedatetime_0: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::new(date_1, time_0);
  421|      1|    let mut primitivedatetime_1: crate::primitive_date_time::PrimitiveDateTime = crate::primitive_date_time::PrimitiveDateTime::replace_date(primitivedatetime_0, date_0);
  422|      1|    let mut offsetdatetime_0: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime {utc_datetime: primitivedatetime_1, offset: utcoffset_0};
  423|      1|    let mut offsetdatetime_1: crate::offset_date_time::OffsetDateTime = crate::offset_date_time::OffsetDateTime::saturating_sub(offsetdatetime_0, duration_6);
  424|      1|    let mut i128_1: i128 = 1000000000i128;
  425|      1|    let mut duration_7: crate::duration::Duration = crate::duration::Duration::nanoseconds_i128(i128_1);
  426|      1|    let mut duration_8: std::time::Duration = crate::duration::Duration::abs_std(duration_7);
  427|      1|    let mut duration_9: crate::duration::Duration = crate::duration::Duration::days(i64_2);
  428|      1|    let mut instant_0: crate::instant::Instant = crate::instant::Instant::now();
  429|      1|    let mut u16_1: u16 = 21u16;
  430|      1|    let mut u8_3: u8 = 23u8;
  431|      1|    let mut u8_4: u8 = 4u8;
  432|      1|    let mut u8_5: u8 = 53u8;
  433|      1|    let mut result_0: std::result::Result<crate::time::Time, crate::error::component_range::ComponentRange> = crate::time::Time::from_hms_milli(u8_5, u8_4, u8_3, u16_1);
  434|      1|    let mut weekday_1: weekday::Weekday = crate::weekday::Weekday::Tuesday;
  435|      1|    let mut u8_6: u8 = crate::offset_date_time::OffsetDateTime::hour(offsetdatetime_1);
  436|      1|    let mut i64_3: i64 = crate::duration::Duration::whole_minutes(duration_4);
  437|      1|    let mut weekday_1_ref_0: &weekday::Weekday = &mut weekday_1;
  438|      1|    let mut bool_0: bool = std::cmp::PartialEq::eq(weekday_1_ref_0, weekday_0_ref_0);
  439|      1|    let mut duration_10: crate::duration::Duration = crate::duration::Duration::saturating_add(duration_2, duration_0);
  440|      1|    panic!("From RustyUnit with love");
  441|       |}
  442|       |}

