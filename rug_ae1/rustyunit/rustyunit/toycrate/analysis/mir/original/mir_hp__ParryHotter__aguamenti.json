{"global_id":"hp__ParryHotter__aguamenti","cdg":"{\"nodes\":[42069,2,6,7,8,3,5,4,15,16,9,10,11,12,18,17,14,13,0,1,19,20],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[1,4,1],[1,5,1],[5,6,1],[5,7,1],[4,8,1],[4,9,1],[4,10,1],[4,11,1],[4,12,1],[4,13,1],[9,14,1],[9,15,1],[13,16,1],[13,17,1],[0,18,1],[0,19,1],[0,1,1],[0,20,1],[0,21,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"2\" ]\n    2 [ label = \"6\" ]\n    3 [ label = \"7\" ]\n    4 [ label = \"8\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"5\" ]\n    7 [ label = \"4\" ]\n    8 [ label = \"15\" ]\n    9 [ label = \"16\" ]\n    10 [ label = \"9\" ]\n    11 [ label = \"10\" ]\n    12 [ label = \"11\" ]\n    13 [ label = \"12\" ]\n    14 [ label = \"18\" ]\n    15 [ label = \"17\" ]\n    16 [ label = \"14\" ]\n    17 [ label = \"13\" ]\n    18 [ label = \"0\" ]\n    19 [ label = \"1\" ]\n    20 [ label = \"19\" ]\n    21 [ label = \"20\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    1 -> 5 [ label = \"1\" ]\n    5 -> 6 [ label = \"1\" ]\n    5 -> 7 [ label = \"1\" ]\n    4 -> 8 [ label = \"1\" ]\n    4 -> 9 [ label = \"1\" ]\n    4 -> 10 [ label = \"1\" ]\n    4 -> 11 [ label = \"1\" ]\n    4 -> 12 [ label = \"1\" ]\n    4 -> 13 [ label = \"1\" ]\n    9 -> 14 [ label = \"1\" ]\n    9 -> 15 [ label = \"1\" ]\n    13 -> 16 [ label = \"1\" ]\n    13 -> 17 [ label = \"1\" ]\n    0 -> 18 [ label = \"1\" ]\n    0 -> 19 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 20 [ label = \"1\" ]\n    0 -> 21 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"6\" ]\n    4 [ label = \"3\" ]\n    5 [ label = \"7\" ]\n    6 [ label = \"5\" ]\n    7 [ label = \"4\" ]\n    8 [ label = \"8\" ]\n    9 [ label = \"19\" ]\n    10 [ label = \"15\" ]\n    11 [ label = \"9\" ]\n    12 [ label = \"20\" ]\n    13 [ label = \"16\" ]\n    14 [ label = \"10\" ]\n    15 [ label = \"18\" ]\n    16 [ label = \"17\" ]\n    17 [ label = \"11\" ]\n    18 [ label = \"12\" ]\n    19 [ label = \"14\" ]\n    20 [ label = \"13\" ]\n    21 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    2 -> 4 [ label = \"1\" ]\n    3 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    5 -> 8 [ label = \"1\" ]\n    6 -> 9 [ label = \"1\" ]\n    7 -> 9 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    8 -> 11 [ label = \"1\" ]\n    9 -> 12 [ label = \"1\" ]\n    10 -> 13 [ label = \"1\" ]\n    11 -> 14 [ label = \"1\" ]\n    13 -> 15 [ label = \"1\" ]\n    13 -> 16 [ label = \"1\" ]\n    14 -> 17 [ label = \"1\" ]\n    15 -> 9 [ label = \"1\" ]\n    16 -> 9 [ label = \"1\" ]\n    17 -> 18 [ label = \"1\" ]\n    18 -> 19 [ label = \"1\" ]\n    18 -> 20 [ label = \"1\" ]\n    19 -> 9 [ label = \"1\" ]\n    20 -> 9 [ label = \"1\" ]\n    12 -> 21 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"6\" ]\n    4 [ label = \"3\" ]\n    5 [ label = \"7\" ]\n    6 [ label = \"5\" ]\n    7 [ label = \"4\" ]\n    8 [ label = \"8\" ]\n    9 [ label = \"19\" ]\n    10 [ label = \"15\" ]\n    11 [ label = \"9\" ]\n    12 [ label = \"20\" ]\n    13 [ label = \"16\" ]\n    14 [ label = \"10\" ]\n    15 [ label = \"18\" ]\n    16 [ label = \"17\" ]\n    17 [ label = \"11\" ]\n    18 [ label = \"12\" ]\n    19 [ label = \"14\" ]\n    20 [ label = \"13\" ]\n    21 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    2 -> 4 [ label = \"1\" ]\n    3 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    5 -> 8 [ label = \"1\" ]\n    6 -> 9 [ label = \"1\" ]\n    7 -> 9 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    8 -> 11 [ label = \"1\" ]\n    9 -> 12 [ label = \"1\" ]\n    10 -> 13 [ label = \"1\" ]\n    11 -> 14 [ label = \"1\" ]\n    13 -> 15 [ label = \"1\" ]\n    13 -> 16 [ label = \"1\" ]\n    14 -> 17 [ label = \"1\" ]\n    15 -> 9 [ label = \"1\" ]\n    16 -> 9 [ label = \"1\" ]\n    17 -> 18 [ label = \"1\" ]\n    18 -> 19 [ label = \"1\" ]\n    18 -> 20 [ label = \"1\" ]\n    19 -> 9 [ label = \"1\" ]\n    20 -> 9 [ label = \"1\" ]\n    12 -> 21 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"10","ty":{"Prim":{"Uint":"Usize"}}},{"val":"11","ty":{"Prim":{"Int":"I32"}}},{"val":"10","ty":{"Prim":{"Int":"I32"}}},{"val":"2","ty":{"Prim":{"Uint":"Usize"}}},{"val":"15","ty":{"Prim":{"Int":"I32"}}},{"val":"10","ty":{"Prim":{"Int":"I32"}}},{"val":"111","ty":{"Prim":{"Int":"I32"}}},{"val":"1","ty":{"Prim":{"Int":"I32"}}}],"branches":26,"assertions":1,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:31:53: 31:56 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Some(User(Set(ImplicitSelf(ImmRef)))), internal: false, is_block_tail: None, ty: &hp::ParryHotter, user_ty: None, source_info: SourceInfo { span: src/hp.rs:31:22: 31:27 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:31:32: 31:37 (#0)), opt_match_place: Some((Some(_2), src/hp.rs:31:29: 31:30 (#0))), pat_span: src/hp.rs:31:29: 31:30 (#0) })))), internal: false, is_block_tail: None, ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:31:29: 31:30 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:31:42: 31:48 (#0)), opt_match_place: Some((Some(_3), src/hp.rs:31:39: 31:40 (#0))), pat_span: src/hp.rs:31:39: 31:40 (#0) })))), internal: false, is_block_tail: None, ty: std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:31:39: 31:40 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:32:9: 52:10 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#114), scope: scope[0] } }","_5 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:32:9: 52:10 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#0), scope: scope[0] } }","_6 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:32:9: 52:10 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:32:9: 52:10 (#0) }), ty: &std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:33:13: 37:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:33:16: 33:22 (#115), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:33:13: 37:14 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:33:16: 33:17 (#0), scope: scope[0] } }","_10 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:39:13: 51:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#116), scope: scope[0] } }","_11 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:39:13: 51:14 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#0), scope: scope[0] } }","_12 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:39:13: 51:14 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#0), scope: scope[0] } }","_13 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:39:13: 51:14 (#0) }), ty: &std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#0), scope: scope[0] } }","_14 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:20: 40:71 (#117), scope: scope[0] } }","_15 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: &hp::ParryHotter, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:20: 40:71 (#0), scope: scope[0] } }","_16 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:37: 40:44 (#0), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: &std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:37: 40:44 (#0), scope: scope[0] } }","_18 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:46: 40:54 (#0), scope: scope[0] } }","_19 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:46: 40:47 (#0), scope: scope[0] } }","_20 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:56: 40:70 (#0), scope: scope[0] } }","_21 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:56: 40:63 (#0), scope: scope[0] } }","_22 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:40:17: 44:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:57: 40:58 (#0), scope: scope[0] } }","_23 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:40:56: 40:63 (#0), scope: scope[0] } }","_24 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:46:17: 50:18 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:46:20: 46:36 (#118), scope: scope[0] } }","_25 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:46:17: 50:18 (#0) }), ty: &&std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:46:20: 46:22 (#0), scope: scope[0] } }","_26 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:46:17: 50:18 (#0) }), ty: &std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:46:20: 46:22 (#0), scope: scope[0] } }","_27 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:46:17: 50:18 (#0) }), ty: &&str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:46:26: 46:36 (#0), scope: scope[0] } }","_28 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &&str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:46:26: 46:36 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [_7 = &_3], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#0), scope: scope[0] }, kind: _6 = <std::string::String as std::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb21] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_5 = _6], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#0), scope: scope[0] }, kind: _4 = core::str::<impl str>::contains::<&str>(move _5, const \"two\") -> [return: bb2, unwind: bb21] }), is_cleanup: false }","2 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:32:12: 32:29 (#114), scope: scope[0] }, kind: switchInt(move _4) -> [false: bb6, otherwise: bb3] }), is_cleanup: false }","3 -> BasicBlockData { statements: [_9 = _2, _8 = Lt(move _9, const 10_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:33:16: 33:22 (#115), scope: scope[0] }, kind: switchInt(move _8) -> [false: bb5, otherwise: bb4] }), is_cleanup: false }","4 -> BasicBlockData { statements: [_0 = const 11_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:33:13: 37:14 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","5 -> BasicBlockData { statements: [_0 = const 10_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:33:13: 37:14 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","6 -> BasicBlockData { statements: [_13 = &_3], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#0), scope: scope[0] }, kind: _12 = <std::string::String as std::ops::Deref>::deref(move _13) -> [return: bb7, unwind: bb21] }), is_cleanup: false }","7 -> BasicBlockData { statements: [_11 = _12], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#0), scope: scope[0] }, kind: _10 = core::str::<impl str>::contains::<&str>(move _11, const \"aqua\") -> [return: bb8, unwind: bb21] }), is_cleanup: false }","8 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:39:16: 39:34 (#116), scope: scope[0] }, kind: switchInt(move _10) -> [false: bb15, otherwise: bb9] }), is_cleanup: false }","9 -> BasicBlockData { statements: [_15 = _1, _17 = &_3], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:37: 40:44 (#0), scope: scope[0] }, kind: _16 = std::string::String::len(move _17) -> [return: bb10, unwind: bb21] }), is_cleanup: false }","10 -> BasicBlockData { statements: [_19 = _2, _18 = move _19 as u64 (Misc), _22 = _2, _23 = CheckedMul(_22, const 2_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:56: 40:63 (#0), scope: scope[0] }, kind: assert(!move (_23.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _22, const 2_usize) -> [success: bb11, unwind: bb21] }), is_cleanup: false }","11 -> BasicBlockData { statements: [_21 = move (_23.0: usize), _20 = move _21 as u64 (Misc)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:20: 40:71 (#0), scope: scope[0] }, kind: _14 = hp::ParryHotter::aqua_eructo(move _15, move _16, move _18, move _20) -> [return: bb12, unwind: bb21] }), is_cleanup: false }","12 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:20: 40:71 (#117), scope: scope[0] }, kind: switchInt(move _14) -> [false: bb14, otherwise: bb13] }), is_cleanup: false }","13 -> BasicBlockData { statements: [_0 = const 15_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:17: 44:18 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","14 -> BasicBlockData { statements: [_0 = const 10_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:40:17: 44:18 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","15 -> BasicBlockData { statements: [_26 = &_3, _25 = &_26, _28 = const hp::ParryHotter::aguamenti::promoted[0], _27 = _28], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:46:20: 46:36 (#0), scope: scope[0] }, kind: _24 = <&std::string::String as std::cmp::PartialEq<&str>>::eq(move _25, move _27) -> [return: bb16, unwind: bb21] }), is_cleanup: false }","16 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:46:20: 46:36 (#118), scope: scope[0] }, kind: switchInt(move _24) -> [false: bb18, otherwise: bb17] }), is_cleanup: false }","17 -> BasicBlockData { statements: [_0 = const 111_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:46:17: 50:18 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","18 -> BasicBlockData { statements: [_0 = const 1_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:46:17: 50:18 (#0), scope: scope[0] }, kind: goto -> bb19 }), is_cleanup: false }","19 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:53:5: 53:6 (#0), scope: scope[0] }, kind: drop(_3) -> bb20 }), is_cleanup: false }","20 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:53:6: 53:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }","21 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:53:5: 53:6 (#0), scope: scope[0] }, kind: drop(_3) -> bb22 }), is_cleanup: true }","22 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:31:5: 53:6 (#0), scope: scope[0] }, kind: resume }), is_cleanup: true }"]}