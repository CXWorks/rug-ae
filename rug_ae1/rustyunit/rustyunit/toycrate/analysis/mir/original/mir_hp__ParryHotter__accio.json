{"global_id":"hp__ParryHotter__accio","cdg":"{\"nodes\":[42069,0,1,7,8,9,10,3,4,5,6,2,12,11,13],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[1,4,1],[1,5,1],[1,6,1],[2,7,1],[2,8,1],[2,9,1],[2,10,1],[2,11,1],[6,12,1],[6,13,1],[0,1,1],[0,14,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"7\" ]\n    4 [ label = \"8\" ]\n    5 [ label = \"9\" ]\n    6 [ label = \"10\" ]\n    7 [ label = \"3\" ]\n    8 [ label = \"4\" ]\n    9 [ label = \"5\" ]\n    10 [ label = \"6\" ]\n    11 [ label = \"2\" ]\n    12 [ label = \"12\" ]\n    13 [ label = \"11\" ]\n    14 [ label = \"13\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    1 -> 5 [ label = \"1\" ]\n    1 -> 6 [ label = \"1\" ]\n    2 -> 7 [ label = \"1\" ]\n    2 -> 8 [ label = \"1\" ]\n    2 -> 9 [ label = \"1\" ]\n    2 -> 10 [ label = \"1\" ]\n    2 -> 11 [ label = \"1\" ]\n    6 -> 12 [ label = \"1\" ]\n    6 -> 13 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 14 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"7\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"2\" ]\n    5 [ label = \"8\" ]\n    6 [ label = \"4\" ]\n    7 [ label = \"13\" ]\n    8 [ label = \"9\" ]\n    9 [ label = \"5\" ]\n    10 [ label = \"10\" ]\n    11 [ label = \"6\" ]\n    12 [ label = \"12\" ]\n    13 [ label = \"11\" ]\n    14 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    2 -> 5 [ label = \"1\" ]\n    3 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    5 -> 8 [ label = \"1\" ]\n    6 -> 9 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    9 -> 11 [ label = \"1\" ]\n    10 -> 12 [ label = \"1\" ]\n    10 -> 13 [ label = \"1\" ]\n    11 -> 7 [ label = \"1\" ]\n    12 -> 7 [ label = \"1\" ]\n    13 -> 7 [ label = \"1\" ]\n    7 -> 14 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"7\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"2\" ]\n    5 [ label = \"8\" ]\n    6 [ label = \"4\" ]\n    7 [ label = \"13\" ]\n    8 [ label = \"9\" ]\n    9 [ label = \"5\" ]\n    10 [ label = \"10\" ]\n    11 [ label = \"6\" ]\n    12 [ label = \"12\" ]\n    13 [ label = \"11\" ]\n    14 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    2 -> 5 [ label = \"1\" ]\n    3 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    5 -> 8 [ label = \"1\" ]\n    6 -> 9 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    9 -> 11 [ label = \"1\" ]\n    10 -> 12 [ label = \"1\" ]\n    10 -> 13 [ label = \"1\" ]\n    11 -> 7 [ label = \"1\" ]\n    12 -> 7 [ label = \"1\" ]\n    13 -> 7 [ label = \"1\" ]\n    7 -> 14 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"20","ty":{"Prim":{"Int":"I32"}}},{"val":"20","ty":{"Prim":{"Int":"I32"}}},{"val":"140","ty":{"Prim":{"Int":"I32"}}},{"val":"3","ty":{"Prim":{"Int":"I32"}}},{"val":"10","ty":{"Prim":{"Int":"I32"}}},{"val":"32","ty":{"Prim":{"Int":"I32"}}},{"val":"ten","ty":{"Prim":"Str"}},{"val":"100","ty":{"Prim":{"Int":"I32"}}},{"val":"20","ty":{"Prim":{"Int":"I32"}}},{"val":"10","ty":{"Prim":{"Int":"I32"}}}],"branches":6,"assertions":3,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:79:44: 79:47 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Some(User(Set(ImplicitSelf(ImmRef)))), internal: false, is_block_tail: None, ty: &hp::ParryHotter, user_ty: None, source_info: SourceInfo { span: src/hp.rs:79:18: 79:23 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:79:28: 79:31 (#0)), opt_match_place: Some((Some(_2), src/hp.rs:79:25: 79:26 (#0))), pat_span: src/hp.rs:79:25: 79:26 (#0) })))), internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:79:25: 79:26 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:79:36: 79:39 (#0)), opt_match_place: Some((Some(_3), src/hp.rs:79:33: 79:34 (#0))), pat_span: src/hp.rs:79:33: 79:34 (#0) })))), internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:79:33: 79:34 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:80:9: 94:10 (#0) }), ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:80:12: 80:13 (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:81:13: 86:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:81:16: 81:22 (#125), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:81:13: 86:14 (#0) }), ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:81:16: 81:17 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: None, ty: (), user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:17: 84:60 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:40: 84:41 (#0), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:43: 84:44 (#0), scope: scope[0] } }","_10 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:46: 84:51 (#0), scope: scope[0] } }","_11 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:46: 84:47 (#0), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (i32, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:46: 84:51 (#0), scope: scope[0] } }","_13 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:53: 84:59 (#0), scope: scope[0] } }","_14 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:53: 84:54 (#0), scope: scope[0] } }","_15 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (i32, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:84:53: 84:59 (#0), scope: scope[0] } }","_16 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: None, ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:88:13: 88:64 (#0), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &hp::ParryHotter, user_ty: None, source_info: SourceInfo { span: src/hp.rs:88:36: 88:40 (#0), scope: scope[0] } }","_18 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:88:46: 88:63 (#0), scope: scope[0] } }","_19 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:88:46: 88:63 (#0), scope: scope[0] } }","_20 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: None, ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:88:46: 88:51 (#0), scope: scope[0] } }","_21 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:89:13: 93:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:89:16: 89:32 (#126), scope: scope[0] } }","_22 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:89:13: 93:14 (#0) }), ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:89:16: 89:26 (#0), scope: scope[0] } }","_23 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:89:13: 93:14 (#0) }), ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:89:16: 89:17 (#0), scope: scope[0] } }","_24 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:89:13: 93:14 (#0) }), ty: i32, user_ty: None, source_info: SourceInfo { span: src/hp.rs:89:20: 89:26 (#0), scope: scope[0] } }","_25 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (i32, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:89:16: 89:26 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [_4 = _2], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:80:12: 80:19 (#124), scope: scope[0] }, kind: switchInt(move _4) -> [20_i32: bb1, otherwise: bb7] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_6 = _2, _5 = Lt(move _6, const 20_i32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:81:16: 81:22 (#125), scope: scope[0] }, kind: switchInt(move _5) -> [false: bb3, otherwise: bb2] }), is_cleanup: false }","2 -> BasicBlockData { statements: [_0 = const 140_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:81:13: 86:14 (#0), scope: scope[0] }, kind: goto -> bb13 }), is_cleanup: false }","3 -> BasicBlockData { statements: [_8 = _3, _9 = _2, _11 = _2, _12 = CheckedMul(_11, const 3_i32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:84:46: 84:51 (#0), scope: scope[0] }, kind: assert(!move (_12.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _11, const 3_i32) -> bb4 }), is_cleanup: false }","4 -> BasicBlockData { statements: [_10 = move (_12.0: i32), _14 = _3, _15 = CheckedSub(_14, const 10_i32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:84:53: 84:59 (#0), scope: scope[0] }, kind: assert(!move (_15.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _14, const 10_i32) -> bb5 }), is_cleanup: false }","5 -> BasicBlockData { statements: [_13 = move (_15.0: i32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:84:17: 84:60 (#0), scope: scope[0] }, kind: _7 = hp::ParryHotter::alohomora(move _8, move _9, move _10, move _13) -> bb6 }), is_cleanup: false }","6 -> BasicBlockData { statements: [_0 = const 32_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:81:13: 86:14 (#0), scope: scope[0] }, kind: goto -> bb13 }), is_cleanup: false }","7 -> BasicBlockData { statements: [_17 = _1, _20 = const \"ten\", _19 = _20], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:88:46: 88:63 (#0), scope: scope[0] }, kind: _18 = <str as std::string::ToString>::to_string(move _19) -> bb8 }), is_cleanup: false }","8 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:88:13: 88:64 (#0), scope: scope[0] }, kind: _16 = hp::ParryHotter::aguamenti(move _17, const 20_usize, move _18) -> bb9 }), is_cleanup: false }","9 -> BasicBlockData { statements: [_23 = _2, _24 = ((*_1).1: i32), _25 = CheckedMul(_23, _24)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:89:16: 89:26 (#0), scope: scope[0] }, kind: assert(!move (_25.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _23, move _24) -> bb10 }), is_cleanup: false }","10 -> BasicBlockData { statements: [_22 = move (_25.0: i32), _21 = Lt(move _22, const 100_i32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:89:16: 89:32 (#126), scope: scope[0] }, kind: switchInt(move _21) -> [false: bb12, otherwise: bb11] }), is_cleanup: false }","11 -> BasicBlockData { statements: [_0 = const 20_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:89:13: 93:14 (#0), scope: scope[0] }, kind: goto -> bb13 }), is_cleanup: false }","12 -> BasicBlockData { statements: [_0 = const 10_i32], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:89:13: 93:14 (#0), scope: scope[0] }, kind: goto -> bb13 }), is_cleanup: false }","13 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:95:6: 95:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }"]}