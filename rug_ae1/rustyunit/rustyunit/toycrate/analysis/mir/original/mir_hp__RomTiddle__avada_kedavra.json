{"global_id":"hp__RomTiddle__avada_kedavra","cdg":"{\"nodes\":[42069,1,4,5,2,3,0,6,7],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[1,4,1],[1,5,1],[0,6,1],[0,1,1],[0,7,1],[0,8,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"4\" ]\n    3 [ label = \"5\" ]\n    4 [ label = \"2\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"0\" ]\n    7 [ label = \"6\" ]\n    8 [ label = \"7\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    1 -> 5 [ label = \"1\" ]\n    0 -> 6 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 7 [ label = \"1\" ]\n    0 -> 8 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"4\" ]\n    3 [ label = \"2\" ]\n    4 [ label = \"5\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"6\" ]\n    7 [ label = \"7\" ]\n    8 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    2 -> 4 [ label = \"1\" ]\n    3 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    5 -> 6 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    7 -> 8 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"4\" ]\n    3 [ label = \"2\" ]\n    4 [ label = \"5\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"6\" ]\n    7 [ label = \"7\" ]\n    8 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    2 -> 4 [ label = \"1\" ]\n    3 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    5 -> 6 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    7 -> 8 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"1","ty":{"Prim":{"Uint":"U16"}}},{"val":"1","ty":{"Prim":{"Uint":"U16"}}}],"branches":8,"assertions":2,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: (), user_ty: None, source_info: SourceInfo { span: src/hp.rs:164:53: 164:53 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Some(User(Set(ImplicitSelf(MutRef)))), internal: false, is_block_tail: None, ty: &mut hp::RomTiddle, user_ty: None, source_info: SourceInfo { span: src/hp.rs:164:26: 164:35 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:164:45: 164:51 (#0)), opt_match_place: Some((Some(_2), src/hp.rs:164:37: 164:43 (#0))), pat_span: src/hp.rs:164:37: 164:43 (#0) })))), internal: false, is_block_tail: None, ty: std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:164:37: 164:43 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src/hp.rs:165:9: 170:10 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:165:12: 165:37 (#138), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src/hp.rs:165:9: 170:10 (#0) }), ty: &&std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:165:12: 165:19 (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src/hp.rs:165:9: 170:10 (#0) }), ty: &std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:165:12: 165:19 (#0), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: true, span: src/hp.rs:165:9: 170:10 (#0) }), ty: &&str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:165:23: 165:37 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (u16, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:166:13: 166:30 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Mut, local_info: None, internal: true, is_block_tail: None, ty: (u16, bool), user_ty: None, source_info: SourceInfo { span: src/hp.rs:169:13: 169:30 (#0), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: &&str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:165:23: 165:37 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [_5 = &_2, _4 = &_5, _9 = const hp::RomTiddle::avada_kedavra::promoted[0], _6 = _9], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:165:12: 165:37 (#0), scope: scope[0] }, kind: _3 = <&std::string::String as std::cmp::PartialEq<&str>>::eq(move _4, move _6) -> [return: bb1, unwind: bb8] }), is_cleanup: false }","1 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:165:12: 165:37 (#138), scope: scope[0] }, kind: switchInt(move _3) -> [false: bb4, otherwise: bb2] }), is_cleanup: false }","2 -> BasicBlockData { statements: [_7 = CheckedSub(((*_1).0: u16), const 1_u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:166:13: 166:30 (#0), scope: scope[0] }, kind: assert(!move (_7.1: bool), \"attempt to compute `{} - {}`, which would overflow\", ((*_1).0: u16), const 1_u16) -> [success: bb3, unwind: bb8] }), is_cleanup: false }","3 -> BasicBlockData { statements: [((*_1).0: u16) = move (_7.0: u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:165:9: 170:10 (#0), scope: scope[0] }, kind: goto -> bb6 }), is_cleanup: false }","4 -> BasicBlockData { statements: [_8 = CheckedAdd(((*_1).0: u16), const 1_u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:169:13: 169:30 (#0), scope: scope[0] }, kind: assert(!move (_8.1: bool), \"attempt to compute `{} + {}`, which would overflow\", ((*_1).0: u16), const 1_u16) -> [success: bb5, unwind: bb8] }), is_cleanup: false }","5 -> BasicBlockData { statements: [((*_1).0: u16) = move (_8.0: u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:165:9: 170:10 (#0), scope: scope[0] }, kind: goto -> bb6 }), is_cleanup: false }","6 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:171:5: 171:6 (#0), scope: scope[0] }, kind: drop(_2) -> bb7 }), is_cleanup: false }","7 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:171:6: 171:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }","8 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:171:5: 171:6 (#0), scope: scope[0] }, kind: drop(_2) -> bb9 }), is_cleanup: true }","9 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:164:5: 171:6 (#0), scope: scope[0] }, kind: resume }), is_cleanup: true }"]}