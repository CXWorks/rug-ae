{"global_id":"hp__ParryHotter__aqua_eructo","cdg":"{\"nodes\":[42069,0,4,1,10,5,3,2,7,6,8,9,11],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[2,4,1],[2,5,1],[3,6,1],[3,7,1],[5,8,1],[5,9,1],[8,10,1],[8,11,1],[0,1,1],[0,12,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"4\" ]\n    3 [ label = \"1\" ]\n    4 [ label = \"10\" ]\n    5 [ label = \"5\" ]\n    6 [ label = \"3\" ]\n    7 [ label = \"2\" ]\n    8 [ label = \"7\" ]\n    9 [ label = \"6\" ]\n    10 [ label = \"8\" ]\n    11 [ label = \"9\" ]\n    12 [ label = \"11\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    2 -> 4 [ label = \"1\" ]\n    2 -> 5 [ label = \"1\" ]\n    3 -> 6 [ label = \"1\" ]\n    3 -> 7 [ label = \"1\" ]\n    5 -> 8 [ label = \"1\" ]\n    5 -> 9 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    8 -> 11 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 12 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"4\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"10\" ]\n    4 [ label = \"5\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"2\" ]\n    7 [ label = \"11\" ]\n    8 [ label = \"7\" ]\n    9 [ label = \"6\" ]\n    10 [ label = \"8\" ]\n    11 [ label = \"9\" ]\n    12 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    2 -> 5 [ label = \"1\" ]\n    2 -> 6 [ label = \"1\" ]\n    3 -> 7 [ label = \"1\" ]\n    4 -> 8 [ label = \"1\" ]\n    4 -> 9 [ label = \"1\" ]\n    5 -> 7 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    8 -> 11 [ label = \"1\" ]\n    9 -> 7 [ label = \"1\" ]\n    10 -> 7 [ label = \"1\" ]\n    11 -> 7 [ label = \"1\" ]\n    7 -> 12 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"4\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"10\" ]\n    4 [ label = \"5\" ]\n    5 [ label = \"3\" ]\n    6 [ label = \"2\" ]\n    7 [ label = \"11\" ]\n    8 [ label = \"7\" ]\n    9 [ label = \"6\" ]\n    10 [ label = \"8\" ]\n    11 [ label = \"9\" ]\n    12 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    1 -> 4 [ label = \"1\" ]\n    2 -> 5 [ label = \"1\" ]\n    2 -> 6 [ label = \"1\" ]\n    3 -> 7 [ label = \"1\" ]\n    4 -> 8 [ label = \"1\" ]\n    4 -> 9 [ label = \"1\" ]\n    5 -> 7 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    8 -> 10 [ label = \"1\" ]\n    8 -> 11 [ label = \"1\" ]\n    9 -> 7 [ label = \"1\" ]\n    10 -> 7 [ label = \"1\" ]\n    11 -> 7 [ label = \"1\" ]\n    7 -> 12 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"4955","ty":{"Prim":{"Uint":"Usize"}}}],"branches":10,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:55:60: 55:64 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Some(User(Set(ImplicitSelf(ImmRef)))), internal: false, is_block_tail: None, ty: &hp::ParryHotter, user_ty: None, source_info: SourceInfo { span: src/hp.rs:55:24: 55:29 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:55:34: 55:39 (#0)), opt_match_place: Some((Some(_2), src/hp.rs:55:31: 55:32 (#0))), pat_span: src/hp.rs:55:31: 55:32 (#0) })))), internal: false, is_block_tail: None, ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:55:31: 55:32 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:55:44: 55:47 (#0)), opt_match_place: Some((Some(_3), src/hp.rs:55:41: 55:42 (#0))), pat_span: src/hp.rs:55:41: 55:42 (#0) })))), internal: false, is_block_tail: None, ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:55:41: 55:42 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Not, local_info: Some(User(Set(Var(VarBindingForm { binding_mode: BindByValue(Not), opt_ty_info: Some(src/hp.rs:55:52: 55:55 (#0)), opt_match_place: Some((Some(_4), src/hp.rs:55:49: 55:50 (#0))), pat_span: src/hp.rs:55:49: 55:50 (#0) })))), internal: false, is_block_tail: None, ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:55:49: 55:50 (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:56:9: 76:10 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:56:12: 56:28 (#119), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:56:9: 76:10 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:56:12: 56:24 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:56:9: 76:10 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:56:13: 56:14 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:56:9: 76:10 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:56:27: 56:28 (#0), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:57:13: 61:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:57:16: 57:31 (#120), scope: scope[0] } }","_10 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:57:13: 61:14 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:57:16: 57:26 (#0), scope: scope[0] } }","_11 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:57:13: 61:14 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:57:16: 57:17 (#0), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:57:13: 61:14 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:57:30: 57:31 (#0), scope: scope[0] } }","_13 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:63:13: 75:14 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:63:16: 63:22 (#121), scope: scope[0] } }","_14 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:63:13: 75:14 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:63:16: 63:17 (#0), scope: scope[0] } }","_15 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:63:13: 75:14 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:63:21: 63:22 (#0), scope: scope[0] } }","_16 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:64:17: 72:18 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:64:20: 64:34 (#122), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:64:17: 72:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:64:20: 64:30 (#0), scope: scope[0] } }","_18 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:64:17: 72:18 (#0) }), ty: u64, user_ty: None, source_info: SourceInfo { span: src/hp.rs:64:20: 64:21 (#0), scope: scope[0] } }","_19 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:64:17: 72:18 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:64:33: 64:34 (#0), scope: scope[0] } }","_20 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:67:21: 71:22 (#0) }), ty: usize, user_ty: None, source_info: SourceInfo { span: src/hp.rs:67:24: 67:25 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [_7 = _3, _6 = move _7 as usize (Misc), _8 = _2, _5 = Lt(move _6, move _8)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:56:12: 56:28 (#119), scope: scope[0] }, kind: switchInt(move _5) -> [false: bb4, otherwise: bb1] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_11 = _4, _10 = move _11 as usize (Misc), _12 = _2, _9 = Eq(move _10, move _12)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:57:16: 57:31 (#120), scope: scope[0] }, kind: switchInt(move _9) -> [false: bb3, otherwise: bb2] }), is_cleanup: false }","2 -> BasicBlockData { statements: [_0 = const true], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:57:13: 61:14 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","3 -> BasicBlockData { statements: [_0 = const false], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:57:13: 61:14 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","4 -> BasicBlockData { statements: [_14 = _3, _15 = _4, _13 = Eq(move _14, move _15)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:63:16: 63:22 (#121), scope: scope[0] }, kind: switchInt(move _13) -> [false: bb10, otherwise: bb5] }), is_cleanup: false }","5 -> BasicBlockData { statements: [_18 = _4, _17 = move _18 as usize (Misc), _19 = _2, _16 = Gt(move _17, move _19)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:64:20: 64:34 (#122), scope: scope[0] }, kind: switchInt(move _16) -> [false: bb7, otherwise: bb6] }), is_cleanup: false }","6 -> BasicBlockData { statements: [_0 = const true], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:64:17: 72:18 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","7 -> BasicBlockData { statements: [_20 = _2], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:67:24: 67:33 (#123), scope: scope[0] }, kind: switchInt(move _20) -> [4955_usize: bb8, otherwise: bb9] }), is_cleanup: false }","8 -> BasicBlockData { statements: [_0 = const true], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:67:21: 71:22 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","9 -> BasicBlockData { statements: [_0 = const false], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:67:21: 71:22 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","10 -> BasicBlockData { statements: [_0 = const false], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:63:13: 75:14 (#0), scope: scope[0] }, kind: goto -> bb11 }), is_cleanup: false }","11 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:77:6: 77:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }"]}