{"global_id":"hp__RomTiddle__name","cdg":"{\"nodes\":[42069,0,2,1,3],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[0,1,1],[0,4,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"1\" ]\n    4 [ label = \"3\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 4 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"2\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    3 -> 4 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"2\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    3 -> 4 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"3","ty":{"Prim":{"Uint":"U16"}}},{"val":"Rom Tiddle","ty":{"Prim":"Str"}},{"val":"Lord Voldemort","ty":{"Prim":"Str"}}],"branches":2,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: std::string::String, user_ty: None, source_info: SourceInfo { span: src/hp.rs:155:27: 155:33 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Some(User(Set(ImplicitSelf(ImmRef)))), internal: false, is_block_tail: None, ty: &hp::RomTiddle, user_ty: None, source_info: SourceInfo { span: src/hp.rs:155:17: 155:22 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:156:9: 161:10 (#0) }), ty: bool, user_ty: None, source_info: SourceInfo { span: src/hp.rs:156:12: 156:28 (#137), scope: scope[0] } }","_3 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:156:9: 161:10 (#0) }), ty: u16, user_ty: None, source_info: SourceInfo { span: src/hp.rs:156:12: 156:24 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:158:13: 158:37 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:158:13: 158:37 (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:158:13: 158:37 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:158:13: 158:25 (#0), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:160:13: 160:41 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:160:13: 160:41 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Not, local_info: None, internal: false, is_block_tail: Some(BlockTailInfo { tail_result_is_ignored: false, span: src/hp.rs:160:13: 160:41 (#0) }), ty: &str, user_ty: None, source_info: SourceInfo { span: src/hp.rs:160:13: 160:29 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [_3 = ((*_1).0: u16), _2 = Lt(move _3, const 3_u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:156:12: 156:28 (#137), scope: scope[0] }, kind: switchInt(move _2) -> [false: bb2, otherwise: bb1] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_5 = const \"Rom Tiddle\", _4 = _5], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:158:13: 158:37 (#0), scope: scope[0] }, kind: _0 = <str as std::string::ToString>::to_string(move _4) -> bb3 }), is_cleanup: false }","2 -> BasicBlockData { statements: [_7 = const \"Lord Voldemort\", _6 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:160:13: 160:41 (#0), scope: scope[0] }, kind: _0 = <str as std::string::ToString>::to_string(move _6) -> bb3 }), is_cleanup: false }","3 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/hp.rs:162:6: 162:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }"]}